\start
Date: Wed, 5 Oct 2016 07:08:38 +0000
From: James Davenport <J.H.Davenport@bath.ac.uk>
To: Tim Daly <axiomcas@gmail.com>, Richard Fateman <fateman@berkeley.edu>
Subject: Re: [Axiom-developer] Design of Semantic Latex
CC: Tim Daly <daly@axiom-developer.org>, axiom-dev
	<axiom-developer@nongnu.org>, Ralf Hemmecke <ralf@hemmecke.org>, Mike Dewar
	<miked@nag.co.uk>, "vdhoeven@lix.polytechnique.fr"
	<vdhoeven@lix.polytechnique.fr>, D Zwillinger <zwilling@az-tec.com>,
	"albert_rich@msn.com" <albert_rich@msn.com>, James Davenport
\begin{verbatim}	<J.H.Davenport@bath.ac.uk>

--_000_a6bf030c60cb41d6ac1a7909dd6f4298exch04campusbathacuk_
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64

U29ycnkg4oCTIEnigJl2ZSBub3QgYmVlbiBtdWNoIGludm9sdmVkOiBvdGhlciBwcm9qZWN0cy4g
QnV0IEkganVzdCBzYXcgdGhpcyDigJMgaGF2ZW7igJl0IGxvb2tlZCBpbiBhbnkgZGV0YWlsIHll
dC4NCg0KRGVlcEFsZ2VicmEgLSBhbiBvdXRsaW5lIG9mIGEgcHJvZ3JhbQ0KDQpBdXRob3JzOiBQ
cnplbXlzbGF3IENob2plY2tpDQoNCkNhdGVnb3JpZXM6IGNzLkFJIG1hdGguQUcNCg0KQ29tbWVu
dHM6IDYgcGFnZXMsIGh0dHBzOi8vcHJ6Y2hvamVja2kuZ2l0aHViLmlvL2RlZXBhbGdlYnJhLw0K
DQpcXA0KDQogIFdlIG91dGxpbmUgYSBwcm9ncmFtIGluIHRoZSBhcmVhIG9mIGZvcm1hbGl6YXRp
b24gb2YgbWF0aGVtYXRpY3MgdG8gYXV0b21hdGUgdGhlb3JlbSBwcm92aW5nIGluIGFsZ2VicmEg
YW5kIGFsZ2VicmFpYyBnZW9tZXRyeS4gV2UgcHJvcG9zZSBhIGNvbnN0cnVjdGlvbiBvZiBhIGRp
Y3Rpb25hcnkgYmV0d2VlbiBhdXRvbWF0ZWQgdGhlb3JlbSBwcm92ZXJzIGFuZCAoTGEpVGVYIGV4
cGxvaXRpbmcgc3ludGFjdGljIHBhcnNlcnMuIFdlIGRlc2NyaWJlIGl0cyBhcHBsaWNhdGlvbiB0
byBhIHJlcG9zaXRvcnkgb2YgaHVtYW4td3JpdHRlbiBmYWN0cyBhbmQgZGVmaW5pdGlvbnMgaW4g
YWxnZWJyYWljIGdlb21ldHJ5IChUaGUgU3RhY2tzIFByb2plY3QpLiBXZSB1c2UgZGVlcCBsZWFy
bmluZyB0ZWNobmlxdWVzLg0KXFwgKCBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTYxMC4wMTA0NA0K
DQpGcm9tOiBUaW0gRGFseSBbbWFpbHRvOmF4aW9tY2FzQGdtYWlsLmNvbV0NClNlbnQ6IDAxIFNl
cHRlbWJlciAyMDE2IDEzOjI1DQpUbzogUmljaGFyZCBGYXRlbWFuDQpDYzogVGltIERhbHk7IGF4
aW9tLWRldjsgUmFsZiBIZW1tZWNrZTsgSmFtZXMgRGF2ZW5wb3J0OyBNaWtlIERld2FyOyB2ZGhv
ZXZlbkBsaXgucG9seXRlY2huaXF1ZS5mcjsgRCBad2lsbGluZ2VyOyBhbGJlcnRfcmljaEBtc24u
Y29tDQpTdWJqZWN0OiBSZTogRGVzaWduIG9mIFNlbWFudGljIExhdGV4DQoNClRoZSB3ZWF2ZXIg
cHJvZ3JhbSBjYW4gbm93IHByb2Nlc3MgYSBsYXRleCBkb2N1bWVudC4NClRoZSBlbmQgcmVzdWx0
IGlzIGEgdHJlZSBzdHJ1Y3R1cmUgb2YgdGhlIHNhbWUgZG9jdW1lbnQuDQpUaGVyZSBpcyBzdGls
bCBtb3JlIHRvIGRvLCBvZiBjb3Vyc2UuIE11Y2ggbW9yZS4NCkl0IGlzIGNsZWFyIHRoYXQgdGhl
IHNlbWFudGljcyBvZiB0aGUgbWFya3VwIHRhZ3MgYXJlIGFsbCBpbg0KdGhlIHdlYXZlciBwcm9n
cmFtLiBUaGlzIGlzIG9idmlvdXMgaW4gaGluZHNpZ2h0IHNpbmNlIHRoZQ0KbWFya3VwIG5lZWRz
IHRvIGJlIHRyYW5zcGFyZW50IHRvIHRoZSBwcmludCByZXByZXNlbnRhdGlvbi4NClRoZSBwYXJz
ZXIgbmVlZHMgdG8ga25vdyB0aGUgJ2FyaXR5JyBvZiB0YWdzIHNpbmNlIFx0YWd7YX17Yn0NCndv
dWxkIHBhcnNlIG9uZSB3YXksIFx0YWd7YX0sIGZvciBhIDEtYXJpdHkgdGFnIGFuZCBhbm90aGVy
DQp3YXkgXHRhZ3thfXtifSBmb3IgYSAyLWFyaXR5IHRhZy4gVGhlIGNvZGUgbmVlZHMgdG8gYmUg
Z2VuZXJhbGl6ZWQNCnRvIHBhcnNlIGdpdmVuIHRoZSBhcml0eS4NCg0KVGhlIHdlYXZlciBwcm9n
cmFtIGlzIHN0cnVjdHVyZWQgc28gdGhhdCB0aGUgdHJlZS1wYXJzZSBvdXRwdXQNCmlzIGluZGVw
ZW5kZW50IG9mIEF4aW9tLiBUaGUgQXhpb20gcmV3cml0ZSB3aWxsIHRha2UgdGhlIHRyZWUNCmFz
IGlucHV0IGFuZCBwcm9kdWNlIHZhbGlkIEF4aW9tIGlucHV0Zm9ybXMuIFRoaXMgc2hvdWxkIG1h
a2UNCml0IHBvc3NpYmxlIHRvIHRhcmdldCBhbnkgQ0FTLg0KT253YXJkIGFuZCB1cHdhcmQsIGFz
IHRoZXkgc2F5Li4uLg0KVGltDQoNCk9uIFNhdCwgQXVnIDI3LCAyMDE2IGF0IDE6MjggUE0sIFRp
bSBEYWx5IDxheGlvbWNhc0BnbWFpbC5jb208bWFpbHRvOmF4aW9tY2FzQGdtYWlsLmNvbT4+IHdy
b3RlOg0KDQoNCk9uIFNhdCwgQXVnIDI3LCAyMDE2IGF0IDEyOjE0IFBNLCBSaWNoYXJkIEZhdGVt
YW4gPGZhdGVtYW5AYmVya2VsZXkuZWR1PG1haWx0bzpmYXRlbWFuQGJlcmtlbGV5LmVkdT4+IHdy
b3RlOg0KDQpUYWtlIHVwIGEgYm9vayBvbiBjb21wbGV4IGFuYWx5c2lzIGFuZCBzZWUgd2hhdCBw
cm9ibGVtcyB5b3UgaGF2ZQ0KIGFzIHlvdSB0cnkgdG8gZW5jb2RlIHRoZSBzdGF0ZW1lbnRzLCBv
ciBlc3BlY2lhbGx5IHRoZSBob21ld29yaw0KcHJvYmxlbXMuIEkgdHJpZWQgdGhpcyBkZWNhZGVz
IGFnbyB3aXRoIHRoZSB0ZXh0IEkgdXNlZCwNCmh0dHBzOi8vd3d3LmFtYXpvbi5jb20vRnVuY3Rp
b25zLUNvbXBsZXgtVmFyaWFibGUtVGVjaG5pcXVlLU1hdGhlbWF0aWNzL2RwLzA4OTg3MTU5NTQN
CmJ1dCBwcm9iYWJseSBhbnkgb3RoZXIgdGV4dCB3b3VsZCBkby4NCg0KTXkgbGFzdCBwcm9qZWN0
IGF0IENNVSAoVGlyZXMpIGludm9sdmVkIHdvcmsgb24gbWFjaGluZSBsZWFybmluZw0KdXNpbmcg
bmF0dXJhbCBsYW5ndWFnZSAoYW5kIEdvb2QtT2xkLUZhc2hpb25lZC1BSSAoR09GQUkpKS4NCkkn
bSBub3Qgc21hcnQgZW5vdWdoIHRvIG1ha2UgcHJvZ3Jlc3MgaW4gbmF0dXJhbCBsYW5ndWFnZS4N
Cg0KDQoNCkkgdGhpbmsgdGhlIGVtcGhhc2lzIG9uIGhhbmRib29rIG9yIHJlZmVyZW5jZSBib29r
IHJlcHJlc2VudGF0aW9uDQppcyBuYXR1cmFsLCBhbmQgSSBoYXZlIGNlcnRhaW5seSBwdXJzdWVk
IHRoaXMgZGlyZWN0aW9uIG15c2VsZi4gIEhvd2V2ZXINCndoYXQgeW91L3dlIHdhbnQgdG8gYmUg
YWJsZSB0byBlbmNvZGUgaXMgbWF0aGVtYXRpY2FsIGRpc2NvdXJzZS4gVGhpcw0KZ29lcyBiZXlv
bmQgImhhcyB0aGUgYWxnb3JpdGhtIHJlcHJvZHVjZWQgdGhlIHJlZmVyZW5jZSB2YWx1ZSBmb3Ig
YW4NCmludGVncmF0aW9uLiIgICBDYW4geW91IGVuY29kZSBpbiBzZW1hbnRpYyBsYXRleCBhIGRl
c2NyaXB0aW9uIG9mIHRoZSBnZW9tZXRyeQ0Kb2YgdGhlIChwZXJoYXBzIGluZmluaXRlbHkgbGF5
ZXJlZCkgY29udG91ciBvZiBhIGNvbXBsZXggZnVuY3Rpb24/ICBZb3UNCm1pZ2h0IHdvbmRlciBp
ZiB0aGlzIGlzIGltcG9ydGFudCwgYnV0IHRoZW4gbm90ZSB0aGF0IHF1ZXN0aW9ucyBvZiB0aGlz
IHNvcnQNCmFwcGVhciBpbiB0aGUgcHJvYmxlbSBzZWN0aW9uIGZvciBjaGFwdGVyIDEuDQoNCkxp
a2UgYW55IHJlc2VhcmNoIHByb2plY3QsIHRoZXJlIGhhcyB0byBiZSBib3VuZHMgb24gdGhlIGFt
Yml0aW9uLg0KQXQgdGhpcyBwb2ludCwgdGhlIGdvYWwgaXMgdG8gbW9kaWZ5IHRoZSBtYXJrdXAg
dG8gZGlzYW1iaWd1YXRlIGEgbGF0ZXgNCmZvcm11bGEgc28gdGhlIG1hY2hpbmUgY2FuIGltcG9y
dCBpdC4gQXhpb20gbmVlZHMgdG8gaW1wb3J0IGl0IHRvIGNyZWF0ZQ0KYSB0ZXN0IHN1aXRlIG1l
YXN1cmluZyBwcm9ncmVzcyBhZ2FpbnN0IGV4aXN0aW5nIGtub3dsZWRnZS4NCg0KV2hhdCB5b3Un
cmUgZGVzY3JpYmluZyBzZWVtcyB0byBiZSBhIHdheSB0byBlbmNvZGUgdG9wb2xvZ2ljYWwgaXNz
dWVzDQpkZWFsaW5nIHdpdGggdGhlIHN0cnVjdHVyZSBvZiB0aGUgc3BhY2UgdW5kZXJseWluZyB0
aGUgZm9ybXVsYXMuIEkgaGF2ZSBubw0KaWRlYSBob3cgdG8gZW5jb2RlIHRoZSBCbG9jaCBzcGhl
cmUgb3IgYSB0b3J1cyBvciBhbnkgb3RoZXIgc3BhY2UgZXhjZXB0DQpieSByZWZlcmVuY2luZyBh
biBBeGlvbSBkb21haW4sIHdoaWNoIGltcGxpY2l0bHkgZW5jb2RlcyBpdC4NCg0KSWYgdGhlIGZv
cm11bGEgZGVhbHMgd2l0aCBxdWFudHVtIG1lY2hhbmljcyB0aGVuIHRoZSBhbGdvcml0aG1zIGhh
dmUgYW4NCmltcGxpY2l0LCBtZWNoYW5pc3RpYyB3YXkgb2YgZGVhbGluZyB3aXRoIHRoZSBCbG9j
aCBzcGhlcmUuIFNvIG1hcmt1cCB0aGF0DQp1c2VzIHRoZXNlIGZ1bmN0aW9uIGNhbGxzIHVzZSB0
aGlzIGltcGxpY2l0IGdyb3VuZGluZy4gU2ltbGxhcmx5LCBtYXJrdXAgdGhhdA0KdXNlcyBhIGJy
YW5jaCBjdXQgaW1wbGljaXRseSB1c2VzIHRoZSBpbXBsZW1lbnRhdGlvbiBzZW1hbnRpY3MuDQpB
eGlvbSBhbmQgTWF0aGVtYXRpY3MgaGF2ZSBvbmUgc2V0IG9mIGJyYW5jaCBjdXRzLCBNYXBsZSBh
bmQgTWF4aW1hDQpoYXZlIGFub3RoZXIgKGF0IGZhciBhcyBJIGNhbiB0ZWxsKS4gU28gdGhlIG1h
cmt1cCBkZWNpc2lvbnMgaGF2ZSB0byBiZQ0KY2FyZWZ1bGx5IGNob3Nlbi4NCg0KDQpIZXJlJ3Mg
dGhlIGNoYWxsZW5nZSB0aGVuLiAgVGFrZSBhIG1hdGhlbWF0aWNzIGJvb2sgYW5kICJlbmNvZGUi
DQogaXQgc28gdGhhdCBhIHByb2dyYW0gKGh5cG90aGV0aWNhbGx5KSBjb3VsZCBhbnN3ZXIgdGhl
IHByb2JsZW1zIGF0DQp0aGUgZW5kIG9mIGVhY2ggY2hhcHRlci4NCg0KVGhhdCdzIGEgbXVjaCBk
ZWVwZXIgY2FuIG9mIHdvcm1zIHRoYW4gaXQgYXBwZWFycy4gSSBzcGVudCBhIGxvdCBvZg0KdGlt
ZSBpbiB0aGUgcXVlc3Rpb24tYW5zd2VyaW5nIGxpdGVyYXR1cmUuIEkgaGF2ZSBubyBpZGVhIGhv
dyB0byBtYWtlDQpwcm9ncmVzcyBpbiB0aGF0IGFyZWEuIFRoZSBUaXJlcyBwcm9qZWN0IGludm9s
dmVkIHNlbGYtbW9kaWZ5aW5nIGxpc3ANCmJhc2VkIG9uIG5hdHVyYWwgbGFuZ3VhZ2UgaW50ZXJh
Y3Rpb24gd2l0aCBhIGh1bWFuIGluIHRoZSBsaW1pdGVkDQpkb21haW4gb2YgY2hhbmdpbmcgYSBj
YXIgdGlyZS4gU2VlDQpodHRwOi8vZGFseS5heGlvbS1kZXZlbG9wZXIub3JnL2NtdS9ib29rLnBk
Zg0KKFRoZSBncmFudCBlbmRlZCBiZWZvcmUgdGhlIHByb2plY3RlZCBlbmRlZC4gU2lnaCkNClRp
bQ0KDQpQLlMuIFRpcmVzIGlzIHNlbGYtbW9kaWZ5aW5nIGxpc3AgY29kZS4gSXQgImxlYXJucyIg
YnkgY2hhbmdpbmcgaXRzZWxmLg0KVGhlIGluaXRpYWwgY29kZSAodGhlIHNlZWQgY29kZSkgYmVj
b21lcyAic29tZXRoaW5nIGVsc2UiLiBPbmUNCmludGVyZXN0aW5nIGluc2lnaHQgaXMgdGhhdCB0
d28gdmVyc2lvbnMgb2YgdGhlIHNlZWQgY29kZSB3aWxsIGRpdmVyZ2UNCmJhc2VkIG9uICJleHBl
cmllbmNlIi4gVGhhdCBpbXBsaWVzIHRoYXQgeW91IGNhbid0ICJ0ZWFjaCBieSBjb3B5IiwNCnRo
YXQgaXMsIHlvdSBjYW4ndCB0ZWFjaCBvbmUgc3lzdGVtIGFuZCB0aGVuICJqdXN0IGNvcHkiIGl0
IHRvIGFub3RoZXINCmV4aXN0aW5nIHN5c3RlbSBzaW5jZSB0aGVpciBleHBlcmllbmNlcyAoYW5k
IHRoZSBjb2RlIHN0cnVjdHVyZSkNCndpbGwgZGlmZmVyLiBBbnkgc3lzdGVtIHRoYXQgImxlYXJu
cyIgd2lsbCBmYWlsICJ0ZWFjaCBieSBjb3B5IiwgSSBiZWxpZXZlLg0KVGhhdCBtZWFucyB0aGF0
IEFJIHdpbGwgbm90IGhhdmUgdGhlIGV4cG9uZW50aWFsIGdyb3d0aCB0aGF0IGV2ZXJ5b25lDQpz
ZWVtcyB0byBiZWxpZXZlLg0KDQoNCg==

--_000_a6bf030c60cb41d6ac1a7909dd6f4298exch04campusbathacuk_
Content-Type: text/html; charset="utf-8"
Content-Transfer-Encoding: base64

PGh0bWwgeG1sbnM6dj0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwiIHhtbG5zOm89InVy
bjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZSIgeG1sbnM6dz0idXJuOnNjaGVt
YXMtbWljcm9zb2Z0LWNvbTpvZmZpY2U6d29yZCIgeG1sbnM6bT0iaHR0cDovL3NjaGVtYXMubWlj
cm9zb2Z0LmNvbS9vZmZpY2UvMjAwNC8xMi9vbW1sIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcv
VFIvUkVDLWh0bWw0MCI+DQo8aGVhZD4NCjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIg
Y29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04Ij4NCjxtZXRhIG5hbWU9IkdlbmVyYXRv
ciIgY29udGVudD0iTWljcm9zb2Z0IFdvcmQgMTUgKGZpbHRlcmVkIG1lZGl1bSkiPg0KPHN0eWxl
PjwhLS0NCi8qIEZvbnQgRGVmaW5pdGlvbnMgKi8NCkBmb250LWZhY2UNCgl7Zm9udC1mYW1pbHk6
IkNhbWJyaWEgTWF0aCI7DQoJcGFub3NlLTE6MiA0IDUgMyA1IDQgNiAzIDIgNDt9DQpAZm9udC1m
YWNlDQoJe2ZvbnQtZmFtaWx5OkNhbGlicmk7DQoJcGFub3NlLTE6MiAxNSA1IDIgMiAyIDQgMyAy
IDQ7fQ0KLyogU3R5bGUgRGVmaW5pdGlvbnMgKi8NCnAuTXNvTm9ybWFsLCBsaS5Nc29Ob3JtYWws
IGRpdi5Nc29Ob3JtYWwNCgl7bWFyZ2luOjBjbTsNCgltYXJnaW4tYm90dG9tOi4wMDAxcHQ7DQoJ
Zm9udC1zaXplOjEyLjBwdDsNCglmb250LWZhbWlseToiVGltZXMgTmV3IFJvbWFuIiwic2VyaWYi
O30NCmE6bGluaywgc3Bhbi5Nc29IeXBlcmxpbmsNCgl7bXNvLXN0eWxlLXByaW9yaXR5Ojk5Ow0K
CWNvbG9yOmJsdWU7DQoJdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt9DQphOnZpc2l0ZWQsIHNw
YW4uTXNvSHlwZXJsaW5rRm9sbG93ZWQNCgl7bXNvLXN0eWxlLXByaW9yaXR5Ojk5Ow0KCWNvbG9y
OnB1cnBsZTsNCgl0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO30NCnAuTXNvUGxhaW5UZXh0LCBs
aS5Nc29QbGFpblRleHQsIGRpdi5Nc29QbGFpblRleHQNCgl7bXNvLXN0eWxlLXByaW9yaXR5Ojk5
Ow0KCW1zby1zdHlsZS1saW5rOiJQbGFpbiBUZXh0IENoYXIiOw0KCW1hcmdpbjowY207DQoJbWFy
Z2luLWJvdHRvbTouMDAwMXB0Ow0KCWZvbnQtc2l6ZToxMS4wcHQ7DQoJZm9udC1mYW1pbHk6IkNh
bGlicmkiLCJzYW5zLXNlcmlmIjsNCgltc28tZmFyZWFzdC1sYW5ndWFnZTpFTi1VUzt9DQpzcGFu
LkVtYWlsU3R5bGUxNw0KCXttc28tc3R5bGUtdHlwZTpwZXJzb25hbC1yZXBseTsNCglmb250LWZh
bWlseToiQ2FsaWJyaSIsInNhbnMtc2VyaWYiOw0KCWNvbG9yOiMxRjQ5N0Q7fQ0Kc3Bhbi5QbGFp
blRleHRDaGFyDQoJe21zby1zdHlsZS1uYW1lOiJQbGFpbiBUZXh0IENoYXIiOw0KCW1zby1zdHls
ZS1wcmlvcml0eTo5OTsNCgltc28tc3R5bGUtbGluazoiUGxhaW4gVGV4dCI7DQoJZm9udC1mYW1p
bHk6IkNhbGlicmkiLCJzYW5zLXNlcmlmIjt9DQouTXNvQ2hwRGVmYXVsdA0KCXttc28tc3R5bGUt
dHlwZTpleHBvcnQtb25seTsNCglmb250LWZhbWlseToiQ2FsaWJyaSIsInNhbnMtc2VyaWYiOw0K
CW1zby1mYXJlYXN0LWxhbmd1YWdlOkVOLVVTO30NCkBwYWdlIFdvcmRTZWN0aW9uMQ0KCXtzaXpl
OjYxMi4wcHQgNzkyLjBwdDsNCgltYXJnaW46NzIuMHB0IDcyLjBwdCA3Mi4wcHQgNzIuMHB0O30N
CmRpdi5Xb3JkU2VjdGlvbjENCgl7cGFnZTpXb3JkU2VjdGlvbjE7fQ0KLS0+PC9zdHlsZT48IS0t
W2lmIGd0ZSBtc28gOV0+PHhtbD4NCjxvOnNoYXBlZGVmYXVsdHMgdjpleHQ9ImVkaXQiIHNwaWRt
YXg9IjEwMjYiIC8+DQo8L3htbD48IVtlbmRpZl0tLT48IS0tW2lmIGd0ZSBtc28gOV0+PHhtbD4N
CjxvOnNoYXBlbGF5b3V0IHY6ZXh0PSJlZGl0Ij4NCjxvOmlkbWFwIHY6ZXh0PSJlZGl0IiBkYXRh
PSIxIiAvPg0KPC9vOnNoYXBlbGF5b3V0PjwveG1sPjwhW2VuZGlmXS0tPg0KPC9oZWFkPg0KPGJv
ZHkgbGFuZz0iRU4tR0IiIGxpbms9ImJsdWUiIHZsaW5rPSJwdXJwbGUiPg0KPGRpdiBjbGFzcz0i
V29yZFNlY3Rpb24xIj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxzcGFuIHN0eWxlPSJmb250LXNp
emU6MTEuMHB0O2ZvbnQtZmFtaWx5OiZxdW90O0NhbGlicmkmcXVvdDssJnF1b3Q7c2Fucy1zZXJp
ZiZxdW90Oztjb2xvcjojMUY0OTdEO21zby1mYXJlYXN0LWxhbmd1YWdlOkVOLVVTIj5Tb3JyeSDi
gJMgSeKAmXZlIG5vdCBiZWVuIG11Y2ggaW52b2x2ZWQ6IG90aGVyIHByb2plY3RzLiBCdXQgSSBq
dXN0IHNhdyB0aGlzIOKAkyBoYXZlbuKAmXQgbG9va2VkIGluIGFueSBkZXRhaWwgeWV0LjxvOnA+
PC9vOnA+PC9zcGFuPjwvcD4NCjxwIGNsYXNzPSJNc29QbGFpblRleHQiPkRlZXBBbGdlYnJhIC0g
YW4gb3V0bGluZSBvZiBhIHByb2dyYW08bzpwPjwvbzpwPjwvcD4NCjxwIGNsYXNzPSJNc29QbGFp
blRleHQiPkF1dGhvcnM6IFByemVteXNsYXcgQ2hvamVja2k8bzpwPjwvbzpwPjwvcD4NCjxwIGNs
YXNzPSJNc29QbGFpblRleHQiPkNhdGVnb3JpZXM6IGNzLkFJIG1hdGguQUc8bzpwPjwvbzpwPjwv
cD4NCjxwIGNsYXNzPSJNc29QbGFpblRleHQiPkNvbW1lbnRzOiA2IHBhZ2VzLCA8YSBocmVmPSJo
dHRwczovL3ByemNob2plY2tpLmdpdGh1Yi5pby9kZWVwYWxnZWJyYS8iPg0KaHR0cHM6Ly9wcnpj
aG9qZWNraS5naXRodWIuaW8vZGVlcGFsZ2VicmEvPC9hPjxvOnA+PC9vOnA+PC9wPg0KPHAgY2xh
c3M9Ik1zb1BsYWluVGV4dCI+XFw8bzpwPjwvbzpwPjwvcD4NCjxwIGNsYXNzPSJNc29QbGFpblRl
eHQiPiZuYnNwOyBXZSBvdXRsaW5lIGEgcHJvZ3JhbSBpbiB0aGUgYXJlYSBvZiBmb3JtYWxpemF0
aW9uIG9mIG1hdGhlbWF0aWNzIHRvIGF1dG9tYXRlIHRoZW9yZW0gcHJvdmluZyBpbiBhbGdlYnJh
IGFuZCBhbGdlYnJhaWMgZ2VvbWV0cnkuIFdlIHByb3Bvc2UgYSBjb25zdHJ1Y3Rpb24gb2YgYSBk
aWN0aW9uYXJ5IGJldHdlZW4gYXV0b21hdGVkIHRoZW9yZW0gcHJvdmVycyBhbmQgKExhKVRlWCBl
eHBsb2l0aW5nIHN5bnRhY3RpYw0KIHBhcnNlcnMuIFdlIGRlc2NyaWJlIGl0cyBhcHBsaWNhdGlv
biB0byBhIHJlcG9zaXRvcnkgb2YgaHVtYW4td3JpdHRlbiBmYWN0cyBhbmQgZGVmaW5pdGlvbnMg
aW4gYWxnZWJyYWljIGdlb21ldHJ5IChUaGUgU3RhY2tzIFByb2plY3QpLiBXZSB1c2UgZGVlcCBs
ZWFybmluZyB0ZWNobmlxdWVzLjxvOnA+PC9vOnA+PC9wPg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+
XFwgKCA8YSBocmVmPSJodHRwczovL2FyeGl2Lm9yZy9hYnMvMTYxMC4wMTA0NCI+aHR0cHM6Ly9h
cnhpdi5vcmcvYWJzLzE2MTAuMDEwNDQ8L2E+PHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToxMS4wcHQ7
Zm9udC1mYW1pbHk6JnF1b3Q7Q2FsaWJyaSZxdW90OywmcXVvdDtzYW5zLXNlcmlmJnF1b3Q7O2Nv
bG9yOiMxRjQ5N0Q7bXNvLWZhcmVhc3QtbGFuZ3VhZ2U6RU4tVVMiPjxvOnA+PC9vOnA+PC9zcGFu
PjwvcD4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxhIG5hbWU9Il9NYWlsRW5kQ29tcG9zZSI+PHNw
YW4gc3R5bGU9ImZvbnQtc2l6ZToxMS4wcHQ7Zm9udC1mYW1pbHk6JnF1b3Q7Q2FsaWJyaSZxdW90
OywmcXVvdDtzYW5zLXNlcmlmJnF1b3Q7O2NvbG9yOiMxRjQ5N0Q7bXNvLWZhcmVhc3QtbGFuZ3Vh
Z2U6RU4tVVMiPjxvOnA+Jm5ic3A7PC9vOnA+PC9zcGFuPjwvYT48L3A+DQo8cCBjbGFzcz0iTXNv
Tm9ybWFsIj48Yj48c3BhbiBsYW5nPSJFTi1VUyIgc3R5bGU9ImZvbnQtc2l6ZToxMS4wcHQ7Zm9u
dC1mYW1pbHk6JnF1b3Q7Q2FsaWJyaSZxdW90OywmcXVvdDtzYW5zLXNlcmlmJnF1b3Q7Ij5Gcm9t
Ojwvc3Bhbj48L2I+PHNwYW4gbGFuZz0iRU4tVVMiIHN0eWxlPSJmb250LXNpemU6MTEuMHB0O2Zv
bnQtZmFtaWx5OiZxdW90O0NhbGlicmkmcXVvdDssJnF1b3Q7c2Fucy1zZXJpZiZxdW90OyI+IFRp
bSBEYWx5IFttYWlsdG86YXhpb21jYXNAZ21haWwuY29tXQ0KPGJyPg0KPGI+U2VudDo8L2I+IDAx
IFNlcHRlbWJlciAyMDE2IDEzOjI1PGJyPg0KPGI+VG86PC9iPiBSaWNoYXJkIEZhdGVtYW48YnI+
DQo8Yj5DYzo8L2I+IFRpbSBEYWx5OyBheGlvbS1kZXY7IFJhbGYgSGVtbWVja2U7IEphbWVzIERh
dmVucG9ydDsgTWlrZSBEZXdhcjsgdmRob2V2ZW5AbGl4LnBvbHl0ZWNobmlxdWUuZnI7IEQgWndp
bGxpbmdlcjsgYWxiZXJ0X3JpY2hAbXNuLmNvbTxicj4NCjxiPlN1YmplY3Q6PC9iPiBSZTogRGVz
aWduIG9mIFNlbWFudGljIExhdGV4PG86cD48L286cD48L3NwYW4+PC9wPg0KPHAgY2xhc3M9Ik1z
b05vcm1hbCI+PG86cD4mbmJzcDs8L286cD48L3A+DQo8ZGl2Pg0KPGRpdj4NCjxkaXY+DQo8ZGl2
Pg0KPGRpdj4NCjxkaXY+DQo8ZGl2Pg0KPGRpdj4NCjxkaXY+DQo8ZGl2Pg0KPGRpdj4NCjxkaXY+
DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5UaGUgd2VhdmVyIHByb2dyYW0gY2FuIG5vdyBwcm9jZXNz
IGEgbGF0ZXggZG9jdW1lbnQuIDxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNv
Tm9ybWFsIj5UaGUgZW5kIHJlc3VsdCBpcyBhIHRyZWUgc3RydWN0dXJlIG9mIHRoZSBzYW1lIGRv
Y3VtZW50LjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHls
ZT0ibWFyZ2luLWJvdHRvbToxMi4wcHQiPlRoZXJlIGlzIHN0aWxsIG1vcmUgdG8gZG8sIG9mIGNv
dXJzZS4gTXVjaCBtb3JlLjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9y
bWFsIj5JdCBpcyBjbGVhciB0aGF0IHRoZSBzZW1hbnRpY3Mgb2YgdGhlIG1hcmt1cCB0YWdzIGFy
ZSBhbGwgaW48bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+dGhl
IHdlYXZlciBwcm9ncmFtLiBUaGlzIGlzIG9idmlvdXMgaW4gaGluZHNpZ2h0IHNpbmNlIHRoZTxv
OnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2lu
LWJvdHRvbToxMi4wcHQiPm1hcmt1cCBuZWVkcyB0byBiZSB0cmFuc3BhcmVudCB0byB0aGUgcHJp
bnQgcmVwcmVzZW50YXRpb24uPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFz
cz0iTXNvTm9ybWFsIj5UaGUgcGFyc2VyIG5lZWRzIHRvIGtub3cgdGhlICdhcml0eScgb2YgdGFn
cyBzaW5jZSBcdGFne2F9e2J9DQo8YnI+DQp3b3VsZCBwYXJzZSBvbmUgd2F5LCBcdGFne2F9LCBm
b3IgYSAxLWFyaXR5IHRhZyBhbmQgYW5vdGhlciA8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRp
dj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPndheSBcdGFne2F9e2J9IGZvciBhIDItYXJpdHkgdGFn
LiBUaGUgY29kZSBuZWVkcyB0byBiZSBnZW5lcmFsaXplZDxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+
DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+dG8gcGFyc2UgZ2l2ZW4gdGhlIGFyaXR5LiA8
bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxvOnA+
Jm5ic3A7PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5UaGUgd2VhdmVy
IHByb2dyYW0gaXMgc3RydWN0dXJlZCBzbyB0aGF0IHRoZSB0cmVlLXBhcnNlIG91dHB1dDxvOnA+
PC9vOnA+PC9wPg0KPC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5pcyBpbmRlcGVuZGVudCBv
ZiBBeGlvbS4gVGhlIEF4aW9tIHJld3JpdGUgd2lsbCB0YWtlIHRoZSB0cmVlDQo8bzpwPjwvbzpw
PjwvcD4NCjwvZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+YXMgaW5wdXQgYW5kIHByb2R1Y2Ug
dmFsaWQgQXhpb20gaW5wdXRmb3Jtcy4gVGhpcyBzaG91bGQgbWFrZTxvOnA+PC9vOnA+PC9wPg0K
PC9kaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWJvdHRvbToxMi4wcHQi
Pml0IHBvc3NpYmxlIHRvIHRhcmdldCBhbnkgQ0FTLjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8
cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWJvdHRvbToxMi4wcHQiPk9ud2FyZCBh
bmQgdXB3YXJkLCBhcyB0aGV5IHNheS4uLi48bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPHAgY2xh
c3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1ib3R0b206MTIuMHB0Ij5UaW08bzpwPjwvbzpw
PjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxvOnA+Jm5ic3A7PC9v
OnA+PC9wPg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPk9uIFNhdCwgQXVnIDI3LCAyMDE2
IGF0IDE6MjggUE0sIFRpbSBEYWx5ICZsdDs8YSBocmVmPSJtYWlsdG86YXhpb21jYXNAZ21haWwu
Y29tIiB0YXJnZXQ9Il9ibGFuayI+YXhpb21jYXNAZ21haWwuY29tPC9hPiZndDsgd3JvdGU6PG86
cD48L286cD48L3A+DQo8YmxvY2txdW90ZSBzdHlsZT0iYm9yZGVyOm5vbmU7Ym9yZGVyLWxlZnQ6
c29saWQgI0NDQ0NDQyAxLjBwdDtwYWRkaW5nOjBjbSAwY20gMGNtIDYuMHB0O21hcmdpbi1sZWZ0
OjQuOHB0O21hcmdpbi1yaWdodDowY20iPg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxv
OnA+Jm5ic3A7PC9vOnA+PC9wPg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxvOnA+Jm5i
c3A7PC9vOnA+PC9wPg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPk9uIFNhdCwgQXVnIDI3
LCAyMDE2IGF0IDEyOjE0IFBNLCBSaWNoYXJkIEZhdGVtYW4gJmx0OzxhIGhyZWY9Im1haWx0bzpm
YXRlbWFuQGJlcmtlbGV5LmVkdSIgdGFyZ2V0PSJfYmxhbmsiPmZhdGVtYW5AYmVya2VsZXkuZWR1
PC9hPiZndDsgd3JvdGU6PG86cD48L286cD48L3A+DQo8YmxvY2txdW90ZSBzdHlsZT0iYm9yZGVy
Om5vbmU7Ym9yZGVyLWxlZnQ6c29saWQgI0NDQ0NDQyAxLjBwdDtwYWRkaW5nOjBjbSAwY20gMGNt
IDYuMHB0O21hcmdpbi1sZWZ0OjQuOHB0O21hcmdpbi1yaWdodDowY20iPg0KPGRpdj4NCjxkaXY+
DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj48YnI+DQpUYWtlIHVwIGEgYm9vayBvbiBjb21wbGV4IGFu
YWx5c2lzIGFuZCBzZWUgd2hhdCBwcm9ibGVtcyB5b3UgaGF2ZTxicj4NCiZuYnNwO2FzIHlvdSB0
cnkgdG8gZW5jb2RlIHRoZSBzdGF0ZW1lbnRzLCBvciBlc3BlY2lhbGx5IHRoZSBob21ld29yazxi
cj4NCnByb2JsZW1zLiBJIHRyaWVkIHRoaXMgZGVjYWRlcyBhZ28gd2l0aCB0aGUgdGV4dCBJIHVz
ZWQsIDxicj4NCjxhIGhyZWY9Imh0dHBzOi8vd3d3LmFtYXpvbi5jb20vRnVuY3Rpb25zLUNvbXBs
ZXgtVmFyaWFibGUtVGVjaG5pcXVlLU1hdGhlbWF0aWNzL2RwLzA4OTg3MTU5NTQiIHRhcmdldD0i
X2JsYW5rIj5odHRwczovL3d3dy5hbWF6b24uY29tL0Z1bmN0aW9ucy1Db21wbGV4LVZhcmlhYmxl
LVRlY2huaXF1ZS1NYXRoZW1hdGljcy9kcC8wODk4NzE1OTU0PC9hPjxicj4NCmJ1dCBwcm9iYWJs
eSBhbnkgb3RoZXIgdGV4dCB3b3VsZCBkby48bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPC9kaXY+
DQo8L2Jsb2NrcXVvdGU+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+PG86cD4mbmJzcDs8
L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5NeSBsYXN0IHBy
b2plY3QgYXQgQ01VIChUaXJlcykgaW52b2x2ZWQgd29yayBvbiBtYWNoaW5lIGxlYXJuaW5nDQo8
YnI+DQp1c2luZyBuYXR1cmFsIGxhbmd1YWdlIChhbmQgR29vZC1PbGQtRmFzaGlvbmVkLUFJIChH
T0ZBSSkpLiA8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3Jt
YWwiPkknbSBub3Qgc21hcnQgZW5vdWdoIHRvIG1ha2UgcHJvZ3Jlc3MgaW4gbmF0dXJhbCBsYW5n
dWFnZS48YnI+DQo8YnI+DQombmJzcDs8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGJsb2NrcXVv
dGUgc3R5bGU9ImJvcmRlcjpub25lO2JvcmRlci1sZWZ0OnNvbGlkICNDQ0NDQ0MgMS4wcHQ7cGFk
ZGluZzowY20gMGNtIDBjbSA2LjBwdDttYXJnaW4tbGVmdDo0LjhwdDttYXJnaW4tcmlnaHQ6MGNt
Ij4NCjxkaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+PGJyPg0KSSB0aGluayB0aGUg
ZW1waGFzaXMgb24gaGFuZGJvb2sgb3IgcmVmZXJlbmNlIGJvb2sgcmVwcmVzZW50YXRpb248YnI+
DQppcyBuYXR1cmFsLCBhbmQgSSBoYXZlIGNlcnRhaW5seSBwdXJzdWVkIHRoaXMgZGlyZWN0aW9u
IG15c2VsZi4mbmJzcDsgSG93ZXZlcjxicj4NCndoYXQgeW91L3dlIHdhbnQgdG8gYmUgYWJsZSB0
byBlbmNvZGUgaXMgbWF0aGVtYXRpY2FsIGRpc2NvdXJzZS4gVGhpczxicj4NCmdvZXMgYmV5b25k
ICZxdW90O2hhcyB0aGUgYWxnb3JpdGhtIHJlcHJvZHVjZWQgdGhlIHJlZmVyZW5jZSB2YWx1ZSBm
b3IgYW48YnI+DQppbnRlZ3JhdGlvbi4mcXVvdDsmbmJzcDsmbmJzcDsgQ2FuIHlvdSBlbmNvZGUg
aW4gc2VtYW50aWMgbGF0ZXggYSBkZXNjcmlwdGlvbiBvZiB0aGUgZ2VvbWV0cnk8YnI+DQpvZiB0
aGUgKHBlcmhhcHMgaW5maW5pdGVseSBsYXllcmVkKSBjb250b3VyIG9mIGEgY29tcGxleCBmdW5j
dGlvbj8mbmJzcDsgWW91PGJyPg0KbWlnaHQgd29uZGVyIGlmIHRoaXMgaXMgaW1wb3J0YW50LCBi
dXQgdGhlbiBub3RlIHRoYXQgcXVlc3Rpb25zIG9mIHRoaXMgc29ydDxicj4NCmFwcGVhciBpbiB0
aGUgcHJvYmxlbSBzZWN0aW9uIGZvciBjaGFwdGVyIDEuIDxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+
DQo8L2Rpdj4NCjwvYmxvY2txdW90ZT4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj48bzpw
PiZuYnNwOzwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0
eWxlPSJtYXJnaW4tYm90dG9tOjEyLjBwdCI+TGlrZSBhbnkgcmVzZWFyY2ggcHJvamVjdCwgdGhl
cmUgaGFzIHRvIGJlIGJvdW5kcyBvbiB0aGUgYW1iaXRpb24uPG86cD48L286cD48L3A+DQo8L2Rp
dj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5BdCB0aGlzIHBvaW50LCB0aGUgZ29hbCBp
cyB0byBtb2RpZnkgdGhlIG1hcmt1cCB0byBkaXNhbWJpZ3VhdGUgYSBsYXRleDxvOnA+PC9vOnA+
PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+Zm9ybXVsYSBzbyB0aGUg
bWFjaGluZSBjYW4gaW1wb3J0IGl0LiBBeGlvbSBuZWVkcyB0byBpbXBvcnQgaXQgdG8gY3JlYXRl
DQo8YnI+DQphIHRlc3Qgc3VpdGUgbWVhc3VyaW5nIHByb2dyZXNzIGFnYWluc3QgZXhpc3Rpbmcg
a25vd2xlZGdlLjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05v
cm1hbCI+PG86cD4mbmJzcDs8L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNv
Tm9ybWFsIj5XaGF0IHlvdSdyZSBkZXNjcmliaW5nIHNlZW1zIHRvIGJlIGEgd2F5IHRvIGVuY29k
ZSB0b3BvbG9naWNhbCBpc3N1ZXM8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNs
YXNzPSJNc29Ob3JtYWwiPmRlYWxpbmcgd2l0aCB0aGUgc3RydWN0dXJlIG9mIHRoZSBzcGFjZSB1
bmRlcmx5aW5nIHRoZSBmb3JtdWxhcy4gSSBoYXZlIG5vPG86cD48L286cD48L3A+DQo8L2Rpdj4N
CjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5pZGVhIGhvdyB0byBlbmNvZGUgdGhlIEJsb2No
IHNwaGVyZSBvciBhIHRvcnVzIG9yIGFueSBvdGhlciBzcGFjZSBleGNlcHQ8bzpwPjwvbzpwPjwv
cD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPmJ5IHJlZmVyZW5jaW5nIGFu
IEF4aW9tIGRvbWFpbiwgd2hpY2ggaW1wbGljaXRseSBlbmNvZGVzIGl0LjxvOnA+PC9vOnA+PC9w
Pg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+PG86cD4mbmJzcDs8L286cD48
L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5JZiB0aGUgZm9ybXVsYSBk
ZWFscyB3aXRoIHF1YW50dW0gbWVjaGFuaWNzIHRoZW4gdGhlIGFsZ29yaXRobXMgaGF2ZSBhbjxv
OnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+aW1wbGlj
aXQsIG1lY2hhbmlzdGljIHdheSBvZiBkZWFsaW5nIHdpdGggdGhlIEJsb2NoIHNwaGVyZS4gU28g
bWFya3VwIHRoYXQ8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29O
b3JtYWwiPnVzZXMgdGhlc2UgZnVuY3Rpb24gY2FsbHMgdXNlIHRoaXMgaW1wbGljaXQgZ3JvdW5k
aW5nLiBTaW1sbGFybHksIG1hcmt1cCB0aGF0PG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+
DQo8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWJvdHRvbToxMi4wcHQiPnVzZXMg
YSBicmFuY2ggY3V0IGltcGxpY2l0bHkgdXNlcyB0aGUgaW1wbGVtZW50YXRpb24gc2VtYW50aWNz
LjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+QXhp
b20gYW5kIE1hdGhlbWF0aWNzIGhhdmUgb25lIHNldCBvZiBicmFuY2ggY3V0cywgTWFwbGUgYW5k
IE1heGltYTxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1h
bCI+aGF2ZSBhbm90aGVyIChhdCBmYXIgYXMgSSBjYW4gdGVsbCkuIFNvIHRoZSBtYXJrdXAgZGVj
aXNpb25zIGhhdmUgdG8gYmU8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNz
PSJNc29Ob3JtYWwiPmNhcmVmdWxseSBjaG9zZW4uPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxk
aXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0K
PGJsb2NrcXVvdGUgc3R5bGU9ImJvcmRlcjpub25lO2JvcmRlci1sZWZ0OnNvbGlkICNDQ0NDQ0Mg
MS4wcHQ7cGFkZGluZzowY20gMGNtIDBjbSA2LjBwdDttYXJnaW4tbGVmdDo0LjhwdDttYXJnaW4t
cmlnaHQ6MGNtIj4NCjxkaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+PGJyPg0KSGVy
ZSdzIHRoZSBjaGFsbGVuZ2UgdGhlbi4mbmJzcDsgVGFrZSBhIG1hdGhlbWF0aWNzIGJvb2sgYW5k
ICZxdW90O2VuY29kZSZxdW90Ozxicj4NCiZuYnNwO2l0IHNvIHRoYXQgYSBwcm9ncmFtIChoeXBv
dGhldGljYWxseSkgY291bGQgYW5zd2VyIHRoZSBwcm9ibGVtcyBhdDxicj4NCnRoZSBlbmQgb2Yg
ZWFjaCBjaGFwdGVyLjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8L2Rpdj4NCjwvYmxvY2txdW90
ZT4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj48bzpwPiZuYnNwOzwvbzpwPjwvcD4NCjwv
ZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPlRoYXQncyBhIG11Y2ggZGVlcGVyIGNh
biBvZiB3b3JtcyB0aGFuIGl0IGFwcGVhcnMuIEkgc3BlbnQgYSBsb3Qgb2Y8bzpwPjwvbzpwPjwv
cD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPnRpbWUgaW4gdGhlIHF1ZXN0
aW9uLWFuc3dlcmluZyBsaXRlcmF0dXJlLiBJIGhhdmUgbm8gaWRlYSBob3cgdG8gbWFrZTxvOnA+
PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+cHJvZ3Jlc3Mg
aW4gdGhhdCBhcmVhLiBUaGUgVGlyZXMgcHJvamVjdCBpbnZvbHZlZCBzZWxmLW1vZGlmeWluZyBs
aXNwPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5i
YXNlZCBvbiBuYXR1cmFsIGxhbmd1YWdlIGludGVyYWN0aW9uIHdpdGggYSBodW1hbiBpbiB0aGUg
bGltaXRlZA0KPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9y
bWFsIj5kb21haW4gb2YgY2hhbmdpbmcgYSBjYXIgdGlyZS4gU2VlPG86cD48L286cD48L3A+DQo8
L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj48YSBocmVmPSJodHRwOi8vZGFseS5h
eGlvbS1kZXZlbG9wZXIub3JnL2NtdS9ib29rLnBkZiIgdGFyZ2V0PSJfYmxhbmsiPmh0dHA6Ly9k
YWx5LmF4aW9tLWRldmVsb3Blci5vcmcvY211L2Jvb2sucGRmPC9hPjxvOnA+PC9vOnA+PC9wPg0K
PC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1ib3R0b206
MTIuMHB0Ij4oVGhlIGdyYW50IGVuZGVkIGJlZm9yZSB0aGUgcHJvamVjdGVkIGVuZGVkLiBTaWdo
KTxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+VGlt
PG86cD48L286cD48L3A+DQo8L2Rpdj4NCjwvZGl2Pg0KPHAgY2xhc3M9Ik1zb05vcm1hbCI+PG86
cD4mbmJzcDs8L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5Q
LlMuIFRpcmVzIGlzIHNlbGYtbW9kaWZ5aW5nIGxpc3AgY29kZS4gSXQgJnF1b3Q7bGVhcm5zJnF1
b3Q7IGJ5IGNoYW5naW5nIGl0c2VsZi48bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxw
IGNsYXNzPSJNc29Ob3JtYWwiPlRoZSBpbml0aWFsIGNvZGUgKHRoZSBzZWVkIGNvZGUpIGJlY29t
ZXMgJnF1b3Q7c29tZXRoaW5nIGVsc2UmcXVvdDsuIE9uZQ0KPG86cD48L286cD48L3A+DQo8L2Rp
dj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5pbnRlcmVzdGluZyBpbnNpZ2h0IGlzIHRo
YXQgdHdvIHZlcnNpb25zIG9mIHRoZSBzZWVkIGNvZGUgd2lsbCBkaXZlcmdlPG86cD48L286cD48
L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5iYXNlZCBvbiAmcXVvdDtl
eHBlcmllbmNlJnF1b3Q7LiBUaGF0IGltcGxpZXMgdGhhdCB5b3UgY2FuJ3QgJnF1b3Q7dGVhY2gg
YnkgY29weSZxdW90Oyw8bzpwPjwvbzpwPjwvcD4NCjwvZGl2Pg0KPGRpdj4NCjxwIGNsYXNzPSJN
c29Ob3JtYWwiPnRoYXQgaXMsIHlvdSBjYW4ndCB0ZWFjaCBvbmUgc3lzdGVtIGFuZCB0aGVuICZx
dW90O2p1c3QgY29weSZxdW90OyBpdCB0byBhbm90aGVyPG86cD48L286cD48L3A+DQo8L2Rpdj4N
CjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj5leGlzdGluZyBzeXN0ZW0gc2luY2UgdGhlaXIg
ZXhwZXJpZW5jZXMgKGFuZCB0aGUgY29kZSBzdHJ1Y3R1cmUpPG86cD48L286cD48L3A+DQo8L2Rp
dj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFsIj53aWxsIGRpZmZlci4gQW55IHN5c3RlbSB0
aGF0ICZxdW90O2xlYXJucyZxdW90OyB3aWxsIGZhaWwgJnF1b3Q7dGVhY2ggYnkgY29weSZxdW90
OywgSSBiZWxpZXZlLjxvOnA+PC9vOnA+PC9wPg0KPC9kaXY+DQo8ZGl2Pg0KPHAgY2xhc3M9Ik1z
b05vcm1hbCI+VGhhdCBtZWFucyB0aGF0IEFJIHdpbGwgbm90IGhhdmUgdGhlIGV4cG9uZW50aWFs
IGdyb3d0aCB0aGF0IGV2ZXJ5b25lPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBj
bGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWJvdHRvbToxMi4wcHQiPnNlZW1zIHRvIGJl
bGlldmUuPG86cD48L286cD48L3A+DQo8L2Rpdj4NCjxkaXY+DQo8cCBjbGFzcz0iTXNvTm9ybWFs
Ij48bzpwPiZuYnNwOzwvbzpwPjwvcD4NCjwvZGl2Pg0KPC9kaXY+DQo8L2Jsb2NrcXVvdGU+DQo8
L2Rpdj4NCjxwIGNsYXNzPSJNc29Ob3JtYWwiPjxvOnA+Jm5ic3A7PC9vOnA+PC9wPg0KPC9kaXY+
DQo8L2Rpdj4NCjwvYm9keT4NCjwvaHRtbD4NCg==

--_000_a6bf030c60cb41d6ac1a7909dd6f4298exch04campusbathacuk_--

\start
Date: Wed, 5 Oct 2016 05:06:44 -0400
From: Tim Daly <axiomcas@gmail.com>
To: James Davenport <J.H.Davenport@bath.ac.uk>
Subject: Re: [Axiom-developer] Design of Semantic Latex
Cc: Richard Fateman <fateman@berkeley.edu>, Tim Daly <daly@axiom-developer.org>,
	axiom-dev <axiom-developer@nongnu.org>, Ralf Hemmecke <ralf@hemmecke.org>, 
	Mike Dewar <miked@nag.co.uk>, 
	"vdhoeven@lix.polytechnique.fr" <vdhoeven@lix.polytechnique.fr>,
	D Zwillinger <zwilling@az-tec.com>, 
	"albert_rich@msn.com" <albert_rich@msn.com>, howard.cohl@nist.gov

Axiom calls COQ (for Spad code) and ACL2 (for Lisp code) at build time
in order to run proofs. It is hard enough trying to construct proofs by han=
d
despite the notion that Spad is "nearly mathematical". Implementation
details matter a lot. We do, however, have the types already available.
Even with types the Spad-to-COQ gap is a long jump at best, a PhD
at worst.

I'm not sure how a dictionary between automated theorem provers and
latex would be useful. Fateman has already shown that raw latex lacks
enough information for an unambiguous parse (see prior references).

I'm suggesting that the latex be "augmented" by a semantic tags package
containing tags that do not change the print representation but contain
additional semantic information. E.g., for Axiom, \withtype ...

\[ \withtype{ \int{sin(x)} }{x}{EXPR(INT)} \]

prints as 'sin(x)' but becomes

integrate(sin(x),x)

for Axiom.

That way the latex prints "as is" but can be post-processed by machine
to feed CAS systems. Of course this would be a trial-and-error process
as the CAS will inevitably fail on missing semantics, requiring yet-
another-tag somewhere. There is no such thing as a simple job.
I have a trivial implementation working but there is much to do.

As for trying to feed a Deep Neural Network proofs... I have spent a
fair amount of time on DNNs (part of the TIRES project, see prior refs).
I am clueless how they could possibly be applied to proofs.

Tim


On Wed, Oct 5, 2016 at 3:08 AM, James Davenport <J.H.Davenport@bath.ac.uk>
wrote:

> Sorry =E2=80=93 I=E2=80=99ve not been much involved: other projects. But =
I just saw this =E2=80=93
> haven=E2=80=99t looked in any detail yet.
>
> DeepAlgebra - an outline of a program
>
> Authors: Przemyslaw Chojecki
>
> Categories: cs.AI math.AG
>
> Comments: 6 pages, https://przchojecki.github.io/deepalgebra/
>
> \\
>
>   We outline a program in the area of formalization of mathematics to
> automate theorem proving in algebra and algebraic geometry. We propose a
> construction of a dictionary between automated theorem provers and (La)Te=
X
> exploiting syntactic parsers. We describe its application to a repository
> of human-written facts and definitions in algebraic geometry (The Stacks
> Project). We use deep learning techniques.
>
> \\ ( https://arxiv.org/abs/1610.01044
>
>
>
> *From:* Tim Daly [mailto:axiomcas@gmail.com]
> *Sent:* 01 September 2016 13:25
> *To:* Richard Fateman
> *Cc:* Tim Daly; axiom-dev; Ralf Hemmecke; James Davenport; Mike Dewar;
> vdhoeven@lix.polytechnique.fr; D Zwillinger; albert_rich@msn.com
> *Subject:* Re: Design of Semantic Latex
>
>
>
> The weaver program can now process a latex document.
>
> The end result is a tree structure of the same document.
>
> There is still more to do, of course. Much more.
>
> It is clear that the semantics of the markup tags are all in
>
> the weaver program. This is obvious in hindsight since the
>
> markup needs to be transparent to the print representation.
>
> The parser needs to know the 'arity' of tags since \tag{a}{b}
> would parse one way, \tag{a}, for a 1-arity tag and another
>
> way \tag{a}{b} for a 2-arity tag. The code needs to be generalized
>
> to parse given the arity.
>
>
>
> The weaver program is structured so that the tree-parse output
>
> is independent of Axiom. The Axiom rewrite will take the tree
>
> as input and produce valid Axiom inputforms. This should make
>
> it possible to target any CAS.
>
> Onward and upward, as they say....
>
> Tim
>
>
>
> On Sat, Aug 27, 2016 at 1:28 PM, Tim Daly <axiomcas@gmail.com> wrote:
>
>
>
>
>
> On Sat, Aug 27, 2016 at 12:14 PM, Richard Fateman <fateman@berkeley.edu>
> wrote:
>
>
> Take up a book on complex analysis and see what problems you have
>  as you try to encode the statements, or especially the homework
> problems. I tried this decades ago with the text I used,
> https://www.amazon.com/Functions-Complex-Variable-
> Technique-Mathematics/dp/0898715954
> but probably any other text would do.
>
>
>
> My last project at CMU (Tires) involved work on machine learning
> using natural language (and Good-Old-Fashioned-AI (GOFAI)).
>
> I'm not smart enough to make progress in natural language.
>
>
>
>
> I think the emphasis on handbook or reference book representation
> is natural, and I have certainly pursued this direction myself.  However
> what you/we want to be able to encode is mathematical discourse. This
> goes beyond "has the algorithm reproduced the reference value for an
> integration."   Can you encode in semantic latex a description of the
> geometry
> of the (perhaps infinitely layered) contour of a complex function?  You
> might wonder if this is important, but then note that questions of this
> sort
> appear in the problem section for chapter 1.
>
>
>
> Like any research project, there has to be bounds on the ambition.
>
> At this point, the goal is to modify the markup to disambiguate a latex
>
> formula so the machine can import it. Axiom needs to import it to create
> a test suite measuring progress against existing knowledge.
>
>
>
> What you're describing seems to be a way to encode topological issues
>
> dealing with the structure of the space underlying the formulas. I have n=
o
>
> idea how to encode the Bloch sphere or a torus or any other space except
>
> by referencing an Axiom domain, which implicitly encodes it.
>
>
>
> If the formula deals with quantum mechanics then the algorithms have an
>
> implicit, mechanistic way of dealing with the Bloch sphere. So markup tha=
t
>
> uses these function calls use this implicit grounding. Simllarly, markup
> that
>
> uses a branch cut implicitly uses the implementation semantics.
>
> Axiom and Mathematics have one set of branch cuts, Maple and Maxima
>
> have another (at far as I can tell). So the markup decisions have to be
>
> carefully chosen.
>
>
>
>
> Here's the challenge then.  Take a mathematics book and "encode"
>  it so that a program (hypothetically) could answer the problems at
> the end of each chapter.
>
>
>
> That's a much deeper can of worms than it appears. I spent a lot of
>
> time in the question-answering literature. I have no idea how to make
>
> progress in that area. The Tires project involved self-modifying lisp
>
> based on natural language interaction with a human in the limited
>
> domain of changing a car tire. See
>
> http://daly.axiom-developer.org/cmu/book.pdf
>
> (The grant ended before the projected ended. Sigh)
>
> Tim
>
>
>
> P.S. Tires is self-modifying lisp code. It "learns" by changing itself.
>
> The initial code (the seed code) becomes "something else". One
>
> interesting insight is that two versions of the seed code will diverge
>
> based on "experience". That implies that you can't "teach by copy",
>
> that is, you can't teach one system and then "just copy" it to another
>
> existing system since their experiences (and the code structure)
>
> will differ. Any system that "learns" will fail "teach by copy", I believ=
e.
>
> That means that AI will not have the exponential growth that everyone
>
> seems to believe.
>
>
>
>
>


\start
Date: Tue, 11 Oct 2016 17:12:41 -0400
From: Camm Maguire <camm@maguirefamily.org>
To: Tim Daly <axiomcas@gmail.com>
Subject: Re: [Axiom-developer] Proving Axiom correct, derivations, and CAD

Greetings!  I am considering pushing some pathname ansi fixes from
master into the upcoming gcl release.  This has exposed an axiom issue.
#'pathname cannot take a symbol argument.  

Here is a patch, which I think is backward compatible (testing):

--- axiom-20140801.orig/books/bookvol5.pamphlet
+++ axiom-20140801/books/bookvol5.pamphlet
@@ -23115,7 +23115,7 @@ o )history
     (cond
      ((eq fullopt '|ifthere|) (setq ifthere t))
      ((eq fullopt '|quiet|)   (setq quiet t))))
-  (setq ef (|pathname| /editfile))
+  (setq ef (or (|pathname| /editfile) ""))
   (when (eq (|pathnameTypeId| ef) 'spad)
     (setq ef (|makePathname| (|pathnameName| ef) "*" "*")))
   (if arg 
@@ -37660,8 +37660,9 @@ The localdatabase function tries to find
   (if make-database? (setq noexpose t))
   (when dir (setq nrlibs (processDir dir thisdir)))
   (dolist (file filelist)
-   (let ((filename (pathname-name file))
-         (namedir (directory-namestring file)))
+   (let* ((file (string file))
+          (filename (pathname-name file))
+          (namedir (directory-namestring file)))
     (unless namedir (setq thisdir (concatenate 'string thisdir "/")))
     (cond
      ((setq file (probe-file
@@ -38708,7 +38709,7 @@ filetype and filemode. We also UPCASE ev
 (defun |pathname| (p)
  (cond
   ((null p) p)
-  ((pathnamep p) p)
+  ((pathnamep p) p)((symbolp p) (pathname (string p)))
   ((null (consp p)) (pathname p))
   (t
    (when (> (|#| p) 2) (setq p (cons (elt p 0) (cons (elt p 1) nil))))
--- axiom-20140801.orig/src/interp/patches.lisp.pamphlet
+++ axiom-20140801/src/interp/patches.lisp.pamphlet
@@ -106,9 +106,9 @@ previous definition.
   (cond ((null filename)
          (dribble) (TERPRI)
          (reset-highlight))
-        ((probe-file (car filename))
+        ((probe-file (string (car filename)))
          (error (format nil "file ~a already exists" (car filename))))
-        (t (dribble (car filename))
+        (t (dribble (string (car filename)))
            (TERPRI)
            (clear-highlight))
     ))


There may be other places, but this seems close to minimal.

Suggestions?

Take care,
-- 
Camm Maguire			     		    camm@maguirefamily.org

\start
Date: Fri, 14 Oct 2016 10:13:50 +0100
From: Malcolm MacCallum <webmaster@oldmaidstonians.org.uk>
To: axiom-developer@nongnu.org
Subject: [Axiom-developer] Problem building Axiom

I am running Scientific Linux 7.2 on a Dell 13 5000 2-in-1.
I wanted to install Axiom so I downloaded the fedora
src package (on the grounds fedora is the closest to SL 7.2.
On typing make, as advised, I find it hangs at the following step:

b1 making /usr/local/CA/axiom/mnt/fedora10/doc/bookvol13.pdf from 
/usr/local/CA/axiom/books/bookvol13.pamphlet

Advice on how to get Axiom working would be much appraciated.

If I can do that I will try to go on to Aldor....

Malcolm

\start
Date: Fri, 14 Oct 2016 11:22:48 -0400
From: Tim Daly <axiomcas@gmail.com>
To: webmaster@oldmaidstonians.org.uk, Tim Daly <daly@axiom-developer.org>, 
	axiom-dev <axiom-developer@nongnu.org>
Subject: Re: [Axiom-developer] Problem building Axiom

I'm slightly confused by your message.
By the 'fedora src package' do you mean the sources from
the axiom-developer.org website?

Try typing:
   make clean
   make NOISE=

The 'NOISE=' parameter lets you see the error messages.

You might try fetching the latest sources with
   git clone git://github.com/daly/axiom

As far as I am aware there are no dependencies on which
distribution you're using except for the packages and package
manager information listed on the axiom-developer.org website.

Please let me know the result.

If you're only interested in running Axiom you should be able
to install it with:

   yum install axiom

Tim Daly

\start
Date: Fri, 14 Oct 2016 13:01:27 -0400
From: Tim Daly <axiomcas@gmail.com>
To: gcl-devel@gnu.org, Tim Daly <daly@axiom-developer.org>, 
	axiom-dev <axiom-developer@nongnu.org>
Subject: Re: [Axiom-developer] The purpose of GCL

Blake,

Bill Schelter developed AKCL under contract to IBM Research.
I was the person who worked at IBM with him. I worked on the
garbage collector and tail call elimination, among other things.
AKCL eventually became GCL.

Bill also rescued Maxima from the collapse of Symbolics.

GCL was designed to optimize symbolic algebra software.
Bill and I spent a great deal of time minimizing hotspots and
tuning GCL for maximum performance.

I was responsible for a great deal of the effort to move Axiom
(Scratchpad) to Common Lisp which was just becoming a
standard at that time. I was partially active on that effort,
mostly reviewing the X3J13 publications along with Fred Blair.
Bill focused on the parts we needed to run Axiom.

Camm has been vital in keeping Axiom alive and well. Various
Common Lisp implementations present problems. SBCL
recently had a build that caused problems. Camm has always
been responsive to our needs. Each of the Lisps have strong
and weak points but Camm and GCL are vital to our effort.

Camm is also connected to the Debian repository and is
responsible for the Axiom distribution in that repository. Thus
you can say 'apt-get install axiom' and it just works.

It's not just about the language, it's also about the people.

Tim Daly

\start
Date: Fri, 21 Oct 2016 03:07:24 -0400
From: Tim Daly <axiomcas@gmail.com>
To: paul.black@nist.gov, axiom-dev <axiom-developer@nongnu.org>, 
	Tim Daly <daly@axiom-developer.org>
Subject: [Axiom-developer] Dictionary of Algorithms... contributions?

Paul,

I'm Tim Daly, lead developer on Axiom, a computer algebra system.
(http://axiom-developer.org)

I've just found the site https://xlinux.nist.gov/dads/
and you are listed as the contact.

Axiom has a long-term goal to be a foundation for teaching
computational mathematics. One focus is on explaining the
algorithms and data structures that underlie the implementation
of these fundamental ideas. We have long advocated the
collection and standardization of these algorithms.

I'm happy to see such clear explanations such as your link to
http://www-igm.univ-mlv.fr/~lecroq/string/node14.html

What is the mechanism for contributions?

Tim Daly
http://daly.axiom-developer.org

\start
Date: Fri, 21 Oct 2016 12:24:21 +0000
From: "Black, Paul E. (Fed)" <paul.black@nist.gov>
To: Tim Daly <axiomcas@gmail.com>, axiom-dev <axiom-developer@nongnu.org>, Tim
	Daly <daly@axiom-developer.org>
Subject: Re: [Axiom-developer] Dictionary of Algorithms... contributions?

Tim,

To contribute, just send stuff to me. As the editor, I reserve judgement th=
at some things are not in the scope of DADS. We can talk more about what is=
 and is not in scope.

That said, I store entries as tagged files, which are "compiled" into the n=
ice HTML pages you see. The "compilation" step updates indexes, changes ref=
erences in HTML anchors (<a href=3D...>), and other stuff. If folks are rea=
lly interested, it would ease my work if submissions came as these tagged f=
iles.

One more note: after handling DADS for over a decade, I am looking for some=
one else to take it over.

-paul-
Paul E. Black             100 Bureau Drive, Stop 8970
paul.black@nist.gov       Gaithersburg, Maryland  20899-8970
voice: +1 301 975-4794    fax: +1 301 975-6097
http://hissa.nist.gov/~black/                        KC7PKT

________________________________________
From: Tim Daly <axiomcas@gmail.com>
Sent: Friday, October 21, 2016 3:07 AM
To: Black, Paul E. (Fed); axiom-dev; Tim Daly
Subject: Dictionary of Algorithms... contributions?

Paul,

I'm Tim Daly, lead developer on Axiom, a computer algebra system.
(http://axiom-developer.org)

I've just found the site https://xlinux.nist.gov/dads/
and you are listed as the contact.

Axiom has a long-term goal to be a foundation for teaching
computational mathematics. One focus is on explaining the
algorithms and data structures that underlie the implementation
of these fundamental ideas. We have long advocated the
collection and standardization of these algorithms.

I'm happy to see such clear explanations such as your link to
http://www-igm.univ-mlv.fr/~lecroq/string/node14.html

What is the mechanism for contributions?

Tim Daly
http://daly.axiom-developer.org

\start
Date: Thu, 27 Oct 2016 20:12:38 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>, Tim Daly <daly@axiom-developer.org>
Subject: [Axiom-developer] Axiom 2016 / 30 Year Horizon "State of the Union"
 review

Axiom has a "30 Year Horizon" view. We are focused on goals with a
long term view. We discuss the goals, the current state, and the
challenges.

******************************************
       LONG TERM GOALS
******************************************

We plan to be the primary system for teaching Computational Mathematics.

We plan to be a highly reliable, verified implementation of Computation
Mathematics.

We plan to be a "living" system that can be easily maintained,
modified, and extended.

------------------------------------------
--- Teaching Computational Mathematics ---
------------------------------------------

We believe that Axiom is unique among systems. It has a strong
scaffold of mathematical theory used as an organizing force.  It is
free and open source, making it accessible to everyone.  It is a high
platform on which to build higher rather than starting from scratch.

Axiom is a large system, currently having over 1100 Categories,
Domains, and Packages and about 10,000 function signatures. In the
long term we hope to expand that by a factor of 10 or more.

There is a rich environment with growing trends that present a
challenge to Axiom to find ways to unify them into a body of knowledge
of Computational Mathematics that can be taught at both the
undergraduate and graduate level, as well as commercial use.

We need to "collect" and "connect" Axiom to the existing and
growing body of knowledge.  There are published papers describing
Axiom's implementation details.  There are hundreds of citations of
Axiom in the literature, some which describe implementation details.
There are shelves of books containing algorithms, some of which are
implemented in Axiom.  There are shelves of books containing formulas,
some of which are already in the Computer Algebra Test Suite but the
ability to ingest them needs to be automated.  There are proof systems
becoming capable of handling Axiom's Spad language and underlying
Lisp.  There are hundreds of citations of Axiom in the literature
related to Axiom's structure and function implementations.  There are
online courses that cover background material needed to understand the
theory underlying Axiom.  There are emerging standards allowing
portable implementations of the existing front-end.

------------------------------------------
--- A Living System ----------------------
------------------------------------------

We are not in competition with existing systems. There are structural
reasons to believe that Axiom will be a central platform in the long
term.

We target teaching Computational Mathematics because people tend to
use the system they know. We plan to structure Axiom so that it can be
maintained, modified, and extended as well as deeply connected to the
literature and course work.

We believe that Computational Mathematics has to be free and open
source giving the ability to understand algorithms. But this is not
enough; we need to communicate the knowledge as well as the code.

We believe that Axiom's implementation needs to be proven correct
where possible giving the ability to trust the results.

We believe that by setting standards for explaining algorithms we will
raise the bar for communicating Computational Mathematics.

We believe that a large, easily extended, and clearly explained system
will overcome the tendency to "start from scratch".

******************************************
         CURRENT STATE
******************************************

Currently there are three classes of existing systems with their
particular problems and long term weaknesses.

The PROPRIETARY systems have great functionality, well beyond what Axiom
implements in some cases. The critical flaw is that these systems are
backed by companies and companies die on average every 10-15 years.
Since software is now considered a capital asset, especially in a
software-only company, the software cannot be given away and released
as open source. When these companies die, such as happened to
Symbolics (Macsyma) or Soft Warehouse (Derive), the software will
disappear.

The START-FROM-SCRATCH system is everywhere. There was a collection of
over 100 systems distributed at ISSAC in the 90s.  Axiom represented
hundreds of person-years of effort and millions of dollars of
investment. It contains PhD level implementations of algorithms on a
variety of topics. This level of investment is unlikely to be
re-created in the current environment. Companies do not see such
effort as a good investment and the government will not invest in this
area. Thus there is no money and without money it is not possible to
"start from scratch" to build such a large system again.

The UNDOCUMENTED systems are everywhere. The commercial systems have
good external documentation but from first-hand conversations we know
that the internals are not. They suffer from the "PhD syndrome". In
order to create leading-edge algorithms one needs to hire recent
PhDs. The algorithm implementation works but there is a large
disconnect between the theory and the implementation, usually leaving
the implementation undocumented.

In addition one needs a wide range of skills. To maintain Axiom one
needs to be able to understand implementation details, large common
lisp systems, and have a depth and breadth of both theory and
computational mathematics. There are very few people who fit that
criteria. Indeed, that's the very problem we intend to cure by
teaching new Computational Mathematicians.

******************************************
        CURRENT EFFORTS
******************************************

Here we discuss details of ongoing efforts, some of which will likely
take years to complete if completion is even possible with
ever-expanding knowledge.

MERGING RELATED PAPERS: We have been collecting papers related to the
theory and implementation of Axiom. Various people have given
permission to use their material as chapters in the documentation
(e.g. Davenport, Grabmeier, Scheerhorn, Hammerling, etc.) The material
is added and adapted to the Axiom literate programming style. Citations
are made with hyperlinks between the chapters and the algebra code.

REVERSE ENGINEERING ALGORITHMS: We have been seeking algorithm
implementations that are clearly connected to published algorithms. We
are merging the algorithm details with the Spad implementation. This
will enable people to understand both the theory and the details as
well as highlight limitations and design decisions.

EXTENDING ALGEBRA: We have been working to replace the functionality
provided by the NAG library. Currently we are integrating BLAS and
LAPACK numerics with a plan for QUADPACK in the near future. We have
several Axiom algebra packages "stacked up" to be added at the
appropriate time, gated by the fact that we plan to provide them as
examples of "Literate Algebra". It is no longer sufficient to just
"throw the code in the pile" without the associated background.

MERGING SOURCE CODE: There are still about 250k lines of source code
to be merged into the books. The build system is being restructured
to remove the need for 'make'. The directories are disappearing.

COMPUTER ALGEBRA TEST SUITE (CATS): There is a growing body of test
suites for general areas of mathematics at the CATS website. These
test suites show the power and the limitations of the current Axiom
implementation. They point the way toward areas in need of
improvement.

AUTOMATED FORMULA INGESTION: There are many reference books that
contain mathematical formulas implemented in Latex. Fateman has shown
that Latex does not provide sufficient semantics to automatically read
them. We are working on a Latex "semantics markup" package to attack
this problem. The semantic markup does not change the print
representation but provides more semantics in the Latex formula tags
so they can be automatically read. This will open up a connection
between these hugh sources of formulas and Axiom.

IMPLEMENTING VERIFIED MATHEMATICS: Axiom is a Computational
Mathematics system. As such, it is a form of mathematics. Trusted
mathematical systems should strive to prove the implementation
correct. Axiom has implemented a build step that invokes ACL2 to prove
the Lisp implementation correct. Axiom has implemented a build step
that invokes COQ to prove the Spad implementation correct. We are
working toward putting more code into this proof pipeline.

BIBILOGRAPHY and CITATIONS: We are connecting Axiom to the
literature in several ways. We have a pipeline of documentation
of the theory and implementation details. We have an ongoing
literature search for citations related to the algebra source
code. Algebra code is being decorated with hyperlinks to the
bibliography included in each book. Ultimately we plan to link
to the actual papers.

ONLINE COURSES INTEGRATION: We are connecting Axiom to online courses
which provide the background necessary to understand the implementation
and use of Axiom's algebra. We have inserted hyperlinks to particular
videos and particular courses, such as Salomone's Abstract Algebra II
course. As more course material becomes available online we will
decorate Axiom with hyperlinks, making it easy to gain the necessary
background.

UNIFIED FRONT END: We are connecting Axiom to the browser as the
unified front end. Eventually the command line, hyperdoc, and the
graphics will all be available. Our focus on teaching means that we
will have a different orientation than the current set of front-ends.
We need a "curriculum" system that will provide guided understanding
and use of Axiom's algebra.

RESEARCH: We are implementing algebra, such as Gustafson's Universal
Numbers (UNUMs), to see if this can simplify the BLAS/LAPACK numerics.
We are examining "mixed" numerics that carry symbolic results in order
to control loss of precision.

A LIVING SYSTEM: Ultimately Axiom is striving to be a "living
system". Experience shows that most software dies. But Computational
Mathematics represents the collision of computers and mathematics and
is a timeless new subject area. We are striving to "be timeless" as
well. That is the reason for the "30 Year Horizon".

******************************************
        CHALLENGES
******************************************

A fundamental challenge is a lack of time. The tasks are large, some
impossibly so. We hope to set the standard for future work by future
authors in the belief that we can achieve a living system. It is by no
means certain, but then, neither is tomorrows breakfast.

MERGING RELATED PAPERS: Finding related papers takes time.
We have to understand an area, find "canonical" introductory
papers, obtain permission, re-implement the papers into Axiom's
books, and sew the papers and algebra together with hyperlinks.

REVERSE ENGINEERING ALGORITHMS: Trying to find the formula
or algorithm that matches the implementation is difficult. In one
cases we have found 20 formulas, none of which match the algorithm
used by Axiom. Even when we know what is being implemented some
of the algorithms are special "helper" functions that are part
of a much larger algorithm such as integration. These have to be
explained in a context that itself needs an explanation. It takes
time.

EXTENDING ALGEBRA: Both time and thought constrain this task.
We want the algebra to "be teachable" which means that we need to
provide much more than the code. There should be some theory,
some algorithmic design details, help files, a range of examples
with a good canonical use example. There needs to be literature
citations and, potentially, links to videos explaining the
background and use, either in courses or stand-alone.

MERGING SOURCE CODE: It takes time to rewrite 250k of Lisp into
a more structured and better documented form. It takes time to
"tree shake" the code to remove unused functions. The data
structures need to be reshaped, rationalized, and explained.
The build machinery simplification is "in-process". Axiom is,
after all, just a Lisp program with a Domain-Specific Language
(Spad) sitting on top so it shouldn't need a build system.

COMPUTER ALGEBRA TEST SUITE (CATS): Each of the test suites
have taken between half a year and a year of effort to implement.
This effort tends to uncover bugs or mismatches between the
formula and Axiom's algebra. Understanding the issue slows down
the work. For example, integration can differ by a constant but
sometimes the fact that the answer is constant is not obvious
or Axiom cannot prove it algorithmically. Occasionally we have
found bugs in the published literature.

AUTOMATED FORMULA INGESTION: Understanding what to mark,
what are the needed semantics, and how to write the Latex macros
takes time. Axiom needs to know, for example, which symbol is
being used as the variable of integration. This is obvious to
the human but not to the machine. This makes semantic markup
an iterative process that is defined by the target reader.

IMPLEMENTING VERIFIED MATHEMATICS: ACL2 and COQ are large
and impressive systems that take time to master. They do not
cover every aspect of what would be useful to prove. They do
provide a good platform for constraining the choice of an
implementation so it is easier (or even possible) to prove.
As such they improve the quality of Axiom.

BIBILOGRAPHY and CITATIONS: This year has been devoted to
the literature. We have collected papers and citations. We have
chosen papers to target for inclusion, for reference, and for
providing background on Axiom. We have made the bibliographic
citations robust. We have been decorating the algebra with
hyperlinks to background material. All of this is in pursuit
of "academic quality", making teaching easier.

ONLINE COURSES INTEGRATION: Online courses provide excellent
material, either as a full course or as a targeted lecture on a
single topic. We are working to find, link, and integrate the
online lectures with the algebra. Citations are now hyperlinked
at the appropriate places.

UNIFIED FRONT END: We have moved the structure of hyperdoc into
html. We have moved the front-end into interactive input/output. We
are looking at moving the graphics to the browser canvas. It all
takes time, especially since "the browser" is a moving target that
tends to break after every upgrade.

RESEARCH: Acton has examples of rewriting formulas to minimize
numeric issues, some of which involve substitution of symbolic
quantities. This allows for exact cancellation rather than
underflow. It looks like a fertile area for symbolic/numeric
cooperation. UNUMs look like they could greatly simplify numeric
code. We have been working on an FPGA implementation as the new
Intel processors have an embedded FPGA.

A LIVING SYSTEM: Ultimately Axiom is striving to be a "living
system". Experience shows that most software dies. But
Computational Mathematics represents the collision of computers
and mathematics and is a timeless new subject area. We are
striving to "be timeless" as well. That is the reason for
the "30 Year Horizon".

Tim

\start
Date: Fri, 28 Oct 2016 05:18:43 +0200
From: Kurt Pagani <nilqed@gmail.com>
To: axiom-developer@nongnu.org
Subject: [Axiom-developer] Comp failed: guthub,ubuntu

Hi Tim

I've tried (hard) to compile Axiom from github.
Do you recognize any obvious reason from the tail of the make output below?

Thank you
Kurt

---
git clone git://github.com/daly/axiom.git
cd axiom
export AXIOM=`pwd`/mnt/ubuntu
export PATH=$AXIOM/bin:$PATH
make


...

make[4]: Entering directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
../unixport/saved_pre_gcl ../unixport/ -compile gcl_collectfn.lsp
make[4]: ../unixport/saved_pre_gcl: Command not found
makefile:35: recipe for target 'gcl_collectfn.o' failed
make[4]: *** [gcl_collectfn.o] Error 127
make[4]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
makefile:108: recipe for target 'cmpnew/gcl_collectfn.o' failed
make[3]: *** [cmpnew/gcl_collectfn.o] Error 2
make[3]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12'
/bin/sh: 6: unixport/saved_gcl: not found
Makefile:8: recipe for target 'gcldir' failed
make[2]: *** [gcldir] Error 127
make[2]: Leaving directory '/home/kfp/Apps/axiom/lsp'
Makefile.ubuntu:169: recipe for target 'lspdir' failed
make[1]: *** [lspdir] Error 2
make[1]: Leaving directory '/home/kfp/Apps/axiom'
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2

\start
Date: Fri, 28 Oct 2016 05:36:24 +0200
From: Kurt Pagani <nilqed@gmail.com>
To: axiom-developer@nongnu.org
Subject: Re: [Axiom-developer] Comp failed: guthub,ubuntu

False alarm, I'm sorry. Gawk was missing.
Now it works :)


Am 28.10.2016 um 05:18 schrieb Kurt Pagani:
> Hi Tim
> 
> I've tried (hard) to compile Axiom from github.
> Do you recognize any obvious reason from the tail of the make output below?
> 
> Thank you
> Kurt
> 
> ---
> git clone git://github.com/daly/axiom.git
> cd axiom
> export AXIOM=`pwd`/mnt/ubuntu
> export PATH=$AXIOM/bin:$PATH
> make
> 
> 
> ...
> 
> make[4]: Entering directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
> ../unixport/saved_pre_gcl ../unixport/ -compile gcl_collectfn.lsp
> make[4]: ../unixport/saved_pre_gcl: Command not found
> makefile:35: recipe for target 'gcl_collectfn.o' failed
> make[4]: *** [gcl_collectfn.o] Error 127
> make[4]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
> makefile:108: recipe for target 'cmpnew/gcl_collectfn.o' failed
> make[3]: *** [cmpnew/gcl_collectfn.o] Error 2
> make[3]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12'
> /bin/sh: 6: unixport/saved_gcl: not found
> Makefile:8: recipe for target 'gcldir' failed
> make[2]: *** [gcldir] Error 127
> make[2]: Leaving directory '/home/kfp/Apps/axiom/lsp'
> Makefile.ubuntu:169: recipe for target 'lspdir' failed
> make[1]: *** [lspdir] Error 2
> make[1]: Leaving directory '/home/kfp/Apps/axiom'
> Makefile:138: recipe for target 'all' failed
> make: *** [all] Error 2
> 

\start
Date: Sat, 29 Oct 2016 05:19:55 +0200
From: Kurt Pagani <nilqed@gmail.com>
To: axiom-developer@nongnu.org
Subject: Re: [Axiom-developer] Comp failed: guthub,ubuntu

... crowed too soon. This time I logged stdout/stderr (logs.tar.gz).
The image wasn't usable, so I re-started from scratch.
BTW it's not urgent, I'm using the docker image.


Am 28.10.2016 um 05:36 schrieb Kurt Pagani:
> False alarm, I'm sorry. Gawk was missing.
> Now it works :)
> 
> 
> Am 28.10.2016 um 05:18 schrieb Kurt Pagani:
>> Hi Tim
>>
>> I've tried (hard) to compile Axiom from github.
>> Do you recognize any obvious reason from the tail of the make output below?
>>
>> Thank you
>> Kurt
>>
>> ---
>> git clone git://github.com/daly/axiom.git
>> cd axiom
>> export AXIOM=`pwd`/mnt/ubuntu
>> export PATH=$AXIOM/bin:$PATH
>> make
>>
>>
>> ...
>>
>> make[4]: Entering directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
>> ../unixport/saved_pre_gcl ../unixport/ -compile gcl_collectfn.lsp
>> make[4]: ../unixport/saved_pre_gcl: Command not found
>> makefile:35: recipe for target 'gcl_collectfn.o' failed
>> make[4]: *** [gcl_collectfn.o] Error 127
>> make[4]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12/cmpnew'
>> makefile:108: recipe for target 'cmpnew/gcl_collectfn.o' failed
>> make[3]: *** [cmpnew/gcl_collectfn.o] Error 2
>> make[3]: Leaving directory '/home/kfp/Apps/axiom/lsp/gcl-2.6.12'
>> /bin/sh: 6: unixport/saved_gcl: not found
>> Makefile:8: recipe for target 'gcldir' failed
>> make[2]: *** [gcldir] Error 127
>> make[2]: Leaving directory '/home/kfp/Apps/axiom/lsp'
>> Makefile.ubuntu:169: recipe for target 'lspdir' failed
>> make[1]: *** [lspdir] Error 2
>> make[1]: Leaving directory '/home/kfp/Apps/axiom'
>> Makefile:138: recipe for target 'all' failed
>> make: *** [all] Error 2
>>


\start
Date: Sat, 29 Oct 2016 04:41:10 -0400
From: Tim Daly <axiomcas@gmail.com>
To: Kurt Pagani <nilqed@gmail.com>, Tim Daly <daly@axiom-developer.org>, 
	axiom-dev <axiom-developer@nongnu.org>
Subject: Re: [Axiom-developer] Comp failed

I need more information.

What operating system are you running? I will try to
build a machine that matches your configuration.

The failure is in gcl. Can you build gcl from Savannah?

What version of GCC are you running? There seems to
be a bug in GCC 6. Try
   gcc --version

Are you sure you installed the packages listed on
http://axiom-developer.org/axiom-website/download.html

Tim

\start
Date: Sat, 29 Oct 2016 16:47:52 -0400
From: Tim Daly <axiomcas@gmail.com>
To: Kurt Pagani <nilqed@gmail.com>, Tim Daly <daly@axiom-developer.org>,
	gcl-devel@gnu.org, axiom-dev <axiom-developer@nongnu.org>
Subject: Re: [Axiom-developer] Comp failed

Yeah, there is something broken in 16.04 that breaks GCL.

It seems there is a GCC bug related to linker resolution
as near as I can tell. I did a little investigation but
grovelling in GDB and C libraries is not my most
effective use of time.

I'll try again sometime soon if no one else debugs it.

Tim


On Sat, Oct 29, 2016 at 4:25 PM, Kurt Pagani <nilqed@gmail.com> wrote:

> The OS is Ubuntu 16.04 LTS
> $ uname -a
> Linux mantis 4.4.0-45-generic #66-Ubuntu SMP Wed Oct 19 14:12:37 UTC 2016
> x86_64 x86_64 x86_64 GNU/Linux
>
> $ gcc --version
> gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609
> Copyright (C) 2015 Free Software Foundation, Inc.
>
> You were right, GCL from git://git.savannah.gnu.org/gcl.git does not
> build.
>
> make
> ...
> cd unixport && make saved_pre_gcl
> make[1]: Entering directory '/home/kfp/Apps/gcl/gcl/unixport'
> ls: cannot access '../lsp/*.o': No such file or directory
> ls: cannot access '../xgcl-2/*.o': No such file or directory
> ls: cannot access '../cmpnew/*.o': No such file or directory
> ls: cannot access 'gcl_recompile?*.o': No such file or directory
> ls: cannot access '../mod/*.o': No such file or directory
> ls: cannot access '../pcl/*.o': No such file or directory
> ls: cannot access '../clcs/*.o': No such file or directory
> make[1]: *** No rule to make target 'saved_pre_gcl'.  Stop.
> make[1]: Leaving directory '/home/kfp/Apps/gcl/gcl/unixport'
> makefile:72: recipe for target 'unixport/saved_pre_gcl' failed
> make: *** [unixport/saved_pre_gcl] Error 2
>
> I did exactly as you recommended on your website:
>
> Ubuntu
>
> apt-get install m4 libxpm-dev libxt-dev libx11-dev
> apt-get install libxext-dev gettext git-core texlive gawk texlive-fonts-extra
> git clone git://github.com/daly/axiom.git
> cd axiom
> export AXIOM=`pwd`/mnt/ubuntu
> export PATH=$AXIOM/bin:$PATH
> make
>
>
> I've tried on two different machines, both running the same OS though.
>
>
>
> On 29 October 2016 at 10:41, Tim Daly <axiomcas@gmail.com> wrote:
>
>> I need more information.
>>
>> What operating system are you running? I will try to
>> build a machine that matches your configuration.
>>
>> The failure is in gcl. Can you build gcl from Savannah?
>>
>> What version of GCC are you running? There seems to
>> be a bug in GCC 6. Try
>>    gcc --version
>>
>> Are you sure you installed the packages listed on
>> http://axiom-developer.org/axiom-website/download.html
>>
>> Tim
>>
>>
>

\start
Date: Sat, 29 Oct 2016 23:16:48 +0200
From: Kurt Pagani <nilqed@gmail.com>
To: Tim Daly <axiomcas@gmail.com>
Subject: Re: [Axiom-developer] Comp failed

Thank you Tim. As already said, it's really not urgent.

On 29 October 2016 at 22:47, Tim Daly <axiomcas@gmail.com> wrote:

> Yeah, there is something broken in 16.04 that breaks GCL.
>
> It seems there is a GCC bug related to linker resolution
> as near as I can tell. I did a little investigation but
> grovelling in GDB and C libraries is not my most
> effective use of time.
>
> I'll try again sometime soon if no one else debugs it.
>
> Tim
>
>
> On Sat, Oct 29, 2016 at 4:25 PM, Kurt Pagani <nilqed@gmail.com> wrote:
>
>> The OS is Ubuntu 16.04 LTS
>> $ uname -a
>> Linux mantis 4.4.0-45-generic #66-Ubuntu SMP Wed Oct 19 14:12:37 UTC 2016
>> x86_64 x86_64 x86_64 GNU/Linux
>>
>> $ gcc --version
>> gcc (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609
>> Copyright (C) 2015 Free Software Foundation, Inc.
>>
>> You were right, GCL from git://git.savannah.gnu.org/gcl.git does not
>> build.
>>
>> make
>> ...
>> cd unixport && make saved_pre_gcl
>> make[1]: Entering directory '/home/kfp/Apps/gcl/gcl/unixport'
>> ls: cannot access '../lsp/*.o': No such file or directory
>> ls: cannot access '../xgcl-2/*.o': No such file or directory
>> ls: cannot access '../cmpnew/*.o': No such file or directory
>> ls: cannot access 'gcl_recompile?*.o': No such file or directory
>> ls: cannot access '../mod/*.o': No such file or directory
>> ls: cannot access '../pcl/*.o': No such file or directory
>> ls: cannot access '../clcs/*.o': No such file or directory
>> make[1]: *** No rule to make target 'saved_pre_gcl'.  Stop.
>> make[1]: Leaving directory '/home/kfp/Apps/gcl/gcl/unixport'
>> makefile:72: recipe for target 'unixport/saved_pre_gcl' failed
>> make: *** [unixport/saved_pre_gcl] Error 2
>>
>> I did exactly as you recommended on your website:
>>
>> Ubuntu
>>
>> apt-get install m4 libxpm-dev libxt-dev libx11-dev
>> apt-get install libxext-dev gettext git-core texlive gawk texlive-fonts-extra
>> git clone git://github.com/daly/axiom.git
>> cd axiom
>> export AXIOM=`pwd`/mnt/ubuntu
>> export PATH=$AXIOM/bin:$PATH
>> make
>>
>>
>> I've tried on two different machines, both running the same OS though.
>>
>>
>>
>> On 29 October 2016 at 10:41, Tim Daly <axiomcas@gmail.com> wrote:
>>
>>> I need more information.
>>>
>>> What operating system are you running? I will try to
>>> build a machine that matches your configuration.
>>>
>>> The failure is in gcl. Can you build gcl from Savannah?
>>>
>>> What version of GCC are you running? There seems to
>>> be a bug in GCC 6. Try
>>>    gcc --version
>>>
>>> Are you sure you installed the packages listed on
>>> http://axiom-developer.org/axiom-website/download.html
>>>
>>> Tim
>>>
>>>
>>
>


\start
Date: Sun, 30 Oct 2016 14:58:53 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>, Tim Daly <daly@axiom-developer.org>
Subject: [Axiom-developer] Best reason to document code...

Because "yourself from 3 months ago doesn't answer emails"

\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}


\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
