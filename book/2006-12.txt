\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}
\begin{verbatim}
\start
Date: Fri, 1 Dec 2006 09:59:03 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: alql and shoe

> Waldek Hebisch writes:
> 
> [...]
> 
> | > which translates to
> | > 
> | >         ('|member| |kind| '("o" "k" "c" "d" "p"))
> | > 
> | 
> | Indeed.  I have tried some other variation and did not work. So the
> | following should be enough:
> 
> Did you test it?
> 
> My build says fails with:
> 
>    Compiling alql.clisp.
>    ; (DEFUN |getBrowseDatabase| ...) is being compiled.
>    ;;; The function '|member| is illegal.
>    No FASL generated.
>    NIL
> 
> I'll look into this later.
> 

I see.  I did make in existing tree and I have checked that it produced
the expected 'alql.clisp' file.  And the resulting binary worked
as expected.  However, the full build fails and after removing by
hand 'alql.o' also build in existing tree fails...

It is still a mistery for me when our Makefile really re-make things...

\start
Date: 01 Dec 2006 14:25:51 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: alql and shoe

Waldek Hebisch writes:

| > Waldek Hebisch writes:
| > 
| > [...]
| > 
| > | > which translates to
| > | > 
| > | >         ('|member| |kind| '("o" "k" "c" "d" "p"))
| > | > 
| > | 
| > | Indeed.  I have tried some other variation and did not work. So the
| > | following should be enough:
| > 
| > Did you test it?
| > 
| > My build says fails with:
| > 
| >    Compiling alql.clisp.
| >    ; (DEFUN |getBrowseDatabase| ...) is being compiled.
| >    ;;; The function '|member| is illegal.
| >    No FASL generated.
| >    NIL
| > 
| > I'll look into this later.
| > 
| 
| I see.  I did make in existing tree and I have checked that it produced
| the expected 'alql.clisp' file.  And the resulting binary worked
| as expected.  However, the full build fails and after removing by
| hand 'alql.o' also build in existing tree fails...
| 
| It is still a mistery for me when our Makefile really re-make things...

After a change, it is safer to make either mostlyclean or clean.

\start
Date: 01 Dec 2006 14:43:05 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: alql and shoe

Waldek Hebisch writes:

| Gaby, it seems that your change:
| 
| 2006-11-19  Gabriel Dos Reis  Gabriel Dos Reis
| 
|         * Makefile.pamphlet (alql.boot): Translate with bootsys.
|         * Makefile.in: Regenerate.
| 
| broke examples in Chapter 13 of Axiom book.

All the examples?

\start
Date: 01 Dec 2006 16:57:36 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: alql and shoe

Waldek Hebisch writes:


[...]

| > Yes, member is a kind of library function in new Boot. Every symbol
| > goes through bfReName (boot/tytree1.boot).  However, you can pretend
| > that you have a function member that is not a library function if you
| > write its name as a string literal
| > 
| >   "member"(kind, '("o" "k" "c" "d" "p"))
| > 
| > which translates to
| > 
| >         ('|member| |kind| '("o" "k" "c" "d" "p"))
| > 
| 
| Indeed.  I have tried some other variation and did not work. So the
| following should be enough:

I misled you.  Sorry.  Shoe is "incomplete", so that the above does
not work right.

Brute force grep shows that getBrowseDatabase is not used in
src/interp.  I'm going to remove the quote to allow build and put this
issue on the TODO list (more precisely, an audit of all users of
member, and other special shoe functions).

\start
Date: Fri, 1 Dec 2006 17:32:26 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: alql and shoe

> Waldek Hebisch writes:
> 
> | Gaby, it seems that your change:
> | 
> | 2006-11-19  Gabriel Dos Reis  Gabriel Dos Reis
> | 
> |         * Makefile.pamphlet (alql.boot): Translate with bootsys.
> |         * Makefile.in: Regenerate.
> | 
> | broke examples in Chapter 13 of Axiom book.
> 
> All the examples?
> 

The block in 13.13.8 using 'getDatabase'.

\start
Date: Fri, 01 Dec 2006 17:50:43 +0100
From: Gregory Vanuxem
To: Bill Page
Subject: Re: [Gcl-devel] Segmentationviolation:cstack ok:signalling error with GCL-2.7.0 (cvs head)

Le jeudi 30 novembre 2006 =E0 14:43 -0500, Bill Page a =E9crit :

[...]

> >
> > (and (a > -1.0) (a < 1.0))
> >
> > This is not Lisp code :-)
> >
>
> Oh! Duh, <embarrassment> ...
>
> So this doesn't cause an error when compiling Axiom with GCL?

No this does not cause an error. I'm wrong when I say that this is not
Lisp code, but since I know the intentions of the author, I inferred
that he used another language.

> Does  #+(or :cmu :akcl cause it to be excluded?

No, akcl and gcl are actually, apparently, synonyms.

>
> But maybe for the sake of other lisp targets rather than deleting
> it, maybe re-writing it to correct the error would be better?
>
> Anyway. No problem. You decide.

I leave it as it is now.

\start
Date: Fri, 1 Dec 2006 18:02:55 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: alql and shoe

Gabriel Dos Reis wrote:
> Waldek Hebisch writes:
> 
> 
> [...]
> 
> | > Yes, member is a kind of library function in new Boot. Every symbol
> | > goes through bfReName (boot/tytree1.boot).  However, you can pretend
> | > that you have a function member that is not a library function if you
> | > write its name as a string literal
> | > 
> | >   "member"(kind, '("o" "k" "c" "d" "p"))
> | > 
> | > which translates to
> | > 
> | >         ('|member| |kind| '("o" "k" "c" "d" "p"))
> | > 
> | 
> | Indeed.  I have tried some other variation and did not work. So the
> | following should be enough:
> 
> I misled you.  Sorry.  Shoe is "incomplete", so that the above does
> not work right.
> 
> Brute force grep shows that getBrowseDatabase is not used in
> src/interp.  I'm going to remove the quote to allow build and put this
> issue on the TODO list (more precisely, an audit of all users of
> member, and other special shoe functions).
> 

Yes, getBrowseDatabase is only used in examples in 13.13.8.  Since I am
working on generating .pht files this matters for me.

The change below went trough full bootstrap and has working 
getBrowseDatabase.  Also the patch I orignally proposed bootstraped OK.

--- /home/s/test/tt/axiom5/build-improvements/src/interp/alql.boot.pamphlet	2006-12-01 02:43:19.000000000 +0100
+++ build-improvements/src/interp/alql.boot.pamphlet	2006-12-01 14:28:18.000000000 +0100
@@ -50,7 +50,7 @@
 
 getBrowseDatabase(kind) ==
   $includeUnexposed? : local := true
-  not "member"(kind,'("o" "k" "c" "d" "p")) => nil
+  not FUNCALL("member",kind,'("o" "k" "c" "d" "p")) => nil
   grepConstruct('"*",INTERN kind)
 
 stringMatches?(pattern,subject) ==

\start
Date: Fri, 1 Dec 2006 09:26:55 -0800
From: Richard Harke
To: Camm Maguire
Subject: Re: Axiom ia64

On Tue November 14 2006 18:43, you wrote:

> This would be most appreciated, and I'd be happy to lend assistance.
> Knowledge of the ia64 reloc definitions is obviously key, though I put
> together the alpha version mostly as a guesswork based on the mips
> example.  If ia64 were done, we could also share with the lush
> project, on which the original sfaslbfd_mips was inspired.  And
> someday it would be great to get this back into bfd upstream.
>
> The basic idea is that each section of the .o file has a got table
> appended to handle the relocs that refer to the special gp register
> value.
I have been studying ld.so and also Xorg as that has a loader function.
Its not clear to me that they handle just the same set of relocs.
The R_IA64_ defines in elf.h have two bit fields for the ia64 and
these are used in ld.so but that info seems not to be used in Xorg.
And bfd uses an enum so such structuring of the values isn't
possible.
I notice some comments about a standalone version of the loader
code. That should be very helpful if it works.
You said something about the heap having to do with the dlopen version
not working but I noticed some things that made me think that
dynamic linking, ie letting the lisp code access vars by name
was an issue. Can you provide more detail?
Any suggestions would be helpful.

\start
Date: 01 Dec 2006 18:10:53 +0100
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: re: [Gcl-devel] Segmentationviolation:cstack ok:signalling error with GCL-2.7.0 (cvs head)

Gregory Vanuxem writes:

[...]

| > Does  #+(or :cmu :akcl cause it to be excluded?
| 
| No, akcl and gcl are actually, apparently, synonyms.

Indeed -- given the history of GCL.

\start
Date: 01 Dec 2006 18:25:47 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: alql and shoe

Waldek Hebisch writes:

| Gabriel Dos Reis wrote:
| > Waldek Hebisch writes:
| > 
| > 
| > [...]
| > 
| > | > Yes, member is a kind of library function in new Boot. Every symbol
| > | > goes through bfReName (boot/tytree1.boot).  However, you can pretend
| > | > that you have a function member that is not a library function if you
| > | > write its name as a string literal
| > | > 
| > | >   "member"(kind, '("o" "k" "c" "d" "p"))
| > | > 
| > | > which translates to
| > | > 
| > | >         ('|member| |kind| '("o" "k" "c" "d" "p"))
| > | > 
| > | 
| > | Indeed.  I have tried some other variation and did not work. So the
| > | following should be enough:
| > 
| > I misled you.  Sorry.  Shoe is "incomplete", so that the above does
| > not work right.
| > 
| > Brute force grep shows that getBrowseDatabase is not used in
| > src/interp.  I'm going to remove the quote to allow build and put this
| > issue on the TODO list (more precisely, an audit of all users of
| > member, and other special shoe functions).
| > 
| 
| Yes, getBrowseDatabase is only used in examples in 13.13.8.  Since I am
| working on generating .pht files this matters for me.
| 
| The change below went trough full bootstrap and has working 
| getBrowseDatabase.  Also the patch I orignally proposed bootstraped OK.

OK.  Please update README.build-improvements for auditing use of
special shoe functions.  I tried to commit before leaving home but
it failed and I did not have time to investigate further.

\start
Date: 01 Dec 2006 19:53:19 +0100
From: Gabriel Dos Reis
To: list
Subject: Quota at SF

Hi,

  Did we overflow our quota ay SF?

\start
Date: Fri, 1 Dec 2006 14:23:55 -0500
From: Bill Page
To: Gregory Vanuxem
Subject: re: [Gcl-devel] Segmentationviolation:cstackok:signalling error with GCL-2.7.0

On December 1, 2006 11:51 AM Vanuxem Gregory wrote:

> 
> > > 
> > > (and (a > -1.0) (a < 1.0))
> > > 
> > > This is not Lisp code :-)
> > >
> > 
> > Oh! Duh, <embarrassment> ...
> > 
> > So this doesn't cause an error when compiling Axiom with GCL?
> 
> No this does not cause an error. I'm wrong when I say that this
> is not Lisp code, but since I know the intentions of the author,
> I inferred that he used another language.
> 
> > Does  #+(or :cmu :akcl cause it to be excluded?
> 
> No, akcl and gcl are actually, apparently, synonyms.
> 

Ok, but now I *am* even more confused. As far as I can see

  (and (a > -1.0) (a < 1.0))

is syntactically incorrect in any Lisp implementation. (Which is
what I thought you meant when you said it was not lisp code.) Why
do you now say that you were "wrong"? If this code is not excluded
somehow, why doesn't this cause an error when compiling Axiom?

\start
Date: Fri, 1 Dec 2006 14:24:40 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Quota at SF

On December 1, 2006 1:53 PM Gabriel Dos Reis asked?
> 
>   Did we overflow our quota ay SF?
> 

Is there a quota at SourceForge?

\start
Date: Fri, 1 Dec 2006 14:26:39 -0500
From: Tim Daly
To: Bill Page
Subject: re: [Gcl-devel] Segmentationviolation:cstackok:signalling error with GCL-2.7.0

> > > > 
> > > > (and (a > -1.0) (a < 1.0))
> > > > 
> > > > This is not Lisp code :-)
> > > >
> > > 
> > > Oh! Duh, <embarrassment> ...
> > > 
> > > So this doesn't cause an error when compiling Axiom with GCL?
> > 
> > No this does not cause an error. I'm wrong when I say that this
> > is not Lisp code, but since I know the intentions of the author,
> > I inferred that he used another language.
> > 
> > > Does  #+(or :cmu :akcl cause it to be excluded?
> > 
> > No, akcl and gcl are actually, apparently, synonyms.
> > 
> 
> Ok, but now I *am* even more confused. As far as I can see
> 
>   (and (a > -1.0) (a < 1.0))
> 
> is syntactically incorrect in any Lisp implementation. (Which is
> what I thought you meant when you said it was not lisp code.) Why
> do you now say that you were "wrong"? If this code is not excluded
> somehow, why doesn't this cause an error when compiling Axiom?


The > and < are just symbols so this is equivalent to calling two 
functions, a and b with the value of the symbol > and an integer.

do the following:

(setq < 3)
(setq > 4)
(defun a (x y) (list x y))
(defun foo () (if (and (a > -1.0) (a < 1.0)) 0 1))
(foo)

when foo is called the function a is first called with the
value of > and -1.0 resulting in the list '(4 -1.0). then
a is called with the value of < and 1.0 resulting in the
list '(3 1.0). Then we compute (and '(4 -1.0) '(3 1.0))
which is equivalent of (and t t) so the if statement 
returns a zero. Since this is the last expression the
result of the function foo is 0

\start
Date: 01 Dec 2006 20:40:15 +0100
From: Gabriel Dos Reis
To: Bill Page
Subject: Re: Quota at SF

Bill Page writes:

| On December 1, 2006 1:53 PM Gabriel Dos Reis asked?
| > 
| >   Did we overflow our quota ay SF?
| > 
| 
| Is there a quota at SourceForge?

I sincerely don't know :-)

I'm asking because any attempt I make to create new files, or rename
files is met with resistance along the line of:

RA layer request failed: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)

\start
Date: Fri, 1 Dec 2006 14:41:26 -0500
From: Tim Daly
To: Gabriel Dos Reis
Subject: Re: Quota at SF

> | On December 1, 2006 1:53 PM Gabriel Dos Reis asked?
> | > 
> | >   Did we overflow our quota ay SF?
> | > 
> | 
> | Is there a quota at SourceForge?
> 
> I sincerely don't know :-)
> 
> I'm asking because any attempt I make to create new files, or rename
> files is met with resistance along the line of:
> 
> RA layer request failed: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)

maybe SVN has a pending lock?
is there a way to run cleanup on the host?

\start
Date: Fri, 1 Dec 2006 15:46:56 -0500
From: Bill Page
To: Tim Daly
Subject: Segmentationviolation:cstackok:signalling error with GCL-2.7.0(cvs head)

On December 1, 2006 2:27 PM Tim Daly wrote:
> > 
> > Ok, but now I *am* even more confused. As far as I can see
> > 
> >   (and (a > -1.0) (a < 1.0))
> > 
> > is syntactically incorrect in any Lisp implementation. (Which
> > is what I thought you meant when you said it was not lisp code.)
> > Why do you now say that you were "wrong"? If this code is not
> > excluded somehow, why doesn't this cause an error when compiling
> > Axiom?
> 
> 
> The > and < are just symbols so this is equivalent to calling
> two functions, a and b with the value of the symbol > and an
> integer.
> ...

I am sorry for taking this out of proper context. The code
in question is:

(defun asec (a)
  (if (and (a > -1.0) (a < 1.0))
    0.0
    (acos (/ 1.0 a))))

But yes, you are right this does compile. So now I feel suckered
twice: first because I didn't notice that it was wrong and second
because I did not notice that it was right. :-)

> do the following:
> 
> (setq < 3)
> (setq > 4)
> (defun a (x y) (list x y))
> (defun foo () (if (and (a > -1.0) (a < 1.0)) 0 1))
> (foo)
> ...

Ya, well ... I guess that's what I hate about Lisp. ;) It always
makes me feel so stupid...

\start
Date: 01 Dec 2006 22:13:30 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: Quota at SF

Tim Daly writes:

| > | On December 1, 2006 1:53 PM Gabriel Dos Reis asked?
| > | > 
| > | >   Did we overflow our quota ay SF?
| > | > 
| > | 
| > | Is there a quota at SourceForge?
| > 
| > I sincerely don't know :-)
| > 
| > I'm asking because any attempt I make to create new files, or rename
| > files is met with resistance along the line of:
| > 
| > RA layer request failed: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)
| 
| maybe SVN has a pending lock?

That is interesting, because I'm able to change existing files, but
not create new ones.

| is there a way to run cleanup on the host?

In theory, in theory because I never actually did it at SF, we have
ability to perform administrative tasks at SF.

I'm not going to do it right now, because I'm not concentrated and my
little boy likes my keyboard -- so I'm not sure axiomatizers would
appreciate his take on keyboards :-)

\start
Date: Fri, 1 Dec 2006 23:37:25 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: Quota at SF

> Bill Page writes:
> 
> | On December 1, 2006 1:53 PM Gabriel Dos Reis asked?
> | > 
> | >   Did we overflow our quota ay SF?
> | > 
> | 
> | Is there a quota at SourceForge?
> 
> I sincerely don't know :-)
> 
> I'm asking because any attempt I make to create new files, or rename
> files is met with resistance along the line of:
> 
> RA layer request failed: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)
> 

SourceForge claims that there is no quota for SVN.  In principle we
may hit into some limitations of SVN or underlying filesystem, but this
seems unlikely.

I just added a directory and two files to wh-sandbox and it worked
fine.

\start
Date: 02 Dec 2006 00:07:03 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: Quota at SF

Waldek Hebisch writes:


[...]

| I just added a directory and two files to wh-sandbox and it worked
| fine.

OK.  So, something must be wrong with me.

Can you try to rename the toplevel ChangeLog to ChangeLog.silver on
build-improvements?

\start
Date: 02 Dec 2006 00:34:24 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: Quota at SF

Tim Daly writes:

| maybe SVN has a pending lock?

There no locks in the SF repo.

\start
Date: Sat, 2 Dec 2006 00:42:29 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: Quota at SF

> Waldek Hebisch writes:
> 
> 
> [...]
> 
> | I just added a directory and two files to wh-sandbox and it worked
> | fine.
> 
> OK.  So, something must be wrong with me.
> 
> Can you try to rename the toplevel ChangeLog to ChangeLog.silver on
> build-improvements?
> 
> Thanks,
> 

When I tried I got the same error as you:

svn: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)

So maybe there is something special in this file???

Or, maybe the problem is just with renames (I _added_ files and a 
directory)???

\start
Date: 02 Dec 2006 00:49:21 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: Quota at SF

Waldek Hebisch writes:

| > Waldek Hebisch writes:
| > 
| > 
| > [...]
| > 
| > | I just added a directory and two files to wh-sandbox and it worked
| > | fine.
| > 
| > OK.  So, something must be wrong with me.
| > 
| > Can you try to rename the toplevel ChangeLog to ChangeLog.silver on
| > build-improvements?
| > 
| > Thanks,
| > 
| 
| When I tried I got the same error as you:
| 
| svn: COPY of ChangeLog.silver: 403 Forbidden (https://svn.sourceforge.net)
| 
| So maybe there is something special in this file???

I don't know what is special about it.  I just remove it, and add it
back.  And that was fine.  Quite curious.

| Or, maybe the problem is just with renames (I _added_ files and a 
| directory)???

here must have been something special with that file.  I renamed other
files yesterday or the day before.

\start
Date: Fri, 01 Dec 2006 20:42:35 -0400
From: Humberto Zuazaga
To: list
Subject: openpty again, again

I worked some on the patch, trying to incorporate the suggestions from:

http://lists.nongnu.org/archive/html/axiom-developer/2006-11/msg00687.html

How does it look now?

==== Patch <openpty-again> level 1
Source: [No source]
Target: 10b040b6-da22-0410-adf4-f09dab594101:/local:349
Log:

=== ChangeLog.build-improvements
==================================================================
--- ChangeLog.build-improvements	(revision 349)
+++ ChangeLog.build-improvements	(patch openpty-again level 1)
@@ -1,3 +1,13 @@
+2006-12-01  Humberto Zuazaga
+
+	* configure.ac.pamphlet: incorporated suggested changes from:
+	http://lists.nongnu.org/archive/html/axiom-developer/2006-11/msg00687.html
+
+2006-11-29  Humberto Zuazaga
+
+	* configure.ac.pamphlet: added tests for openpty, pty.h,
+	util.h and libutil
+
 2006-11-29  Gabriel Dos Reis  Gabriel Dos Reis
 
 	* configure.ac.pamphlet: Fix typo.
=== config/axiom-c-macros.h.in
==================================================================
--- config/axiom-c-macros.h.in	(revision 349)
+++ config/axiom-c-macros.h.in	(patch openpty-again level 1)
@@ -9,6 +9,12 @@
 /* Define to 1 if you have the <memory.h> header file. */
 #undef HAVE_MEMORY_H
 
+/* Define to 1 if you have the `openpty' function. */
+#undef HAVE_OPENPTY
+
+/* Define to 1 if you have the <pty.h> header file. */
+#undef HAVE_PTY_H
+
 /* Define to 1 if you have the <stdint.h> header file. */
 #undef HAVE_STDINT_H
 
@@ -30,6 +36,9 @@
 /* Define to 1 if you have the <unistd.h> header file. */
 #undef HAVE_UNISTD_H
 
+/* Define to 1 if you have the <util.h> header file. */
+#undef HAVE_UTIL_H
+
 /* Linux flavour */
 #undef LINUXplatform
 
=== config/var-def.mk
==================================================================
--- config/var-def.mk	(revision 349)
+++ config/var-def.mk	(patch openpty-again level 1)
@@ -118,6 +118,7 @@
 
 AXIOM_X11_CFLAGS = @X_CFLAGS@ 
 AXIOM_X11_LDFLAGS = @X_LIBS@ @X_PRE_LIBS@ -lX11 @X_EXTRA_LIBS@
+EXTRA_LIBS = @EXTRA_LIBS@
 
 axiom_includes = -I$(axiom_src_srcdir)/include -I$(axiom_configdir)
 
=== configure.ac.pamphlet
==================================================================
--- configure.ac.pamphlet	(revision 349)
+++ configure.ac.pamphlet	(patch openpty-again level 1)
@@ -683,8 +683,41 @@
 fi
 @
 
+\subsubsection{openpty}
 
+[[clef]] and [[sman]] use ptys to communicate with [[AXIOMsys]]. The
+existing code in silver doesn't work on MacOS X. We will try to build
+with the Unix98 standard [[openpty]] function. We need to detect two
+headers and a library. Linux has openpty defined in [[pty.h]], MacOS X
+define it in [[util.h]]. FreeBSD is supposed to have a definition in
+[[libutil.h]].
 
+<<headers>>=
+ AC_CHECK_HEADER([util.h], 
+                    [AC_DEFINE([HAVE_UTIL_H])],
+                    [AC_CHECK_HEADER([pty.h])
+                    ]) # HAVE_UTIL_H or HAVE_PTY_H
+
+ AC_CHECK_DECL([openpty], [], [],
+                  [#if HAVE_UTIL_H
+                   # include <util.h>
+                   #elif HAVE_PTY_H
+                   # include <pty.h>
+                   #endif
+                  ]) # HAVE_OPENPTY_DECL
+@
+
+On linux the openpty function is in [[libutil]]. We need to add that to
+the list of libraries, at least for [[sman]] and [[clef]].
+
+<<extra libraries>>=
+AC_CHECK_LIB([util], [openpty],
+                 [AC_DEFINE([HAVE_OPENPTY])
+                  EXTRA_LIBS="$EXTRA_LIBS -lutil"
+                 ]) # HAVE_OPENPTY
+AC_SUBST(EXTRA_LIBS)
+@
+
 \section{A note about comments}
 \label{sec:comment}
 
@@ -727,6 +760,8 @@
 
 <<headers>>
 
+<<extra libraries>>
+
 <<define AXIOM>>
 
 <<platform specific bits>>
=== src/clef/ChangeLog.build-improvements
==================================================================
--- src/clef/ChangeLog.build-improvements	(revision 349)
+++ src/clef/ChangeLog.build-improvements	(patch openpty-again level 1)
@@ -1,3 +1,7 @@
+2006-11-29  Humberto Zuazaga
+
+	* Makefile.pamphlet: add -lutil to clef link flags if needed
+
 2006-11-26  Gabriel Dos Reis  Gabriel Dos Reis
 
 	* edible.c.pamphlet: Include "axiom-c-macros.h"
=== src/clef/Makefile.pamphlet
==================================================================
--- src/clef/Makefile.pamphlet	(revision 349)
+++ src/clef/Makefile.pamphlet	(patch openpty-again level 1)
@@ -23,7 +23,7 @@
 
 clef_objects = $(clef_sources:.c=.$(OBJEXT)) 
 
-clef_LDADD = -L$(abs_top_builddir)/src/lib -lspad
+clef_LDADD = -L$(abs_top_builddir)/src/lib -lspad $(EXTRA_LIBS)
 clef_DEPENDENCIES =
 @
 
=== src/lib/ChangeLog.build-improvements
==================================================================
--- src/lib/ChangeLog.build-improvements	(revision 349)
+++ src/lib/ChangeLog.build-improvements	(patch openpty-again level 1)
@@ -1,3 +1,7 @@
+2006-11-29  Humberto Zuazaga
+
+	* openpty.c.pamphlet: use openpty if available
+
 2006-11-26  Gabriel Dos Reis  Gabriel Dos Reis
 
 	* XDither.c.pamphlet: Include axiom-c-macros.h
=== src/lib/openpty.c.pamphlet
==================================================================
--- src/lib/openpty.c.pamphlet	(revision 349)
+++ src/lib/openpty.c.pamphlet	(patch openpty-again level 1)
@@ -10,17 +10,9 @@
 \tableofcontents
 \eject
 \section{MAC OSX and BSD platform changes}
-Since we have no other information we are adding the [[MACOSXplatform]] variable
-to the list everywhere we find [[LINUXplatform]]. This may not be correct but
-we have no way to know yet. We have also added the [[BSDplatform]] variable.
-MAC OSX is some variant of BSD. These should probably be merged but we
-cannot yet prove that.
-<<mac osx platform change 1>>=
-#if defined(SUN4OS5platform) ||defined(ALPHAplatform) || defined(HP10platform) || defined(LINUXplatform) || defined(MACOSXplatform) || defined(BSDplatform)
-@
-<<mac osx platform change 2>>=
-#if defined(SUNplatform) || defined(HP9platform) || defined(LINUXplatform) || defined(MACOSXplatform) || defined(BSDplatform)
-@
+We should really use autotools to check for Unix 98 pty support.
+Before this is done below we hardcode information about each platform.
+
 \section{License}
 <<license>>=
 /*
@@ -71,7 +63,24 @@
 #include <stropts.h>
 #endif
 
+#ifdef HAVE_OPENPTY_DECL
+#  if HAVE_UTIL_H
+#    include <util.h>
+#  elif HAVE_PTY_H
+#    include <pty.h>
+# endif
+#elif HAVE_OPENPTY
+/* The symbol openpty is allegedly present but its
+   declaration was not found in any of the above headers.
+   So, we fake it here.  Note this is NOT a prototype
+   declaration.  */
+int openpty();
+#else 
+#  define AXIOM_DONT_USE_OPENPTY 1
+#endif
 
+#define AXIOM_USE_OPENPTY !AXIOM_DONT_USE_OPENPTY
+
 #include "openpty.H1"
 
 
@@ -97,6 +106,9 @@
 int  
 ptyopen(int *controller,int * server, char *controllerPath,char * serverPath)
 {
+#if AXIOM_USE_OPENPTY
+  return openpty(controller, server, serverPath, 0, 0);
+#else
 #if defined(SUNplatform) || defined (HP9platform) || defined(RTplatform) ||defined(AIX370platform) || defined(BSDplatform)
   int looking = 1, i;
   int oflag = O_RDWR;                  /* flag for opening the pty */
@@ -140,7 +152,8 @@
   return(fdm);
 #endif
 
-<<mac osx platform change 1>>
+/* MAC OS X 10.3 does not support Unix 98 pty's */
+#if defined(SUN4OS5platform) ||defined(ALPHAplatform) || defined(HP10platform) || defined(LINUXplatform) || defined(BSDplatform)
 extern int grantpt(int);
 extern int unlockpt(int);
 extern char* ptsname(int);
@@ -192,6 +205,7 @@
   return (*controller);
 
 #endif
+#endif
 }
 
 
@@ -204,7 +218,7 @@
 	sprintf(serv, "/dev/ttyp%02x", channelNo);
 	channelNo++;
 #endif
-<<mac osx platform change 2>>
+#if defined(SUNplatform) || defined(HP9platform) || defined(LINUXplatform) || defined(MACOSXplatform) || defined(BSDplatform)
 	static int channelNo = 0;
 	static char group[] = "pqrstuvwxyzPQRST";
 	static int groupNo = 0;
=== src/sman/ChangeLog.build-improvements
==================================================================
--- src/sman/ChangeLog.build-improvements	(revision 349)
+++ src/sman/ChangeLog.build-improvements	(patch openpty-again level 1)
@@ -1,3 +1,7 @@
+2006-11-29  Humberto Zuazaga
+
+	* Makefile.pamphlet: add -lutil to sman link flags if needed
+
 2006-11-29  Gabriel Dos Reis  Gabriel Dos Reis
 
 	* sman.c.pamphlet (should_I_clef): Recover lost return type.
=== src/sman/Makefile.pamphlet
==================================================================
--- src/sman/Makefile.pamphlet	(revision 349)
+++ src/sman/Makefile.pamphlet	(patch openpty-again level 1)
@@ -47,7 +47,7 @@
 sman_sources = sman.c
 sman_SOURCES = $(addsuffix .pamphlet, $(sman_sources))
 sman_objects = $(sman_sources:.c=.$(OBJEXT))
-sman_LDADD = -L$(build_libdir) -lspad
+sman_LDADD = -L$(build_libdir) -lspad $(EXTRA_LIBS)
 sman_DEPENDENCIES =
 
 

==== BEGIN SVK PATCH BLOCK ====
Version: svk 1.08 (darwin)

eJy1WN1v29YV58NQNESxdkOL9vG2VpGksCRefl66iWcndpGgSRzETtfUNdTL+yFxoUiVpOy41QY7
TbNlbdO9dECxPhXo+9aH7WF73f+1cy8pWbZlpcC2QEko8tzD8/G75/e7eiffensFj5aXrVEDW6PN
995dWrpNS9Z7E741/JHgcZnlDW+UiF2RNJxRknUb7iilfQFPS5p3Rbm8jGExqRav6wVjJ67yEdEy
S4tGqJ11ylyIhj3C/goORiv2aMWBxSMMj7OBSDt5lpXwGscN4VlHxcSSrBAdtXbFG8EHrO2xtYwT
cEZGV3s07YobWbcVDeOEN+P+IM92RV+kZaG9Vx71YqeB3Wo1j3PBINp9CJJlqYy7J2394y/Ctdkw
Fy3KWgPaH/QSUZ5cFcx4gzMqcjZl6KjkvDq5IzMwUDXxqqd0MEj2O6V4UHKRlFRn7tgjRjzs+JL5
DiceoZFHbM5suGV7Pots0nB8DN24ZRiH3394+EP7+YebBw831RfDtiy/ie2mhRG6NuxHIi8ztJGX
8SfND4b0E9ql6FKvvr/SGzDZGg7yluDDZdM89xaamf4SilOW5YMsp6XgqBh2u6JQV0x3pUAyz/pL
5rleWQ6W2u0kLsqilWZpNx22srzbpjnrxbui3Sv7SZs+iLN+kyu0QQXzdhUwbveLLlyRoKWsTLO+
3bTD/2UelHMIu4ToIegsR6qHg3J/EcE/rd6ieW5Yxkmrh2jKURJH6ptprrjTONVAqfsUUoItzHnI
AsY9PxKCRIEXYUa4E/kEAwgqwLjHYTZGY10M1uxTlmdFq9eKUw3gKax5x5bClqqX7tIcqihb/ftT
K84EnTMXdK5KhlIubZ8Q7nsW4MxiIrI4DRmLwihyiQW7w65A96X79JVfHvrGw9A4+Nh4tPbwlYN1
4/Po8Z2P6nqeR3KYsjLO0hZ6q20uDFOIFF1bfW+9s3F7/dbtrXum2X4LrQkZpwJBYzGKJdrPhqhH
d+FGT6BLuiPLqCcoFzlSyZ/ydXtrroeql/Nd3N26fmNmf3VJBJY08AUlARTEDgIqXJf4xLa9iEmO
xdyiesqD7XNCnIgHAXY8SgMZOtT1oLCRYI5FoW9eVdPvX/6+Zf7c+O4F46nx+OXvjPX3t+6sdm5c
v7KJLqOVmSHqF2AsncD1KA6I5XDhey73Q05t32GRoD6ZG6KvPMBIEQxzRgIMUVIqbAwYkBaXmFok
8hvY1sShps2/Xj/898rLT14zDv+2ZBw8MY0/vgBXT43o8J+/+rAYRuojdOM/raHwW9Pc3maJkDs7
eldtbxd9msKXYSHUritU81jW7w/TmMF4QXtx2QOr1fevb9ws9oudnRba6glTPICpEqddsOUC5hEq
4mQXusozUaTnS7SX5fdRlqKblG1sovdb6NfKVZKgMt9Xr9C0YWrnChx30/hBSFBRQkw0V2HV8UJk
R9gFH6lQAyNDXJSQGCr3MrPCU6HToWpM5DTfb6EbcTp8APArxlMF1ih0chXt9rbG887O4jhCs3qK
4rJ6XqFVpfsOEOiVzTUUFzBqBwPouI5AA5tWTmMVH6yD2tZjSi81zUuX6uiWly+baPVq5+q19avv
dq6tr66t37kwfskiMtGMP9tgv7b+zvVb6xe2J7ujc23n4s7imfbH/VdJXpxpvXMRLaAptwjmb72N
73WumVPRrq1fvXFh0pBFtF39neF1eyGW0z5nvXhBsVcy5EcTYaaVSGI5Hc98T9V0mu0o5bGc8eQo
/3oG6jzNFdPcSAFFCjwKmWPwjFGoYKABUjdaIWQKl8BosIwCMjNTLVfkizJZwzIWxSKCh4mgcFsx
3mT/VZux2pkaODAXcnq0TgFo0hGYQxV4VCcmjTmd5CkE1anOhMTRiLv8RmNq3jUT9aY3Tq84VUEV
4ObdK5tbF46WXzRXjmcyc3bqySe4FdkRsRh1vMBzA0pCR/qEMuH7YQgC1q3pm8zQe0TpvbaqnxaE
E8ZWI3mGeaDNIaZT1u6ZzlWnpszPJPdgojPCY2LBCSYxtp8hoMmxkKyTcmXi5ia9LzSRTklj8qz4
5pNQqFrhU0sCqUZe6FFOXcvBYRSG1LIcGwhNAgm5NQd9/Ys/vfDcpwefwoXxX4rEU8logVjjT/MS
pKy25n0kE9otlMRQ+07wM0ShTkUwkAqSRSSSIgTKxy7IhYgKnwc+tbGcUwxdenBBJAuwcBwOa1yP
uYTIANtSEhFyjD1/ohq+OvfVq6AaHt0D1fAH69E91JjeCTNiHL/BceBgEXkSg3Clgknge8B9GAQW
DbFHWI0oMD9+FHP8MY7nI0rvgmlIObMgpdzU06Q1ddqaWnwGppTF/DpqfY5tLkLPhx6wiLlhhGkA
EidwADfcswLYeRCILuQ3D/4snusf9OFiDqrQT0HV6YSWtNgZD3YAEd2lcUKjRMzE0Tj60LGj0Amo
dG1QZcy1pc0jB5QndVxB5LxdpQuuXHjEseH86DBqOSIiJBLYU+LTJw6POGtAw6sC/P3Ff3zsfn7F
OPyNcXD4vPF0/fcvHnzWNB7/7JvNgw3jyYW/3PnRGD6686XxxUs/vGocfvBXZPzu8UvGZ3s/vgZs
VPSyYcJRLmiS7Ots6bDMyixLKn3XE+y+ph+luxAIL1UILW7ysmVeEfBIiXZFdQVIOpBFERwP99Ce
ANmT81rzgVWfak6kUTYskaCshwYJLdWDlgla4OQxo6LYBYROyIQFRSenZAHcPakCjhvWrL+AKo6f
0gxjQoJTDahVVOz3oyw5ajmIxSQRXcGhOoNcFLBHQJGC8isLRXNcsITmVWp7ICDTTJE1HFMU89N0
XxG6IndIGzRgrfBaauVmtqiKJGGSKSXZE3DiRehWVh6V89bGFshG2JvQkP2BOPE+sIYjUQzx1MFe
uPi2SgxaqJKvRapW4521jVtbnbubk2wRNmu1Yy4cM5y2eX322lOGEFcuymGeTgKBg26ZZ1C3fBEV
It89+v82LXuLyILPOFio+83Vq0gJa4StlqPPBbqONcqmkXe+gJxBYY+hc8ag1DvICQOCbeoBP0nH
h00jZeAIO3Jt34pc1z4alN4s7lUU/sxJ6R6blP6sSan9nCbfqcVnT0p3/qDQx0hXWoGgwiGCMN/j
PgkhORII6cnIFZZ1xL9frH55SfPvF6v/d/5VWf90/h3nYnOGI+a7rvRCSnxGpLSBiYUk0MfAfwZx
aGXIgXsFCZiPHdfDPHTgAB/yAGicB9IOwwkBf/v6t20g4CerQMBff/Rk9acQsH4DtQk48kToU+zx
gAiLcezY3PIFd4Vw9S+J6jdbZ1TvhyaUM06Xl21AiV39Frulf55dWgJsw64oaPKmP2q4owFsD0BF
Lnbhy3AY84Y/aicZo0mFFcXi2Ios14r8Jqe23bRcbDUpl25TWiEHwgjhBv4PRw38Wg==
==== END SVK PATCH BLOCK ====



\start
Date: Fri, 01 Dec 2006 20:59:44 -0400
From: Humberto Zuazaga
To: Gabriel Dos Reis
Subject: Re: openpty patch again

Gabriel Dos Reis wrote:

> | > /mirror/axiom is now your local repo.  You can check out as
> | >
> | >   svk co /mirror/axiom/branches/build-improvements axiom.bi
> |
> | No, that won't work, or rather it works to check out the source, but I
> | can't svk patch that working directory.
>
> ?
>
> The above is what *I* _use_ to set up a repo directly "connected" to
> the master repo, in particular one for Axiom.

Yes, but can you svk patch --cat a patch you have created in that depot?

>
> | Those are the instructions I had
> | followed from the AxiomSilverBranch page on MathAction.
> |
> | The svk help intro page suggests a procedure like:
> |
> |     svk mirror
> |
> |       First, you'll need to mirror a remote repository. This sets up a
> |       local copy of that repository for you to branch from, merge to and
> |       otherwise poke at. The local path is sometimes called a "depot path."
> |
> |           # This command sets up the mirror directory for your local
> |           # mirrors of remote repositories
> |           svk mkdir //mirror
>
> This creates a local branch in your default depot, so it effectively
> is "deconnected" from the Axiom repo.  Is that what you want?

I guess not. I tried it, but still get errors trying to work with the
patch I've made:

$ svk patch --cat openpty-again --depot /axiom/
Target not local nor mirrored, unable to view patch.

I just want the svk patch commands to work. Maybe it's some bug in the
Mac OS X version of svk I'm using. The only thing related I can see on
google is:

http://lists.samba.org/archive/samba-technical/2005-September/042700.html

\start
Date: Fri, 01 Dec 2006 21:13:57 -0400
From: Humberto Zuazaga
To: list
Subject: Re: openpty again, again

Humberto Zuazaga wrote:
> I worked some on the patch, trying to incorporate the suggestions from:
>
> http://lists.nongnu.org/archive/html/axiom-developer/2006-11/msg00687.html
>
> How does it look now?

Aaugh! It didn't work!

$ axiom
fork_Axiom: Failed to reopen server: No such file or directory
clef trying to get the initial terminal settings: Operation not
supported on socket

Sorry.

\start
Date: 02 Dec 2006 02:30:50 +0100
From: Gabriel Dos Reis
To: Humberto Zuazaga
Subject: Re: openpty again, again

Humberto Zuazaga writes:

| Humberto Zuazaga wrote:
| > I worked some on the patch, trying to incorporate the suggestions from:
| > 
| > http://lists.nongnu.org/archive/html/axiom-developer/2006-11/msg00687.html
| > 
| > How does it look now?
| 
| Aaugh! It didn't work!
| 
| $ axiom
| fork_Axiom: Failed to reopen server: No such file or directory
| clef trying to get the initial terminal settings: Operation not
| supported on socket
| 
| Sorry.

Please don't.  I'm working in that same area.  I'll take on the ball
and post something for you to test.

\start
Date: Sat, 2 Dec 2006 03:06:34 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: openpty again, again

Gabriel Dos Reis wrote:
> Humberto Zuazaga writes:
> 
> | Humberto Zuazaga wrote:
> | > I worked some on the patch, trying to incorporate the suggestions from:
> | > 
> | > http://lists.nongnu.org/archive/html/axiom-developer/2006-11/msg00687.html
> | > 
> | > How does it look now?
> | 
> | Aaugh! It didn't work!
> | 
> | $ axiom
> | fork_Axiom: Failed to reopen server: No such file or directory
> | clef trying to get the initial terminal settings: Operation not
> | supported on socket
> | 
> | Sorry.
> 
> Please don't.  I'm working in that same area.  I'll take on the ball
> and post something for you to test.
>

Earler Gaby proposed:

   #elif HAVE_OPENPTY
   /* The symbol openpty is allegedly present but its
      declaration was not found in any of the above headers.
      So, we fake it here.  Note this is NOT a prototype
      declaration.  */
   int openpty();
   #else
   #  define AXIOM_DONT_USE_OPENPTY 1
   #endif

   #define AXIOM_USE_OPENPTY !AXIOM_DONT_USE_OPENPTY

-------

That looks problematic (we do not set AXIOM_DONT_USE_OPENPTY to 0),
and I do not understand why to use so negative logic.  I would
either simply use HAVE_OPENPTY, or if you insist on having
AXIOM_USE_OPENPTY I would just say:

#ifdef HAVE_OPENPTY
#define AXIOM_USE_OPENPTY 1
#else
#define AXIOM_USE_OPENPTY 0
#endif

BTW: IIUC the fragment above should test for 'defind(HAVE_OPENPTY)' and
similar.

\start
Date: Sat, 2 Dec 2006 03:56:07 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: openpty patch again

Gabriel Dos Reis wrote:
> Waldek Hebisch writes:
> 
> | Normally when viewman dies sman re-spawns  a new copy...
> 
> This is a design flaw in sman and friends -- I came across it yesterday
> and thought "wait, this is an unbounded replication; nobody wants
> that!".  
> 

This behaviour is semi-reasonble:  Axiom creators treated Axiom and
supporting programs as an Internet server where clients come, request
some computation and go away while the core parts (AXIOMsys, sman, 
session, viewman, nagman) run for long time.

Anyway, if you look for design flaws, you will probably find many.
One example that I found few days ago: 'AXIOMsys' at various moments
sends 'EndOfOutput' command to 'session' and then go on to process
information sent by 'session'.  But session also sends commands
to 'AXIOMsys' and for some commands expects that 'AXIOMsys' will
return some data as an answer.  There were no way for 'session'
to distinguish returned data from 'EndOfOutput' command.

\start
Date: 02 Dec 2006 04:19:14 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: libspad.a, cfuns-c.o sockio-c.c and friends

Tim Daly writes:

| > Aha!  So, in fact we can just remove libspad.a from that list since
| > nothing in GCL references symbols from libspad.a.  Is that correct?
| 
| correct? i don't know. the C connections and dependencies can be quite
| subtle (e.g. PLF usage). i can't say without checking but at some time
| we, the original axiom developers, or i, when recovering axiom, thought
| that it was needed. i could be wrong.

We cannot remove libspad.a, because Axiom still needs the definition
of bsdSignal -- which is in libspad.a.

I'm trying the other way that prompted my question earlier,
i.e. remove cfuns-c.o and sockio-c.o and leave only libspad.a.

\start
Date: 02 Dec 2006 04:29:07 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: openpty patch again

Waldek Hebisch writes:

| Gabriel Dos Reis wrote:
| > Waldek Hebisch writes:
| > 
| > | Normally when viewman dies sman re-spawns  a new copy...
| > 
| > This is a design flaw in sman and friends -- I came across it yesterday
| > and thought "wait, this is an unbounded replication; nobody wants
| > that!".  
| > 
| 
| This behaviour is semi-reasonble:  Axiom creators treated Axiom and
| supporting programs as an Internet server where clients come, request
| some computation and go away while the core parts (AXIOMsys, sman, 
| session, viewman, nagman) run for long time.

Note however the specific beahviour we are talking about is an
*uncontrolled* process-spawning.  A server will have a mechanism to
decide/detect when a death is requested as opposed to accidental.

| Anyway, if you look for design flaws, you will probably find many.

Well, I was not specifically looking for design flaws :-)

| One example that I found few days ago: 'AXIOMsys' at various moments
| sends 'EndOfOutput' command to 'session' and then go on to process
| information sent by 'session'.  But session also sends commands
| to 'AXIOMsys' and for some commands expects that 'AXIOMsys' will
| return some data as an answer.  There were no way for 'session'
| to distinguish returned data from 'EndOfOutput' command.

:-(

\start
Date: 02 Dec 2006 05:06:45 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: re: libspad.a, cfuns-c.o sockio-c.c and friends

Gabriel Dos Reis writes:

| Tim Daly writes:
| 
| | > Aha!  So, in fact we can just remove libspad.a from that list since
| | > nothing in GCL references symbols from libspad.a.  Is that correct?
| | 
| | correct? i don't know. the C connections and dependencies can be quite
| | subtle (e.g. PLF usage). i can't say without checking but at some time
| | we, the original axiom developers, or i, when recovering axiom, thought
| | that it was needed. i could be wrong.
| 
| We cannot remove libspad.a, because Axiom still needs the definition
| of bsdSignal -- which is in libspad.a.
| 
| I'm trying the other way that prompted my question earlier,
| i.e. remove cfuns-c.o and sockio-c.o and leave only libspad.a.

Which obviously does not work as Tim explained. src/interp/cfuns.lisp
references 'findString' (defined in src/lib/cfuns-c.c) but nothing
in the original GCL image needs it.  
It is odd that we cannot tell GCL "hey, here is an archive for you to
look in, in case I later load objects that need some symbols you cannot
find right now."

\start
Date: Sat, 2 Dec 2006 02:13:48 -0500
From: root
To: list
Subject: email server failure

I've had a power supply failure in my email machine
due to a storm and may have lost incoming emails.
I'm trying to build a machine to replace it.
If you've sent me mail and are expecting a response
please resend it.

\start
Date: Sat, 2 Dec 2006 11:20:35 -0600
From: Tim Daly
To: list
Subject: mail server failure

Apparently this didn't go thru.
I've had a power supply failure in my mail server.
I'm trying to rebuild a machine to replace it.
If you've sent me mail and are expecting a reply
please resend it.

\start
Date: 02 Dec 2006 19:02:13 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: mail server failure

Tim Daly writes:

| Apparently this didn't go thru.

It did; see message-id:

  <200612020713.kB27DmXJ024460@localhost.localdomain>

I hope you did lose data.

\start
Date: 02 Dec 2006 19:03:24 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: mail server failure

Tim Daly writes:

| Apparently this didn't go thru.

It did; see message-id:
 
  <200612020713.kB27DmXJ024460@localhost.localdomain>
  
I hope you did not lose data.

\start
Date: 02 Dec 2006 19:22:39 +0100
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: mail server failure

Gabriel Dos Reis writes:

[...]

| I hope you did lose data.

Of course, this is not what I meant. :-((

I hate emacs and its C-c based keystrokes.

\start
Date: Sun, 3 Dec 2006 04:54:57 +0100 (CET)
From: Waldek Hebisch
To: list
Subject: SourceForge SVN

We have problem with SF SVN: first Gaby then I can not make "svn copy".
Adding file works, but emulating "svn copy" via removal and addition
of a copy increases repository size, which may bit us in the future.

Actually I am merging changes from build-improvements. I tried to
"svn copy" gcl and noweb, but I am getting errors:

svn: COPY of gcl: 403 Forbidden (https://svn.sourceforge.net)

I am reluctant to commit gcl without sharing, so I will probably
commit a version which requires users to separately fetch gcl (
and noweb) if needed.

\start
Date: Sun, 3 Dec 2006 16:42:00 +0100 (CET)
From: Waldek Hebisch
To: list
Subject: Generating .pht pages

wh-sandbox reached its first milestone: starting from version 358 most
of .pht pages is genereted automatically. Comments:

1) in principle the existing mechanizm can generate all .pht pages. 
However two pages use NAG extensions, one page give misleading result
and 10 graphic pages require access to X server.

2) you may try generationg graphic pages and viewport -- changing
directory to 'src/paste' and running 'make gphts' should generate
all graphic pages and all viewport accessible from HyperDoc (the
new viewports stay in 'src/paste' direcory -- they are not installed).
As I wrote generating graphic requires access to X server (that is
why I made this part optional).

3) the process required bunch of bug fixes and workarounds -- otherwise
generating .pht pages may hang or produce wrong results. There is
still problem with exint.pht: Axiom integration routine gives now
different result (it can be argued that current result is wrong)
and in effect the generated page is misleading.  Also 'grpthry.pht'
is problematic: 'grpthry' uses probabilistic (Las Vegas) algorithm
and frequently stops before finding correct answer. IMHO that suggest
some bug, either in random number generation or in the algorithm.

4) generating .pht pages requires working sman, hypertex (and
graphic for graphic pages). If you are affected by pty problem
then build will fail.

5) As of version 363 you must have already installed noweb and gcl.
Alternatively, you can unpack noweb and/or gcl sources to noweb
(respectively gcl) subdirectory, then build process should pick
them automatically.

\start
Date: Sun, 3 Dec 2006 10:07:50 -0600
From: Tim Daly
To: Waldek Hebisch
Subject: Generating .pht pages

Could you document the process for generating these pages?

\start
Date: Sun, 26 Nov 2006 16:57:27 +0100
From: Ralf Hemmecke
To: Peter Broadbery
Subject: SingleInteger = Integer

Hello Peter,

looking at your file axlit.as that you used for the construction of 
libaxiom.al I was a bit puzzled that SingleInteger uses Integer as 
representation.

Is that really the way Axiom stores machinesize integers? Or is that 
just the way to connect Aldor with Axiom?

It seems a bit difficult to find out for the very basic domains like 
Tuple, PrimitiveArray, etc. what they actually export since it does not 
match what I see in the corresponding spad file.

Any help is welcome.

\start
Date: 04 Dec 2006 15:53:31 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: branches/wh-sandbox

Waldek Hebisch writes:

[...]

| Modified: branches/wh-sandbox/ChangeLog.wh
| ===================================================================
| --- branches/wh-sandbox/ChangeLog.wh	2006-12-04 10:35:05 UTC (rev 369)
| +++ branches/wh-sandbox/ChangeLog.wh	2006-12-04 13:46:51 UTC (rev 370)
| @@ -1,3 +1,11 @@
| +2006-12-04  Waldek Hebisch  Waldek Hebisch
| +
| +	* src/input/Makefile.pamphlet: make names of temporary files
| +	unique (needed for parallel build). Remove references to deleted
| +	files (fix breakage due to v364).

Hi Waldek,

   I considered parallel build for src/input/ but decided (for the
moment) that it should not follow the parallel flow.  The reason is
that with parallel build, the outputs are interleaved so it is hard to
see which output comes from what.  Consequently, it is simpler to let
the regression test run sequentially.  I believe the fix will be to
move the regression tests to a separate directory and mark its
corresponding Makefile as .NOTPARALLEL.  I did not do that, that is why
I did not send a message to the list saying that parallel build is
now supported :-)

   BTW, I'm pretty sure I broke parallel build recently :-/

\start
Date: Mon, 4 Dec 2006 16:16:26 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: branches/wh-sandbox

> Waldek Hebisch writes:
> 
> [...]
> 
> | Modified: branches/wh-sandbox/ChangeLog.wh
> | ===================================================================
> | --- branches/wh-sandbox/ChangeLog.wh	2006-12-04 10:35:05 UTC (rev 369)
> | +++ branches/wh-sandbox/ChangeLog.wh	2006-12-04 13:46:51 UTC (rev 370)
> | @@ -1,3 +1,11 @@
> | +2006-12-04  Waldek Hebisch  Waldek Hebisch
> | +
> | +	* src/input/Makefile.pamphlet: make names of temporary files
> | +	unique (needed for parallel build). Remove references to deleted
> | +	files (fix breakage due to v364).
> 
> Hi Waldek,
> 
>    I considered parallel build for src/input/ but decided (for the
> moment) that it should not follow the parallel flow.  The reason is
> that with parallel build, the outputs are interleaved so it is hard to
> see which output comes from what.  Consequently, it is simpler to let
> the regression test run sequentially.  I believe the fix will be to
> move the regression tests to a separate directory and mark its
> corresponding Makefile as .NOTPARALLEL.  I did not do that, that is why
> I did not send a message to the list saying that parallel build is
> now supported :-)
> 

Test outputs go to .output files.  ATM test Makefile uses tee command to
echo output also to the standard output, but it is probably better to
have only ouput in files.

\start
Date: 04 Dec 2006 16:46:11 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: branches/wh-sandbox

Waldek Hebisch writes:

| > Waldek Hebisch writes:
| > 
| > [...]
| > 
| > | Modified: branches/wh-sandbox/ChangeLog.wh
| > | ===================================================================
| > | --- branches/wh-sandbox/ChangeLog.wh	2006-12-04 10:35:05 UTC (rev 369)
| > | +++ branches/wh-sandbox/ChangeLog.wh	2006-12-04 13:46:51 UTC (rev 370)
| > | @@ -1,3 +1,11 @@
| > | +2006-12-04  Waldek Hebisch  Waldek Hebisch
| > | +
| > | +	* src/input/Makefile.pamphlet: make names of temporary files
| > | +	unique (needed for parallel build). Remove references to deleted
| > | +	files (fix breakage due to v364).
| > 
| > Hi Waldek,
| > 
| >    I considered parallel build for src/input/ but decided (for the
| > moment) that it should not follow the parallel flow.  The reason is
| > that with parallel build, the outputs are interleaved so it is hard to
| > see which output comes from what.  Consequently, it is simpler to let
| > the regression test run sequentially.  I believe the fix will be to
| > move the regression tests to a separate directory and mark its
| > corresponding Makefile as .NOTPARALLEL.  I did not do that, that is why
| > I did not send a message to the list saying that parallel build is
| > now supported :-)
| > 
| 
| Test outputs go to .output files.

I was not clear enough.  

Test outpus are displayed, as well as being saved.  However, I'm
concerned about the displayed part.

|  ATM test Makefile uses tee command to
| echo output also to the standard output, but it is probably better to
| have only ouput in files.

It is not clear to me why that would be better.  

\start
Date: Mon, 4 Dec 2006 16:57:10 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: branches/wh-sandbox

Gabriel Dos Reis wrote:
> Waldek Hebisch writes:
> |  ATM test Makefile uses tee command to
> | echo output also to the standard output, but it is probably better to
> | have only ouput in files.
> 
> It is not clear to me why that would be better.  
> 
Test ouput is of big and of little use when debugging build problems.
For mechanical checking of test results files are better.

\start
Date: 04 Dec 2006 18:37:35 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: branches/wh-sandbox

Waldek Hebisch writes:

| Gabriel Dos Reis wrote:
| > Waldek Hebisch writes:
| > |  ATM test Makefile uses tee command to
| > | echo output also to the standard output, but it is probably better to
| > | have only ouput in files.
| > 
| > It is not clear to me why that would be better.  
| > 
| Test ouput is of big and of little use when debugging build problems.

For that you want a separate "check" make target.  Not suppress the
output from regression test.

| For mechanical checking of test results files are better.

Nobody is advocating non-mechanical check -- if fact I can't even
think of a systematic regression test for Axiom that is NOT done
mechanically.  

\start
Date: 04 Dec 2006 18:38:14 +0100
From: Gabriel Dos Reis
To: Bill Page
Subject: branches/wh-sandbox

Bill Page writes:

| On December 4, 2006 10:57 AM Waldek Hebisch wrote:
| > 
| > Gabriel Dos Reis wrote:
| > > Waldek Hebisch writes:
| > > |  ATM test Makefile uses tee command to
| > > | echo output also to the standard output, but it is 
| > > > probably better to have only ouput in files.
| > > 
| > > It is not clear to me why that would be better.  
| > > 
| > Test ouput is of big and of little use when debugging build
| > problems. For mechanical checking of test results files are
| > better.
| > 
| 
| I agree that the build should not normally echo the literal
| output of the tests.

It does not follow that the output should be suppressed or
interleaved.

\start
Date: Mon, 4 Dec 2006 18:49:38 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: branches/wh-sandbox

> Bill Page writes:
> 
> | On December 4, 2006 10:57 AM Waldek Hebisch wrote:
> | > 
> | > Gabriel Dos Reis wrote:
> | > > Waldek Hebisch writes:
> | > > |  ATM test Makefile uses tee command to
> | > > | echo output also to the standard output, but it is 
> | > > > probably better to have only ouput in files.
> | > > 
> | > > It is not clear to me why that would be better.  
> | > > 
> | > Test ouput is of big and of little use when debugging build
> | > problems. For mechanical checking of test results files are
> | > better.
> | > 
> | 
> | I agree that the build should not normally echo the literal
> | output of the tests.
> 
> It does not follow that the output should be suppressed or
> interleaved.
> 

Gaby, did you notice that I wrote about removing 'tee' command
from the test line?  I would call this avoiding duplication,
you chose to call this "suppressing output".

BTW: One thing is if we want to run tests in paralell (you seem
to prefer serial execution), another is avoiding bugs when
somene prefers paralell run.

\start
Date: 04 Dec 2006 19:23:05 +0100
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: branches/wh-sandbox

Waldek Hebisch writes:

| > Bill Page writes:
| > 
| > | On December 4, 2006 10:57 AM Waldek Hebisch wrote:
| > | > 
| > | > Gabriel Dos Reis wrote:
| > | > > Waldek Hebisch writes:
| > | > > |  ATM test Makefile uses tee command to
| > | > > | echo output also to the standard output, but it is 
| > | > > > probably better to have only ouput in files.
| > | > > 
| > | > > It is not clear to me why that would be better.  
| > | > > 
| > | > Test ouput is of big and of little use when debugging build
| > | > problems. For mechanical checking of test results files are
| > | > better.
| > | > 
| > | 
| > | I agree that the build should not normally echo the literal
| > | output of the tests.
| > 
| > It does not follow that the output should be suppressed or
| > interleaved.
| > 
| 
| Gaby, did you notice that I wrote about removing 'tee' command
| from the test line?

Yes -- and I'm familiar with how the regression test is set up in
src/input; see the ChangeLog :-)

| I would call this avoiding duplication,
| you chose to call this "suppressing output".

Yes -- by output I meant what is "displayed", see my other mail.  I'm
not talking of what is saved in .output.  Somehow, you seem to be
believe that I don't make the difference :-(

| BTW: One thing is if we want to run tests in paralell (you seem
| to prefer serial execution), another is avoiding bugs when
| somene prefers paralell run.

You said you have a build problem.  But tha answer to that problem is
to have a separate rule for check when you're interested i build only.

\start
Date: 04 Dec 2006 14:20:56 -0500
From: Camm Maguire
To: Gabriel Dos Reis
Subject: Re: libspad.a, cfuns-c.o sockio-c.c and friends

Greetings!  I think you are looking for the autoload functionality
here.  Checkout lsp/gcl_auto_new.lsp if interested.

Take care,

=============================================================================

Gabriel Dos Reis <address@hidden> writes:

| root <address@hidden> writes:
| 
| | > Aha!  So, in fact we can just remove libspad.a from that list since
| | > nothing in GCL references symbols from libspad.a.  Is that correct?
| | 
| | correct? i don't know. the C connections and dependencies can be quite
| | subtle (e.g. PLF usage). i can't say without checking but at some time
| | we, the original axiom developers, or i, when recovering axiom, thought
| | that it was needed. i could be wrong.
| 
| We cannot remove libspad.a, because Axiom still needs the definition
| of bsdSignal -- which is in libspad.a.
| 
| I'm trying the other way that prompted my question earlier,
| i.e. remove cfuns-c.o and sockio-c.o and leave only libspad.a.

Which obviously does not work as Tim explained. src/interp/cfuns.lisp
references 'findString' (defined in src/lib/cfuns-c.c) but nothing
in the original GCL image needs it.  
It is odd that we cannot tell GCL "hey, here is an archive for you to
look in, in case I later load objects that need some symbols you cannot
find right now."

\start
Date: 04 Dec 2006 21:18:53 +0100
From: Gabriel Dos Reis
To: Camm Maguire
Subject: Re: libspad.a, cfuns-c.o sockio-c.c and friends

Camm Maguire writes:

| Greetings!  I think you are looking for the autoload functionality
| here.  Checkout lsp/gcl_auto_new.lsp if interested.

That is great!  Many thanks.

\start
Date: 05 Dec 2006 20:38:52 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: severe (!) bug in normalize

Dear all,

I just discovered a severe bug in normalize$EFSTRUC. It is probably the worst
thing I found so far.

with

 T :=t^(n^2)*(sqrt(1+t))^n

 normalize(T/eval(T, n=n-1))

gives sqrt(t+1). sum$SUMFS uses this method to check whether a function is
rational for Gosper, and thus returns completely false results, which are,
however, difficult to detect.

Waldek, am I right that you know normalize a little bit? If you do, PLEASE look
into this, it is a real show stopper for me.

\start
Date: 05 Dec 2006 21:18:20 +0100
From: Francois Maltey
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Dear Martin, and others...

> I just discovered a severe bug in normalize$EFSTRUC. It is probably the worst
> thing I found so far.
> 
> with
> 
>  T :=t^(n^2)*(sqrt(1+t))^n
> 
>  normalize(T/eval(T, n=n-1))
> 
> gives sqrt(t+1). sum$SUMFS uses this method to check whether a function is
> rational for Gosper, and thus returns completely false results, which are,
> however, difficult to detect.
> 
> Waldek, am I right that you know normalize a little bit? 
> If you do, PLEASE look into this, it is a real show stopper for me.

I'm testing some patchs in expr.spad.
On my today-version I get : 

(64) -> T := t^(n^2)*sqrt(1+t)^n
           2
          n   +-----+n
   (64)  t   \|t + 1
                                                     Type: Expression Integer
(65) -> T/subst (T, n=n-1)
          2n - 1 +-----+
   (65)  t      \|t + 1
                                                     Type: Expression Integer
(68) -> normalize (T/eval (T, n=n-1))
          +-----+  (2n - 1)log(t)
   (68)  \|t + 1 %e
                                                     Type: Expression Integer

Do you want this expr.spad ?


--=-=-=

LS1Db3B5cmlnaHQgKGMpIDE5OTEtMjAwMiwgVGhlIE51bWVyaWNhbCBBTGdvcml0aG1zIEdyb3Vw
IEx0ZC4KLS1BbGwgcmlnaHRzIHJlc2VydmVkLgotLQotLVJlZGlzdHJpYnV0aW9uIGFuZCB1c2Ug
aW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAotLW1vZGlmaWNhdGlv
biwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBh
cmUKLS1tZXQ6Ci0tCi0tICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3Qg
cmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQKLS0gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBj
b25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuCi0tCi0tICAgIC0gUmVkaXN0
cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmln
aHQKLS0gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93
aW5nIGRpc2NsYWltZXIgaW4KLS0gICAgICB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIg
bWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlCi0tICAgICAgZGlzdHJpYnV0aW9uLgotLQotLSAg
ICAtIE5laXRoZXIgdGhlIG5hbWUgb2YgVGhlIE51bWVyaWNhbCBBTGdvcml0aG1zIEdyb3VwIEx0
ZC4gbm9yIHRoZQotLSAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQg
dG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzCi0tICAgICAgZGVyaXZlZCBmcm9tIHRoaXMg
c29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uCi0tCi0t
VEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENP
TlRSSUJVVE9SUyAiQVMKLS1JUyIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElF
UywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQKLS1UTywgVEhFIElNUExJRUQgV0FSUkFOVElF
UyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEKLS1QQVJUSUNVTEFSIFBVUlBP
U0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgT1dORVIK
LS1PUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5D
SURFTlRBTCwgU1BFQ0lBTCwKLS1FWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAo
SU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sCi0tUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVU
RSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SCi0tUFJPRklUUzsgT1Ig
QlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBP
RgotLUxJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1Ig
VE9SVCAoSU5DTFVESU5HCi0tTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5Z
IFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTCi0tU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBP
RiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCgotLSBTUEFEIGZpbGVzIGZvciB0aGUg
ZnVuY3Rpb25hbCB3b3JsZCBzaG91bGQgYmUgY29tcGlsZWQgaW4gdGhlCi0tIGZvbGxvd2luZyBv
cmRlcjoKLS0KLS0gICBvcCAga2wgIGZzcGFjZSAgYWxnZnVuYyBlbGVtbnRyeSBjb21iZnVuYyBF
WFBSCgopYWJicmV2IGRvbWFpbiBFWFBSIEV4cHJlc3Npb24KKysgVG9wLWxldmVsIG1hdGhlbWF0
aWNhbCBleHByZXNzaW9ucworKyBBdXRob3I6IE1hbnVlbCBCcm9uc3RlaW4KKysgRGF0ZSBDcmVh
dGVkOiAxOSBKdWx5IDE5ODgKKysgRGF0ZSBMYXN0IFVwZGF0ZWQ6IE9jdG9iZXIgMTk5MyAoUC5H
aWFubmkpLCBGZWJydWFyeSAxOTk1IChNQikKKysgRGVzY3JpcHRpb246IEV4cHJlc3Npb25zIGlu
dm9sdmluZyBzeW1ib2xpYyBmdW5jdGlvbnMuCisrIEtleXdvcmRzOiBvcGVyYXRvciwga2VybmVs
LCBmdW5jdGlvbi4KRXhwcmVzc2lvbihSOk9yZGVyZWRTZXQpOiBFeHBvcnRzID09IEltcGxlbWVu
dGF0aW9uIHdoZXJlCiAgWiAgID09PiBJbnRlZ2VyCiAgUSAgID09PiBGcmFjdGlvbiBJbnRlZ2Vy
CiAgSyAgID09PiBLZXJuZWwgJQogIE1QICA9PT4gU3BhcnNlTXVsdGl2YXJpYXRlUG9seW5vbWlh
bChSLCBLKQogIEFGICA9PT4gQWxnZWJyYWljRnVuY3Rpb24oUiwgJSkKICBFRiAgPT0+IEVsZW1l
bnRhcnlGdW5jdGlvbihSLCAlKQogIENGICA9PT4gQ29tYmluYXRvcmlhbEZ1bmN0aW9uKFIsICUp
CiAgTEYgID09PiBMaW91dmlsbGlhbkZ1bmN0aW9uKFIsICUpCiAgQU4gID09PiBBbGdlYnJhaWNO
dW1iZXIKICBLQU4gPT0+IEtlcm5lbCBBTgogIEZTRiA9PT4gRnVuY3Rpb25hbFNwZWNpYWxGdW5j
dGlvbihSLCAlKQogIEVTRCA9PT4gRXhwcmVzc2lvblNwYWNlXyYoJSkKICBGU0QgPT0+IEZ1bmN0
aW9uU3BhY2VfJiglLCBSKQogIFNZTUJPTCA9PT4gIiVzeW1ib2wiCiAgQUxHT1AgID09PiAiJWFs
ZyIKICBQT1dFUiAgPT0+ICIlcG93ZXIiOjpTeW1ib2wKICBTVVAgICAgPT0+IFNwYXJzZVVuaXZh
cmlhdGVQb2x5bm9taWFsCiAgUkVDZXhwbz09PiBSZWNvcmQgKHBvd2VyZiA6ICUsIGV4cG9mIDog
JSkKCiAgRXhwb3J0cyA9PT4gRnVuY3Rpb25TcGFjZSBSIHdpdGgKICAgIGlmIFIgaGFzIEludGVn
cmFsRG9tYWluIHRoZW4KICAgICAgQWxnZWJyYWljYWxseUNsb3NlZEZ1bmN0aW9uU3BhY2UgUgog
ICAgICBUcmFuc2NlbmRlbnRhbEZ1bmN0aW9uQ2F0ZWdvcnkKICAgICAgQ29tYmluYXRvcmlhbE9w
c0NhdGVnb3J5CiAgICAgIExpb3V2aWxsaWFuRnVuY3Rpb25DYXRlZ29yeQogICAgICBTcGVjaWFs
RnVuY3Rpb25DYXRlZ29yeQogICAgICByZWR1Y2U6ICUgLT4gJQogICAgICAgICsrIHJlZHVjZShm
KSBzaW1wbGlmaWVzIGFsbCB0aGUgdW5yZWR1Y2VkIGFsZ2VicmFpYyBxdWFudGl0aWVzCiAgICAg
ICAgKysgcHJlc2VudCBpbiBmIGJ5IGFwcGx5aW5nIHRoZWlyIGRlZmluaW5nIHJlbGF0aW9ucy4K
ICAgICAgbnVtYmVyPzogJSAtPiBCb29sZWFuCiAgICAgICAgKysgbnVtYmVyPyhmKSB0ZXN0cyBp
ZiBmIGlzIHJhdGlvbmFsCiAgICAgIHNpbXBsaWZ5UG93ZXI6ICglLEludGVnZXIpIC0+ICUKICAg
ICAgICArKyBzaW1wbGlmeVBvd2VyPyhmLG4pIFx1bmRvY3VtZW50ZWR7fQogICAgICBpZiBSIGhh
cyBHY2REb21haW4gdGhlbgogICAgICAgIGZhY3RvclBvbHlub21pYWwgOiBTVVAgICUgLT4gRmFj
dG9yZWQgU1VQICUKICAgICAgICAgICArKyBmYWN0b3JQb2x5bm9taWFsKHApIFx1bmRvY3VtZW50
ZWR7fQogICAgICAgIHNxdWFyZUZyZWVQb2x5bm9taWFsIDogU1VQICUgLT4gRmFjdG9yZWQgU1VQ
ICUKICAgICAgICAgICArKyBzcXVhcmVGcmVlUG9seW5vbWlhbChwKSBcdW5kb2N1bWVudGVke30K
ICAgICAgaWYgUiBoYXMgUmV0cmFjdGFibGVUbyBJbnRlZ2VyIHRoZW4gUmV0cmFjdGFibGVUbyBB
TgoKICBJbXBsZW1lbnRhdGlvbiA9PT4gYWRkCiAgICBpbXBvcnQgS2VybmVsRnVuY3Rpb25zMihS
LCAlKQoKICAgIHJldE5vdFVuaXQgICAgIDogJSAtPiBSCiAgICByZXROb3RVbml0SWZDYW46ICUg
LT4gVW5pb24oUiwgImZhaWxlZCIpCgogICAgYmVsb25nPyBvcCA9PSB0cnVlCgogICAgcmV0Tm90
VW5pdCB4ID09CiAgICAgICh1IDo9IGNvbnN0YW50SWZDYW4oayA6PSByZXRyYWN0KHgpQEspKSBj
YXNlIFIgPT4gdTo6UgogICAgICBlcnJvciAiTm90IHJldHJhY3RhYmxlIgoKICAgIHJldE5vdFVu
aXRJZkNhbiB4ID09CiAgICAgIChyIDo9IHJldHJhY3RJZkNhbih4KUBVbmlvbihLLCJmYWlsZWQi
KSkgY2FzZSAiZmFpbGVkIiA9PiAiZmFpbGVkIgogICAgICBjb25zdGFudElmQ2FuKHI6OkspCgog
ICAgaWYgUiBoYXMgSW50ZWdyYWxEb21haW4gdGhlbgoKICAgICAgcmVkdWMgIDogKCUsIExpc3Qg
S2VybmVsICUpIC0+ICUKICAgICAgY29tbW9uayAgIDogKCUsICUpIC0+IExpc3QgSwogICAgICBj
b21tb25rMCAgOiAoTGlzdCBLLCBMaXN0IEspIC0+IExpc3QgSwogICAgICB0b3ByYXQgICAgOiAl
IC0+ICUKICAgICAgYWxna2VybmVsczogTGlzdCBLIC0+IExpc3QgSwogICAgICBldmwgICAgICAg
OiAoTVAsIEssIFNwYXJzZVVuaXZhcmlhdGVQb2x5bm9taWFsICUpIC0+IEZyYWN0aW9uIE1QCiAg
ICAgIGV2bDAgICAgICA6IChNUCwgSykgLT4gU3BhcnNlVW5pdmFyaWF0ZVBvbHlub21pYWwgRnJh
Y3Rpb24gTVAKCiAgICAgIGNvbnRhaW5zPyAgICAgICAgICAgICAgICA6IChTeW1ib2wsIExpc3Qg
SykgLT4gQm9vbGVhbgogICAgICBmaW5hbGl6ZSAgICAgICAgICAgICAgICAgOiAlICAtPiAlCgog
ICAgICBvbmx5T25lRXhwICAgICAgICAgICAgICAgOiAlICAtPiAlCiAgICAgIG9ubHlPbmVFeHBQ
b2wgICAgICAgICAgICA6IE1QIC0+ICUKICAgICAgb25seU9uZUV4cE1vbm9taWFsICAgICAgIDog
TVAgLT4gJQogICAgICBleHRyYWN0TG9nICAgICAgICAgICAgICAgOiAlICAtPiBMaXN0ICUgCgog
ICAgICBzaW1wbGlmeVBvd2VySW50ICAgICAgICAgOiAlICAtPiAlCiAgICAgIHNpbXBsaWZ5UG93
ZXJJbnRQb2wgICAgICA6IE1QIC0+IE1QCiAgICAgIHNpbXBsaWZ5UG93ZXJJbnRNb25vbWlhbCA6
IE1QIC0+IE1QCgogICAgICBjaGFuZ2VTaW5nbGVEZW5vbSAgICAgICAgOiAlIC0+ICUKICAgICAg
Y2hhbmdlU2luZ2xlRGVub21Mb29wICAgIDogKEssIE1QLCBMaXN0IE1QKSAtPiBMaXN0IE1QCiAg
ICAgIHNlYXJjaE51bWJlclBvd2VyICAgICAgICA6ICUgICAgICAtPiBMaXN0IFoKICAgICAgc2Vh
cmNoTnVtYmVyUG93ZXJTTVAgICAgIDogTVAgICAgIC0+IFoKICAgICAgZmN0UnRvWiAgICAgICAg
ICAgICAgICAgIDogUiAgICAgIC0+IFoKICAgICAgZnJvbVJlcFRvWiAgICAgICAgICAgICAgIDog
JSAgICAgIC0+IFVuaW9uKFosImZhaWxlZCIpCiAgICAgIGxpc3RDb2VmZiAgICAgICAgICAgICAg
ICA6IExpc3QgUiAtPiBMaXN0IFoKCiAgICAgIGxpc3RPZlBvd2VyICAgICAgICA6IExpc3QgSyAt
PiBMaXN0ICUKICAgICAgbGlzdE9mUG93ZXJMb29wICAgIDogKExpc3QgSywgTGlzdCAlKSAtPiBM
aXN0ICUKICAgICAgbGlzdE9mRXhwbyAgICAgICAgIDogTGlzdCAlIC0+IExpc3QgUkVDZXhwbwog
ICAgICBmaW5kRXhwbyAgICAgICAgICAgOiAoJSwgTGlzdCBSRUNleHBvKSAtPiBSRUNleHBvCiAg
ICAgIGxlc3NQb3dlciAgICAgICAgICA6ICUgLT4gJSAgLS0gYV5iKmFeYyA9IGFeKGIrYykgLS0g
KGFeYilebiA9IGFeKG5iKQogICAgICBsZXNzUG93ZXJTTVAgICAgICAgOiBNUCAtPiAlCiAgICAg
IGxlc3NQb3dlck1vbm9taWFsICA6IE1QIC0+ICUKCiAgICAgIFJlcCA6PSBGcmFjdGlvbiBNUAog
ICAgICAwICAgICAgICAgICAgICAgID09IDAkUmVwCiAgICAgIDEgICAgICAgICAgICAgICAgPT0g
MSRSZXAKLS0gICAgICBvbmU/IHggICAgICAgICAgID09IG9uZT8oeCkkUmVwCiAgICAgIG9uZT8g
eCAgICAgICAgICAgPT0gKHggPSAxKSRSZXAKICAgICAgemVybz8geCAgICAgICAgICA9PSB6ZXJv
Pyh4KSRSZXAKICAgICAgLSB4OiUgICAgICAgICAgICA9PSAtJFJlcCB4CiAgICAgIG46SW50ZWdl
ciAqIHg6JSAgPT0gbiAqJFJlcCB4CiAgICAgIGNvZXJjZShuOkludGVnZXIpID09ICBjb2VyY2Uo
bikkUmVwQFJlcDo6JQogICAgICB4OiUgKiB5OiUgICAgICAgID09IGZpbmFsaXplIHJlZHVjKHgg
KiRSZXAgeSwgY29tbW9uayh4LCB5KSkKICAgICAgeDolICsgeTolICAgICAgICA9PSBmaW5hbGl6
ZSByZWR1Yyh4ICskUmVwIHksIGNvbW1vbmsoeCwgeSkpCiAgICAgICh4OiUgLSB5OiUpOiUgICAg
PT0gZmluYWxpemUgcmVkdWMoeCAtJFJlcCB5LCBjb21tb25rKHgsIHkpKQogICAgICB4OiUgLyB5
OiUgICAgICAgID09IGZpbmFsaXplIHJlZHVjKHggLyRSZXAgeSwgY29tbW9uayh4LCB5KSkKCiAg
ICAgIGZyb21SZXBUb1ogeCA9PQogICAgICAgIHRvdGFsRGVncmVlKG51bWVyIHgpJE1QIH49IDAg
PT4gImZhaWxlZCIKICAgICAgICB0b3RhbERlZ3JlZShkZW5vbSB4KSRNUCB+PSAwID0+ICJmYWls
ZWQiCiAgICAgICAgbGVhZGluZ0NvZWZmaWNpZW50IGRlbm9tIHggfj0gMTo6UiA9PiAiZmFpbGVk
IgogICAgICAgIHJlcyA6PSBsZWFkaW5nQ29lZmZpY2llbnQgbnVtZXIgeAogICAgICAgIG4gOj0g
ZmN0UnRvWiByZXMKICAgICAgICBuOjpSIH49IHJlcyA9PiAiZmFpbGVkIgogICAgICAgIG4KCiAg
ICAgIG9ubHlPbmVFeHBQb2wgcCA9PSAKICAgICAgICBwPTAgPT4gMDo6TVA6OiUKICAgICAgICBt
IDo9IGxlYWRpbmdNb25vbWlhbCBwIAogICAgICAgIG9ubHlPbmVFeHBNb25vbWlhbCBtICskUmVw
IG9ubHlPbmVFeHBQb2wgKHJlZHVjdHVtIHApCgogICAgICBvbmx5T25lRXhwIHggPT0gb25seU9u
ZUV4cFBvbCBudW1lciB4IC8kUmVwIG9ubHlPbmVFeHBQb2wgZGVub20geAoKICAgICAgb25seU9u
ZUV4cE1vbm9taWFsIG0gPT0KICAgICAgICBsdiA6PSB2YXJpYWJsZXMgbSAKICAgICAgICBub3Qg
Y29udGFpbnM/ICgiZXhwIjo6U3ltYm9sLCBsdikgPT4gbTo6JQogICAgICAgIHAgOk1QIDo9IChs
ZWFkaW5nQ29lZmZpY2llbnQgbSk6Ok1QCiAgICAgICAgZXhwbyA6ICUgOj0gMDo6Ujo6JQogICAg
ICAgIGZvciBrIGluIGx2IHJlcGVhdAogICAgICAgICAgaWYgaXM/IChrLCAiZXhwIjo6U3ltYm9s
KQogICAgICAgICAgICB0aGVuIAogICAgICAgICAgICAgIGEgOj0gZmlyc3QgYXJndW1lbnQgayAK
ICAgICAgICAgICAgICBleHBvIDo9IGV4cG8gKyAoZGVncmVlKG0saykpOjpJbnRlZ2VyOjpSOjol
ICogYQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgIHAgOj0gKHAgKiRNUCAoazo6TVAp
KSAqKiRNUCBkZWdyZWUgKG0sIGspCiAgICAgICAgcmVzaW50IDogTGlzdCAlIDo9IGV4dHJhY3RM
b2cgZXhwbwogICAgICAgIG9wZXhwIDo9IG9wZXJhdG9yKCJleHAiOjpTeW1ib2wpJENvbW1vbk9w
ZXJhdG9ycwogICAgICAgIGV4cDEgOj0gbnVtZXIgKGV4cCByZXNpbnQuMikkRUYKICAgICAgICBy
ZXNpbnQuMSAqJFJlcCAocCAqJE1QIGV4cDEpOjolCgotLSBleHRyYWN0IG9ubHkgZXhwIChuKmxv
ZyBhKSBvdSBuIGVzdCBk6XRlcm1pbukuIAoKICAgICAgZXh0cmFjdExvZyBleHBvID09IAogICAg
ICAgIG91dHB1dCgiaW4iOjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNrYWdlCiAgICAgICAgb3V0cHV0
KGV4cG86Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKICAgICAgICBkZW5vbSBleHBvIH49IDE6
OlI6Ok1QID0+IFsxOjpSOjolLCBleHBvXQogICAgICAgIG5vdCAoUiBoYXMgUmV0cmFjdGFibGVU
byBJbnRlZ2VyKSA9PiBbMTo6Ujo6JSwgZXhwb10KICAgICAgICBudW1leHBvIDo9IG51bWVyIGV4
cG8KICAgICAgICBjc3QgOj0gMTo6Ujo6TVA6OiUKICAgICAgICBmb3IgayBpbiB2YXJpYWJsZXMg
bnVtZXhwbyByZXBlYXQKICAgICAgICAgIG91dHB1dCgiaW5uZXIiOjpPdXRwdXRGb3JtKSRPdXRw
dXRQYWNrYWdlCiAgICAgICAgICBvdXRwdXQoKHZhcmlhYmxlcyBudW1leHBvKTo6T3V0cHV0Rm9y
bSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgaWYgaXM/IChrLCAibG9nIjo6U3ltYm9sKSAKICAg
ICAgICAgICAgdGhlbiAKICAgICAgICAgICAgICBjc3QyIDo9IGNvZWZmaWNpZW50KG51bWV4cG8s
aywxKQogICAgICAgICAgICAgIGNzdDEgOj0gcmV0cmFjdElmQ2FuKGNzdDIpJE1QQFVuaW9uKElu
dGVnZXIsImZhaWxlZCIpIAogICAgICAgICAgICAgIGlmIGNzdDEgY2FzZSBJbnRlZ2VyIAogICAg
ICAgICAgICAgICAgdGhlbiAKICAgICAgICAgICAgICAgICAgbnVtZXhwbyA6PSBudW1leHBvIC0k
TVAgY3N0MTo6SW50ZWdlcjo6UiAqJE1QIGs6Ok1QCiAgICAgICAgICAgICAgICAgIGNzdCA6PSBm
aXJzdCBhcmd1bWVudCBrICoqIGNzdDE6OkludGVnZXIKICAgICAgICBbY3N0LCBudW1leHBvOjol
XQogCiAgICAgIGNoYW5nZVNpbmdsZURlbm9tIHggPT0KLS0tICAgICAgICBvdXRwdXQoIkluICA6
IGNoYW5nZVNpbmdsZURlbm9tIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQotLS0gICAgICAg
IG91dHB1dCh4OjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNrYWdlCiAgICAgICAgZGVuIDo9IGRlbm9t
IHgKICAgICAgICBsdiA6PSB2YXJpYWJsZXMgZGVuCiAgICAgICAgbm90IGNvbnRhaW5zPygiZXhw
Ijo6U3ltYm9sLGx2KSBfCiAgICAgICAgICBhbmQgbm90IGNvbnRhaW5zPygiJXBvd2VyIjo6U3lt
Ym9sLGx2KSA9PiAKLS0tICAgICAgICAgIG91dHB1dCgiRW5kMSA6IGNoYW5nZVNpbmdsZURlbm9t
Ijo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgeCAKICAgICAgICByZWR1Y3R1
bSBkZW4gPSAxOjpNUCA9PiAKLS0tICAgICAgICAgIG91dHB1dCgiRW5kMiA6IGNoYW5nZVNpbmds
ZURlbm9tIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgeAogICAgICAgIHJl
ZHVjdHVtIGRlbiB+PSAwOjpNUCA9PiAKLS0tICAgICAgICAgIG91dHB1dCgiRW5kMyA6IGNoYW5n
ZVNpbmdsZURlbm9tIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgeAogICAg
ICAgIHEgIDpNUCA6PSAxOjpNUAogICAgICAgIHByIDpNUCA6PSAobGVhZGluZ0NvZWZmaWNpZW50
IGRlbik6Ok1QCiAgICAgICAgcmVzIDogTGlzdCBNUCA6PSBbcHIsIHFdCiAgICAgICAgZm9yIGsg
aW4gdmFyaWFibGVzIGRlbiByZXBlYXQgCiAgICAgICAgICByZXMgOiBMaXN0IE1QIDo9IGNoYW5n
ZVNpbmdsZURlbm9tTG9vcCAoaywgZGVuLCByZXMpCiAgICAgICAgcnJlcyA6PSAobnVtZXIgeCAq
JE1QIHJlcy4yKSAvJFJlcCByZXMuMQotLS0gICAgICAgIG91dHB1dCgiRW5kNCA6IGNoYW5nZVNp
bmdsZURlbm9tIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQotLS0gICAgICAgIG91dHB1dCgi
RW5kNCA6IGNoYW5nZVNpbmdsZURlbm9tIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAg
ICAgIHJyZXMKICAgICAgICAKICAgICAgY2hhbmdlU2luZ2xlRGVub21Mb29wIChrLCBwLCByZXMp
ID09IAotLS0gICAgICAgIG91dHB1dCgiSW4gIDogY2hhbmdlU2luZ2xlRGVub21Mb29wIjo6T3V0
cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQotLS0gICAgICAgIG91dHB1dChrOjpPdXRwdXRGb3JtKSRP
dXRwdXRQYWNrYWdlCiAgICAgICAgaXM/IChrLCAiZXhwIjo6U3ltYm9sKSA9PiAKICAgICAgICAg
IG9wZXhwIDo9IG9wZXJhdG9yKCJleHAiOjpTeW1ib2wpJENvbW1vbk9wZXJhdG9ycwogICAgICAg
ICAgdG1wIDo9IG51bWVyIG9wZXhwICgtIGZpcnN0IGFyZ3VtZW50IGspCiAgICAgICAgICByZXMg
Oj0gW3Jlcy4xLCByZXMuMiAqIHRtcCAqKiRNUCBkZWdyZWUocCxrKV0KLS0tICAgICAgICAgIG91
dHB1dChyZXM6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKLS0tICAgICAgICAgIG91dHB1dCgi
RW5kMTogY2hhbmdlU2luZ2xlRGVub21Mb29wIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQog
ICAgICAgICAgcmVzCiAgICAgICAgaXM/KGssIiVwb3dlciI6OlN5bWJvbCkgPT4KLS0gICAgICAg
ICAgcmVzYyA6PSBmcm9tUmVwVG9aIChmaXJzdCBhcmd1bWVudCBrKQotLSAgICAgICAgICByZXNj
IGNhc2UgImZhaWxlZCIgPT4gCi0tICAgICAgICAgIHJlcyA6PSBbcmVzLjEgKiAoazo6TVApICoq
JE1QIGRlZ3JlZShwLGspLCByZXMuMl0KLS0tICAgICAgICAgICAgb3V0cHV0KHJlczo6T3V0cHV0
Rm9ybSkkT3V0cHV0UGFja2FnZQotLS0gICAgICAgICAgICBvdXRwdXQoIkVuZDI6IGNoYW5nZVNp
bmdsZURlbm9tTG9vcCI6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKLS0gICAgICAgICAgICBy
ZXMKICAgICAgICAgIG9wcG93IDo9IG9wZXJhdG9yKCIlcG93ZXIiOjpTeW1ib2wpJENvbW1vbk9w
ZXJhdG9ycwogICAgICAgICAgdG1wIDo9IG51bWVyIG9wcG93IFtmaXJzdCBhcmd1bWVudCBrLC0o
KGFyZ3VtZW50IGspLjIpXQogICAgICAgICAgcmVzIDo9IFtyZXMuMSwgcmVzLjIgKiRNUCB0bXAg
KiokTVAgZGVncmVlIChwICxrKV0KLS0tICAgICAgICAgIG91dHB1dChyZXM6Ok91dHB1dEZvcm0p
JE91dHB1dFBhY2thZ2UKLS0tICAgICAgICAgIG91dHB1dCgiRW5kMzogY2hhbmdlU2luZ2xlRGVu
b21Mb29wIjo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgcmVzIAogICAgICAg
IHJlcyA6PSBbcmVzLjEgKiAoazo6TVApICoqJE1QIGRlZ3JlZShwLGspLCByZXMuMl0KLS0tICAg
ICAgICBvdXRwdXQocmVzOjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNrYWdlCi0tLSAgICAgICAgb3V0
cHV0KCJFbmQ0OiBjaGFuZ2VTaW5nbGVEZW5vbUxvb3AiOjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNr
YWdlCiAgICAgICAgcmVzCgogICAgICBmaW5hbGl6ZSB4ID09CiAgICAgICAgcmVzIDo9IGNoYW5n
ZVNpbmdsZURlbm9tIHgKICAgICAgICByZXMgOj0gb25seU9uZUV4cCByZXMgICAgICAgICAgLS0g
ZXhwIChhKV5uICogZXhwIChiKV5tID0gZXhwIChuYSttYikKICAgICAgICByZXMgOj0gc2ltcGxp
ZnlQb3dlckludCByZXMgICAgLS0gKChwL3EpKmEpXnUgPXBedSAvIHFedSAqIGFedQogICAgICAg
IHJlcyA6PSBsZXNzUG93ZXIgcmVzICAgICAgICAgICAtLSAoYV5iKV5tICogKGFeYylebiA9IGFe
KG1iK25jKQogICAgICAgIHJlcwoKICAgICAgbnVtYmVyPyh4OiUpOkJvb2xlYW4gPT0KICAgICAg
ICBpZiBSIGhhcyBSZXRyYWN0YWJsZVRvKEludGVnZXIpIHRoZW4KICAgICAgICAgIGdyb3VuZD8o
eCkgb3IgKChyZXRyYWN0SWZDYW4oeClAVW5pb24oUSwiZmFpbGVkIikpIGNhc2UgUSkKICAgICAg
ICBlbHNlCiAgICAgICAgICBncm91bmQ/KHgpCgogICAgICBzaW1wbGlmeVBvd2VyKHg6JSxuOklu
dGVnZXIpOiUgPT0KICAgICAgICBrIDogTGlzdCBLIDo9IGtlcm5lbHMgeAogICAgICAgIGlzPyh4
LFBPV0VSKSA9PgogICAgICAgICAgLS0gTG9vayBmb3IgYSBwb3dlciBvZiBhIG51bWJlciBpbiBj
YXNlIHdlIGNhbiBkbyBhIHNpbXBsaWZpY2F0aW9uCiAgICAgICAgICBhcmdzIDogTGlzdCAlIDo9
IGFyZ3VtZW50IGZpcnN0IGsKICAgICAgICAgIG5vdCgjYXJncyA9IDIpID0+IGVycm9yICJUb28g
bWFueSBhcmd1bWVudHMgdG8gKioiCiAgICAgICAgICBudW1iZXI/KGFyZ3MuMSkgPT4KICAgICAg
ICAgICAgIHJlZHVjKChhcmdzLjEpICoqJFJlcCBuLCBhbGdrZXJuZWxzIGtlcm5lbHMgKGFyZ3Mu
MSkpKiooYXJncy4yKQogICAgICAgICAgKGZpcnN0IGFyZ3MpKioobipzZWNvbmQoYXJncykpCiAg
ICAgICAgbj0tMSA9PiAxL3gKICAgICAgICByZWR1Yyh4ICoqJFJlcCBuLCBhbGdrZXJuZWxzIGsp
CgogICAgICBzZWFyY2hOdW1iZXJQb3dlciB4ID09IAotLS0gICAgICAgIG91dHB1dCgiSW4gOiBz
ZWFyY2hOdW1iZXJQb3dlciI6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKICAgICAgICBuMSA6
PSBzZWFyY2hOdW1iZXJQb3dlclNNUCBudW1lciB4CiAgICAgICAgbjIgOj0gc2VhcmNoTnVtYmVy
UG93ZXJTTVAgZGVub20geAogICAgICAgIFtuMSwgbjJdCgogICAgICBzZWFyY2hOdW1iZXJQb3dl
clNNUCBwID09IAotLS0gICAgICAgIG91dHB1dCgiSW4gOiBzZWFyY2hOdW1iZXJQb3dlclNNUCI6
Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKICAgICAgICBsbCA6IExpc3QgSW50ZWdlciA6PSBs
aXN0Q29lZmYgKGNvZWZmaWNpZW50cyBwKSRNUAogICAgICAgIHRtcCA6PSBhYnMgcmVkdWNlIChn
Y2QkSW50ZWdlciwgbGwpCi0tLSAgICAgICAgb3V0cHV0KGxsOjpPdXRwdXRGb3JtKSRPdXRwdXRQ
YWNrYWdlCi0tLSAgICAgICAgb3V0cHV0KHRtcDo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQot
LS0gICAgICAgIG91dHB1dCgiRW5kOiBzZWFyY2hOdW1iZXJQb3dlclNNUCI6Ok91dHB1dEZvcm0p
JE91dHB1dFBhY2thZ2UKICAgICAgICB0bXAKICAgIAogICAgICBmY3RSdG9aIGMgPT0KLS0tICAg
ICAgICBvdXRwdXQoIkluIDogZmN0UnRvWiI6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKLS0t
ICAgICAgICBvdXRwdXQoYzo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgIG4gOiBJ
bnRlZ2VyIDo9IDEKICAgICAgICBpZiBSIGhhcyByZXRyYWN0SWZDYW4gOiBSIC0+IFVuaW9uKElu
dGVnZXIsImZhaWxlZCIpCiAgICAgICAgICB0aGVuCiAgICAgICAgICAgIG4xIDo9IChyZXRyYWN0
SWZDYW4gYylAVW5pb24oSW50ZWdlciwiZmFpbGVkIikKICAgICAgICAgICAgaWYgbjEgY2FzZSBJ
bnRlZ2VyIHRoZW4gbiA6PSBuMTo6SW50ZWdlcgogICAgICAgIG46OkludGVnZXIKCiAgICAgIGxp
c3RDb2VmZiBsID09IAotLS0gICAgICAgIG91dHB1dChsOjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNr
YWdlCiAgICAgICAgbnVsbCBsID0+IFtdCiAgICAgICAgY29ucyAoZmN0UnRvWiBmaXJzdCBsLCBs
aXN0Q29lZmYgcmVzdCBsKQogICAgICAgCiAgICAgIHg6JSAqKiBuOk5vbk5lZ2F0aXZlSW50ZWdl
ciA9PSB4ICoqIG46OkludGVnZXIKICAgICAgeDolICoqIG46UG9zaXRpdmVJbnRlZ2VyICAgID09
IHggKiogbjo6SW50ZWdlcgogICAgICB4OiUgKiogbjpJbnRlZ2VyICAgICAgICAgICAgPT0gCiAg
ICAgICAgbiA9IDAgPT4gMSQlCiAgICAgICAgbiA9IDEgPT4geAogICAgICAgIHNpbXBsaWZ5UG93
ZXIobnVtZXJhdG9yIHgsbiBwcmV0ZW5kIEludGVnZXIpIF8KICAgICAgICAgIC8gc2ltcGxpZnlQ
b3dlcihkZW5vbWluYXRvciB4LG4gcHJldGVuZCBJbnRlZ2VyKQoKICAgICAgeDolICoqIHk6JSA9
PSAKICAgICAgICBvcHBvdyA6PSBvcGVyYXRvcigiJXBvd2VyIjo6U3ltYm9sKSRDb21tb25PcGVy
YXRvcnMKLS0gY2FzZSAocC9xKmEpXnUgPSBwXnUgYV51IC8gcV51IGZvciBwIGFuZCBxIGludGVn
ZXIgYW5kID4gMAogICAgICAgIHBvc0NvZWZmIDogTGlzdCBJbnRlZ2VyIDo9IHNlYXJjaE51bWJl
clBvd2VyIHgKICAgICAgICBwb3NpdGl2ZUNvZWZmIDogJSA6PSAocG9zQ29lZmYuMSk6OlI6Ok1Q
IC8kUmVwIChwb3NDb2VmZi4yKTo6Ujo6TVAKLS0tICAgICAgICBvdXRwdXQoIkluIDogKioiOjpP
dXRwdXRGb3JtKSRPdXRwdXRQYWNrYWdlCi0tLSAgICAgICAgb3V0cHV0KHBvc2l0aXZlQ29lZmY6
Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKLS0gYXZvaWQgYSBsb29wIGluIHRoaXMgc2ltcGxp
ZmljYXRpb24KICAgICAgICAocG9zaXRpdmVDb2VmZiB+PSAxOjpSOjolKSBhbmQgKChwb3NDb2Vm
Zi4xKTo6Ujo6JSB+PSB4KSA9PgogICAgICAgICAgcmVzIDo9ICh4LyRSZXAgcG9zaXRpdmVDb2Vm
ZikqKnkKICAgICAgICAgIGlmIHBvc0NvZWZmLjEgfj0gMSB0aGVuIHJlcyA6PSBvcHBvdyBbKHBv
c0NvZWZmLjEpOjpSOjolLCB5XSAqIHJlcwogICAgICAgICAgaWYgcG9zQ29lZmYuMiB+PSAxIHRo
ZW4gcmVzIDo9IG9wcG93IFsocG9zQ29lZmYuMik6OlI6OiUsLXldICogcmVzCiAgICAgICAgICBy
ZXMKICAgICAgICBvcHBvdyBbeCwgeV0KCiAgICAgIHg6JSA8IHk6JSAgICAgICAgPT0geCA8JFJl
cCB5CiAgICAgIHg6JSA9IHk6JSAgICAgICAgPT0geCA9JFJlcCB5CiAgICAgIG51bWVyIHggICAg
ICAgICAgPT0gbnVtZXIoeCkkUmVwCiAgICAgIGRlbm9tIHggICAgICAgICAgPT0gZGVub20oeCkk
UmVwCiAgICAgIGNvZXJjZShwOk1QKTolICAgPT0gY29lcmNlKHApJFJlcAogICAgICByZWR1Y2Ug
eCAgICAgICAgID09IHJlZHVjKHgsIGFsZ2tlcm5lbHMga2VybmVscyB4KQogICAgICBjb21tb25r
KHgsIHkpICAgID09IGNvbW1vbmswKGFsZ2tlcm5lbHMga2VybmVscyB4LCBhbGdrZXJuZWxzIGtl
cm5lbHMgeSkKICAgICAgYWxna2VybmVscyBsICAgICA9PSBzZWxlY3RfIShoYXM/KG9wZXJhdG9y
ICMxLCBBTEdPUCksIGwpCiAgICAgIHRvcHJhdCBmID09IHJhdERlbm9tKGYsIGFsZ2tlcm5lbHMg
a2VybmVscyBmKSRBbGdlYnJhaWNNYW5pcHVsYXRpb25zKFIsJSkKCiAgICAgIHg6TVAgLyB5Ok1Q
ID09CiAgICAgICByZWR1Yyh4IC8kUmVwIHksY29tbW9uazAoYWxna2VybmVscyB2YXJpYWJsZXMg
eCxhbGdrZXJuZWxzIHZhcmlhYmxlcyB5KSkKCiAgICAgIGNvbnRhaW5zPyAob3AsIGxzKSA9PSAK
ICAgICAgICBudWxsIGxzID0+IGZhbHNlCi0tICAgICAgICBpcz8gKGZpcnN0IGxzLCAiJXBvd2Vy
Ijo6U3ltYm9sKSA9PiB0cnVlCiAgICAgICAgaXM/IChmaXJzdCBscywgb3ApID0+IHRydWUKICAg
ICAgICBjb250YWlucz8gKG9wLCByZXN0IGxzKQoKICAgICAgbGlzdE9mRXhwbyBsbCA9PSAKICAg
ICAgICBudWxsIGxsID0+IFtdCiAgICAgICAgeHggOiBSRUNleHBvIDo9IFtmaXJzdCBsbCwgMDo6
Ujo6JV0KICAgICAgICBjb25zICh4eCwgbGlzdE9mRXhwbyByZXN0IGxsKQoKICAgICAgbGlzdE9m
UG93ZXIgbHYgPT0gbGlzdE9mUG93ZXJMb29wIChsdiwgW10pCgogICAgICBsaXN0T2ZQb3dlckxv
b3AgKGxsLCByZXMpID09CiAgICAgICAgbnVsbCBsbCA9PiByZXMKICAgICAgICBub3QgaXM/IChm
aXJzdCBsbCwgIiVwb3dlciI6OlN5bWJvbCkgPT4gbGlzdE9mUG93ZXJMb29wIChyZXN0IGxsLCBy
ZXMpCiAgICAgICAgeCA6PSBhcmd1bWVudCBmaXJzdCBsbAogICAgICAgIG1lbWJlcj8gKGZpcnN0
IHgsIHJlcykgPT4gbGlzdE9mUG93ZXJMb29wIChyZXN0IGxsLCByZXMpCiAgICAgICAgbGlzdE9m
UG93ZXJMb29wIChyZXN0IGxsLCBjb25zIChmaXJzdCB4LCByZXMpKQoKICAgICAgbGVzc1Bvd2Vy
IHggPT0gCi0tLSAgICAgICAgb3V0cHV0KCJJbiAgOiBsZXNzUG93ZXIiOjpPdXRwdXRGb3JtKSRP
dXRwdXRQYWNrYWdlCi0tLSAgICAgICAgb3V0cHV0KHg6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2th
Z2UKICAgICAgICByZXMgOj0gbGVzc1Bvd2VyU01QIChudW1lciB4KSAvJFJlcCBsZXNzUG93ZXJT
TVAgKGRlbm9tIHgpCi0tLSAgICAgICAgb3V0cHV0KCJFbmQgOiBsZXNzUG93ZXIiOjpPdXRwdXRG
b3JtKSRPdXRwdXRQYWNrYWdlCiAgICAgICAgcmVzCgogICAgICBsZXNzUG93ZXJTTVAgcCA9PQot
LS0gICAgICAgIG91dHB1dCgiSW4gIDogbGVzc1Bvd2VyU01QIjo6T3V0cHV0Rm9ybSkkT3V0cHV0
UGFja2FnZQotLS0gICAgICAgIG91dHB1dChwOjpPdXRwdXRGb3JtKSRPdXRwdXRQYWNrYWdlCiAg
ICAgICAgcD0wID0+IDA6OiUKICAgICAgICBtIDo9IGxlYWRpbmdNb25vbWlhbCBwIAogICAgICAg
IHJlcyA6PSBsZXNzUG93ZXJNb25vbWlhbCBtICskUmVwIGxlc3NQb3dlclNNUCByZWR1Y3R1bSBw
Ci0tLSAgICAgICAgb3V0cHV0KCJFbmQgOiBsZXNzUG93ZXJTTVAiOjpPdXRwdXRGb3JtKSRPdXRw
dXRQYWNrYWdlCiAgICAgICAgcmVzIAogIAogICAgICBmaW5kRXhwbyAoeCwgbGV4cG8pID09CiAg
ICAgICAgKGZpcnN0IGxleHBvKS5wb3dlcmYgPSB4ID0+IGZpcnN0IGxleHBvCiAgICAgICAgZmlu
ZEV4cG8gKHgsIHJlc3QgbGV4cG8pCgogICAgICBsZXNzUG93ZXJNb25vbWlhbCBtID09Ci0tLSAg
ICAgICAgb3V0cHV0KCJJbiAgOiBsZXNzUG93ZXJNb25vbWlhbCI6Ok91dHB1dEZvcm0pJE91dHB1
dFBhY2thZ2UKLS0tICAgICAgICBvdXRwdXQobTo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQog
ICAgICAgIGx2IDo9IHZhcmlhYmxlcyBtIAogICAgICAgIG5vdCBjb250YWlucz8gKCIlcG93ZXIi
OjpTeW1ib2wsIGx2KSA9PiAKLS0tICAgICAgICAgIG91dHB1dCgiRW5kMTogbGVzc1Bvd2VyU01Q
Ijo6T3V0cHV0Rm9ybSkkT3V0cHV0UGFja2FnZQogICAgICAgICAgbTo6JQogICAgICAgIGxleHBv
IDo9IGxpc3RPZkV4cG8gbGlzdE9mUG93ZXIgbHYKICAgICAgICBwcjogTVAgOj0gKGxlYWRpbmdD
b2VmZmljaWVudCBtKTo6TVAKICAgICAgICBmb3IgayBpbiBsdiByZXBlYXQKICAgICAgICAgIG4g
Oj0gZGVncmVlKG0saykKICAgICAgICAgIGlmIGlzPyAoaywgIiVwb3dlciI6OlN5bWJvbCkKICAg
ICAgICAgICAgdGhlbiAKICAgICAgICAgICAgICBhcmdzIDo9IGFyZ3VtZW50IGsgCiAgICAgICAg
ICAgICAgcmVzIDo9IGZpbmRFeHBvIChmaXJzdCBhcmdzLCBsZXhwbykgCiAgICAgICAgICAgICAg
cmVzLmV4cG9mIDo9IHJlcy5leHBvZiArIG4gKiBhcmdzLjIKICAgICAgICAgICAgZWxzZSAKICAg
ICAgICAgICAgICBwciA6PSBwciAqJE1QIChrOjpNUCkgKiokTVAgbgogICAgICAgIG9wcG93IDo9
IG9wZXJhdG9yKCIlcG93ZXIiOjpTeW1ib2wpJENvbW1vbk9wZXJhdG9ycwogICAgICAgIHByMSA6
PSBwcjo6JQogICAgICAgIGZvciBrIGluIGxleHBvIHJlcGVhdAogICAgICAgICAgaWYgay5leHBv
ZiB+PSAwOjpSOjolIAogICAgICAgICAgICB0aGVuIAogICAgICAgICAgICAgIGV4cG9mZiA6PSBm
cm9tUmVwVG9aIChrLmV4cG9mKQogICAgICAgICAgICAgIGlmIGV4cG9mZiBjYXNlICJmYWlsZWQi
IAogICAgICAgICAgICAgICAgdGhlbiBwcjEgOj0gcHIxICokUmVwIG9wcG93IFtrLnBvd2VyZiwg
ay5leHBvZl0KICAgICAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgICAgIGV4cG9mZjIg
Oj0gZXhwb2ZmOjpJbnRlZ2VyCiAgICAgICAgICAgICAgICAgIHByMSA6PSBwcjEgKiRSZXAgay5w
b3dlcmYgKiokUmVwIGV4cG9mZjIKLS0tICAgICAgICBvdXRwdXQoIkVuZDI6IGxlc3NQb3dlclNN
UCI6Ok91dHB1dEZvcm0pJE91dHB1dFBhY2thZ2UKICAgICAgICBwcjEKICAgICAgICAKICAgICAg
c2ltcGxpZnlQb3dlckludCB4ID09IAogICAgICAgIHNpbXBsaWZ5UG93ZXJJbnRQb2wgbnVtZXIg
eCAvIHNpbXBsaWZ5UG93ZXJJbnRQb2wgZGVub20geAoKICAgICAgc2ltcGxpZnlQb3dlckludFBv
bCBwID09IAogICAgICAgIHA9MCA9PiAwOjpNUAogICAgICAgIG0gOj0gbGVhZGluZ01vbm9taWFs
IHAgCiAgICAgICAgc2ltcGxpZnlQb3dlckludE1vbm9taWFsIG0gKyBzaW1wbGlmeVBvd2VySW50
UG9sIChyZWR1Y3R1bSBwKQoKICAgICAgc2ltcGxpZnlQb3dlckludE1vbm9taWFsIG0gPT0KICAg
ICAgICBsdiA6PSB2YXJpYWJsZXMgbSAKICAgICAgICBub3QgY29udGFpbnM/ICgiJXBvd2VyIjo6
U3ltYm9sLCBsdikgPT4gbQogICAgICAgIG9wcG93IDo9IG9wZXJhdG9yKCIlcG93ZXIiOjpTeW1i
b2wpJENvbW1vbk9wZXJhdG9ycwogICAgICAgIHByIDpNUCA6PSAobGVhZGluZ0NvZWZmaWNpZW50
IG0pOjpNUAogICAgICAgIGZvciBrIGluIGx2IHJlcGVhdAogICAgICAgICAgaWYgaXM/IChrLCAi
JXBvd2VyIjo6U3ltYm9sKQogICAgICAgICAgICB0aGVuIAogICAgICAgICAgICAgIG4gOj0gZGVn
cmVlKG0sayk6OkludGVnZXI6OlI6OiUKICAgICAgICAgICAgICBhcmdzIDo9IGFyZ3VtZW50IGsg
CiAgICAgICAgICAgICAgcHIgOj0gcHIgKiBudW1lciAob3Bwb3cgW2FyZ3MuMSwgbiAqIGFyZ3Mu
Ml0pCiAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgICAgcHIgOj0gcHI6Ok1QICogazo6TVAg
KiokTVAgZGVncmVlIChtLCBrKQogICAgICAgIHByIAoKLS0gc2luY2Ugd2UgdXNlIHRoZSByZWR1
Y3Rpb24gZnJvbSBGUkFDIFNNUCB3aGljaCBhc3NzdW1lcyB0aGF0IHRoZQotLSB2YXJpYWJsZXMg
YXJlIGluZGVwZW5kZW50LCB3ZSBtdXN0IHJlbW92ZSBhbGdlYnJhaWMgZnJvbSB0aGUgZGVub21p
bmF0b3JzCiAgICAgIHJlZHVjZWRTeXN0ZW0obTpNYXRyaXggJSk6TWF0cml4KFIpID09CiAgICAg
ICAgbW06TWF0cml4KE1QKSA6PSByZWR1Y2VkU3lzdGVtKG1hcCh0b3ByYXQsIG0pKSRSZXAKICAg
ICAgICByZWR1Y2VkU3lzdGVtKG1tKSRNUAoKLS0gc2luY2Ugd2UgdXNlIHRoZSByZWR1Y3Rpb24g
ZnJvbSBGUkFDIFNNUCB3aGljaCBhc3NzdW1lcyB0aGF0IHRoZQotLSB2YXJpYWJsZXMgYXJlIGlu
ZGVwZW5kZW50LCB3ZSBtdXN0IHJlbW92ZSBhbGdlYnJhaWMgZnJvbSB0aGUgZGVub21pbmF0b3Jz
CiAgICAgIHJlZHVjZWRTeXN0ZW0obTpNYXRyaXggJSwgdjpWZWN0b3IgJSk6CiAgICAgICBSZWNv
cmQobWF0Ok1hdHJpeCBSLCB2ZWM6VmVjdG9yIFIpID09CiAgICAgICAgcjpSZWNvcmQobWF0Ok1h
dHJpeCBNUCwgdmVjOlZlY3RvciBNUCkgOj0KICAgICAgICAgIHJlZHVjZWRTeXN0ZW0obWFwKHRv
cHJhdCwgbSksIG1hcCh0b3ByYXQsIHYpKSRSZXAKICAgICAgICByZWR1Y2VkU3lzdGVtKHIubWF0
LCByLnZlYykkTVAKCi0tIFRoZSByZXN1bHQgTVVTVCBiZSBsZWZ0IHNvcnRlZCBkZWVwZXN0IGZp
cnN0ICAgTUIgMy85MAogICAgICBjb21tb25rMCh4LCB5KSA9PQogICAgICAgIGFucyA6PSBlbXB0
eSgpJExpc3QoSykKICAgICAgICBmb3IgayBpbiByZXZlcnNlXyEgeCByZXBlYXQgaWYgbWVtYmVy
PyhrLCB5KSB0aGVuIGFucyA6PSBjb25jYXQoaywgYW5zKQogICAgICAgIGFucwoKICAgICAgcm9v
dE9mKHg6U3BhcnNlVW5pdmFyaWF0ZVBvbHlub21pYWwgJSwgdjpTeW1ib2wpID09IHJvb3RPZih4
LHYpJEFGCiAgICAgIHBpKCkgICAgICAgICAgICAgICAgICAgICAgPT0gcGkoKSRFRgogICAgICBl
eHAgeCAgICAgICAgICAgICAgICAgICAgID09IGV4cCh4KSRFRgogICAgICBsb2cgeCAgICAgICAg
ICAgICAgICAgICAgID09IGxvZyh4KSRFRgogICAgICBzaW4geCAgICAgICAgICAgICAgICAgICAg
ID09IHNpbih4KSRFRgogICAgICBjb3MgeCAgICAgICAgICAgICAgICAgICAgID09IGNvcyh4KSRF
RgogICAgICB0YW4geCAgICAgICAgICAgICAgICAgICAgID09IHRhbih4KSRFRgogICAgICBjb3Qg
eCAgICAgICAgICAgICAgICAgICAgID09IGNvdCh4KSRFRgogICAgICBzZWMgeCAgICAgICAgICAg
ICAgICAgICAgID09IHNlYyh4KSRFRgogICAgICBjc2MgeCAgICAgICAgICAgICAgICAgICAgID09
IGNzYyh4KSRFRgogICAgICBhc2luIHggICAgICAgICAgICAgICAgICAgID09IGFzaW4oeCkkRUYK
ICAgICAgYWNvcyB4ICAgICAgICAgICAgICAgICAgICA9PSBhY29zKHgpJEVGCiAgICAgIGF0YW4g
eCAgICAgICAgICAgICAgICAgICAgPT0gYXRhbih4KSRFRgogICAgICBhY290IHggICAgICAgICAg
ICAgICAgICAgID09IGFjb3QoeCkkRUYKICAgICAgYXNlYyB4ICAgICAgICAgICAgICAgICAgICA9
PSBhc2VjKHgpJEVGCiAgICAgIGFjc2MgeCAgICAgICAgICAgICAgICAgICAgPT0gYWNzYyh4KSRF
RgogICAgICBzaW5oIHggICAgICAgICAgICAgICAgICAgID09IHNpbmgoeCkkRUYKICAgICAgY29z
aCB4ICAgICAgICAgICAgICAgICAgICA9PSBjb3NoKHgpJEVGCiAgICAgIHRhbmggeCAgICAgICAg
ICAgICAgICAgICAgPT0gdGFuaCh4KSRFRgogICAgICBjb3RoIHggICAgICAgICAgICAgICAgICAg
ID09IGNvdGgoeCkkRUYKICAgICAgc2VjaCB4ICAgICAgICAgICAgICAgICAgICA9PSBzZWNoKHgp
JEVGCiAgICAgIGNzY2ggeCAgICAgICAgICAgICAgICAgICAgPT0gY3NjaCh4KSRFRgogICAgICBh
c2luaCB4ICAgICAgICAgICAgICAgICAgID09IGFzaW5oKHgpJEVGCiAgICAgIGFjb3NoIHggICAg
ICAgICAgICAgICAgICAgPT0gYWNvc2goeCkkRUYKICAgICAgYXRhbmggeCAgICAgICAgICAgICAg
ICAgICA9PSBhdGFuaCh4KSRFRgogICAgICBhY290aCB4ICAgICAgICAgICAgICAgICAgID09IGFj
b3RoKHgpJEVGCiAgICAgIGFzZWNoIHggICAgICAgICAgICAgICAgICAgPT0gYXNlY2goeCkkRUYK
ICAgICAgYWNzY2ggeCAgICAgICAgICAgICAgICAgICA9PSBhY3NjaCh4KSRFRgoKICAgICAgYWJz
IHggICAgICAgICAgICAgICAgICAgICA9PSBhYnMoeCkkRlNGCiAgICAgIEdhbW1hIHggICAgICAg
ICAgICAgICAgICAgPT0gR2FtbWEoeCkkRlNGCiAgICAgIEdhbW1hKGEsIHgpICAgICAgICAgICAg
ICAgPT0gR2FtbWEoYSwgeCkkRlNGCiAgICAgIEJldGEoeCx5KSAgICAgICAgICAgICAgICAgPT0g
QmV0YSh4LHkpJEZTRgogICAgICBkaWdhbW1hIHggICAgICAgICAgICAgICAgID09IGRpZ2FtbWEo
eCkkRlNGCiAgICAgIHBvbHlnYW1tYShrLHgpICAgICAgICAgICAgPT0gcG9seWdhbW1hKGsseCkk
RlNGCiAgICAgIGJlc3NlbEoodix4KSAgICAgICAgICAgICAgPT0gYmVzc2VsSih2LHgpJEZTRgog
ICAgICBiZXNzZWxZKHYseCkgICAgICAgICAgICAgID09IGJlc3NlbFkodix4KSRGU0YKICAgICAg
YmVzc2VsSSh2LHgpICAgICAgICAgICAgICA9PSBiZXNzZWxJKHYseCkkRlNGCiAgICAgIGJlc3Nl
bEsodix4KSAgICAgICAgICAgICAgPT0gYmVzc2VsSyh2LHgpJEZTRgogICAgICBhaXJ5QWkgeCAg
ICAgICAgICAgICAgICAgID09IGFpcnlBaSh4KSRGU0YKICAgICAgYWlyeUJpIHggICAgICAgICAg
ICAgICAgICA9PSBhaXJ5QmkoeCkkRlNGCgotLSAgICAgIHg6JSAqKiB5OiUgICAgICAgICAgICAg
ICAgPT0geCAqKiRDRiB5CiAgICAgIGZhY3RvcmlhbCB4ICAgICAgICAgICAgICAgPT0gZmFjdG9y
aWFsKHgpJENGCiAgICAgIGJpbm9taWFsKG4sIG0pICAgICAgICAgICAgPT0gYmlub21pYWwobiwg
bSkkQ0YKICAgICAgcGVybXV0YXRpb24obiwgbSkgICAgICAgICA9PSBwZXJtdXRhdGlvbihuLCBt
KSRDRgogICAgICBmYWN0b3JpYWxzIHggICAgICAgICAgICAgID09IGZhY3RvcmlhbHMoeCkkQ0YK
ICAgICAgZmFjdG9yaWFscyh4LCBuKSAgICAgICAgICA9PSBmYWN0b3JpYWxzKHgsIG4pJENGCiAg
ICAgIHN1bW1hdGlvbih4OiUsIG46U3ltYm9sKSAgICAgICAgICAgPT0gc3VtbWF0aW9uKHgsIG4p
JENGCiAgICAgIHN1bW1hdGlvbih4OiUsIHM6U2VnbWVudEJpbmRpbmcgJSkgPT0gc3VtbWF0aW9u
KHgsIHMpJENGCiAgICAgIHByb2R1Y3QoeDolLCBuOlN5bWJvbCkgICAgICAgICAgICAgPT0gcHJv
ZHVjdCh4LCBuKSRDRgogICAgICBwcm9kdWN0KHg6JSwgczpTZWdtZW50QmluZGluZyAlKSAgID09
IHByb2R1Y3QoeCwgcykkQ0YKCiAgICAgIGVyZiB4ICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPT0gZXJmKHgpJExGCiAgICAgIEVpIHggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PT0gRWkoeCkkTEYKICAgICAgU2kgeCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PSBT
aSh4KSRMRgogICAgICBDaSB4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09IENpKHgp
JExGCiAgICAgIGxpIHggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT0gbGkoeCkkTEYK
ICAgICAgZGlsb2cgeCAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PSBkaWxvZyh4KSRMRgog
ICAgICBpbnRlZ3JhbCh4OiUsIG46U3ltYm9sKSAgICAgICAgICAgID09IGludGVncmFsKHgsIG4p
JExGCiAgICAgIGludGVncmFsKHg6JSwgczpTZWdtZW50QmluZGluZyAlKSAgPT0gaW50ZWdyYWwo
eCwgcykkTEYKCiAgICAgIG9wZXJhdG9yIG9wID09CiAgICAgICAgYmVsb25nPyhvcCkkQUYgID0+
IG9wZXJhdG9yKG9wKSRBRgogICAgICAgIGJlbG9uZz8ob3ApJEVGICA9PiBvcGVyYXRvcihvcCkk
RUYKICAgICAgICBiZWxvbmc/KG9wKSRDRiAgPT4gb3BlcmF0b3Iob3ApJENGCiAgICAgICAgYmVs
b25nPyhvcCkkTEYgID0+IG9wZXJhdG9yKG9wKSRMRgogICAgICAgIGJlbG9uZz8ob3ApJEZTRiA9
PiBvcGVyYXRvcihvcCkkRlNGCiAgICAgICAgYmVsb25nPyhvcCkkRlNEID0+IG9wZXJhdG9yKG9w
KSRGU0QKICAgICAgICBiZWxvbmc/KG9wKSRFU0QgPT4gb3BlcmF0b3Iob3ApJEVTRAogICAgICAg
IG51bGxhcnk/IG9wIGFuZCBoYXM/KG9wLCBTWU1CT0wpID0+IG9wZXJhdG9yKGtlcm5lbChuYW1l
IG9wKSRLKQogICAgICAgIChuIDo9IGFyaXR5IG9wKSBjYXNlICJmYWlsZWQiID0+IG9wZXJhdG9y
IG5hbWUgb3AKICAgICAgICBvcGVyYXRvcihuYW1lIG9wLCBuOjpOb25OZWdhdGl2ZUludGVnZXIp
CgogICAgICByZWR1Yyh4LCBsKSA9PQogICAgICAgIGZvciBrIGluIGwgcmVwZWF0CiAgICAgICAg
ICBwIDo9IG1pblBvbHkgawogICAgICAgICAgeCA6PSBldmwobnVtZXIgeCwgaywgcCkgLyRSZXAg
ZXZsKGRlbm9tIHgsIGssIHApCiAgICAgICAgeAoKICAgICAgZXZsMChwLCBrKSA9PQogICAgICAg
IG51bWVyIHVuaXZhcmlhdGUocDo6RnJhY3Rpb24oTVApLAogICAgICAgICAgICAgICAgICAgICBr
KSRQb2x5bm9taWFsQ2F0ZWdvcnlRdW90aWVudEZ1bmN0aW9ucyhJbmRleGVkRXhwb25lbnRzIEss
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIEssUixNUCxGcmFjdGlvbiBNUCkKCiAgICAgIC0tIHVzZXMgc29tZSBvcGVyYXRpb25zIGZy
b20gUmVwIGluc3RlYWQgb2YgJSBpbiBvcmRlciBub3QgdG8KICAgICAgLS0gcmVkdWNlIHJlY3Vy
c2l2ZWx5IGR1cmluZyB0aG9zZSBvcGVyYXRpb25zLgogICAgICBldmwocCwgaywgbSkgPT0KICAg
ICAgICBkZWdyZWUocCwgaykgPCBkZWdyZWUgbSA9PiBwOjpGcmFjdGlvbihNUCkKICAgICAgICAo
KChldmwwKHAsIGspIHByZXRlbmQgU3BhcnNlVW5pdmFyaWF0ZVBvbHlub21pYWwoJCkpIHJlbSBt
KQogICAgICAgICAgIHByZXRlbmQgU3BhcnNlVW5pdmFyaWF0ZVBvbHlub21pYWwgRnJhY3Rpb24g
TVApKGs6Ok1QOjpGcmFjdGlvbihNUCkpCgogICAgICBpZiBSIGhhcyBHY2REb21haW4gdGhlbgog
ICAgICAgIG5vYWxnPzogU1VQICUgLT4gQm9vbGVhbgoKICAgICAgICBub2FsZz8gcCA9PQogICAg
ICAgICAgd2hpbGUgcCBePSAwIHJlcGVhdAogICAgICAgICAgICBub3QgZW1wdHk/IGFsZ2tlcm5l
bHMga2VybmVscyBsZWFkaW5nQ29lZmZpY2llbnQgcCA9PiByZXR1cm4gZmFsc2UKICAgICAgICAg
ICAgcCA6PSByZWR1Y3R1bSBwCiAgICAgICAgICB0cnVlCgogICAgICAgIGdjZFBvbHlub21pYWwo
cDpTVVAgJSwgcTpTVVAgJSkgPT0KICAgICAgICAgIG5vYWxnPyBwIGFuZCBub2FsZz8gcSA9PiBn
Y2RQb2x5bm9taWFsKHAsIHEpJFJlcAogICAgICAgICAgZ2NkUG9seW5vbWlhbChwLCBxKSRHY2RE
b21haW5fJiglKQoKICAgICAgICBmYWN0b3JQb2x5bm9taWFsKHg6U1VQICUpIDogRmFjdG9yZWQg
U1VQICUgPT0KICAgICAgICAgIHVmOj0gZmFjdG9yKHggcHJldGVuZCBTVVAoUmVwKSkkU3VwRnJh
Y3Rpb25GYWN0b3JpemVyKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBJbmRleGVkRXhwb25lbnRzIEssSyxSLE1QKQogICAgICAgICAgdWYgcHJldGVuZCBGYWN0b3Jl
ZCBTVVAgJQoKICAgICAgICBzcXVhcmVGcmVlUG9seW5vbWlhbCh4OlNVUCAlKSA6IEZhY3RvcmVk
IFNVUCAlID09CiAgICAgICAgICB1Zjo9IHNxdWFyZUZyZWUoeCBwcmV0ZW5kIFNVUChSZXApKSRT
dXBGcmFjdGlvbkZhY3Rvcml6ZXIoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIEluZGV4ZWRFeHBvbmVudHMgSyxLLFIsTVApCiAgICAgICAgICB1ZiBwcmV0ZW5kIEZh
Y3RvcmVkIFNVUCAlCgogICAgICBpZiBSIGlzIEFOIHRoZW4KICAgICAgICAtLSB0aGlzIGlzIHRv
IGZvcmNlIHRoZSBjb2VyY2lvbiBSIC0+IEVYUFIgUiB0byBiZSB1c2VkCiAgICAgICAgLS0gaW5z
dGVhZCBvZiB0aGUgY29lcmNpb29uIEFOIC0+IEVYUFIgUiB3aGljaCBsb29wcy4KICAgICAgICAt
LSBzaW1wbGVyIGxvb2tpbmcgY29kZSB3aWxsIGZhaWwhIE1CIDEwLzkxCiAgICAgICAgY29lcmNl
KHg6QU4pOiUgPT0gKG1vbm9taWFsKHgsIDAkSW5kZXhlZEV4cG9uZW50cyhLKSkkTVApOjolCgog
ICAgICBpZiAoUiBoYXMgUmV0cmFjdGFibGVUbyBJbnRlZ2VyKSB0aGVuCiAgICAgICAgeDolICoq
IHI6USAgICAgICAgICAgICAgICAgICAgICAgICAgID09IHggKiokQUYgcgogICAgICAgIG1pblBv
bHkgayAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PSBtaW5Qb2x5KGspJEFGCiAgICAgICAg
ZGVmaW5pbmdQb2x5bm9taWFsIHggICAgICAgICAgICAgICAgID09IGRlZmluaW5nUG9seW5vbWlh
bCh4KSRBRgogICAgICAgIHJldHJhY3QoeDolKTpRICAgICAgICAgICAgICAgICAgICAgICA9PSBy
ZXRyYWN0KHgpJFJlcAogICAgICAgIHJldHJhY3RJZkNhbih4OiUpOlVuaW9uKFEsICJmYWlsZWQi
KSA9PSByZXRyYWN0SWZDYW4oeCkkUmVwCgogICAgICAgIGlmIG5vdChSIGlzIEFOKSB0aGVuCiAg
ICAgICAgICBrMmV4cHIgIDogS0FOIC0+ICUKICAgICAgICAgIHNtcDJleHByOiBTcGFyc2VNdWx0
aXZhcmlhdGVQb2x5bm9taWFsKEludGVnZXIsIEtBTikgLT4gJQogICAgICAgICAgUjJBTiAgICA6
IFIgIC0+IFVuaW9uKEFOLCAiZmFpbGVkIikKICAgICAgICAgIGsyYW4gICAgOiBLICAtPiBVbmlv
bihBTiwgImZhaWxlZCIpCiAgICAgICAgICBzbXAyYW4gIDogTVAgLT4gVW5pb24oQU4sICJmYWls
ZWQiKQoKCiAgICAgICAgICBjb2VyY2UoeDpBTik6JSA9PSBzbXAyZXhwcihudW1lciB4KSAvIHNt
cDJleHByKGRlbm9tIHgpCiAgICAgICAgICBrMmV4cHIgayAgICAgICA9PSBtYXAoIzE6OiUsIGsp
JEV4cHJlc3Npb25TcGFjZUZ1bmN0aW9uczIoQU4sICUpCgogICAgICAgICAgc21wMmV4cHIgcCA9
PQogICAgICAgICAgICBtYXAoazJleHByLCMxOjolLHApJFBvbHlub21pYWxDYXRlZ29yeUxpZnRp
bmcoSW5kZXhlZEV4cG9uZW50cyBLQU4sCiAgICAgICAgICAgICAgICAgICBLQU4sIEludGVnZXIs
IFNwYXJzZU11bHRpdmFyaWF0ZVBvbHlub21pYWwoSW50ZWdlciwgS0FOKSwgJSkKCiAgICAgICAg
ICByZXRyYWN0SWZDYW4oeDolKTpVbmlvbihBTiwgImZhaWxlZCIpID09CiAgICAgICAgICAgICgo
bjo9IHNtcDJhbiBudW1lciB4KSBjYXNlIEFOKSBhbmQgKChkOj0gc21wMmFuIGRlbm9tIHgpIGNh
c2UgQU4pCiAgICAgICAgICAgICAgICAgPT4gKG46OkFOKSAvIChkOjpBTikKICAgICAgICAgICAg
ImZhaWxlZCIKCiAgICAgICAgICBSMkFOIHIgPT0KICAgICAgICAgICAgKHUgOj0gcmV0cmFjdElm
Q2FuKHI6OiUpQFVuaW9uKFEsICJmYWlsZWQiKSkgY2FzZSBRID0+IHU6OlE6OkFOCiAgICAgICAg
ICAgICJmYWlsZWQiCgogICAgICAgICAgazJhbiBrID09CiAgICAgICAgICAgIG5vdChiZWxvbmc/
KG9wIDo9IG9wZXJhdG9yIGspJEFOKSA9PiAiZmFpbGVkIgogICAgICAgICAgICBhcmc6TGlzdChB
TikgOj0gZW1wdHkoKQogICAgICAgICAgICBmb3IgeCBpbiBhcmd1bWVudCBrIHJlcGVhdAogICAg
ICAgICAgICAgIGlmIChhIDo9IHJldHJhY3RJZkNhbih4KUBVbmlvbihBTiwgImZhaWxlZCIpKSBj
YXNlICJmYWlsZWQiIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAiZmFpbGVkIgogICAgICAg
ICAgICAgIGVsc2UgYXJnIDo9IGNvbmNhdChhOjpBTiwgYXJnKQogICAgICAgICAgICAob3BlcmF0
b3Iob3ApJEFOKSByZXZlcnNlXyEoYXJnKQoKICAgICAgICAgIHNtcDJhbiBwID09CiAgICAgICAg
ICAgICh4MSA6PSBtYWluVmFyaWFibGUgcCkgY2FzZSAiZmFpbGVkIiA9PiBSMkFOIGxlYWRpbmdD
b2VmZmljaWVudCBwCiAgICAgICAgICAgIHVwIDo9IHVuaXZhcmlhdGUocCwgayA6PSB4MTo6SykK
ICAgICAgICAgICAgKHQgIDo9IGsyYW4gaykgY2FzZSAiZmFpbGVkIiA9PiAiZmFpbGVkIgogICAg
ICAgICAgICBhbnM6QU4gOj0gMAogICAgICAgICAgICB3aGlsZSBub3QgZ3JvdW5kPyB1cCByZXBl
YXQKICAgICAgICAgICAgICAoYzo9c21wMmFuIGxlYWRpbmdDb2VmZmljaWVudCB1cCkgY2FzZSAi
ZmFpbGVkIiA9PiByZXR1cm4iZmFpbGVkIgogICAgICAgICAgICAgIGFucyA6PSBhbnMgKyAoYzo6
QU4pICogKHQ6OkFOKSAqKiAoZGVncmVlIHVwKQogICAgICAgICAgICAgIHVwICA6PSByZWR1Y3R1
bSB1cAogICAgICAgICAgICAoYyA6PSBzbXAyYW4gbGVhZGluZ0NvZWZmaWNpZW50IHVwKSBjYXNl
ICJmYWlsZWQiID0+ICJmYWlsZWQiCiAgICAgICAgICAgIGFucyArIGM6OkFOCgogICAgICBpZiBS
IGhhcyBDb252ZXJ0aWJsZVRvIElucHV0Rm9ybSB0aGVuCiAgICAgICAgY29udmVydCh4OiUpOklu
cHV0Rm9ybSA9PSBjb252ZXJ0KHgpJFJlcAogICAgICAgIGltcG9ydCBNYWtlVW5hcnlDb21waWxl
ZEZ1bmN0aW9uKCUsICUsICUpCiAgICAgICAgZXZhbChmOiUsIG9wOiBCYXNpY09wZXJhdG9yLCBn
OiUsIHg6U3ltYm9sKTolID09IAogICAgICAgICAgZXZhbChmLFtvcF0sW2ddLHgpCiAgICAgICAg
ZXZhbChmOiUsIGxzOkxpc3QgQmFzaWNPcGVyYXRvciwgbGc6TGlzdCAlLCB4OlN5bWJvbCkgPT0K
ICAgICAgICAgIC0tIGhhbmRsZSBzdWJzcmNpcHRlZCBzeW1ib2xzIGJ5IHJlbmFtaW5nIC0+IGV2
YWwgLT4gcmVuYW1pbmcgYmFjawogICAgICAgICAgbGxzeW06TGlzdCBMaXN0IFN5bWJvbDo9W3Zh
cmlhYmxlcyBnIGZvciBnIGluIGxnXQogICAgICAgICAgbHN5bTpMaXN0IFN5bWJvbDo9IHJlbW92
ZUR1cGxpY2F0ZXMgY29uY2F0IGxsc3ltCiAgICAgICAgICBsc2Q6TGlzdCBTeW1ib2w6PXNlbGVj
dCAoc2NyaXB0ZWQ/LGxzeW0pCiAgICAgICAgICBlbXB0eT8gbHNkPT4gZXZhbChmLGxzLFtjb21w
aWxlZEZ1bmN0aW9uKGcsIHgpIGZvciBnIGluIGxnXSkKICAgICAgICAgIG5zOkxpc3QgU3ltYm9s
Oj1bbmV3KCkkU3ltYm9sIGZvciBpIGluIGxzZF0KICAgICAgICAgIGxmb3J3YXJkU3ViczpMaXN0
IEVxdWF0aW9uICUgOj0gXwogICAgICAgICAgICBbKGk6OiUpPSAoajo6JSkgZm9yIGkgaW4gbHNk
IGZvciBqIGluIG5zXQogICAgICAgICAgbGJhY2t3YXJkU3ViczpMaXN0IEVxdWF0aW9uICUgOj0g
XwogICAgICAgICAgICBbKGo6OiUpPSAoaTo6JSkgZm9yIGkgaW4gbHNkIGZvciBqIGluIG5zXQog
ICAgICAgICAgbmxnOkxpc3QgJSA6PVtzdWJzdChnLGxmb3J3YXJkU3VicykgZm9yIGcgaW4gbGdd
CiAgICAgICAgICByZXM6JSA6PWV2YWwoZiwgbHMsIFtjb21waWxlZEZ1bmN0aW9uKGcsIHgpIGZv
ciBnIGluIG5sZ10pCiAgICAgICAgICBzdWJzdChyZXMsbGJhY2t3YXJkU3VicykKICAgICAgaWYg
UiBoYXMgUGF0dGVybk1hdGNoYWJsZSBJbnRlZ2VyIHRoZW4KICAgICAgICBwYXR0ZXJuTWF0Y2go
eDolLCBwOlBhdHRlcm4gSW50ZWdlciwKICAgICAgICAgbDpQYXR0ZXJuTWF0Y2hSZXN1bHQoSW50
ZWdlciwgJSkpID09CiAgICAgICAgICBwYXR0ZXJuTWF0Y2goeCwgcCwgbCkkUGF0dGVybk1hdGNo
RnVuY3Rpb25TcGFjZShJbnRlZ2VyLCBSLCAlKQoKICAgICAgaWYgUiBoYXMgUGF0dGVybk1hdGNo
YWJsZSBGbG9hdCB0aGVuCiAgICAgICAgcGF0dGVybk1hdGNoKHg6JSwgcDpQYXR0ZXJuIEZsb2F0
LAogICAgICAgICBsOlBhdHRlcm5NYXRjaFJlc3VsdChGbG9hdCwgJSkpID09CiAgICAgICAgICBw
YXR0ZXJuTWF0Y2goeCwgcCwgbCkkUGF0dGVybk1hdGNoRnVuY3Rpb25TcGFjZShGbG9hdCwgUiwg
JSkKCiAgICBlbHNlICAtLSBSIGlzIG5vdCBhbiBpbnRlZ3JhbCBkb21haW4KICAgICAgb3BlcmF0
b3Igb3AgPT0KICAgICAgICBiZWxvbmc/KG9wKSRGU0QgPT4gb3BlcmF0b3Iob3ApJEZTRAogICAg
ICAgIGJlbG9uZz8ob3ApJEVTRCA9PiBvcGVyYXRvcihvcCkkRVNECiAgICAgICAgbnVsbGFyeT8g
b3AgYW5kIGhhcz8ob3AsIFNZTUJPTCkgPT4gb3BlcmF0b3Ioa2VybmVsKG5hbWUgb3ApJEspCiAg
ICAgICAgKG4gOj0gYXJpdHkgb3ApIGNhc2UgImZhaWxlZCIgPT4gb3BlcmF0b3IgbmFtZSBvcAog
ICAgICAgIG9wZXJhdG9yKG5hbWUgb3AsIG46Ok5vbk5lZ2F0aXZlSW50ZWdlcikKCiAgICAgIGlm
IFIgaGFzIFJpbmcgdGhlbgogICAgICAgIFJlcCA6PSBNUAogICAgICAgIDAgICAgICAgICAgICAg
ID09IDAkUmVwCiAgICAgICAgMSAgICAgICAgICAgICAgPT0gMSRSZXAKICAgICAgICAtIHg6JSAg
ICAgICAgICA9PSAtJFJlcCB4CiAgICAgICAgbjpJbnRlZ2VyICp4OiUgPT0gbiAqJFJlcCB4CiAg
ICAgICAgeDolICogeTolICAgICAgPT0geCAqJFJlcCB5CiAgICAgICAgeDolICsgeTolICAgICAg
PT0geCArJFJlcCB5CiAgICAgICAgeDolID0geTolICAgICAgPT0geCA9JFJlcCB5CiAgICAgICAg
eDolIDwgeTolICAgICAgPT0geCA8JFJlcCB5CiAgICAgICAgbnVtZXIgeCAgICAgICAgPT0geEBS
ZXAKICAgICAgICBjb2VyY2UocDpNUCk6JSA9PSBwCgogICAgICAgIHJlZHVjZWRTeXN0ZW0obTpN
YXRyaXggJSk6TWF0cml4KFIpID09CiAgICAgICAgICByZWR1Y2VkU3lzdGVtKG0pJFJlcAoKICAg
ICAgICByZWR1Y2VkU3lzdGVtKG06TWF0cml4ICUsIHY6VmVjdG9yICUpOgogICAgICAgICBSZWNv
cmQobWF0Ok1hdHJpeCBSLCB2ZWM6VmVjdG9yIFIpID09CiAgICAgICAgICByZWR1Y2VkU3lzdGVt
KG0sIHYpJFJlcAoKICAgICAgICBpZiBSIGhhcyBDb252ZXJ0aWJsZVRvIElucHV0Rm9ybSB0aGVu
CiAgICAgICAgICBjb252ZXJ0KHg6JSk6SW5wdXRGb3JtID09IGNvbnZlcnQoeCkkUmVwCgogICAg
ICAgIGlmIFIgaGFzIFBhdHRlcm5NYXRjaGFibGUgSW50ZWdlciB0aGVuCiAgICAgICAgICBraW50
bWF0Y2g6IChLLFBhdHRlcm4gSW50ZWdlcixQYXR0ZXJuTWF0Y2hSZXN1bHQoSW50ZWdlcixSZXAp
KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLT4gUGF0dGVybk1hdGNoUmVz
dWx0KEludGVnZXIsIFJlcCkKCiAgICAgICAgICBraW50bWF0Y2goaywgcCwgbCkgPT0KICAgICAg
ICAgICAgcGF0dGVybk1hdGNoKGssIHAsIGwgcHJldGVuZCBQYXR0ZXJuTWF0Y2hSZXN1bHQoSW50
ZWdlciwgJSkKICAgICAgICAgICAgICApJFBhdHRlcm5NYXRjaEtlcm5lbChJbnRlZ2VyLCAlKQog
ICAgICAgICAgICAgICAgcHJldGVuZCBQYXR0ZXJuTWF0Y2hSZXN1bHQoSW50ZWdlciwgUmVwKQoK
ICAgICAgICAgIHBhdHRlcm5NYXRjaCh4OiUsIHA6UGF0dGVybiBJbnRlZ2VyLAogICAgICAgICAg
IGw6UGF0dGVybk1hdGNoUmVzdWx0KEludGVnZXIsICUpKSA9PQogICAgICAgICAgICBwYXR0ZXJu
TWF0Y2goeEBSZXAsIHAsCiAgICAgICAgICAgICAgICAgICAgICAgICBsIHByZXRlbmQgUGF0dGVy
bk1hdGNoUmVzdWx0KEludGVnZXIsIFJlcCksCiAgICAgICAgICAgICAgICAgICAgICAgICAga2lu
dG1hdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICkkUGF0dGVybk1hdGNoUG9seW5vbWlh
bENhdGVnb3J5KEludGVnZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmRleGVkRXhw
b25lbnRzIEssIEssIFIsIFJlcCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldGVu
ZCBQYXR0ZXJuTWF0Y2hSZXN1bHQoSW50ZWdlciwgJSkKCiAgICAgICAgaWYgUiBoYXMgUGF0dGVy
bk1hdGNoYWJsZSBGbG9hdCB0aGVuCiAgICAgICAgICBrZmx0bWF0Y2g6IChLLCBQYXR0ZXJuIEZs
b2F0LCBQYXR0ZXJuTWF0Y2hSZXN1bHQoRmxvYXQsIFJlcCkpCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAtPiBQYXR0ZXJuTWF0Y2hSZXN1bHQoRmxvYXQsIFJlcCkKCiAgICAg
ICAgICBrZmx0bWF0Y2goaywgcCwgbCkgPT0KICAgICAgICAgICAgcGF0dGVybk1hdGNoKGssIHAs
IGwgcHJldGVuZCBQYXR0ZXJuTWF0Y2hSZXN1bHQoRmxvYXQsICUpCiAgICAgICAgICAgICAgKSRQ
YXR0ZXJuTWF0Y2hLZXJuZWwoRmxvYXQsICUpCiAgICAgICAgICAgICAgICBwcmV0ZW5kIFBhdHRl
cm5NYXRjaFJlc3VsdChGbG9hdCwgUmVwKQoKICAgICAgICAgIHBhdHRlcm5NYXRjaCh4OiUsIHA6
UGF0dGVybiBGbG9hdCwKICAgICAgICAgICBsOlBhdHRlcm5NYXRjaFJlc3VsdChGbG9hdCwgJSkp
ID09CiAgICAgICAgICAgIHBhdHRlcm5NYXRjaCh4QFJlcCwgcCwKICAgICAgICAgICAgICAgICAg
ICAgICAgIGwgcHJldGVuZCBQYXR0ZXJuTWF0Y2hSZXN1bHQoRmxvYXQsIFJlcCksCiAgICAgICAg
ICAgICAgICAgICAgICAgICAga2ZsdG1hdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICkk
UGF0dGVybk1hdGNoUG9seW5vbWlhbENhdGVnb3J5KEZsb2F0LAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgSW5kZXhlZEV4cG9uZW50cyBLLCBLLCBSLCBSZXApCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIHByZXRlbmQgUGF0dGVybk1hdGNoUmVzdWx0KEZsb2F0LCAlKQoKICAgICAg
ZWxzZSAgIC0tIFIgaXMgbm90IGV2ZW4gYSByaW5nCiAgICAgICAgaWYgUiBoYXMgQWJlbGlhbk1v
bm9pZCB0aGVuCiAgICAgICAgICBpbXBvcnQgTGlzdFRvTWFwKEssICUpCgogICAgICAgICAga2Vy
ZXZhbCAgICAgICAgOiAoSywgTGlzdCBLLCBMaXN0ICUpIC0+ICUKICAgICAgICAgIHN1YmV2YWwg
ICAgICAgIDogKEssIExpc3QgSywgTGlzdCAlKSAtPiAlCgogICAgICAgICAgUmVwIDo9IEZyZWVB
YmVsaWFuR3JvdXAgSwoKICAgICAgICAgIDAgICAgICAgICAgICAgID09IDAkUmVwCiAgICAgICAg
ICB4OiUgKyB5OiUgICAgICA9PSB4ICskUmVwIHkKICAgICAgICAgIHg6JSA9IHk6JSAgICAgID09
IHggPSRSZXAgeQogICAgICAgICAgeDolIDwgeTolICAgICAgPT0geCA8JFJlcCB5CiAgICAgICAg
ICBjb2VyY2UoazpLKTolICA9PSBjb2VyY2UoaykkUmVwCiAgICAgICAgICBrZXJuZWxzIHggICAg
ICA9PSBbZi5nZW4gZm9yIGYgaW4gdGVybXMgeF0KICAgICAgICAgIGNvZXJjZSh4OlIpOiUgID09
ICh6ZXJvPyB4ID0+IDA7IGNvbnN0YW50S2VybmVsKHgpOjolKQogICAgICAgICAgcmV0cmFjdCh4
OiUpOlIgPT0gKHplcm8/IHggPT4gMDsgcmV0Tm90VW5pdCB4KQogICAgICAgICAgY29lcmNlKHg6
JSk6T3V0cHV0Rm9ybSA9PSBjb2VyY2UoeCkkUmVwCiAgICAgICAgICBrZXJldmFsKGssIGxrLCBs
dikgPT0gbWF0Y2gobGssIGx2LCBrLCBtYXAoZXZhbCgjMSwgbGssIGx2KSwgIzEpKQoKICAgICAg
ICAgIHN1YmV2YWwoaywgbGssIGx2KSA9PQogICAgICAgICAgICBtYXRjaChsaywgbHYsIGssCiAg
ICAgICAgICAgICAga2VybmVsKG9wZXJhdG9yICMxLCBbc3Vic3QoYSwgbGssIGx2KSBmb3IgYSBp
biBhcmd1bWVudCAjMV0pKQoKICAgICAgICAgIGlzUGx1cyB4ID09CiAgICAgICAgICAgIGVtcHR5
PyhsIDo9IHRlcm1zIHgpIG9yIGVtcHR5PyByZXN0IGwgPT4gImZhaWxlZCIKICAgICAgICAgICAg
W3QuZXhwICokUmVwIHQuZ2VuIGZvciB0IGluIGxdJExpc3QoJSkKCiAgICAgICAgICBpc011bHQg
eCA9PQogICAgICAgICAgICBlbXB0eT8obCA6PSB0ZXJtcyB4KSBvciBub3QgZW1wdHk/IHJlc3Qg
bCA9PiAiZmFpbGVkIgogICAgICAgICAgICB0IDo9IGZpcnN0IGwKICAgICAgICAgICAgW3QuZXhw
LCB0Lmdlbl0KCiAgICAgICAgICBldmFsKHg6JSwgbGs6TGlzdCBLLCBsdjpMaXN0ICUpID09CiAg
ICAgICAgICAgIF8rL1t0LmV4cCAqIGtlcmV2YWwodC5nZW4sIGxrLCBsdikgZm9yIHQgaW4gdGVy
bXMgeF0KCiAgICAgICAgICBzdWJzdCh4OiUsIGxrOkxpc3QgSywgbHY6TGlzdCAlKSA9PQogICAg
ICAgICAgICBfKy9bdC5leHAgKiBzdWJldmFsKHQuZ2VuLCBsaywgbHYpIGZvciB0IGluIHRlcm1z
IHhdCgogICAgICAgICAgcmV0cmFjdElmQ2FuKHg6JSk6VW5pb24oUiwgImZhaWxlZCIpID09CiAg
ICAgICAgICAgIHplcm8/IHggPT4gMAogICAgICAgICAgICByZXROb3RVbml0SWZDYW4geAoKICAg
ICAgICAgIGlmIFIgaGFzIEFiZWxpYW5Hcm91cCB0aGVuIC0oeDolKSA9PSAtJFJlcCB4CgotLSAg
ICAgIGVsc2UgICAgICAtLSBSIGlzIG5vdCBhbiBBYmVsaWFuTW9ub2lkCi0tICAgICAgICBpZiBS
IGhhcyBTZW1pR3JvdXAgdGhlbgotLSAgICBSZXAgOj0gRnJlZUdyb3VwIEsKLS0gICAgMSAgICAg
ICAgICAgICAgPT0gMSRSZXAKLS0gICAgeDolICogeTolICAgICAgPT0geCAqJFJlcCB5Ci0tICAg
IHg6JSA9IHk6JSAgICAgID09IHggPSRSZXAgeQotLSAgICBjb2VyY2UoazpLKTolICA9PSBrOjpS
ZXAKLS0gICAga2VybmVscyB4ICAgICAgPT0gW2YuZ2VuIGZvciBmIGluIGZhY3RvcnMgeF0KLS0g
ICAgY29lcmNlKHg6Uik6JSAgPT0gKG9uZT8geCA9PiAxOyBjb25zdGFudEtlcm5lbCB4KQotLSAg
ICByZXRyYWN0KHg6JSk6UiA9PSAob25lPyB4ID0+IDE7IHJldE5vdFVuaXQgeCkKLS0gICAgY29l
cmNlKHg6JSk6T3V0cHV0Rm9ybSA9PSBjb2VyY2UoeCkkUmVwCgotLSAgICByZXRyYWN0SWZDYW4o
eDolKTpVbmlvbihSLCAiZmFpbGVkIikgPT0KLS0gICAgICBvbmU/IHggPT4gMQotLSAgICAgIHJl
dE5vdFVuaXRJZkNhbiB4CgotLSAgICBpZiBSIGhhcyBHcm91cCB0aGVuIGludih4OiUpOiUgPT0g
aW52KHgpJFJlcAoKICAgICAgICBlbHNlICAgLS0gUiBpcyBub3RoaW5nCiAgICAgICAgICAgIGlt
cG9ydCBMaXN0VG9NYXAoSywgJSkKCiAgICAgICAgICAgIFJlcCA6PSBLCgogICAgICAgICAgICB4
OiUgPCB5OiUgICAgICA9PSB4IDwkUmVwIHkKICAgICAgICAgICAgeDolID0geTolICAgICAgPT0g
eCA9JFJlcCB5CiAgICAgICAgICAgIGNvZXJjZShrOkspOiUgID09IGsKICAgICAgICAgICAga2Vy
bmVscyB4ICAgICAgPT0gW3ggcHJldGVuZCBLXQogICAgICAgICAgICBjb2VyY2UoeDpSKTolICA9
PSBjb25zdGFudEtlcm5lbCB4CiAgICAgICAgICAgIHJldHJhY3QoeDolKTpSID09IHJldE5vdFVu
aXQgeAogICAgICAgICAgICByZXRyYWN0SWZDYW4oeDolKTpVbmlvbihSLCAiZmFpbGVkIikgPT0g
cmV0Tm90VW5pdElmQ2FuIHgKICAgICAgICAgICAgY29lcmNlKHg6JSk6T3V0cHV0Rm9ybSAgICAg
ICAgICAgICAgID09IGNvZXJjZSh4KSRSZXAKCiAgICAgICAgICAgIGV2YWwoeDolLCBsazpMaXN0
IEssIGx2Okxpc3QgJSkgPT0KICAgICAgICAgICAgICBtYXRjaChsaywgbHYsIHggcHJldGVuZCBL
LCBtYXAoZXZhbCgjMSwgbGssIGx2KSwgIzEpKQoKICAgICAgICAgICAgc3Vic3QoeCwgbGssIGx2
KSA9PQogICAgICAgICAgICAgIG1hdGNoKGxrLCBsdiwgeCBwcmV0ZW5kIEssCiAgICAgICAgICAg
ICAgICBrZXJuZWwob3BlcmF0b3IgIzEsIFtzdWJzdChhLCBsaywgbHYpIGZvciBhIGluIGFyZ3Vt
ZW50ICMxXSkpCgogICAgICAgICAgICBpZiBSIGhhcyBDb252ZXJ0aWJsZVRvIElucHV0Rm9ybSB0
aGVuCiAgICAgICAgICAgICAgY29udmVydCh4OiUpOklucHV0Rm9ybSA9PSBjb252ZXJ0KHgpJFJl
cAoKLS0gICAgICAgICAgaWYgUiBoYXMgUGF0dGVybk1hdGNoYWJsZSBJbnRlZ2VyIHRoZW4KLS0g
ICAgICAgICAgICBjb252ZXJ0KHg6JSk6UGF0dGVybihJbnRlZ2VyKSA9PSBjb252ZXJ0KHgpJFJl
cAotLQotLSAgICAgICAgICAgIHBhdHRlcm5NYXRjaCh4OiUsIHA6UGF0dGVybiBJbnRlZ2VyLAot
LSAgICAgICAgICAgICBsOlBhdHRlcm5NYXRjaFJlc3VsdChJbnRlZ2VyLCAlKSkgPT0KLS0gICAg
ICAgICAgICAgIHBhdHRlcm5NYXRjaCh4IHByZXRlbmQgSyxwLGwpJFBhdHRlcm5NYXRjaEtlcm5l
bChJbnRlZ2VyLCAlKQotLQotLSAgICAgICAgICBpZiBSIGhhcyBQYXR0ZXJuTWF0Y2hhYmxlIEZs
b2F0IHRoZW4KLS0gICAgICAgICAgICBjb252ZXJ0KHg6JSk6UGF0dGVybihGbG9hdCkgPT0gY29u
dmVydCh4KSRSZXAKLS0KLS0gICAgICAgICAgICBwYXR0ZXJuTWF0Y2goeDolLCBwOlBhdHRlcm4g
RmxvYXQsCi0tICAgICAgICAgICAgIGw6UGF0dGVybk1hdGNoUmVzdWx0KEZsb2F0LCAlKSkgPT0K
LS0gICAgICAgICAgICAgIHBhdHRlcm5NYXRjaCh4IHByZXRlbmQgSywgcCwgbCkkUGF0dGVybk1h
dGNoS2VybmVsKEZsb2F0LCAlKQoKKWFiYnJldiBwYWNrYWdlIFBBTjJFWFBSIFBvbHlub21pYWxB
TjJFeHByZXNzaW9uCisrIEF1dGhvcjogQmFycnkgVHJhZ2VyCisrIERhdGUgQ3JlYXRlZDogOCBP
Y3QgMTk5MQorKyBEZXNjcmlwdGlvbjogVGhpcyBwYWNrYWdlIHByb3ZpZGVzIGEgY29lcmNlIGZy
b20gcG9seW5vbWlhbHMgb3ZlcgorKyBhbGdlYnJhaWMgbnVtYmVycyB0byBcc3BhZHR5cGV7RXhw
cmVzc2lvbiBBbGdlYnJhaWNOdW1iZXJ9LgpQb2x5bm9taWFsQU4yRXhwcmVzc2lvbigpOlRhcmdl
dCA9PSBJbXBsZW1lbnRhdGlvbiB3aGVyZQogIEVYUFIgPT0+IEV4cHJlc3Npb24oSW50ZWdlcikK
ICBBTiA9PT4gQWxnZWJyYWljTnVtYmVyCiAgUEFOID09PiBQb2x5bm9taWFsIEFOCiAgU1kgPT0+
IFN5bWJvbAogIFRhcmdldCA9PT4gd2l0aAogICAgICBjb2VyY2U6IFBvbHlub21pYWwgQWxnZWJy
YWljTnVtYmVyIC0+IEV4cHJlc3Npb24oSW50ZWdlcikKICAgICAgICArKyBjb2VyY2UocCkgY29u
dmVydHMgdGhlIHBvbHlub21pYWwgXHNwYWR7cH0gd2l0aCBhbGdlYnJhaWMgbnVtYmVyCiAgICAg
ICAgKysgY29lZmZpY2llbnRzIHRvIFxzcGFkdHlwZXtFeHByZXNzaW9uIEludGVnZXJ9LgogICAg
ICBjb2VyY2U6IEZyYWN0aW9uIFBvbHlub21pYWwgQWxnZWJyYWljTnVtYmVyIC0+IEV4cHJlc3Np
b24oSW50ZWdlcikKICAgICAgICArKyBjb2VyY2UocmYpIGNvbnZlcnRzIFxzcGFke3JmfSwgYSBm
cmFjdGlvbiBvZiBwb2x5bm9taWFsIFxzcGFke3B9IHdpdGgKICAgICAgICArKyBhbGdlYnJhaWMg
bnVtYmVyIGNvZWZmaWNpZW50cyB0byBcc3BhZHR5cGV7RXhwcmVzc2lvbiBJbnRlZ2VyfS4KICBJ
bXBsZW1lbnRhdGlvbiA9PT4gYWRkCiAgICBjb2VyY2UocDpQQU4pOkVYUFIgPT0KICAgICAgICBt
YXAoIzE6OkVYUFIsICMxOjpFWFBSLCBwKSRQb2x5bm9taWFsQ2F0ZWdvcnlMaWZ0aW5nKAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXhlZEV4cG9uZW50cyBTWSwgU1ksIEFO
LCBQQU4sIEVYUFIpCiAgICBjb2VyY2UocmY6RnJhY3Rpb24gUEFOKTpFWFBSID09CiAgICAgICAg
bnVtZXIocmYpOjpFWFBSIC8gZGVub20ocmYpOjpFWFBSCgopYWJicmV2IHBhY2thZ2UgRVhQUjIg
RXhwcmVzc2lvbkZ1bmN0aW9uczIKKysgTGlmdGluZyBvZiBtYXBzIHRvIEV4cHJlc3Npb25zCisr
IEF1dGhvcjogTWFudWVsIEJyb25zdGVpbgorKyBEZXNjcmlwdGlvbjogTGlmdGluZyBvZiBtYXBz
IHRvIEV4cHJlc3Npb25zLgorKyBEYXRlIENyZWF0ZWQ6IDE2IEphbiAxOTg5CisrIERhdGUgTGFz
dCBVcGRhdGVkOiAyMiBKYW4gMTk5MApFeHByZXNzaW9uRnVuY3Rpb25zMihSOk9yZGVyZWRTZXQs
IFM6T3JkZXJlZFNldCk6CiBFeHBvcnRzID09IEltcGxlbWVudGF0aW9uIHdoZXJlCiAgSyAgID09
PiBLZXJuZWwgUgogIEYyICA9PT4gRnVuY3Rpb25TcGFjZUZ1bmN0aW9uczIoUiwgRXhwcmVzc2lv
biBSLCBTLCBFeHByZXNzaW9uIFMpCiAgRTIgID09PiBFeHByZXNzaW9uU3BhY2VGdW5jdGlvbnMy
KEV4cHJlc3Npb24gUiwgRXhwcmVzc2lvbiBTKQoKICBFeHBvcnRzID09PiB3aXRoCiAgICBtYXA6
IChSIC0+IFMsIEV4cHJlc3Npb24gUikgLT4gRXhwcmVzc2lvbiBTCiAgICAgICsrIG1hcChmLCBl
KSBhcHBsaWVzIGYgdG8gYWxsIHRoZSBjb25zdGFudHMgYXBwZWFyaW5nIGluIGUuCgogIEltcGxl
bWVudGF0aW9uID09IGFkZAogICAgaWYgUyBoYXMgUmluZyBhbmQgUiBoYXMgUmluZyB0aGVuCiAg
ICAgIG1hcChmLCByKSA9PSBtYXAoZiwgcikkRjIKICAgIGVsc2UKICAgICAgbWFwKGYsIHIpID09
IG1hcChtYXAoZiwgIzEpLCByZXRyYWN0IHIpJEUyCgopYWJicmV2IHBhY2thZ2UgUE1QUkVERlMg
RnVuY3Rpb25TcGFjZUF0dGFjaFByZWRpY2F0ZXMKKysgUHJlZGljYXRlcyBmb3IgcGF0dGVybi1t
YXRjaGluZy4KKysgQXV0aG9yOiBNYW51ZWwgQnJvbnN0ZWluCisrIERlc2NyaXB0aW9uOiBBdHRh
Y2hpbmcgcHJlZGljYXRlcyB0byBzeW1ib2xzIGZvciBwYXR0ZXJuIG1hdGNoaW5nLgorKyBEYXRl
IENyZWF0ZWQ6IDIxIE1hciAxOTg5CisrIERhdGUgTGFzdCBVcGRhdGVkOiAyMyBNYXkgMTk5MAor
KyBLZXl3b3JkczogcGF0dGVybiwgbWF0Y2hpbmcuCkZ1bmN0aW9uU3BhY2VBdHRhY2hQcmVkaWNh
dGVzKFIsIEYsIEQpOiBFeHBvcnRzID09IEltcGxlbWVudGF0aW9uIHdoZXJlCiAgUjogT3JkZXJl
ZFNldAogIEY6IEZ1bmN0aW9uU3BhY2UgUgogIEQ6IFR5cGUKCiAgSyAgPT0+IEtlcm5lbCBGCiAg
UE1QUkVEICA9PT4gIiVwbXByZWRpY2F0ZSIKCiAgRXhwb3J0cyA9PT4gd2l0aAogICAgc3VjaFRo
YXQ6IChGLCBEIC0+IEJvb2xlYW4pIC0+IEYKICAgICAgKysgc3VjaFRoYXQoeCwgZm9vKSBhdHRh
Y2hlcyB0aGUgcHJlZGljYXRlIGZvbyB0byB4OwogICAgICArKyBlcnJvciBpZiB4IGlzIG5vdCBh
IHN5bWJvbC4KICAgIHN1Y2hUaGF0OiAoRiwgTGlzdChEIC0+IEJvb2xlYW4pKSAtPiBGCiAgICAg
ICsrIHN1Y2hUaGF0KHgsIFtmMSwgZjIsIC4uLiwgZm5dKSBhdHRhY2hlcyB0aGUgcHJlZGljYXRl
CiAgICAgICsrIGYxIGFuZCBmMiBhbmQgLi4uIGFuZCBmbiB0byB4LgogICAgICArKyBFcnJvcjog
aWYgeCBpcyBub3QgYSBzeW1ib2wuCgogIEltcGxlbWVudGF0aW9uID09PiBhZGQKICAgIGltcG9y
dCBBbnlGdW5jdGlvbnMxKEQgLT4gQm9vbGVhbikKCiAgICBzdCAgIDogKEssIExpc3QgQW55KSAt
PiBGCiAgICBwcmVkczogSyAtPiBMaXN0IEFueQogICAgbWtrICA6IEJhc2ljT3BlcmF0b3IgLT4g
RgoKICAgIHN1Y2hUaGF0KHA6RiwgZjpEIC0+IEJvb2xlYW4pID09IHN1Y2hUaGF0KHAsIFtmXSkK
ICAgIG1rayBvcCAgICAgICAgICAgICAgICAgICAgICAgID09IGtlcm5lbChvcCwgZW1wdHkoKSRM
aXN0KEYpKQoKICAgIHByZWRzIGsgPT0KICAgICAgKHUgOj0gcHJvcGVydHkob3BlcmF0b3Igaywg
UE1QUkVEKSkgY2FzZSAiZmFpbGVkIiA9PiBlbXB0eSgpCiAgICAgICh1OjpOb25lKSBwcmV0ZW5k
IExpc3QoQW55KQoKICAgIHN0KGssIGwpID09CiAgICAgIG1rayBhc3NlcnQoc2V0UHJvcGVydHko
Y29weSBvcGVyYXRvciBrLCBQTVBSRUQsCiAgICAgICAgICAgICAgICAgY29uY2F0KHByZWRzIGss
IGwpIHByZXRlbmQgTm9uZSksIHN0cmluZyhuZXcoKSRTeW1ib2wpKQoKICAgIHN1Y2hUaGF0KHA6
RiwgbDpMaXN0KEQgLT4gQm9vbGVhbikpID09CiAgICAgIHJldHJhY3RJZkNhbihwKUBVbmlvbihT
eW1ib2wsICJmYWlsZWQiKSBjYXNlIFN5bWJvbCA9PgogICAgICAgIHN0KHJldHJhY3QocClASywg
W2Y6OkFueSBmb3IgZiBpbiBsXSkKICAgICAgZXJyb3IgInN1Y2hUaGF0IG11c3QgYmUgYXBwbGll
ZCB0byBzeW1ib2xzIG9ubHkiCgopYWJicmV2IHBhY2thZ2UgUE1BU1NGUyBGdW5jdGlvblNwYWNl
QXNzZXJ0aW9ucworKyBBc3NlcnRpb25zIGZvciBwYXR0ZXJuLW1hdGNoaW5nCisrIEF1dGhvcjog
TWFudWVsIEJyb25zdGVpbgorKyBEZXNjcmlwdGlvbjogQXR0YWNoaW5nIGFzc2VydGlvbnMgdG8g
c3ltYm9scyBmb3IgcGF0dGVybiBtYXRjaGluZzsKKysgRGF0ZSBDcmVhdGVkOiAyMSBNYXIgMTk4
OQorKyBEYXRlIExhc3QgVXBkYXRlZDogMjMgTWF5IDE5OTAKKysgS2V5d29yZHM6IHBhdHRlcm4s
IG1hdGNoaW5nLgpGdW5jdGlvblNwYWNlQXNzZXJ0aW9ucyhSLCBGKTogRXhwb3J0cyA9PSBJbXBs
ZW1lbnRhdGlvbiB3aGVyZQogIFI6IE9yZGVyZWRTZXQKICBGOiBGdW5jdGlvblNwYWNlIFIKCiAg
SyAgPT0+IEtlcm5lbCBGCiAgUE1PUFQgICA9PT4gIiVwbW9wdGlvbmFsIgogIFBNTVVMVCAgPT0+
ICIlcG1tdWx0aXBsZSIKICBQTUNPTlNUID09PiAiJXBtY29uc3RhbnQiCgogIEV4cG9ydHMgPT0+
IHdpdGgKICAgIGFzc2VydCAgOiAoRiwgU3RyaW5nKSAtPiBGCiAgICAgICsrIGFzc2VydCh4LCBz
KSBtYWtlcyB0aGUgYXNzZXJ0aW9uIHMgYWJvdXQgeC4KICAgICAgKysgRXJyb3I6IGlmIHggaXMg
bm90IGEgc3ltYm9sLgogICAgY29uc3RhbnQ6IEYgLT4gRgogICAgICArKyBjb25zdGFudCh4KSB0
ZWxscyB0aGUgcGF0dGVybiBtYXRjaGVyIHRoYXQgeCBzaG91bGQKICAgICAgKysgbWF0Y2ggb25s
eSB0aGUgc3ltYm9sICd4IGFuZCBubyBvdGhlciBxdWFudGl0eS4KICAgICAgKysgRXJyb3I6IGlm
IHggaXMgbm90IGEgc3ltYm9sLgogICAgb3B0aW9uYWw6IEYgLT4gRgogICAgICArKyBvcHRpb25h
bCh4KSB0ZWxscyB0aGUgcGF0dGVybiBtYXRjaGVyIHRoYXQgeCBjYW4gbWF0Y2gKICAgICAgKysg
YW4gaWRlbnRpdHkgKDAgaW4gYSBzdW0sIDEgaW4gYSBwcm9kdWN0IG9yIGV4cG9uZW50aWF0aW9u
KS4KICAgICAgKysgRXJyb3I6IGlmIHggaXMgbm90IGEgc3ltYm9sLgogICAgbXVsdGlwbGU6IEYg
LT4gRgogICAgICArKyBtdWx0aXBsZSh4KSB0ZWxscyB0aGUgcGF0dGVybiBtYXRjaGVyIHRoYXQg
eCBzaG91bGQKICAgICAgKysgcHJlZmVyYWJseSBtYXRjaCBhIG11bHRpLXRlcm0gcXVhbnRpdHkg
aW4gYSBzdW0gb3IgcHJvZHVjdC4KICAgICAgKysgRm9yIG1hdGNoaW5nIG9uIGxpc3RzLCBtdWx0
aXBsZSh4KSB0ZWxscyB0aGUgcGF0dGVybiBtYXRjaGVyCiAgICAgICsrIHRoYXQgeCBzaG91bGQg
bWF0Y2ggYSBsaXN0IGluc3RlYWQgb2YgYW4gZWxlbWVudCBvZiBhIGxpc3QuCiAgICAgICsrIEVy
cm9yOiBpZiB4IGlzIG5vdCBhIHN5bWJvbC4KCiAgSW1wbGVtZW50YXRpb24gPT0+IGFkZAogICAg
YXNzICA6IChLLCBTdHJpbmcpIC0+IEYKICAgIGFzc3QgOiAoSywgU3RyaW5nKSAtPiBGCiAgICBt
a2sgIDogQmFzaWNPcGVyYXRvciAtPiBGCgogICAgbWtrIG9wID09IGtlcm5lbChvcCwgZW1wdHko
KSRMaXN0KEYpKQoKICAgIGFzcyhrLCBzKSA9PQogICAgICBoYXM/KG9wIDo9IG9wZXJhdG9yIGss
IHMpID0+IGs6OkYKICAgICAgbWtrIGFzc2VydChjb3B5IG9wLCBzKQoKICAgIGFzc3Qoaywgcykg
PT0KICAgICAgaGFzPyhvcCA6PSBvcGVyYXRvciBrLCBzKSA9PiBrOjpGCiAgICAgIG1rayBhc3Nl
cnQob3AsIHMpCgogICAgYXNzZXJ0KHgsIHMpID09CiAgICAgIHJldHJhY3RJZkNhbih4KUBVbmlv
bihTeW1ib2wsICJmYWlsZWQiKSBjYXNlIFN5bWJvbCA9PgogICAgICAgIGFzc3QocmV0cmFjdCh4
KUBLLCBzKQogICAgICBlcnJvciAiYXNzZXJ0IG11c3QgYmUgYXBwbGllZCB0byBzeW1ib2xzIG9u
bHkiCgogICAgY29uc3RhbnQgeCA9PQogICAgICByZXRyYWN0SWZDYW4oeClAVW5pb24oU3ltYm9s
LCAiZmFpbGVkIikgY2FzZSBTeW1ib2wgPT4KICAgICAgICBhc3MocmV0cmFjdCh4KUBLLCBQTUNP
TlNUKQogICAgICBlcnJvciAiY29uc3RhbnQgbXVzdCBiZSBhcHBsaWVkIHRvIHN5bWJvbHMgb25s
eSIKCiAgICBvcHRpb25hbCB4ID09CiAgICAgIHJldHJhY3RJZkNhbih4KUBVbmlvbihTeW1ib2ws
ICJmYWlsZWQiKSBjYXNlIFN5bWJvbCA9PgogICAgICAgIGFzcyhyZXRyYWN0KHgpQEssIFBNT1BU
KQogICAgICBlcnJvciAib3B0aW9uYWwgbXVzdCBiZSBhcHBsaWVkIHRvIHN5bWJvbHMgb25seSIK
CiAgICBtdWx0aXBsZSB4ID09CiAgICAgIHJldHJhY3RJZkNhbih4KUBVbmlvbihTeW1ib2wsICJm
YWlsZWQiKSBjYXNlIFN5bWJvbCA9PgogICAgICAgIGFzcyhyZXRyYWN0KHgpQEssIFBNTVVMVCkK
ICAgICAgZXJyb3IgIm11bHRpcGxlIG11c3QgYmUgYXBwbGllZCB0byBzeW1ib2xzIG9ubHkiCgop
YWJicmV2IHBhY2thZ2UgUE1QUkVEIEF0dGFjaFByZWRpY2F0ZXMKKysgUHJlZGljYXRlcyBmb3Ig
cGF0dGVybi1tYXRjaGluZworKyBBdXRob3I6IE1hbnVlbCBCcm9uc3RlaW4KKysgRGVzY3JpcHRp
b246IEF0dGFjaGluZyBwcmVkaWNhdGVzIHRvIHN5bWJvbHMgZm9yIHBhdHRlcm4gbWF0Y2hpbmcu
CisrIERhdGUgQ3JlYXRlZDogMjEgTWFyIDE5ODkKKysgRGF0ZSBMYXN0IFVwZGF0ZWQ6IDIzIE1h
eSAxOTkwCisrIEtleXdvcmRzOiBwYXR0ZXJuLCBtYXRjaGluZy4KQXR0YWNoUHJlZGljYXRlcyhE
OlR5cGUpOiBFeHBvcnRzID09IEltcGxlbWVudGF0aW9uIHdoZXJlCiAgRkUgPT0+IEV4cHJlc3Np
b24gSW50ZWdlcgoKICBFeHBvcnRzID09PiB3aXRoCiAgICBzdWNoVGhhdDogKFN5bWJvbCwgRCAt
PiBCb29sZWFuKSAtPiBGRQogICAgICArKyBzdWNoVGhhdCh4LCBmb28pIGF0dGFjaGVzIHRoZSBw
cmVkaWNhdGUgZm9vIHRvIHguCiAgICBzdWNoVGhhdDogKFN5bWJvbCwgTGlzdChEIC0+IEJvb2xl
YW4pKSAtPiBGRQogICAgICArKyBzdWNoVGhhdCh4LCBbZjEsIGYyLCAuLi4sIGZuXSkgYXR0YWNo
ZXMgdGhlIHByZWRpY2F0ZQogICAgICArKyBmMSBhbmQgZjIgYW5kIC4uLiBhbmQgZm4gdG8geC4K
CiAgSW1wbGVtZW50YXRpb24gPT0+IGFkZAogICAgaW1wb3J0IEZ1bmN0aW9uU3BhY2VBdHRhY2hQ
cmVkaWNhdGVzKEludGVnZXIsIEZFLCBEKQoKICAgIHN1Y2hUaGF0KHA6U3ltYm9sLCBmOkQgLT4g
Qm9vbGVhbikgICAgICAgPT0gc3VjaFRoYXQocDo6RkUsIGYpCiAgICBzdWNoVGhhdChwOlN5bWJv
bCwgbDpMaXN0KEQgLT4gQm9vbGVhbikpID09IHN1Y2hUaGF0KHA6OkZFLCBsKQoKKWFiYnJldiBw
YWNrYWdlIFBNQVNTIFBhdHRlcm5NYXRjaEFzc2VydGlvbnMKKysgQXNzZXJ0aW9ucyBmb3IgcGF0
dGVybi1tYXRjaGluZworKyBBdXRob3I6IE1hbnVlbCBCcm9uc3RlaW4KKysgRGVzY3JpcHRpb246
IEF0dGFjaGluZyBhc3NlcnRpb25zIHRvIHN5bWJvbHMgZm9yIHBhdHRlcm4gbWF0Y2hpbmcuCisr
IERhdGUgQ3JlYXRlZDogMjEgTWFyIDE5ODkKKysgRGF0ZSBMYXN0IFVwZGF0ZWQ6IDIzIE1heSAx
OTkwCisrIEtleXdvcmRzOiBwYXR0ZXJuLCBtYXRjaGluZy4KUGF0dGVybk1hdGNoQXNzZXJ0aW9u
cygpOiBFeHBvcnRzID09IEltcGxlbWVudGF0aW9uIHdoZXJlCiAgRkUgPT0+IEV4cHJlc3Npb24g
SW50ZWdlcgoKICBFeHBvcnRzID09PiB3aXRoCiAgICBhc3NlcnQgIDogKFN5bWJvbCwgU3RyaW5n
KSAtPiBGRQogICAgICArKyBhc3NlcnQoeCwgcykgbWFrZXMgdGhlIGFzc2VydGlvbiBzIGFib3V0
IHguCiAgICBjb25zdGFudDogU3ltYm9sIC0+IEZFCiAgICAgICsrIGNvbnN0YW50KHgpIHRlbGxz
IHRoZSBwYXR0ZXJuIG1hdGNoZXIgdGhhdCB4IHNob3VsZAogICAgICArKyBtYXRjaCBvbmx5IHRo
ZSBzeW1ib2wgJ3ggYW5kIG5vIG90aGVyIHF1YW50aXR5LgogICAgb3B0aW9uYWw6IFN5bWJvbCAt
PiBGRQogICAgICArKyBvcHRpb25hbCh4KSB0ZWxscyB0aGUgcGF0dGVybiBtYXRjaGVyIHRoYXQg
eCBjYW4gbWF0Y2gKICAgICAgKysgYW4gaWRlbnRpdHkgKDAgaW4gYSBzdW0sIDEgaW4gYSBwcm9k
dWN0IG9yIGV4cG9uZW50aWF0aW9uKS47CiAgICBtdWx0aXBsZTogU3ltYm9sIC0+IEZFCiAgICAg
ICsrIG11bHRpcGxlKHgpIHRlbGxzIHRoZSBwYXR0ZXJuIG1hdGNoZXIgdGhhdCB4IHNob3VsZAog
ICAgICArKyBwcmVmZXJhYmx5IG1hdGNoIGEgbXVsdGktdGVybSBxdWFudGl0eSBpbiBhIHN1bSBv
ciBwcm9kdWN0LgogICAgICArKyBGb3IgbWF0Y2hpbmcgb24gbGlzdHMsIG11bHRpcGxlKHgpIHRl
bGxzIHRoZSBwYXR0ZXJuIG1hdGNoZXIKICAgICAgKysgdGhhdCB4IHNob3VsZCBtYXRjaCBhIGxp
c3QgaW5zdGVhZCBvZiBhbiBlbGVtZW50IG9mIGEgbGlzdC4KCiAgSW1wbGVtZW50YXRpb24gPT0+
IGFkZAogICAgaW1wb3J0IEZ1bmN0aW9uU3BhY2VBc3NlcnRpb25zKEludGVnZXIsIEZFKQoKICAg
IGNvbnN0YW50IHggICA9PSBjb25zdGFudCh4OjpGRSkKICAgIG11bHRpcGxlIHggICA9PSBtdWx0
aXBsZSh4OjpGRSkKICAgIG9wdGlvbmFsIHggICA9PSBvcHRpb25hbCh4OjpGRSkKICAgIGFzc2Vy
dCh4LCBzKSA9PSBhc3NlcnQoeDo6RkUsIHMpCgopYWJicmV2IGRvbWFpbiBIQUNLUEkgUGkKKysg
RXhwcmVzc2lvbnMgaW4gJXBpIG9ubHkKKysgQXV0aG9yOiBNYW51ZWwgQnJvbnN0ZWluCisrIERl
c2NyaXB0aW9uOgorKyAgU3ltYm9saWMgZnJhY3Rpb25zIGluICVwaSB3aXRoIGludGVnZXIgY29l
ZmZpY2llbnRzOworKyAgVGhlIHBvaW50IGZvciB1c2luZyBQaSBhcyB0aGUgZGVmYXVsdCBkb21h
aW4gZm9yIHRob3NlIGZyYWN0aW9ucworKyAgaXMgdGhhdCBQaSBpcyBjb2VyY2libGUgdG8gdGhl
IGZsb2F0IHR5cGVzLCBhbmQgbm90IEV4cHJlc3Npb24uCisrIERhdGUgQ3JlYXRlZDogMjEgRmVi
IDE5OTAKKysgRGF0ZSBMYXN0IFVwZGF0ZWQ6IDEyIE1haSAxOTkyClBpKCk6IEV4cG9ydHMgPT0g
SW1wbGVtZW50YXRpb24gd2hlcmUKICBQWiA9PT4gUG9seW5vbWlhbCBJbnRlZ2VyCiAgVVAgPT0+
IFNwYXJzZVVuaXZhcmlhdGVQb2x5bm9taWFsIEludGVnZXIKICBSRiA9PT4gRnJhY3Rpb24gVVAK
CiAgRXhwb3J0cyA9PT4gSm9pbihGaWVsZCwgQ2hhcmFjdGVyaXN0aWNaZXJvLCBSZXRyYWN0YWJs
ZVRvIEludGVnZXIsCiAgICAgICAgICAgICAgICAgICBSZXRyYWN0YWJsZVRvIEZyYWN0aW9uIElu
dGVnZXIsIFJlYWxDb25zdGFudCwKICAgICAgICAgICAgICAgICAgIENvZXJjaWJsZVRvIERvdWJs
ZUZsb2F0LCBDb2VyY2libGVUbyBGbG9hdCwKICAgICAgICAgICAgICAgICAgIENvbnZlcnRpYmxl
VG8gUkYsIENvbnZlcnRpYmxlVG8gSW5wdXRGb3JtKSB3aXRoCiAgICBwaTogKCkgLT4gJSArKyBw
aSgpIHJldHVybnMgdGhlIHN5bWJvbGljICVwaS4KICBJbXBsZW1lbnRhdGlvbiA9PT4gUkYgYWRk
CiAgICBSZXAgOj0gUkYKCiAgICBzeW1waSA6PSAiJXBpIjo6U3ltYm9sCgogICAgcDJzZjogVVAg
LT4gRG91YmxlRmxvYXQKICAgIHAyZiA6IFVQIC0+IEZsb2F0CiAgICBwMm8gOiBVUCAtPiBPdXRw
dXRGb3JtCiAgICBwMmkgOiBVUCAtPiBJbnB1dEZvcm0KICAgIHAycDogIFVQIC0+IFBaCgogICAg
cGkoKSAgICAgICAgICAgICAgICAgICAgPT0gKG1vbm9taWFsKDEsIDEpJFVQIDo6IFJGKSBwcmV0
ZW5kICUKICAgIGNvbnZlcnQoeDolKTpSRiAgICAgICAgID09IHggcHJldGVuZCBSRgogICAgY29u
dmVydCh4OiUpOkZsb2F0ICAgICAgPT0geDo6RmxvYXQKICAgIGNvbnZlcnQoeDolKTpEb3VibGVG
bG9hdCA9PSB4OjpEb3VibGVGbG9hdAogICAgY29lcmNlKHg6JSk6RG91YmxlRmxvYXQgID09IHAy
c2YobnVtZXIgeCkgLyBwMnNmKGRlbm9tIHgpCiAgICBjb2VyY2UoeDolKTpGbG9hdCAgICAgICA9
PSBwMmYobnVtZXIgeCkgLyBwMmYoZGVub20geCkKICAgIHAybyBwICAgICAgICAgICAgICAgICAg
ID09IG91dHB1dEZvcm0ocCwgc3ltcGk6Ok91dHB1dEZvcm0pCiAgICBwMmkgcCAgICAgICAgICAg
ICAgICAgICA9PSBjb252ZXJ0IHAycCBwCgogICAgcDJwIHAgPT0KICAgICAgYW5zOlBaIDo9IDAK
ICAgICAgd2hpbGUgcCBePSAwIHJlcGVhdAogICAgICAgIGFucyA6PSBhbnMgKyBtb25vbWlhbChs
ZWFkaW5nQ29lZmZpY2llbnQocCk6OlBaLCBzeW1waSwgZGVncmVlIHApCiAgICAgICAgcCAgIDo9
IHJlZHVjdHVtIHAKICAgICAgYW5zCgogICAgY29lcmNlKHg6JSk6T3V0cHV0Rm9ybSA9PQogICAg
ICAociA6PSByZXRyYWN0SWZDYW4oeClAVW5pb24oVVAsICJmYWlsZWQiKSkgY2FzZSBVUCA9PiBw
Mm8ocjo6VVApCiAgICAgIHAybyhudW1lciB4KSAvIHAybyhkZW5vbSB4KQoKICAgIGNvbnZlcnQo
eDolKTpJbnB1dEZvcm0gPT0KICAgICAgKHIgOj0gcmV0cmFjdElmQ2FuKHgpQFVuaW9uKFVQLCAi
ZmFpbGVkIikpIGNhc2UgVVAgPT4gcDJpKHI6OlVQKQogICAgICBwMmkobnVtZXIgeCkgLyBwMmko
ZGVub20geCkKCiAgICBwMnNmIHAgPT0KICAgICAgbWFwKCMxOjpEb3VibGVGbG9hdCwgcCkkU3Bh
cnNlVW5pdmFyaWF0ZVBvbHlub21pYWxGdW5jdGlvbnMyKAogICAgICAgIEludGVnZXIsIERvdWJs
ZUZsb2F0KSAocGkoKSREb3VibGVGbG9hdCkKCiAgICBwMmYgcCA9PQogICAgICBtYXAoIzE6OkZs
b2F0LCBwKSRTcGFyc2VVbml2YXJpYXRlUG9seW5vbWlhbEZ1bmN0aW9uczIoCiAgICAgICAgSW50
ZWdlciwgRmxvYXQpIChwaSgpJEZsb2F0KQoKKWFiYnJldiBwYWNrYWdlIFBJQ09FUkNFIFBpQ29l
cmNpb25zCisrIENvZXJjaW9ucyBmcm9tICVwaSB0byBzeW1ib2xpYyBvciBudW1lcmljIGRvbWFp
bnMKKysgQXV0aG9yOiBNYW51ZWwgQnJvbnN0ZWluCisrIERlc2NyaXB0aW9uOgorKyAgUHJvdmlk
ZXMgYSBjb2VyY2lvbiBmcm9tIHRoZSBzeW1ib2xpYyBmcmFjdGlvbnMgaW4gJXBpIHdpdGgKKysg
aW50ZWdlciBjb2VmZmljaWVudHMgdG8gYW55IEV4cHJlc3Npb24gdHlwZS4KKysgRGF0ZSBDcmVh
dGVkOiAyMSBGZWIgMTk5MAorKyBEYXRlIExhc3QgVXBkYXRlZDogMjEgRmViIDE5OTAKUGlDb2Vy
Y2lvbnMoUjpKb2luKE9yZGVyZWRTZXQsIEludGVncmFsRG9tYWluKSk6IHdpdGgKICBjb2VyY2U6
IFBpIC0+IEV4cHJlc3Npb24gUgogICAgKysgY29lcmNlKGYpIHJldHVybnMgZiBhcyBhbiBFeHBy
ZXNzaW9uKFIpLgogPT0gYWRkCiAgcDJlOiBTcGFyc2VVbml2YXJpYXRlUG9seW5vbWlhbCBJbnRl
Z2VyIC0+IEV4cHJlc3Npb24gUgoKICBjb2VyY2UoeDpQaSk6RXhwcmVzc2lvbihSKSA9PQogICAg
ZiA6PSBjb252ZXJ0KHgpQEZyYWN0aW9uKFNwYXJzZVVuaXZhcmlhdGVQb2x5bm9taWFsIEludGVn
ZXIpCiAgICBwMmUobnVtZXIgZikgLyBwMmUoZGVub20gZikKCiAgcDJlIHAgPT0KICAgIG1hcCgj
MTo6RXhwcmVzc2lvbihSKSwgcCkkU3BhcnNlVW5pdmFyaWF0ZVBvbHlub21pYWxGdW5jdGlvbnMy
KAogICAgICAgIEludGVnZXIsIEV4cHJlc3Npb24gUikgKHBpKCkkRXhwcmVzc2lvbihSKSkKCg==
--=-=-=


There are some buggy print inside.

I hope it shall work for you.

I also must change very few lines in others files.

If you want to compile and test it.

\start
Date: 05 Dec 2006 22:16:23 +0100
From: Francois Maltey
To: Francois Maltey
Subject: Re: severe (!) bug in normalize

Francois Maltey writes:


And I let a error :

replace line 205     

                  numexpo := numexpo -$MP cst1::Integer::R *$MP k::MP
                  cst := cst * (first argument k **$Rep cst1::Integer)
        output([cst, numexpo::%]::OutputForm)$OutputPackage

The old one was : 
                  cst := first argument k ** cst1::Integer


What do you want for Gosper algorithm in the famus quotient u(n)/u(n-1).

With or without exp ? with or without power ?

the expr.spad I send you don't suppose (a,b,c) in R+

So we don't have (a^b)^c = a^(bc)

But other simplifications are done where n is a real number, not a letter.

                (a^u)^n = a^(nu) 
           exp (n ln a) = a^n, the fraction.
(exp a)^n exp b / exp c = exp (na+b-c)
                 (na)^u = n^u a^u 
                (a/n)^u = a^n / n^u
  exp (n log a - log c) = a^n / c

I hope I let no error in mathematics formula :
1 / (z^u) = z^(-u) \neq (1/z)^u -- try with z=-1 and u=1/2

It seems that my expr.spad is right for the sum function :
sum   (    q^n, n)
sum   (n * q^n, n)
sum (n^2 * q^n, n)
sum     (exp n, n)
sum ((n-1)*n^2 * q^n, n)

but have an error in :
sum (n * exp n, n)
sum (n^3 * q^n, n)

Even with print-spy I don't understand where is the mistake.

Hope this help you !

\start
Date: 05 Dec 2006 22:59:30 +0100
From: Martin Rubey
To: Francois Maltey
Subject: Re: severe (!) bug in normalize

Dear Francois,

Francois Maltey writes:

> I'm testing some patchs in expr.spad.
> On my today-version I get : 
> 
> (64) -> T := t^(n^2)*sqrt(1+t)^n
>            2
>           n   +-----+n
>    (64)  t   \|t + 1
>                                                      Type: Expression Integer
> (65) -> T/subst (T, n=n-1)
>           2n - 1 +-----+
>    (65)  t      \|t + 1
>                                                      Type: Expression Integer
> (68) -> normalize (T/eval (T, n=n-1))
>           +-----+  (2n - 1)log(t)
>    (68)  \|t + 1 %e
>                                                      Type: Expression Integer

Although this is very nice (I tried it!), it only steps around the bug in
rischNormalize, since the latter is not called with the same arguments: your
patches make axiom simplify T/eval(T, n=n-1) right away. Although this is a
very good thing, I suspect that the bug in rischNormalize will surface under
other circumstances, too.

I will comment on your patches in a separate email tomorrow, but I'd like to
express my joy about your work on EXPR and friends. I do have some - hopefully
constructive - critisism, though.

Meanwhile I did a bit of tracing. It seems likely that the bug occurs in
expeval, possibly in goodCoef. Here is the relevant bit of the trace:

  1<enter ElementaryFunctionStructurePackage.expeval,119 : 
                            +-----+
           n log(t)  n log(\|t + 1 )
         %e        %e
   arg1= ---------------------------
                          +-----+
              (n - 1)log(\|t + 1 )
            %e
                                                                 +-----+
                  +-----+   n log(t)      +-----+    (n - 1)log(\|t + 1 )
   arg2= [log(t),\|t + 1 ,%e        ,log(\|t + 1 ),%e                    ]
                  +-----+
           n log(\|t + 1 )
   arg3= %e
   arg4= [0,0,1,1]
   1<enter ElementaryFunctionStructurePackage.goodCoef,142 : 
    arg1= [0,0,1,1]
                                                                  +-----+
                   +-----+   n log(t)      +-----+    (n - 1)log(\|t + 1 )
    arg2= [log(t),\|t + 1 ,%e        ,log(\|t + 1 ),%e                    ]
    arg3= exp
   1>exit  ElementaryFunctionStructurePackage.goodCoef,142 : 
                     n log(t)
    [index= 3,ker= %e        ]
  1>exit  ElementaryFunctionStructurePackage.expeval,119 : 
                       +-----+  2
                n log(\|t + 1 )
             (%e               )              n log(t)
   [func= -------------------------, kers= [%e        ],
                         +-----+  2
             (n - 1)log(\|t + 1 )
          (%e                    )
                       +-----+
                n log(\|t + 1 )
              %e
    vals= [----------------------]]
                         +-----+
             (n - 1)log(\|t + 1 )
           %e


Note that the expeval replaces the elements of "kers" with the elements of
"vals", but here, these are clearly not equivalent: kers contains t^n, vals
however sqrt(t+1).

Maybe this is simply an index mismatch: The length of the fourth argument to
expeval and goodCoef is four, but I have the feeling that it is meant to refer
to the elements of the second argument which are of the form exp... or log...,
and thus sqrt(t+1) should not be counted. In other words, maybe goodCoef should
rather return [index= 4, ker= log(sqrt(t+1))] or so.


Any ideas?

This really calls for unit testing!!!

\start
Date: Tue, 5 Dec 2006 23:59:44 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

> Dear all,
> 
> I just discovered a severe bug in normalize$EFSTRUC. It is probably the worst
> thing I found so far.
> 
> with
> 
>  T :=t^(n^2)*(sqrt(1+t))^n
> 
>  normalize(T/eval(T, n=n-1))
> 
> gives sqrt(t+1). sum$SUMFS uses this method to check whether a function is
> rational for Gosper, and thus returns completely false results, which are,
> however, difficult to detect.
> 
> Waldek, am I right that you know normalize a little bit? If you do, PLEASE look
> into this, it is a real show stopper for me.
> 

Have you tried the patch I posted?  With this patch applied I get:

(4) -> T :=t^(n^2)*(sqrt(1+t))^n
(4) ->
          2
         n   +-----+n
   (4)  t   \|t + 1
                                                     Type: Expression Integer
(5) -> T1 := eval(T, n=n-1)
(5) ->
          2
         n  - 2n + 1  +-----+n - 1
   (5)  t            \|t + 1
                                                     Type: Expression Integer
(6) -> normalize(T/T1)
(6) ->
                     2
           +-----+  n log(t)
          \|t + 1 %e
   (6)  ---------------------
            2
          (n  - 2n + 1)log(t)
        %e
                                                     Type: Expression Integer

This result is probably not what you want, but it is equal to your
expression and the kernels are algebraically independent.

P.S. AFAICS the problem is that the full list of kernel contains both
transcendental and algebraic kernels. goodCoef is relevant only for
transcendental kernels and got cofficients as a vector corresponding
to transcendental kernels. However, the list passed to goodCoef still
contain algebraic kernels, so goodCoef gets confised, and tries
to eliminate wrong kernel.

\start
Date: 05 Dec 2006 19:15:05 -0500
From: Camm Maguire
To: Richard Harke
Subject: Re: Axiom ia64

Greetings, and thanks so much for looking into this!

Richard Harke writes:

> On Tue November 14 2006 18:43, you wrote:
> 
> > This would be most appreciated, and I'd be happy to lend assistance.
> > Knowledge of the ia64 reloc definitions is obviously key, though I put
> > together the alpha version mostly as a guesswork based on the mips
> > example.  If ia64 were done, we could also share with the lush
> > project, on which the original sfaslbfd_mips was inspired.  And
> > someday it would be great to get this back into bfd upstream.
> >
> > The basic idea is that each section of the .o file has a got table
> > appended to handle the relocs that refer to the special gp register
> > value.
> I have been studying ld.so and also Xorg as that has a loader function.
> Its not clear to me that they handle just the same set of relocs.
> The R_IA64_ defines in elf.h have two bit fields for the ia64 and
> these are used in ld.so but that info seems not to be used in Xorg.
> And bfd uses an enum so such structuring of the values isn't
> possible.
> I notice some comments about a standalone version of the loader
> code. That should be very helpful if it works.

It might -- haven't tried it in a while.  I will do so if you still
need it after the following.


> You said something about the heap having to do with the dlopen version
> not working but I noticed some things that made me think that
> dynamic linking, ie letting the lisp code access vars by name
> was an issue. Can you provide more detail?
> Any suggestions would be helpful.
> 

The standard ia64 build uses dlopen somewhat successfully.  In
addition to limiting the number of loads to ~ 1024, another weakness
stems from the typical usage of loading a .o file into an image,
dumping the image with unexec, and reexecuting later where we left
off.  Many lisp programs are built using this paradigm.  dlopen does
not allow a fixed address to be assigned to the relocated functions
across multiple image executions, and so foils GCL's very fast
function calling mechanism.  This essentially means that either all
loads must be redone on image startup, or the image needs to be
written by a special call to ld via compiler::link, in which the .o
files are relocated and initialized a second time 'by hand'.  This
will probably be clearer if you examine how axiom is built on this
platform in contrast with say x86.

I think the way to start would be to look at a compiled .o file on
ia64:

=============================================================================
camm@merulo:~/hol88-2.02.19940316/lisp$ objdump -r hol-writ.o

hol-writ.o:     file format elf64-ia64-little

RELOCATION RECORDS FOR [.text]:
OFFSET           TYPE              VALUE 
0000000000000010 LTOFF22X          .data.rel.local
0000000000000020 LDXMOV            .data.rel.local
0000000000000022 PCREL21B          do_init
0000000000000051 LTOFF22X          vs_base
0000000000000052 LTOFF22X          vs_top
0000000000000060 LTOFF22X          vs_limit
0000000000000062 LTOFF22X          small_fixnum_table+0x0000000000004000
0000000000000070 LDXMOV            vs_base
0000000000000071 LDXMOV            vs_top
0000000000000080 LTOFF22X          Cnil_body
0000000000000081 LDXMOV            vs_limit
0000000000000090 LDXMOV            small_fixnum_table+0x0000000000004000
00000000000000b0 LDXMOV            Cnil_body
00000000000000c1 GPREL22           .sdata+0x0000000000000228
0000000000000150 GPREL22           .sdata+0x0000000000000230
0000000000000161 GPREL22           .sdata+0x0000000000000238
0000000000000162 LTOFF22X          Ct_body
0000000000000191 LDXMOV            Ct_body
0000000000000240 LTOFF22X          .data.rel.local
0000000000000241 GPREL22           .sdata+0x00000000000001e8
0000000000000242 GPREL22           .sdata+0x00000000000001d8
0000000000000252 GPREL22           .sdata
0000000000000261 LDXMOV            .data.rel.local
0000000000000282 GPREL22           .sdata+0x0000000000000010
0000000000000442 GPREL22           .sdata+0x0000000000000008
00000000000004d1 GPREL22           .sdata+0x00000000000001e0
0000000000000601 GPREL22           .sdata+0x00000000000001f8
0000000000000652 PCREL21B          vs_overflow
0000000000000670 LTOFF22X          small_fixnum_table+0x0000000000004000
0000000000000671 GPREL22           .sdata+0x0000000000000228
0000000000000681 LTOFF22X          Cnil_body
0000000000000691 LDXMOV            small_fixnum_table+0x0000000000004000
00000000000006b0 LDXMOV            Cnil_body
0000000000000700 LTOFF22X          .data.rel.local
0000000000000701 GPREL22           .sdata+0x00000000000001e0
0000000000000702 GPREL22           .sdata+0x0000000000000230
0000000000000710 GPREL22           .sdata+0x0000000000000238
0000000000000711 LTOFF22X          Ct_body
0000000000000720 LDXMOV            .data.rel.local
0000000000000731 LDXMOV            Ct_body
0000000000000851 GPREL22           .sdata+0x00000000000001f8
00000000000008a1 LTOFF22X          .data.rel.local
00000000000008a2 GPREL22           .sdata+0x00000000000001e8
00000000000008b2 GPREL22           .sdata+0x00000000000001d8
00000000000008c0 LDXMOV            .data.rel.local
00000000000008e1 GPREL22           .sdata+0x0000000000000008
0000000000000971 LTOFF22X          vs_base
0000000000000980 LTOFF22X          vs_top
0000000000000981 LTOFF22X          vs_limit
0000000000000990 LDXMOV            vs_base
0000000000000991 LDXMOV            vs_top
00000000000009a0 LDXMOV            vs_limit
00000000000009d0 GPREL22           .sdata+0x0000000000000248
0000000000000a72 PCREL21B          vs_overflow
0000000000000a92 GPREL22           .sdata+0x0000000000000248
0000000000000b21 LTOFF22X          vs_top
0000000000000b30 LTOFF22X          vs_limit
0000000000000b31 LTOFF22X          vs_base
0000000000000b40 LDXMOV            vs_top
0000000000000b41 LDXMOV            vs_limit
0000000000000b50 LDXMOV            vs_base
0000000000000b70 LTOFF22X          .data.rel.local
0000000000000b80 LDXMOV            .data.rel.local
0000000000000be0 LTOFF22X          Cnil_body

=============================================================================

We just have a handful of relocs that need handling in practice, and
of these, several are probably already correctly handled by
bfd_get_relocated_section_contents.  Typically, the ones that aren't
are those referring to the gp register, which in this case appears to
be GPREL22, to my untutored guess. These relocs should be handled in
analogy with the GP relocs in sfasl_alpha.c -- i.e. they are rewritten
to refer to a special .got table that is constructed at the end of
each loaded section.  They key functions are alphaelf_create_got and
alphaelf_fix_relocs, the comments to which are somwhat useful:

=============================================================================
static asection *
alphaelf_create_got(bfd *b,asymbol **syms,
                   alphaelf_got_info *info) {

  bfd_vma offset;
  asection *p;
  int i;

  /* Check that there are no GOT section */
  info->sgot = bfd_get_section_by_name(b, ".got");
  assert(!info->sgot);
  
  /* Compute GOT hash table */
  offset = 0;
  for (p=b->sections; p; p=p->next)
    
    if ((p->flags & SEC_ALLOC) && (p->flags & SEC_RELOC)) {
      
      int sz,reloc_count;
      arelent **reloc;
      
      /*  ALPHA native relocs: This section and analogs below have
	  been modified to avoid orelocation in favor of relocation
	  itself.  bfd_canonicalize_reloc reads in the relocation
	  table to the latter as an array and makes a pointer list
	  to it in the supplied argument.  We will call
	  bfd_get_relocated_section_contents, which will call
	  bfd_canonicalize_reloc internally, on all sections,
	  including the new .got section.  If no relocation array
	  exists, this will fail when bfd_cannicalize_reloc attempts
	  to read in the non-existent table.  20050409 CM*/
      
      sz = bfd_get_reloc_upper_bound(b, p);
      assert(sz>0);
      reloc=ZALLOCA(sz);
      
      reloc_count = bfd_canonicalize_reloc(b, p, reloc, syms);
      assert(reloc_count>0);
      assert(p->reloc_count==0 || p->reloc_count==reloc_count);
      
      assert(p->relocation);
      
      for (i=0; i<p->reloc_count; i++) {
	
	arelent *reloc = p->relocation+i;
	
	if ((reloc->howto==info->reloc_literal)) {
	  
	  const char *name = msymbol_name(b,*reloc->sym_ptr_ptr,reloc->addend);
	  alphaelf_got_entry *gotent = (alphaelf_got_entry*)
	    bfd_hash_lookup(&info->got_table, name, TRUE, TRUE );
	  
	  if (!gotent->reloc) {
	    
	    gotent->index = info->gotsize;
	    gotent->offset = offset;
	    
	    gotent->reloc = xballoc(b, sizeof(arelent));
	    gotent->reloc->sym_ptr_ptr = reloc->sym_ptr_ptr;
	    gotent->reloc->address = offset;
	    gotent->reloc->addend = reloc->addend;
	    gotent->reloc->howto = info->reloc_64;
	    
	    offset += sizeof(void*);
	    info->gotsize += 1;

	  }
	}
      }
    }
  
  if (offset >= 0x8000)
    FEerror("Too many entries in GOT (GOT full, merci ALPHA)",0);
  
  if (info->gotsize > 0) {
    
    info->sgot = bfd_make_section(b, ".got");
    assert(info->sgot);
    
    info->sgot->flags = SEC_ALLOC|SEC_RELOC|SEC_LOAD;
    
    if (!bfd_set_section_size(b,info->sgot,offset))
      FEerror("Cannot set got section size",0);
    
    if (info->sgot->alignment_power < 4)
      info->sgot->alignment_power = 4;      /* Set GOT relocations */
    
    info->sgot->relocation = xballoc(b, info->gotsize*sizeof(*info->sgot->relocation));
    bfd_hash_traverse(&info->got_table, (void*)alphaelf_got_traverse, info->sgot);
    info->sgot->reloc_count = info->gotsize;
    
  }
  
  return info->sgot;

}

/* alphaelf_fix_relocs -- patches the relocation for GOT */
static void 
alphaelf_fix_relocs(bfd *b,asymbol ** symbols,int symbol_count,
                   alphaelf_got_info *info) {

  int i;
  asymbol **gpdisp_ptr = NULL;
  asection *p;

  /* Make a gpdisp symbol at the top of the .got section */
  gpdisp = xballoc(b, sizeof(*gpdisp));
  gpdisp->value = 0;
  gpdisp->name="gpdisp";
  gpdisp->flags = BSF_LOCAL|BSF_SECTION_SYM;
  gpdisp->section = info->sgot ? info->sgot : bfd_abs_section_ptr;
  gpdisp->udata.p = NULL;
  gp=0;

  if (!info->sgot)
    return;

  gpdisp_ptr = xballoc(b, sizeof(asymbol*));
  *gpdisp_ptr = gpdisp;
  
  /* Iterate on sections and relocations */
  for (p=b->sections; p; p=p->next)
    
    if ((p->flags & SEC_ALLOC) && (p->flags & SEC_RELOC)) {
      
      assert(p->relocation);
      
      for (i=0; i<p->reloc_count; i++) {
	
	arelent *reloc = p->relocation+i;
	
	if (reloc->howto==info->reloc_literal) {
	  
	  const char *name = msymbol_name(b,*reloc->sym_ptr_ptr,reloc->addend);
	  alphaelf_got_entry *gotent = 
	    (alphaelf_got_entry*) bfd_hash_lookup(&info->got_table, name, FALSE, FALSE );
	  
	  assert(gotent);
	  
	  /* ELF_LITERAL relocations will refer
	   * to the GPDISP symbol and have the GOT index
	   * in the addend */
	  
	  reloc->addend = gotent->offset;
	  reloc->sym_ptr_ptr = gpdisp_ptr;
	  
	}

      } 

    }

}
=============================================================================

mips is still more involved if a hairier example is needed :-).

So I think that all we need is to identify how to 1) capture the gp
symbol value and 2) rewrite the relocs referring thereto to refer to a
got table entry which is then constructed to point to the right
address.  Hopefully this will ring some bells in your mind given its
familiarity with ia64.

The way to debug this is to make a saved_pre_gcl image in unixport
with a new sfaslbfd_ia64.c compiled in (the ia64-linux.h needs to be
modified following the alpha-linux.h), and debugging enabled
(--enable-debug on the configure command line).  Then fire up gdb on
saved_pre_gcl, and try loading a .o file, breaking at fasload and
stepping through each of the routines, especially
bfd_get_relocated_section_contents).

\start
Date: Tue, 5 Dec 2006 23:52:53 -0600
From: Tim Daly
To: list
Subject: src/interp/compiler.boot.pamphlet

I see that there is a change to compiler.boot in the sandbox code
but I don't understand the reason for the change. I'm not sure who
made the change as it is not recorded in the changelog files.

What is the problem that this change is designed to solve?
Is there a test case for it?

Tim

=========================================================================
--- sandbox/src/interp/compiler.boot.pamphlet
+++ daly/src/interp/compiler.boot.pamphlet
@@ -494,13 +494,12 @@
     T
   T
 
+--------------------> NEW DEFINITION (override in xruncomp.boot.pamphlet)
 getFormModemaps(form is [op,:argl],e) ==
   op is ["elt",domain,op1] =>
     [x for x in getFormModemaps([op1,:argl],e) | x is [[ =domain,:.],:.]]
   null atom op => nil
   modemapList:= get(op,"modemap",e)
-  if $insideCategoryPackageIfTrue then
-    modemapList := [x for x in modemapList | x is [[dom,:.],:.] and dom ^= '$]
   if op="elt"
      then modemapList:= eltModemapFilter(LAST argl,modemapList,e) or return nil
      else

\start
Date: Wed, 6 Dec 2006 01:27:56 -0500
From: Bill Page
To: Tim Daly
Subject: RE: src/interp/compiler.boot.pamphlet

Tim,

On Wednesday, December 06, 2006 12:53 AM you asked:
>
> I see that there is a change to compiler.boot in the sandbox
> code but I don't understand the reason for the change. I'm not
> sure who made the change as it is not recorded in the changelog
> files.
>

It is confusing to me that you refere to this as "the sandbox
code". wh-sandbox is an experiemental branch maintained by Waldek
Hebisch. So far as I know the only one committing changes to this
branch is Waldek.

You should read:

http://axiom.svn.sourceforge.net/viewvc/*checkout*/axiom/branches/wh-san
dbox/README.wh

> What is the problem that this change is designed to solve?
> Is there a test case for it?
>

Concering revison 319, in ChangeLog.wh I see the following
explanation:

2006-11-25  Waldek Hebisch  Waldek Hebisch

	* src/interp/compiler.boot.pamphlet: Update functions to match
	  xruncomp.boot.pamphlet
	* src/interp/functor.boot.pamphlet: Likewise.
	* src/interp/info.boot.pamphlet: Likewise.
	* src/interp/modemap.boot.pamphlet: Likewise.
	* src/interp/nruncomp.boot.pamphlet: Likewise.
	* src/interp/Makefile.pamphlet: Remove references to
	  xruncomp.boot.pamphlet
	* src/interp/debugsys.lisp.pamphlet: Likewise.

>
> =
==========================
==========================
============
> --- sandbox/src/interp/compiler.boot.pamphlet
> +++ daly/src/interp/compiler.boot.pamphlet
> @@ -494,13 +494,12 @@
>      T
>    T
> 
> +--------------------> NEW DEFINITION (override in
> xruncomp.boot.pamphlet)
>  getFormModemaps(form is [op,:argl],e) ==
>    op is ["elt",domain,op1] =>
>      [x for x in getFormModemaps([op1,:argl],e) | x is [[
> =domain,:.],:.]]
>    null atom op => nil
>    modemapList:= get(op,"modemap",e)
> -  if $insideCategoryPackageIfTrue then
> -    modemapList := [x for x in modemapList | x is
> [[dom,:.],:.] and dom ^= '$]
>    if op="elt"
>       then modemapList:= eltModemapFilter(LAST
> argl,modemapList,e) or return nil
>       else
>

\start
Date: 06 Dec 2006 11:22:44 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: Re: severe (!) bug in normalize

Dear Waldek,

Waldek Hebisch writes:

> Have you tried the patch I posted?  

No, I couldn't remember that it was you who posted it, and since it doesn't
contain the word normalize, the search engine didn't find it :-)

> P.S. AFAICS the problem is that the full list of kernel contains both
> transcendental and algebraic kernels. goodCoef is relevant only for
> transcendental kernels and got cofficients as a vector corresponding to
> transcendental kernels. However, the list passed to goodCoef still contain
> algebraic kernels, so goodCoef gets confised, and tries to eliminate wrong
> kernel.

Yes, that's the same what I believe. However, I noticed that goodCoef is called
only in two functions, namely taneval and expeval. 

Here is expeval:

    expeval(f, lk, k, v) ==
      y   := first argument k
      fns := toY lk
      g := y - +/[qelt(v, i) * z for i in minIndex v .. maxIndex v for z in fns]
      (rec := goodCoef(v, lk, "exp"::SY)) case "failed" =>
        expnosimp(f, lk, k, v, fns, exp g)
      v0 := retract(inv qelt(v, rec.index))@Z
      lv := [qelt(v, i) for i in minIndex v .. maxIndex v |
                                                 i ^= rec.index]$List(Q)
      l  := [kk for kk in lk | kk ^= rec.ker]
      h :F := */[exp(z) ** (- retract(a * v0)@Z) for a in lv for z in toY l]
      h := h * exp(-v0 * g) * (k::F) ** v0
      [eval(f, [rec.ker], [h]), [rec.ker], [h]]


What I find a bit surprising is that goodCoef is not called as (roughly)

  goodCoef(v, fns, "exp"::SY)

fns would have to be coerced to the right type, of course. I thought that
(formally), goodCoef

    goodCoef(v, l, s) ==
      for i in minIndex v .. maxIndex v for k in l repeat
        is?(k, s) and
           ((r:=recip(qelt(v,i))) case Q) and
            (retractIfCan(r::Q)@Union(Z, "failed") case Z)
              and gdCoef?(qelt(v, i), v) => return([i, k])
      "failed"

checks whether there is a kernel in l of "type" s, that has a coefficient whose
inverse is an integer, and such that all other coefficients are multiples of
this coefficient. So, v and l should really be of the same length. Looking at
deprel

    deprel(ker, k, x) ==
      is?(k, "log"::SY) or is?(k, "exp"::SY) =>
        qdeprel([differentiate(g, x) for g in toY ker],
                 differentiate(ktoY k, x))
      is?(k, "atan"::SY) or is?(k, "tan"::SY) =>
        qdeprel([differentiate(g, x) for g in toU ker],
                 differentiate(ktoU k, x))
      is?(k, NTHR) => rootDep(ker, k)
      comb? and is?(k, "factorial"::SY) =>
        factdeprel([x for x in ker | is?(x,"factorial"::SY) and x^=k],k)
      [true]

I have the feeling that the coefficients in v really correspond to the lists
toY (for exp) and toU (for tan).

Altogether, it seems to me that the code could need a bit cleaning up. Does
anybody know whether sumit contains equivalent functionality?



I must admit that I do not understand your patch. I assume that it also fixes
the correspondence between the vector of coefficients v and the list of kernels
l. Why doesn't it fix that rather in expeval and taneval?

\start
Date: 06 Dec 2006 11:28:52 +0100
From: Martin Rubey
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Another question:

--- pp/build-improvements/src/algebra/efstruc.spad.pamphlet     2006-09-08 
02:57:48.000000000 +0200
+++ build-improvements.nn5/src/algebra/efstruc.spad.pamphlet    2006-10-07 
19:51:18.000000000 +0200
@@ -347,8 +347,28 @@
       true
 
     goodCoef(v, l, s) ==
-      for i in minIndex v .. maxIndex v for k in l repeat
-        is?(k, s) and
+      -- if k1 is part of k2 we should not express k1 in terms of k2
+      -- (othewise we would get infinite recursion)
+      -- below we impose a stronger condition: we require
+      -- height(k1) to be maximal
+      h:NonNegativeInteger := 0
+      j:Integer := 0
+      ll : List K := [];
+      for k in l repeat
+        if (is?(k, "log"::SY) or is?(k, "exp"::SY)
+            or is?(k, "tan"::SY) or is?(k, "atan"::SY)) then
+              ll := [k, :ll]
+              h := h + 1
+      not (h = (maxIndex(v) - minIndex(v) + 1)) => "failed"
+      h := 0
+      ll := reverse(ll)
+      for i in minIndex v .. maxIndex v for k in ll repeat
+        h1 := height(k)
+        if (h1 > h) then
+          j := i
+          h := h1
+      for i in minIndex v .. maxIndex v for k in ll repeat
+        is?(k, s) and (i >= j) and
            ((r:=recip(qelt(v,i))) case Q) and
             (retractIfCan(r::Q)@Union(Z, "failed") case Z)
               and gdCoef?(qelt(v, i), v) => return([i, k])


what does

ll := [k, :ll]

do? I have never seen that before, although grep yields some hits.

\start
Date: Wed, 6 Dec 2006 14:42:22 +0100 (CET)
From: Waldek Hebisch
To: Tim Daly
Subject: Re: src/interp/compiler.boot.pamphlet

> I see that there is a change to compiler.boot in the sandbox code
> but I don't understand the reason for the change. I'm not sure who
> made the change as it is not recorded in the changelog files.
> 
> What is the problem that this change is designed to solve?
> Is there a test case for it?
> 
> Tim
> 
> =========================================================================
> --- sandbox/src/interp/compiler.boot.pamphlet
> +++ daly/src/interp/compiler.boot.pamphlet
> @@ -494,13 +494,12 @@
>      T
>    T
>  
> +--------------------> NEW DEFINITION (override in xruncomp.boot.pamphlet)
>  getFormModemaps(form is [op,:argl],e) ==
>    op is ["elt",domain,op1] =>
>      [x for x in getFormModemaps([op1,:argl],e) | x is [[ =domain,:.],:.]]
>    null atom op => nil
>    modemapList:= get(op,"modemap",e)
> -  if $insideCategoryPackageIfTrue then
> -    modemapList := [x for x in modemapList | x is [[dom,:.],:.] and dom ^= '$]
>    if op="elt"
>       then modemapList:= eltModemapFilter(LAST argl,modemapList,e) or return nil
>       else
> 
> 

Changes to wh-sandbox are recorded in ChangeLog.wh in the root directory.
As Bill noted it is a part of lage commit which eliminated
'xruncomp.boot.pamphlet'.  In gold both 'xruncomp.boot.pamphlet' and
'xrun.boot.pamphlet' are used as patch files -- they are loaded after
other files and redefine multiple functions. _Some_ of those redefinitions
are overriden by 'interop.boot.pamphlet'.

I simply checked which definition is actually used -- if a function
from 'interop.boot.pamphlet' was in use I removed other definitions.
OTOH I merged definitions from 'xrun.boot.pamphlet' and
'xruncomp.boot.pamphlet' back into original files.

So, at the level of running code this change is intended to be a no-op:
the exact code which ran previously is still running. But at source
level the reader is spared work analysing load order.

I did not try to analyze the above change in detail, I just convinced
myself that versions in 'xrun.boot.pamphlet' and 'xruncomp.boot.pamphlet'
look reasonable -- in particular that 'xrun.boot.pamphlet' and
'xruncomp.boot.pamphlet' do represent later developement compared to
base files.

\start
Date: Wed, 6 Dec 2006 15:02:07 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Martin Rubey wrote:
> what does
> 
> ll := [k, :ll]
> 
> do? I have never seen that before, although grep yields some hits.
> 

This just builds list with head 'k' and tail 'll'.  The colon means
that we want to "insert" a list -- without colon we would get
a two element list, having (value of) 'll' as as the second element.

\start
Date: 06 Dec 2006 15:13:40 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: Re: severe (!) bug in normalize

Waldek Hebisch writes:

> Martin Rubey wrote:
> > what does
> > 
> > ll := [k, :ll]
> > 
> > do? I have never seen that before, although grep yields some hits.

> This just builds list with head 'k' and tail 'll'.  The colon means that we
> want to "insert" a list -- without colon we would get a two element list,
> having (value of) 'll' as as the second element.

So I guess it really should be replaced with cons(k, ll) since ":" is not
defined as a spad function.

\start
Date: Wed, 6 Dec 2006 15:34:13 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Martin Rubey wrote:
> Waldek Hebisch writes:
> 
> > Martin Rubey wrote:
> > > what does
> > > 
> > > ll := [k, :ll]
> > > 
> > > do? I have never seen that before, although grep yields some hits.
> 
> > This just builds list with head 'k' and tail 'll'.  The colon means that we
> > want to "insert" a list -- without colon we would get a two element list,
> > having (value of) 'll' as as the second element.
> 
> So I guess it really should be replaced with cons(k, ll) since ":" is not
> defined as a spad function.
> 

the '[k, :ll]' construct is a "syntactic sugar", you can not write such
things using just functions.  So ":" here is _not_ a function -- the
construct is part of Spad syntax.

I considered using 'cons', but it seemed to me that colon syntax is
included in Spad to be used.

\start
Date: Wed, 6 Dec 2006 16:29:39 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Martin Rubey wrote:

> Waldek Hebisch writes:
> > P.S. AFAICS the problem is that the full list of kernel contains both
> > transcendental and algebraic kernels. goodCoef is relevant only for
> > transcendental kernels and got cofficients as a vector corresponding to
> > transcendental kernels. However, the list passed to goodCoef still contain
> > algebraic kernels, so goodCoef gets confised, and tries to eliminate wrong
> > kernel.
> 
> Yes, that's the same what I believe. However, I noticed that goodCoef is called
> only in two functions, namely taneval and expeval. 
> 
> Here is expeval:
> 
>     expeval(f, lk, k, v) ==
>       y   := first argument k
>       fns := toY lk
>       g := y - +/[qelt(v, i) * z for i in minIndex v .. maxIndex v for z in fns]
>       (rec := goodCoef(v, lk, "exp"::SY)) case "failed" =>
>         expnosimp(f, lk, k, v, fns, exp g)
>       v0 := retract(inv qelt(v, rec.index))@Z
>       lv := [qelt(v, i) for i in minIndex v .. maxIndex v |
>                                                  i ^= rec.index]$List(Q)
>       l  := [kk for kk in lk | kk ^= rec.ker]
>       h :F := */[exp(z) ** (- retract(a * v0)@Z) for a in lv for z in toY l]
>       h := h * exp(-v0 * g) * (k::F) ** v0
>       [eval(f, [rec.ker], [h]), [rec.ker], [h]]
> 
> 
> What I find a bit surprising is that goodCoef is not called as (roughly)
> 
>   goodCoef(v, fns, "exp"::SY)
> 
> fns would have to be coerced to the right type, of course. I thought that
> (formally), goodCoef
> 
>     goodCoef(v, l, s) ==
>       for i in minIndex v .. maxIndex v for k in l repeat
>         is?(k, s) and
>            ((r:=recip(qelt(v,i))) case Q) and
>             (retractIfCan(r::Q)@Union(Z, "failed") case Z)
>               and gdCoef?(qelt(v, i), v) => return([i, k])
>       "failed"
> 
> checks whether there is a kernel in l of "type" s, that has a coefficient whose
> inverse is an integer, and such that all other coefficients are multiples of
> this coefficient. So, v and l should really be of the same length. Looking at
> deprel
> 
>     deprel(ker, k, x) ==
>       is?(k, "log"::SY) or is?(k, "exp"::SY) =>
>         qdeprel([differentiate(g, x) for g in toY ker],
>                  differentiate(ktoY k, x))
>       is?(k, "atan"::SY) or is?(k, "tan"::SY) =>
>         qdeprel([differentiate(g, x) for g in toU ker],
>                  differentiate(ktoU k, x))
>       is?(k, NTHR) => rootDep(ker, k)
>       comb? and is?(k, "factorial"::SY) =>
>         factdeprel([x for x in ker | is?(x,"factorial"::SY) and x^=k],k)
>       [true]
> 
> I have the feeling that the coefficients in v really correspond to the lists
> toY (for exp) and toU (for tan).
>

Yes, exactly.  But toY (and toU) transform kernels while goodCoef needs to
look at original (untransformed) kernel, so we would have to produce
a separate list.
 
> Altogether, it seems to me that the code could need a bit cleaning up. Does
> anybody know whether sumit contains equivalent functionality?
> 
> I must admit that I do not understand your patch. I assume that it also fixes
> the correspondence between the vector of coefficients v and the list of kernels
> l. Why doesn't it fix that rather in expeval and taneval?
> 

I really do not "fix the correspondence": I detect when there is a
possible mismatch and return "failed" in this case.  The

     not (h = (maxIndex(v) - minIndex(v) + 1)) => "failed"

line is doing that.

Please understand that the patch is a compromise.  There are other
bugs when using EFSTRUC but at least one problem really affect most
of algebra.  Namely, rischNormalize can get into infinite loop:
rischNormalize (using Risch strucute theorem) can detect that some
kernels are algebraically dependent and forms an expression which
is a constant.  But simplifier is unable to see that the expression
is constant.  You have written that simplifing is undecidable, but
that happens even for "easily decidable" classes.  The problem
really is that various part of Axiom use inconsistent conventions.
rischNormalize is sound _only_ when sqrt(6)=sqrt(2)sqrt(3).  But
simplifier refuses to do such simplifications (they are invalid
using default "real" convention) and things which matematically
are fields turn into rings with zero divisors. 

You may think that simplification is a separate problem, but I
think that Bronstein added algebraic cases to rischNormalize
only because default simplifier was inadequate for his examples.
If you remove algebraic simplifications from rischNormalize then
the bug would go away.

Concerning my patch: EFSTRUC needs more fixes and restructuring it
may be a good idea.  However, such restructuring may require changes
in function signatures which currently requires rather lengthy
bootstrap procedure.  Also, I my tests I hit problems which looks
like compiler bugs (remember nested function thread).

So, I decided to do a minimal patch just fixing one problem. I tried
to keep changes localized -- putting change in expeval and taneval
would duplicate code.  To say the truth, fix for your problem is
a byproduct -- I simply did not want goodCoef to do wrong things
when a simple test could prevent it.

\start
Date: 06 Dec 2006 17:07:21 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: Re: severe (!) bug in normalize

Waldek Hebisch writes:

> > I have the feeling that the coefficients in v really correspond to the
> > lists toY (for exp) and toU (for tan).
> >
> 
> Yes, exactly.  But toY (and toU) transform kernels while goodCoef needs to
> look at original (untransformed) kernel, so we would have to produce a
> separate list.

OK, very good. We agree on the way things work.

> > I must admit that I do not understand your patch. I assume that it also fixes
> > the correspondence between the vector of coefficients v and the list of kernels
> > l. Why doesn't it fix that rather in expeval and taneval?
> > 
> 
> I really do not "fix the correspondence": I detect when there is a
> possible mismatch and return "failed" in this case.  The
> 
>      not (h = (maxIndex(v) - minIndex(v) + 1)) => "failed"
> 
> line is doing that.

OK.

> Please understand that the patch is a compromise.  There are other bugs when
> using EFSTRUC but at least one problem really affect most of algebra.
> Namely, rischNormalize can get into infinite loop:

Yes, I found such situations, too.

> rischNormalize (using Risch strucute theorem) can detect that some kernels
> are algebraically dependent and forms an expression which is a constant.  But
> simplifier is unable to see that the expression is constant.  You have
> written that simplifing is undecidable, but that happens even for "easily
> decidable" classes.  The problem really is that various part of Axiom use
> inconsistent conventions.  rischNormalize is sound _only_ when
> sqrt(6)=sqrt(2)sqrt(3).  But simplifier refuses to do such simplifications
> (they are invalid using default "real" convention) and things which
> matematically are fields turn into rings with zero divisors.

Yes. This *really* needs cleaning up. In fact, I think we should consider to
redesign the algebra to make use of axioms like canonicalUnitNormal and the
like. Maybe Francois is heading in the right direction, too, when he tries to
choose consistent simplification rules for EXPR. However, I think that he will
need some help.

I guess that the main problem with EXPR and friends is, that it is not clear
what the variables are. Do you know the assumptions needed for RischNormalize?

I wonder whether SumIt is a similar mess.
 
\start
Date: Wed, 06 Dec 2006 17:34:59 +0100
From: Ralf Hemmecke
To: Peter Broadbery
Subject: export to vs. export from

Can somebody explain the difference between Aldor's
   export from ...
and
   export to ...

Peter Broadbery used

	export from UNISEG %;

in axextend.as from

http://wiki.axiom-developer.org/src_aldor2.tgz
http://wiki.axiom-developer.org/AldorForAxiom

but if one says

aldor -gloop
#include "axiom"
Integer

it prints as

         export to UniversalSegment(%)

\start
Date: Wed, 6 Dec 2006 11:36:43 -0500
From: Stephen Watt
To: Ralf Hemmecke
Subject: Re: [Aldor-l] export to vs. export from

"export from" is correct. 

-- Stephen

On Wed, Dec 06, 2006 at 05:34:59PM +0100, Ralf Hemmecke wrote:
> Can somebody explain the difference between Aldor's
>    export from ...
> and
>    export to ...
> 
> Peter Broadbery used
> 
> 	export from UNISEG %;
> 
> in axextend.as from
> 
> http://wiki.axiom-developer.org/src_aldor2.tgz
> http://wiki.axiom-developer.org/AldorForAxiom
> 
> but if one says
> 
> aldor -gloop
> #include "axiom"
> Integer
> 
> it prints as
> 
>          export to UniversalSegment(%)

\start
Date: 06 Dec 2006 18:52:00 +0100
From: Francois Maltey
To: Martin Rubey
Subject: re: severe (!) bug in normalize

Hello Martin and Waldek,

Do you have examples where rischNormalize fails.
What might be the result, and what do you get.

why rischNormalize (sqrt 2 * sqrt 3 * x - sqrt 6, x) is wrong ?
Because there is not the x-1 factor in the result ?

Do you have others examples ?

Do you have a test files with the main axiom mistakes.

> Yes. This *really* needs cleaning up. In fact, I think we should consider to
> redesign the algebra to make use of axioms like canonicalUnitNormal and the
> like. 

> Maybe Francois is heading in the right direction, too, when he tries
> to choose consistent simplification rules for EXPR. However, I think
> that he will need some help.

Of corse I try to find coherent simplifications, 
but this isn't my first aim.

My main idea is to have honest calculus for analysis, 

I'll try to use it in my classroom for my 18 years old students, 
In France the official program forces to use Maple or perhaps Mathematica, 
not mupad, not giac, not axiom.

First I hunt real equalities as (a^b)^c = a^(bc) but complex inequalities.
Then I force axiom to expand cos (2*a) as well as cos (a+b).

After this I try to shorten expressions 
  without loop (of corse)
  without too computations, so I don't make complete global gcd over arguments.
  
But in an expand function it may be possible to slice sqrt 6 in sqrt 2 
and sqrt 3. I do this in an expand trigonometric function.

expand (cos (2*a/3) + cos (2*a/5), "WithDivisor")
(67) -> expand (cos (2*a/3)*cos(2*a/5), "WithDivisor")
   (67)
           2a 2    2a 6         2a 4    2a 4         2a 6    2a 2       2a 8
   - 15cos(--) sin(--)  + 35cos(--) sin(--)  - 13cos(--) sin(--)  + cos(--)
           15      15           15      15           15      15         15
                                                     Type: Expression Integer

This parsing is a bit long, too long for an automatic computation 
at each time, but is possible in a expand function. 

I'll try to do the same over sqrt, exp and power.
I'll break all a^((p/q)*u+...) where p and q are Integer 
in a polynomial in ... (a^(1/q))^p ...

In the actual expr.spad file I only simplify monoic denominator.

So I expect to simplify (exp (2*x)+exp (3*x))/(exp (-x)+1) in exp x^3=exp(3x).

(ex^2 + ex^3)/(ex^-1+1) exp(x)^3 

A last question : what do you prefer ?  

1/z^a or z^(-a). 

In the first case I choose a positive exponent for axiom because a>0,
and then z^a * z^-a = 1, all right !

In the second I reduce the denominator because I prefer polynom to fraction.
The contract operator over power simplifies also z^a z^-a in 1.

Of corse (1/z)^a is forbidden : try with z=-1 and a=1/2 !

\start
Date: Wed, 6 Dec 2006 20:36:39 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Martin Rubey wrote:
> Waldek Hebisch writes:
> > rischNormalize (using Risch strucute theorem) can detect that some kernels
> > are algebraically dependent and forms an expression which is a constant.  But
> > simplifier is unable to see that the expression is constant.  You have
> > written that simplifing is undecidable, but that happens even for "easily
> > decidable" classes.  The problem really is that various part of Axiom use
> > inconsistent conventions.  rischNormalize is sound _only_ when
> > sqrt(6)=sqrt(2)sqrt(3).  But simplifier refuses to do such simplifications
> > (they are invalid using default "real" convention) and things which
> > matematically are fields turn into rings with zero divisors.
> 
> Yes. This *really* needs cleaning up. In fact, I think we should consider to
> redesign the algebra to make use of axioms like canonicalUnitNormal and the
> like. Maybe Francois is heading in the right direction, too, when he tries to
> choose consistent simplification rules for EXPR. However, I think that he will
> need some help.
> 
> I guess that the main problem with EXPR and friends is, that it is not clear
> what the variables are. Do you know the assumptions needed for RischNormalize?
I do not know what problems with variables you see here (I am aware of
tread about Polynomial Expression Integer, but I think it is a separate
problem).  The problem I mention really boils down to definition of
roots (in praticular square root): some field computations
treat roots just as a particular case of field extension.  So root is
an abstract quantity fully characterized by its defining polynomial.
But numerical functions and some real algorithms do care which
of the roots is chosen.  
We should systematically distinguish both kinds of extensions. When
convertion from "real" extension to "agebraic" in may be wise to
keep extra info around so that we can convert back without loss
of information.  When converting from "agebraic" extension to a
"real" one we need to do a case split (here conditional expressions
would be usefull).

RischNormalize tries to implement Risch structure theorem:

------<start TeX>
\begin{theo}\label{rischstr1}
Let $K$ be a differential field with
derivative $D$ and field of constants $k$.  Assume that elements
$z_j\in K$, $y_j\in K$ satisfy ${{Dz_j}\over{z_j}} = Dy_j$,
$j = 1,\dots,n$.  Then either transcendental degree of
$k(x, y_1,\dots, y_n, z_1,\dots, z_n)$ is greater or equal to $n+1$
or elements $Dy_1,\dots, Dy_n$ are linearly dependent over
rational numbers.
\end{theo}


\begin{coro}\label{rischstr2}
Let $K$ be a differential field with $D$.  Assume that elements
$z_j\in K$, $y_j\in K$ satisfy ${{Dz_j}\over{z_j}} = Dy_j$,
$j = 1,\dots,n$ and that $K$ is algebraic over
$k(x, y_1,\dots, y_n, z_1,\dots, z_n)$. Also assume that
${{Dz_{n+1}}\over{z_{n+1}}} = Dy_{n+1}$ and $y_{n+1}\in K$.  Then
either $z_{n+1}$ is transcendental over $K$, or there are rational
numbers $q_j$ such that
$$Dy_{n+1} = \sum_{j = 1}^{n}q_jDy_j.$$
In the second case $z_{n+1} = c\prod_{j = 1}^{n}z_j^{q_j}$, where $c$
is a constant.
----<end TeX>

so basic assumption is that we are given a computable field of
constants.  But rischNormalize uses operations implemented by other
domains to perform actual computuations, so there are extra
assumptions.  One is that if an expression does not depend on a
kernel (which is checked using derivatives) simplifier should
eliminate this kernel from the expression.  For example
representing 'y' as 'x - x + y' is legal for computable fields,
but rischNormalize would not tolerate such representation.
Of course, since expressions are represented as rational functions
of kernels such simple problem can not happen in Axiom. But
(sqrt(2)*sqrt(3)-sqrt(6))*exp(x) already hints towards possible
problems.

\start
Date: Wed, 6 Dec 2006 22:03:41 -0600
From: Tim Daly
To: list
Subject: French Open Source Center of Excellence

Apparently France is setting up a Center of Excellence
around open source software. Roberto Di Cosmo, a professor
at University of Paris 7, is the group lead.

Wonder if they have any interest in computer algebra?

\start
Date: 07 Dec 2006 12:52:09 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: Re: severe (!) bug in normalize

Dear Waldek,

thanks for your explanations.

Waldek Hebisch writes:

> Martin Rubey wrote:
> > Waldek Hebisch writes:

> > I guess that the main problem with EXPR and friends is, that it is not
> > clear what the variables are. Do you know the assumptions needed for
> > RischNormalize?

> I do not know what problems with variables you see here

I meant that it is not clear what the coefficient field for rischNormalize is:
rischNormalize works over F, which is a "FunctionSpace R". 

To fix things, suppose that F is EXPR INT and the expression we consider
contains only one variable. I guess the field of constants is the field of
"numeric" elements from EXPR INT, i.e., expressions that do not contain a
variable.

Of course, this is still not a computable coefficient field. However, in this
case it is at least clear mathematically what sqrt(2)*sqrt(3)-sqrt(6) is
supposed to be.

Now, if we switch to a field of constants containing some variables, what about
sqrt(x)*sqrt(y)-sqrt(x*y)?

> But rischNormalize uses operations implemented by other domains to perform
> actual computuations, so there are extra assumptions.  One is that if an
> expression does not depend on a kernel (which is checked using derivatives)
> simplifier should eliminate this kernel from the expression.  For example
> representing 'y' as 'x - x + y' is legal for computable fields, 

There are some related axioms defined in attreg.spad (namely
canonicalUnitNormal, unitsKnown and canonical). In any case, I think that there
should be a way to check whether equality is "mathematical" or only
heuristic.

> but rischNormalize would not tolerate such representation.  Of course, since
> expressions are represented as rational functions of kernels such simple
> problem can not happen in Axiom. But (sqrt(2)*sqrt(3)-sqrt(6))*exp(x) already
> hints towards possible problems.


By the way, are there any interesting computable coefficient fields for
rischNormalize?

> (I am aware of tread about Polynomial Expression Integer, but I think it is a
> separate problem).  

Yes. In fact, I meanwhile think that it is not a problem, apart from the fact
that axiom lacks domains UnivariateExpression and MultivariateExpression
analogous to the polynomial domains.

\start
Date: Sat, 09 Dec 2006 01:05:32 +0100
From: Ralf Hemmecke
To: list
Subject: conditional exports

Hello,

I seem to have some problems with conditional exports. What error 
message is that...

Won't parse: (Type)->Join(If(Test(Has(S,BasicType)),BasicType,NIL),etc)

???

See below.

I first stubled over an error which was seemingly connected to a 
difference in the way I loaded the code. Then the axo way worked, but 
the axlsp method failed. But if I cannot get over this one here, I 
really don't know how to go on.

And again there is the problem with "extend". It is simply a pain if I 
have to rename domains only because Axiom does not allow to load a 
domain and later an extension of it. Please, please, please, make 
"extend" work in Axiom.

Ralf

---BEGIN Makefile
ALDOR=${ALDORROOT}/bin/aldor
ALDORFLAGS=-Y . -Y ${ALDORROOT}/lib -Y ${AXIOM}/algebra \
	-I . -I ${ALDORROOT}/include \
	-dAxiom -O -Fasy -Flsp -laxiom -Mno-ALDOR_W_WillObsolete \
	-fao -Mno-mactext -M2 -Mno-abbrev

all:
	@echo "Say 'make axlsp' or 'make axo'."

clean:
	-rm *.asy *.ao *.lsp *.fn *.o *.input libdb.text
	-rm *.al


axlsp: clean
	${ALDOR} ${ALDORFLAGS} csaxcompat.as
	echo ")lib csaxcompat"	> axlsp.input
	${AXIOM}/bin/AXIOMsys < axlsp.input

axo: clean
	echo ")co csaxcompat.as" > axo.input
	${AXIOM}/bin/AXIOMsys < axo.input
---END Makefile

---BEGIN csaxcompat.as
#include "axiom"
Array(S: Type): with {
	if S has BasicType then BasicType;
} == IndexedOneDimensionalArray(S, 0$Integer) add {}
---END csaxcompat.as

\start
Date: Sat, 9 Dec 2006 01:25:22 +0100 (CET)
From: Waldek Hebisch
To: Martin Rubey
Subject: Re: severe (!) bug in normalize

Martin Rubey wrote:
> I meant that it is not clear what the coefficient field for rischNormalize is:
> rischNormalize works over F, which is a "FunctionSpace R". 
> 

Indeed.  It looks that when integrating F is EXPR COMPLEX INT.

> To fix things, suppose that F is EXPR INT and the expression we consider
> contains only one variable. I guess the field of constants is the field of
> "numeric" elements from EXPR INT, i.e., expressions that do not contain a
> variable.

Yes.

> 
> Of course, this is still not a computable coefficient field. However, in this
> case it is at least clear mathematically what sqrt(2)*sqrt(3)-sqrt(6) is
> supposed to be.
>
> Now, if we switch to a field of constants containing some variables, what about
> sqrt(x)*sqrt(y)-sqrt(x*y)?
>

At least in theory extra variable cause no difficulty.  Difficulties are
due to extra operations (like elliptic functions).  Risch structure theorem
also works for multivariate functions, so for example you can reduce
zero test for elementary functions to zero test for elementary constants.
 
> By the way, are there any interesting computable coefficient fields for
> rischNormalize?
>

Algebraic numbers are computable, assuming Schanuel conjecture elementary
numbers are computable (so also elementary functions are computable).

My point of view is that main task of rischNormalize is to build computable
representation for elementary functions, so it has to accept somewhat
unstuctured input and I do not expect that type of argument can alone
guarantee computability.

Looking now at 'normalize' I think that 'normalize' is wrong.  Namely,
expressions are rational functions of kernels.  If kernels are 
algebraically dependent we risk divion by zero.  Some kernels (like
roots) involve explicit algebraic dependence and simplifier
should be smart enough to reduce then to normal form.  But if
there is dependence between transcendental kernels we have to
'normalize' first. rischNormalize is carefull to use a variable kernel
in computations only after it is normalized.  But 'normalize'
normalizes separately in each variable, so if we have function of
x and y and we normalize first in x we use parts depending on y
before they are normalized.  AFAICS correct version would
normalize simultaneously in all variables.

\start
Date: Sat, 9 Dec 2006 02:05:25 +0100 (CET)
From: Waldek Hebisch
To: list
Subject: Nag libraries

I recently tried removing NAG related domains. After removing about 100
domains Axiom build fine with no change in test results.  This means that
large part of Axiom remains completly untested.

Looking at Nag tarball I see that it contins a 'nagd' subdirectory
which at first glance looks like sources of Nag demon.  If we have
right to re-distibute it we could try to get it working and
substitute some other numeriacal library in place of the Nag library.
ATM I do not know how much work is needed to get 'nagd' and 'naglink'
running but hopefully this may be easy.

\start
Date: Sat, 9 Dec 2006 12:29:52 +0100 (MET)
From: Ralf Hemmecke
To: list
Subject: conditional exports

Hello,

I seem to have some problems with conditional exports. What error
message is that...

Won't parse: (Type)->Join(If(Test(Has(S,BasicType)),BasicType,NIL),etc)

???

See below.

I first stubled over an error which was seemingly connected to a
difference in the way I loaded the code. Then the axo way worked, but
the axlsp method failed. But if I cannot get over this one here, I
really don't know how to go on.

And again there is the problem with "extend". It is simply a pain if I
have to rename domains only because Axiom does not allow to load a
domain and later an extension of it. Please, please, please, make
"extend" work in Axiom.

Ralf

---BEGIN Makefile
ALDOR=${ALDORROOT}/bin/aldor
ALDORFLAGS=-Y . -Y ${ALDORROOT}/lib -Y ${AXIOM}/algebra \
	-I . -I ${ALDORROOT}/include \
	-dAxiom -O -Fasy -Flsp -laxiom -Mno-ALDOR_W_WillObsolete \
	-fao -Mno-mactext -M2 -Mno-abbrev

all:
	@echo "Say 'make axlsp' or 'make axo'."

clean:
	-rm *.asy *.ao *.lsp *.fn *.o *.input libdb.text
	-rm *.al


axlsp: clean
	${ALDOR} ${ALDORFLAGS} csaxcompat.as
	echo ")lib csaxcompat"	> axlsp.input
	${AXIOM}/bin/AXIOMsys < axlsp.input

axo: clean
	echo ")co csaxcompat.as" > axo.input
	${AXIOM}/bin/AXIOMsys < axo.input
---END Makefile

---BEGIN csaxcompat.as
#include "axiom"
Array(S: Type): with {
	if S has BasicType then BasicType;
} == IndexedOneDimensionalArray(S, 0$Integer) add {}
---END csaxcompat.as

\start
Date: 09 Dec 2006 15:27:29 +0100
From: Martin Rubey
To: Waldek Hebisch
Subject: Re: severe (!) bug in normalize

Dear Waldek,

Waldek Hebisch writes:

> Martin Rubey wrote:

> > Now, if we switch to a field of constants containing some variables, what
> > about sqrt(x)*sqrt(y)-sqrt(x*y)?

> At least in theory extra variable cause no difficulty.  Difficulties are due
> to extra operations (like elliptic functions).  Risch structure theorem also
> works for multivariate functions, so for example you can reduce zero test for
> elementary functions to zero test for elementary constants.

So, does that mean that it doesn't matter what sqrt(x)*sqrt(y)-sqrt(x*y) is, as
long as it is consistent? I guess there are two different cases, namely, one
where we normalize with respect to, say, x, i.e., y is a constant but x isn't,
the other casebeing when both x and y are constants.


> > By the way, are there any interesting computable coefficient fields for
> > rischNormalize?
> 
> Algebraic numbers are computable, assuming Schanuel conjecture elementary
> numbers are computable (so also elementary functions are computable).

Of course, Axiom doesn't have a domain for elementary functions... Would it be
difficult to implement such a domain?

> My point of view is that main task of rischNormalize is to build computable
> representation for elementary functions, so it has to accept somewhat
> unstuctured input and I do not expect that type of argument can alone
> guarantee computability.

What do you mean with "somewhat unstructured input"? I also do not understand
"I do not expect that the type of the argument alone can guarantee
computability". Computability of what? I'd guess that if the argument type is
computable, then rischNormalize should return a normal form. Is this correct?

> Looking now at 'normalize' I think that 'normalize' is wrong.  Namely,
> expressions are rational functions of kernels.  If kernels are algebraically
> dependent we risk divion by zero.  Some kernels (like roots) involve explicit
> algebraic dependence and simplifier should be smart enough to reduce then to
> normal form.  

Do you mean that EXPR INT should store it's things rischNormalized? I guess
that this would make sense, however only if we keep the unnormalized form as
well, if it is "shorter". But I guess, I misunderstood.

By the way, I stumbled over an old paper by Karl Aberer who presents a normal
form for expressions built using 1, 0, +, -, *, id and composition. It may not
be so surprising, but I think it might be useful at some point. Furthermore,
the procedure that normalizes is absolutely simple. Notice the absence of
division, though.

> But if there is dependence between transcendental kernels we have to
> 'normalize' first. rischNormalize is carefull to use a variable kernel in
> computations only after it is normalized.  But 'normalize' normalizes
> separately in each variable, so if we have function of x and y and we
> normalize first in x we use parts depending on y before they are normalized.
> AFAICS correct version would normalize simultaneously in all variables.

Is this possible?

\start
Date: Sat, 9 Dec 2006 22:14:44 +0100 (MET)
From: Ralf Hemmecke
To: list
Subject: Generator in Axiom

Does somebody know how I can make "Generator" available in Axiom?

I would like to write something like

l: List Integer := [2,3,5,7]
g: Generator := (x for x in l)
s: DataStream(Integer) := stream g

(where DataStream(S) is a type with a function

stream: Generator S -> %

Please don't tell me that it is currently impossible.

\start
Date: Sat, 9 Dec 2006 22:33:11 +0100 (MET)
From: Ralf Hemmecke
To: list
Subject: No-String

Hello,

Since Axiom does not understand domains that are extended via Aldor, I 
had to use another name. So now I have an ACString (defined in a .as 
file) which has the same exports as String + some additional ones. In 
fact, I don't need to see String anymore on the Axiom command line.

I'd like to have that typing

s := "I am a string"

returns s of type ACString and not of type String.

Of course,

s: ACString := "blah"

already works, but the problem is

l: ACList(ACString) := ["a", "b"]

Any help to "unexpose" String, Integer, SingleInteger, MachineInteger, 
and Character is very much appreciated.

\start
Date: Sun, 10 Dec 2006 14:21:31 +0100 (MET)
From: Ralf Hemmecke
To: list
Subject: Generator <---> Stream

Since nobody answered my previous Generator question, here is another 
problem.

How can I convert back and forth between Aldor-Generator and Axiom-Stream?

It is not trivial, since I cannot use the export

generate: (()->S) -> %

from Stream(S), because 'generate' is a keyword in Aldor.

So I looked up its definition and wrote

---BEGIN gentst.as
#include "axiom"
macro Z == Integer;

extend Stream(T: Type): with {
--	mygenerate: (()->T) -> %;
	coerce: Generator T -> %;
} == add {
	local mygenerate(f: () -> T): % == delay concat(f(), mygenerate f);
	local rhxnext!(g: Generator T)(): T == {
		for t in g repeat return t;
		0$Z pretend T;
	}
	coerce(g: Generator T): % == mygenerate rhxnext! g;
}
---END gentst.as

But compilation gave me the following

woodpecker:~/scratch>woodpecker:atch>aldor -Y . -Y $ALDORROOT/lib -I 
$ALDORROOT/include -dAxiom -q1 -Fasy -Flsp -laxiom 
-Mno-ALDOR_W_WillObsolete -Y 
/home/hemmecke/software/Axiom/mnt/linux/algebra -fao -M2 -Mno-abbrev 
gentst.as
"gentst.as", line 8:
         local mygenerate(f: () -> T): % == delay concat(f(), mygenerate f);
...........................................^
[L8 C44] #1 (Fatal Error) Compiler bug: unsupported absyn (Delay) found 
by genFoam.

Any help is much appreciated.

Why do I need that? I have an Aldor function that returns Generator(T). 
I am able to call that function in an Axiom session, but I cannot 
iterate over such a result, i.e. if g:Generator(T) then

for t in g repeat ....

does not work inside Axiom. :-(

\start
Date: 10 Dec 2006 10:16:28 -0600
From: Gabriel Dos Reis
To: list
Subject: Axiom/GCL on windows

  I have made some progress on getting Axiom compile on Windows (mingw/msys).

First, there is a pending issue with compiler::link and rsym (which I
already mailed Camm about).  I hacked around that problem by copying
rsym.exe in the src/lisp/ sub-directory of the build directory.

The second problem occurs when interpsys is being built.  More
specifically, I have the following error (abbreviated)

============================

echo '(progn (gbc t) (load "makeint.lisp") (gbc t) (user::spad-save "../..//build/i686-pc-mingw32/bin/interpsys.exe"))' | DAASE="../../../axiom.bi/src/share" ./../..//build/i686-pc-mingw32/bin/lisp
GCL (GNU Common Lisp)  2.6.8 CLtL1    Dec 10 2006 04:26:41
Source License: LGPL(gcl,gmp), GPL(unexec,bfd,xgcl)
Binary License:  GPL due to GPL'ed components: (UNEXEC)
Modifications of this banner must retain notice of a compatible license
Dedicated to the memory of W. Schelter

Use (help) to get some basic information on how to use GCL.
Temporary directory for compiler files set to ./../..//build/i686-pc-mingw32/

>
Loading makeint.lisp
Loading sys-pkg.lisp
Finished loading sys-pkg.lisp
Loading ../../../axiom.bi/src/interp/interp-proclaims.lisp
Finished loading ../../../axiom.bi/src/interp/interp-proclaims.lisp

[...]

start address -T 10629000 Finished loading xrun.o
Loading interop.o
start address -T 1062f000 Finished loading interop.o
Loading patches.o
start address -T 10638000 Finished loading patches.o
   Using local database ../../../axiom.bi/src/share/algebra/compress.daase..   Re-reading compress.daase   Using local database ../../../axiom.bi/src/share/algebra/interp.daase..   Re-reading interp.daase

Error: Caught fatal error [memory may be damaged]
Fast links are on: do (si::use-fast-links nil) for debugging
Error signalled by RETURN.
Broken at APPLY.  Type :H for Help.

============================


To get to that point I have to disable calls to apply the patch (at
the end of this message) to src/interp/patches.lisp.pamphlet.

Suggestions?

-- Gaby


*** usbdisk_2/cas/axiom/bi/src/interp/patches.lisp.pamphlet	2006-11-30 15:51:12.000000000 -0600
--- usbdisk/axiom.bi/src/interp/patches.lisp.pamphlet	2006-12-10 08:59:50.000000000 -0600
*************** previous definition.
*** 342,352 ****
      (setq returncode 0))
     (unless (zerop returncode) (bye returncode)))))
  
! #+:dos
  (setq vmlisp::$current-directory (truename "."))
  #+:dos
  (setq vmlisp::$spadroot "/spad/mnt/dos")
! #+:dos
  (defun user-homedir-pathname ()
   (truename "."))
  
--- 342,352 ----
      (setq returncode 0))
     (unless (zerop returncode) (bye returncode)))))
  
! #+(or :dos :win32)
  (setq vmlisp::$current-directory (truename "."))
  #+:dos
  (setq vmlisp::$spadroot "/spad/mnt/dos")
! #+(or :dos :win32)
  (defun user-homedir-pathname ()
   (truename "."))
  
*************** previous definition.
*** 379,385 ****
  
  (defun |makeList| (size el) (make-list size :initial-element el) )
  
! #+:akcl
  (defun print-xdr-stream (x y z) (format y "XDR:~A" (xdr-stream-name x)))
  #+:akcl
  (defstruct (xdr-stream
--- 379,385 ----
  
  (defun |makeList| (size el) (make-list size :initial-element el) )
  
! #+:ackl
  (defun print-xdr-stream (x y z) (format y "XDR:~A" (xdr-stream-name x)))
  #+:akcl
  (defstruct (xdr-stream
*************** previous definition.
*** 387,411 ****
             "A structure to hold XDR streams. The stream is printed out."
             (handle ) ;; this is what is used for xdr-open xdr-read xdr-write
             (name ))  ;; this is used for printing
! #+:akcl
  (defun |xdrOpen| (str dir) (make-xdr-stream :handle (system:xdr-open str) :name str))
  #+:CCL
  (defun |xdrOpen| (str dir) (xdr-open str dir) )
! #+:dos
  (defun |xdrOpen| (str dir) (format t "xdrOpen called"))
  
! #+:akcl
  (defun |xdrRead| (xstr r) (system:xdr-read (xdr-stream-handle xstr) r) )
  #+:CCL
  (defun |xdrRead| (xstr r) (xdr-read xstr r) )
! #+:dos
  (defun |xdrRead| (str) (format t "xdrRead called"))
  
! #+:akcl
  (defun |xdrWrite| (xstr d) (system:xdr-write (xdr-stream-handle xstr) d) )
  #+:CCL
  (defun |xdrWrite| (xstr d) (xdr-write xstr d) )
! #+:dos
  (defun |xdrWrite| (str) (format t "xdrWrite called"))
  
  ;; here is a test for XDR
--- 387,411 ----
             "A structure to hold XDR streams. The stream is printed out."
             (handle ) ;; this is what is used for xdr-open xdr-read xdr-write
             (name ))  ;; this is used for printing
! #+(and :akcl (not (or :dos :win32)))
  (defun |xdrOpen| (str dir) (make-xdr-stream :handle (system:xdr-open str) :name str))
  #+:CCL
  (defun |xdrOpen| (str dir) (xdr-open str dir) )
! #+(or :dos :win32)
  (defun |xdrOpen| (str dir) (format t "xdrOpen called"))
  
! #+(and :akcl (not (or :dos :win32)))
  (defun |xdrRead| (xstr r) (system:xdr-read (xdr-stream-handle xstr) r) )
  #+:CCL
  (defun |xdrRead| (xstr r) (xdr-read xstr r) )
! #+(or :dos :win32)
  (defun |xdrRead| (str) (format t "xdrRead called"))
  
! #+(and :akcl (not (or :dos :win32)))
  (defun |xdrWrite| (xstr d) (system:xdr-write (xdr-stream-handle xstr) d) )
  #+:CCL
  (defun |xdrWrite| (xstr d) (xdr-write xstr d) )
! #+(or :dos :win32)
  (defun |xdrWrite| (str) (format t "xdrWrite called"))
  
  ;; here is a test for XDR

\start
Date: Sun, 10 Dec 2006 17:47:04 +0100
From: Gregory Vanuxem
To: Ralf Hemmecke
Subject: Re: No-String

Hello Ralf,

The String type and some others are "primitive" types. All is done by
the interpreter so you can not modify this without modifying the
interpreter. The interpreter has to know some of theses primitive types
when it parses and interprets what you're typing. For example if you
type '1.3' (integer dot integer) it returns by default a Float but this
string is first tokenized and after "Floatized" by the interpreter (it
calls float$Float by default). Some values (default types) are assigned
to variables in the interpreter, in your example the variable |$String|
($String in the boot language) holds the default type of strings
(something enclosed in double quote probably). So if you modify this
variable you'll change the default type of strings. You can test it if
you want with:

)lisp (setq |$String| '(|MyString|))

And the default type of strings will be MyString. But in fact don't do
that. This "knowledge" is shared, the interpeter and the spad compiler
use it and after this modification the spad compiler, for example, no
longer "understands" what a string is. The cause of this is may be the
fact that in the code these variables ($String, $Integer etc...) are not
always used, sometimes a default type is directly used. All these things
need to be cleaned up I think.

As far as I know only one default type can be modified, the default type
for floating point numbers. If you issue in the interpreter:

)boot $useBFasDefault:=false

or in Lisp

)lisp (setq |$useBFasDefault| nil)


The default type for floating point numbers will be DoubleFloat (for the
interpreter and the spad compiler) but, as you see, you can not choose
the type.

Greg


Le samedi 09 d=E9cembre 2006 =E0 22:33 +0100, Ralf Hemmecke a =E9crit :
> Hello,
>
> Since Axiom does not understand domains that are extended via Aldor, I
> had to use another name. So now I have an ACString (defined in a .as
> file) which has the same exports as String + some additional ones. In
> fact, I don't need to see String anymore on the Axiom command line.
>
> I'd like to have that typing
>
> s := "I am a string"
>
> returns s of type ACString and not of type String.
>
> Of course,
>
> s: ACString := "blah"
>
> already works, but the problem is
>
> l: ACList(ACString) := ["a", "b"]
>
> Any help to "unexpose" String, Integer, SingleInteger, MachineInteger,
> and Character is very much appreciated.

\start
Date: Sun, 10 Dec 2006 19:23:22 +0100 (MET)
From: Ralf Hemmecke
To: Gregory Vanuxem
Subject: Re: No-String

Dear Greg,

 > )lisp (setq |$String| '(|MyString|))

Wonderful. Thank you. That seems to do what I want. I don't care much 
about the SPAD compiler. And in the interpreter I want to see only 
MyString anyway, because it actually is String only that I have 
"extend"ed its functionality.

(1) -> )lib cscombinatversion csaxcompat
(1) -> )lisp (setq |$String| '(|ACString|))
(1) ->
Value = (|ACString|)
)lisp (setq |$String| '(|MyString|))
(1) -> l: ACList(ACString) := ["a", "b"]
    (1)  ["a","b"]
                                 Type: ACList ACString

Of course, I have to test that more carefully.

What are the corresponding variables for

SingleInteger
Character
List
Set

On 12/10/2006 05:47 PM, Vanuxem Gregory wrote:
> Hello Ralf,
> 
> The String type and some others are "primitive" types. All is done by
> the interpreter so you can not modify this without modifying the
> interpreter.

That's bad. :-(

> The interpreter has to know some of theses primitive types
> when it parses and interprets what you're typing. For example if you
> type '1.3' (integer dot integer) it returns by default a Float but this
> string is first tokenized and after "Floatized" by the interpreter (it
> calls float$Float by default).

Clear, but I like more that way the Aldor compiler handles that. The 
only knowledge it has is that for something that looks like a float, 
integer or a string it has to call functions

float:   Literal -> %
integer: Literal -> %
string:  Literal -> %

from whatever domains are currently in scope.

So my understanding was that if I expose MyString and unexpose String, 
everything should be fine. Both have a string function but only the one 
from MyString is now visible to the interpreter. That would be nice in 
Axiom.

> As far as I know only one default type can be modified, the default type
> for floating point numbers. If you issue in the interpreter:
> 
> )boot $useBFasDefault:=false
> 
> or in Lisp
> 
> )lisp (setq |$useBFasDefault| nil)

This one I don't understand. But since I am not interested in modifying 
anything connected to floats, there is no need to explain.

\start
Date: 10 Dec 2006 13:34:27 -0600
From: Gabriel Dos Reis
To: Tim Daly
Subject: gazonk-name

Tim --

  What is the role of the following function? (from src/interp/util.lisp)

   #+(and :AKCL (not :dos))
   (in-package "COMPILER")
   #+(and :AKCL (not :dos))
   (defun gazonk-name ( &aux tem)
    "return the name of the intermediate compiler file"
    (dotimes (i 1000)
     (setq tem (merge-pathnames (format nil "/tmp/gazonk~d.lsp" i)))
     (unless (probe-file tem)
       (return-from gazonk-name (pathname tem))))
    (error "1000 gazonk names used already!"))


What is it trying to achieve and why?

\start
Date: Sun, 10 Dec 2006 21:13:00 +0100
From: Gregory Vanuxem
To: Ralf Hemmecke
Subject: Re: No-String

Le dimanche 10 d=E9cembre 2006 =E0 19:23 +0100, Ralf Hemmecke a =E9crit :
> Dear Greg,
>
>  > )lisp (setq |$String| '(|MyString|))
>
> Wonderful. Thank you. That seems to do what I want. I don't care much
> about the SPAD compiler. And in the interpreter I want to see only
> MyString anyway, because it actually is String only that I have
> "extend"ed its functionality.
>
> (1) -> )lib cscombinatversion csaxcompat
> (1) -> )lisp (setq |$String| '(|ACString|))
> (1) ->
> Value = (|ACString|)
> )lisp (setq |$String| '(|MyString|))
> (1) -> l: ACList(ACString) := ["a", "b"]
>     (1)  ["a","b"]
>                                  Type: ACList ACString
>
> Of course, I have to test that more carefully.

Yes that works only because they are internally Lisp strings
and your implementation use this representation (as String).

> What are the corresponding variables for
>
> SingleInteger
> Character

Nothing (though |$SingleInteger| exists), they are not what I call
primitive types. To create a Character or a SingleInteger you have, as
far as I know, to coerce a string (with the 'char' function) or an
Integer.

> List

This one is special, List are created at the Lisp level in the
interpreter (as String and Integers), there is no variable that holds
this type. The parser probably detect the brackets and creates a Lisp
list.

> Set

Same thing than SingleInteger and Character I believe. I don't know how
to create a set in the interpreter without the set function.

Sorry, as far as I know what you're doing can be done only with String,
Integer, PositiveInteger and Integer (|$String|, |$Integer| etc...) but
I repeat, don't do that :-), the behavior of Axiom becomes undefined.

[...]

> Clear, but I like more that way the Aldor compiler handles that. The
> only knowledge it has is that for something that looks like a float,
> integer or a string it has to call functions
>
> float:   Literal -> %
> integer: Literal -> %
> string:  Literal -> %
>
> from whatever domains are currently in scope.
>
> So my understanding was that if I expose MyString and unexpose String,
> everything should be fine. Both have a string function but only the one=

> from MyString is now visible to the interpreter. That would be nice in
> Axiom.

I don't know how Aldor works, but I prefer, too, the way Aldor handles
this.

\start
Date: Mon, 11 Dec 2006 04:08:59 -0500
From: Tim Daly
To: Gabriel Dos Reis
Subject: Re: gazonk-name

I didn't bother to document "the why" :-) . The AKCL compiler
wrote out the lisp code into a file called
/tmp/gazonk which was supposed to be a temporary file and
was erased when the compiler completed.

Due to the speed of the machines it was often the case that I
would have an Axiom build running (nearly continuously since
it took so long) and I'd want to also continue to work. If I
did a compile-file there would be a gazonk name collision
since these were two independent lisp images. Thus compiling
a file usually caused the Axiom build to fail. This fixes the
problem by searching for an unused name.

This might still be an issue for parallel builds. I'm not sure
what GCL does. Although I suspect this bit Bill Schelter and
he likely fixed it in AKCL/GCL.

   #+(and :AKCL (not :dos))
   (in-package "COMPILER")
   #+(and :AKCL (not :dos))
   (defun gazonk-name ( &aux tem)
    "return the name of the intermediate compiler file"
    (dotimes (i 1000)
     (setq tem (merge-pathnames (format nil "/tmp/gazonk~d.lsp" i)))
     (unless (probe-file tem)
       (return-from gazonk-name (pathname tem))))
    (error "1000 gazonk names used already!"))


\start
Date: Sun, 10 Dec 2006 17:56:22 -0600 (CST)
From: Gabriel Dos Reis
To: Tim Daly
Subject: Re: gazonk-name

On Mon, 11 Dec 2006, root wrote:

| I didn't bother to document "the why" :-) . The AKCL compiler
| wrote out the lisp code into a file called
| /tmp/gazonk which was supposed to be a temporary file and
| was erased when the compiler completed.

Thanks for the "why".  That prompted me to look into GCL's
source code.

| Due to the speed of the machines it was often the case that I
| would have an Axiom build running (nearly continuously since
| it took so long) and I'd want to also continue to work. If I
| did a compile-file there would be a gazonk name collision
| since these were two independent lisp images. Thus compiling
| a file usually caused the Axiom build to fail. This fixes the
| problem by searching for an unused name.
|
| This might still be an issue for parallel builds. I'm not sure
| what GCL does. Although I suspect this bit Bill Schelter and
| he likely fixed it in AKCL/GCL.

It is fixed in GCL in pseudo "randomized way" -- GCL could use mkstemp
(if available on the system) as opposed to getpid().

(import 'si::*tmp-dir* 'compiler)
(defun gazonk-name ()
  (dotimes (i 1000)
   (let ((tem (merge-pathnames
               (format nil "~agazonk_~d_~d.lsp" (if (boundp '*tmp-dir*) *tmp-dir* "") (abs (si::getpid)) i))))
    (unless (probe-file tem)
     (return-from gazonk-name (pathname tem)))))
 (error "1000 gazonk names used already!"))


It is now OK to remove Axiom's work-around.

\start
Date: 10 Dec 2006 19:34:26 -0600
From: Gabriel Dos Reis
To: Camm Maguire
Subject: GCL in batch mode

Camm --

  I'm wondering what the behaviour of "gcl -batch" is.  The info page
says:

   `-batch'
        Do not enter the command print loop.  Useful if the other command
        line arguments do something.  Do not print the License and
        acknowledgement information.  Note if your program does print any
        License information, it must print the GCL header information
        also.


I intepreted that as meaning that only the licence and acknowledgement
information is not printed -- but anything else produced as side effect
of evaluating Lisp expressions would be printed.  That does not seem
to be the case.  In particular I expected the following command

   % echo '(format nil "~a" si::*system-directory*)' | gcl -batch

to just print the system directory name.  However, nothing is printed.

If I remove the option -batch, then I get

    GCL (GNU Common Lisp)  2.6.7 CLtL1    Aug 27 2006 19:51:04
    Source License: LGPL(gcl,gmp), GPL(unexec,bfd)
    Binary License:  GPL due to GPL'ed components: (READLINE BFD UNEXEC)
    Modifications of this banner must retain notice of a compatible
    license
    Dedicated to the memory of W. Schelter

    Use (help) to get some basic information on how to use GCL.

    >
    "/usr/local/lib/gcl-2.6.7/unixport/"


Only the information on the last line is of interest to me -- actually
to configure scripts trying to get some information about GCL
installation.  Can we convince GCL to have -batch deliver whatever is
printed by the lisp expression?

\start
Date: 10 Dec 2006 22:40:39 -0600
From: Gabriel Dos Reis
To: Bill Page
Subject: Re: Axiom/GCL on windows

Gabriel Dos Reis writes:

| Hi,
| 
|   I have made some progress on getting Axiom compile on Windows (mingw/msys).

[...]

| start address -T 1062f000 Finished loading interop.o
| Loading patches.o
| start address -T 10638000 Finished loading patches.o
|    Using local database ../../../axiom.bi/src/share/algebra/compress.daase..   Re-reading compress.daase   Using local database ../../../axiom.bi/src/share/algebra/interp.daase..   Re-reading interp.daase
| 
| Error: Caught fatal error [memory may be damaged]
| Fast links are on: do (si::use-fast-links nil) for debugging
| Error signalled by RETURN.
| Broken at APPLY.  Type :H for Help.
| 
| ============================

Bill --

  Axiom build-improvements branch revision 395 contains all the
necessary bits to build Axiom on windows and reproduce the above.
Please could you give it a try?

\start
Date: Mon, 11 Dec 2006 07:43:02 +0100
From: Gernot Hueber
To: Waldek Hebisch
Subject: Re: Nag libraries

Hi Waldek, 

I have spent some thoughts in how Axiom can interface external (shared) 
libraries. I have tried this one for a few functions of the Gnu Scientific 
Library (GSL) - the work is unfiniished, due to that there are numerous 
functions.
However, this approach is easily adoptably for any external C library.
Furthermore, some of the NAG related domains will be still requried, 
especially that one, converting Axiom functions to Fortran (actually a 
conversion to C are necessary). 

What do you think which approach is more powerful, reliable, ...? 

Gernot 

Waldek Hebisch writes: 

> I recently tried removing NAG related domains. After removing about 100
> domains Axiom build fine with no change in test results.  This means that
> large part of Axiom remains completly untested. 
> 
> Looking at Nag tarball I see that it contins a 'nagd' subdirectory
> which at first glance looks like sources of Nag demon.  If we have
> right to re-distibute it we could try to get it working and
> substitute some other numeriacal library in place of the Nag library.
> ATM I do not know how much work is needed to get 'nagd' and 'naglink'
> running but hopefully this may be easy. 

\start
Date: 11 Dec 2006 12:08:05 +0100
From: Francois Maltey
To: list
Subject: Interest of the second parameter in normalize 

Hello, 

I'm playing with normalize (expr, x) and normalize (expr, y).

normalize (expr, x) limits the number of kernel with x.
So exp (2*x) become exp (x)^2. The other variables remain.
Is it right ?

But axiom don't recognize 0 in coefficients in y. Is it right ?
I test normalize ((exp(2*x)+exp(x))*exp(2*y)/exp(y)-exp(x)*exp(y), x).
I get ((e^x)^2 + e^x (e^2y-(e^y)^2)) / e^y.

But if we want to simplify/resolve this polynomial in e^x it's necessary to
recognize it's simplified coefficients. Am I right ?

So what is the interest of normalize (expr, x) in front of normalize (expr) ?
If then axiom must normalize theses coefficients. I don't understand.

\start
Date: Mon, 11 Dec 2006 11:56:47 +0000
From: Mike Dewar
To: Waldek Hebisch
Subject: Re: Nag libraries
Cc: Mike Dewar

Personally I wouldn't use nagd - it dates from a time before dynamic
linking was a practical approach and when a typical user's machine was
not fast enough for solving real-life numerical problems.  When we
reelased Axiom under Windows it used dynamic linking to load NAG
routines into the running image, and we planned to use the same approach
on Unix for Axiom 3 (which never got beyond the design stage).

Mike.

On Sat, Dec 09, 2006 at 02:05:25AM +0100, Waldek Hebisch wrote:
> I recently tried removing NAG related domains. After removing about 100
> domains Axiom build fine with no change in test results.  This means that
> large part of Axiom remains completly untested.
> 
> Looking at Nag tarball I see that it contins a 'nagd' subdirectory
> which at first glance looks like sources of Nag demon.  If we have
> right to re-distibute it we could try to get it working and
> substitute some other numeriacal library in place of the Nag library.
> ATM I do not know how much work is needed to get 'nagd' and 'naglink'
> running but hopefully this may be easy.

\start
Date: Mon, 11 Dec 2006 11:03:30 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows
Cc: Bill Page

On December 10, 2006 11:41 PM Gabriel Dos Reis wrote:
> ... 
>   Axiom build-improvements branch revision 395 contains all the
> necessary bits to build Axiom on windows and reproduce the above.
> Please could you give it a try?
> 

I pulled the latest patches to build-improvements and tried an
out-of-source build in MSYS but

  mkdir axiom.test
  cd axiom.test
  ../build-improvements/configure

hangs my Windows XP system during a confidence test. I am not able
even to kill the process. After a power-off re-boot the file
axiom.test/config.log contains:

$ tail config.log
|   return 0;
| }
configure:4308: result: no
configure:4324: checking whether getgid is declared
configure:4349: gcc -c -g -O2  conftest.c >&5
conftest.c: In function `main':
conftest.c:31: error: `getgid' undeclared (first use in this function)
conftest.c:31: error: (Each undeclared identifier is reported only once
conftest.c:31: error: for each function it appears in.)

-------------

This same MSYS environment builds axiom--windows--1 and gcl-2.6.8pre
with no problems.

Can you give me some more specifics about how you are testing
this on windows?

\start
Date: Mon, 11 Dec 2006 10:40:13 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows
Cc: Bill Page

On Mon, 11 Dec 2006, Bill Page wrote:

| On December 10, 2006 11:41 PM Gabriel Dos Reis wrote:
| > ...
| >   Axiom build-improvements branch revision 395 contains all the
| > necessary bits to build Axiom on windows and reproduce the above.
| > Please could you give it a try?
| >
|
| I pulled the latest patches to build-improvements and tried an
| out-of-source build in MSYS but
|
|   mkdir axiom.test
|   cd axiom.test
|   ../build-improvements/configure
|
| hangs my Windows XP system during a confidence test. I am not able
| even to kill the process.

That is very odd.

| After a power-off re-boot the file axiom.test/config.log contains:
|
| $ tail config.log
| |   return 0;
| | }
| configure:4308: result: no
| configure:4324: checking whether getgid is declared
| configure:4349: gcc -c -g -O2  conftest.c >&5
| conftest.c: In function `main':
| conftest.c:31: error: `getgid' undeclared (first use in this function)
| conftest.c:31: error: (Each undeclared identifier is reported only once
| conftest.c:31: error: for each function it appears in.)

That is good.  Normally, that should enable Autoconf to

   #define HAVE_DECL_GETPID 0

in config/axiom-c-macros.h

Notice that the program is not even compiled so it is no "hang of
running erronous program".

| -------------
|
| This same MSYS environment builds axiom--windows--1 and gcl-2.6.8pre
| with no problems.
|
| Can you give me some more specifics about how you are testing
| this on windows?

I pretty much do the same thing as you.

  (1) get the axiom source
  (2) create a build directory
  (3) invoke configure
  (4) make

Could you send me the (partial) config.log?

\start
Date: Mon, 11 Dec 2006 19:42:39 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: Re: Axiom/GCL on windows

[...]

> start address -T 10629000 Finished loading xrun.o
> Loading interop.o
> start address -T 1062f000 Finished loading interop.o
> Loading patches.o
> start address -T 10638000 Finished loading patches.o
>    Using local database ../../../axiom.bi/src/share/algebra/compress.da=
ase..   Re-reading compress.daase   Using local database ../../../axiom.b=
i/src/share/algebra/interp.daase..   Re-reading interp.daase
>
> Error: Caught fatal error [memory may be damaged]
> Fast links are on: do (si::use-fast-links nil) for debugging
> Error signalled by RETURN.
> Broken at APPLY.  Type :H for Help.

The segfault occurs in cacheKeyedMsg (src/interp/patches.lisp). This is
a path problem, |fetchKeyedMsg| (patches.lisp) calls cacheKeyedMsg with
|$defaultMsgDatabaseName| as argument. This argument is a pathname (path
to target/*/share/msg/s2-us.msgs). GCL can not open this file since it's
a unix path (/some/where) and segfault (I don't know where). With GCL on
Windows you have to use mixed path (c:/some/where) (I know that truename
accept Windows path with two backslash as separator (c:\\some\\where) so
may be other functions too).

I don't know exactly where is the problem but you're rerooting (function
reroot) Axiom when you compile some interpreter's files. Reroot accepts
an argument which has to be the root of Axiom. You give him (to reroot)
a unix path and that's a problem (consequently $spadroot is wrong).
$spadroot is used everywhere to create path relative to it so may be
this is the problem ($spadroot is used to define |
$defaultMsgDatabaseName|).

Now the last thing, AxiomForWindows uses 'pwd -W' to define the SPAD
variable, pwd -W gives an acceptable path for GCL.

Hope that helps,

Greg

PS : It was not too difficult to find the problem I have some problems
actually with files on Windows (user-homedir-pathname) returns '~/' (not
the path that I want :-) and  I had, last week, some problems with the
'start' function (this is the function that display startup messages and
triggers your bug).

==========================
==========================
====================

Variables and their definitions in AxiomForWindows when building Axiom
in the /home/greg/AxiomOnWindows directory

SPAD=C:/MinGW/MSYS/home/greg/AxiomOnWindows/mnt/ SYS=
SPD=C:/MinGW/MSYS/home/greg/AxiomOnWindows
LSP=C:/MinGW/MSYS/home/greg/AxiomOnWindows/lsp
GCLDIR=C:/MinGW/MSYS/home/greg/AxiomOnWindows/lsp/gcl-2.6.5w
SRC=C:/MinGW/MSYS/home/greg/AxiomOnWindows/src
INT=C:/MinGW/MSYS/home/greg/AxiomOnWindows/int
OBJ=C:/MinGW/MSYS/home/greg/AxiomOnWindows/obj
MNT=C:/MinGW/MSYS/home/greg/AxiomOnWindows/mnt
ZIPS=/home/greg/AxiomOnWindows/zips
TMP=C:/MinGW/MSYS/home/greg/AxiomOnWindows/obj/tmp
SPADBIN=C:/MinGW/MSYS/home/greg/AxiomOnWindows/mnt//bin
INC=C:/MinGW/MSYS/home/greg/AxiomOnWindows/src/include
CCLBASE=C:/MinGW/MSYS/home/greg/AxiomOnWindows/obj//ccl/ccllisp
PART=cprogs SUBPART=everything NOISE=-o
C:/MinGW/MSYS/home/greg/AxiomOnWindows/obj/tmp/trace
GCLVERSION=gcl-2.6.5w
TANGLE=C:/MinGW/MSYS/home/greg/AxiomOnWindows/mnt//bin/lib/notangle


===============          =======
===========
=============== Makefile =======
===========
===============          =======
===========

SPD=$(shell pwd -W)
SYS=$(notdir $(AXIOM))
SPAD=${SPD}/mnt/${SYS}
LSP=${SPD}/lsp
#GCLVERSION=gcl-2.4.1
#GCLVERSION=gcl-2.5
#GCLVERSION=gcl-2.5.2
#GCLVERSION=gcl-2.6.1
#GCLVERSION=gcl-2.6.2
#GCLVERSION=gcl-2.6.2a
#GCLVERSION=gcl-2.6.3
GCLVERSION=gcl-2.6.5w
AWK=gawk
GCLDIR=${LSP}/${GCLVERSION}
SRC=${SPD}/src
INT=${SPD}/int
OBJ=${SPD}/obj
MNT=${SPD}/mnt
ZIPS=${shell pwd}/zips
TMP=${OBJ}/tmp
SPADBIN=${MNT}/${SYS}/bin
INC=${SPD}/src/include
CCLBASE=${OBJ}/${SYS}/ccl/ccllisp
INSTALL=/usr/local/axiom
COMMAND=${INSTALL}/mnt/${SYS}/bin/axiom
TANGLE=${SPADBIN}/lib/notangle

NOISE="-o ${TMP}/trace"

PART= cprogs
SUBPART= everything


ENV= SPAD=${SPAD} SYS=${SYS} SPD=${SPD} LSP=${LSP} GCLDIR=${G=
CLDIR} \
     SRC=${SRC} INT=${INT} OBJ=${OBJ} MNT=${MNT} ZIPS=${ZIPS} T=
MP=${TMP}
\
     SPADBIN=${SPADBIN} INC=${INC} CCLBASE=${CCLBASE} PART=${PART=
} \
     SUBPART=${SUBPART} NOISE=${NOISE} GCLVERSION=${GCLVERSION} \
     TANGLE=${TANGLE}

all: noweb litcmds
@ echo 1 making a ${SYS} system, PART=${PART} SUBPART=${SUBPART}
@ echo 2 Environment ${ENV}
@ ${TANGLE} -t8 -RMakefile.${SYS} Makefile.pamphlet >Makefile.${SYS}
@ ${ENV} $(MAKE) -f Makefile.${SYS}
@echo 3 finished system build on `date` | tee >lastBuildDate

start: noweb litcmds

book:
@ echo 79 building the book as ${MNT}/${SYS}/doc/book.dvi
@ mkdir -p ${TMP}
@ mkdir -p ${MNT}/${SYS}/doc
@ cp ${SRC}/doc/book.pamphlet ${MNT}/${SYS}/doc
@ cp -pr ${SRC}/doc/ps ${MNT}/${SYS}/doc
@ (cd ${MNT}/${SYS}/doc ; \
          if [ .${NOISE} = . ] ; then \
    ( latex book.pamphlet --interaction nonstopmode ; \
      latex book.pamphlet --interaction nonstopmode ) ; \
   else \
    ( latex book.pamphlet --interaction nonstopmode >${TMP}/trace ; \
      latex book.pamphlet --interaction nonstopmode >${TMP}/trace ) ; \
  fi ; \
  rm book.pamphlet ; \
  rm book.toc ; \
  rm book.log ; \
  rm book.aux )
@ echo 80 The book is at ${MNT}/${SYS}/doc/book.dvi

noweb:
@echo 13 making noweb
@mkdir -p ${OBJ}/noweb
@mkdir -p ${TMP}
@mkdir -p ${MNT}/${SYS}/bin/lib
@( cd ${OBJ}/noweb ; \
tar -zxf ${ZIPS}/noweb-2.10a.tgz ; \
cd ${OBJ}/noweb/src/c ; \
patch <${ZIPS}/noweb.modules.c.patch ; \
cd ${OBJ}/noweb/src ; \
./awkname ${AWK} ; \
patch <${ZIPS}/noweb.src.Makefile.patch ; \
${ENV} ${MAKE} BIN=${MNT}/${SYS}/bin/lib LIB=${MNT}/${SYS}/bin/lib \
                MAN=${MNT}/${SYS}/bin/man \
                TEXINPUTS=${MNT}/${SYS}/bin/tex all install
>${TMP}/trace )
@echo The file marks the fact that noweb has been made > noweb

nowebclean:
@echo 14 cleaning ${OBJ}/noweb
@rm -rf ${OBJ}/noweb
@rm -f noweb

litcmds:
@echo 0 ${ENV}
@echo 10 copying ${SRC}/scripts to ${MNT}/${SYS}/bin
@cp -pr ${SRC}/scripts/* ${MNT}/${SYS}/bin

install:
@echo 78 installing Axiom in ${INSTALL}
@mkdir -p ${INSTALL}
@cp -pr ${MNT} ${INSTALL}
@echo AXIOM=${INSTALL}/mnt/${SYS} >${COMMAND}
@cat ${SRC}/etc/axiom >>${COMMAND}
@chmod +x ${COMMAND}
@echo 79 Axiom installation finished.
@echo
@echo Please add $(shell dirname ${COMMAND}) to your PATH variable
@echo Start Axiom with the command $(shell basename ${COMMAND})
@echo

document: noweb litcmds
@ echo 4 making a ${SYS} system, PART=${PART} SUBPART=${SUBPART}
@ echo 5 Environment ${ENV}
@ ${TANGLE} -t8 -RMakefile.${SYS} Makefile.pamphlet >Makefile.${SYS}
@ ${ENV} $(MAKE) -f Makefile.${SYS} document
@echo 6 finished system build on `date` | tee >lastBuildDate

clean: noweb litcmds
@ echo 7 making a ${SYS} system, PART=${PART} SUBPART=${SUBPART}
@ echo 8 Environment ${ENV}
@ ${TANGLE} -t8 -RMakefile.${SYS} Makefile.pamphlet >Makefile.${SYS}
@ ${ENV} $(MAKE) -f Makefile.${SYS} clean
@ rm -f noweb
@ rm -f *~
@echo 9 finished system build on `date` | tee >lastBuildDate





$spadroot is set to a unix path (/some/where)

> =========================
====
>
>
> To get to that point I have to disable calls to apply the patch (at
> the end of this message) to src/interp/patches.lisp.pamphlet.
>
> Suggestions?
>
> -- Gaby
>
>
> *** usbdisk_2/cas/axiom/bi/src/interp/patches.lisp.pamphlet	2006-11-30 =
15:51:12.000000000 -0600
> --- usbdisk/axiom.bi/src/interp/patches.lisp.pamphlet	2006-12-10 08:59:=
50.000000000 -0600
> *************** previous definition.
> *** 342,352 ****
>       (setq returncode 0))
>      (unless (zerop returncode) (bye returncode)))))
>  
> ! #+:dos
>   (setq vmlisp::$current-directory (truename "."))
>   #+:dos
>   (setq vmlisp::$spadroot "/spad/mnt/dos")
> ! #+:dos
>   (defun user-homedir-pathname ()
>    (truename "."))
>  
> --- 342,352 ----
>       (setq returncode 0))
>      (unless (zerop returncode) (bye returncode)))))
>  
> ! #+(or :dos :win32)
>   (setq vmlisp::$current-directory (truename "."))
>   #+:dos
>   (setq vmlisp::$spadroot "/spad/mnt/dos")
> ! #+(or :dos :win32)
>   (defun user-homedir-pathname ()
>    (truename "."))
>  
> *************** previous definition.
> *** 379,385 ****
>  
>   (defun |makeList| (size el) (make-list size :initial-element el) )
>  
> ! #+:akcl
>   (defun print-xdr-stream (x y z) (format y "XDR:~A" (xdr-stream-name x=
)))
>   #+:akcl
>   (defstruct (xdr-stream
> --- 379,385 ----
>  
>   (defun |makeList| (size el) (make-list size :initial-element el) )
>  
> ! #+:ackl
>   (defun print-xdr-stream (x y z) (format y "XDR:~A" (xdr-stream-name x)))
>   #+:akcl
>   (defstruct (xdr-stream
> *************** previous definition.
> *** 387,411 ****
>              "A structure to hold XDR streams. The stream is printed out."
>              (handle ) ;; this is what is used for xdr-open xdr-read xdr-write
>              (name ))  ;; this is used for printing
> ! #+:akcl
>   (defun |xdrOpen| (str dir) (make-xdr-stream :handle (system:xdr-open str) :name str))
>   #+:CCL
>   (defun |xdrOpen| (str dir) (xdr-open str dir) )
> ! #+:dos
>   (defun |xdrOpen| (str dir) (format t "xdrOpen called"))
>  
> ! #+:akcl
>   (defun |xdrRead| (xstr r) (system:xdr-read (xdr-stream-handle xstr) r) )
>   #+:CCL
>   (defun |xdrRead| (xstr r) (xdr-read xstr r) )
> ! #+:dos
>   (defun |xdrRead| (str) (format t "xdrRead called"))
>  
> ! #+:akcl
>   (defun |xdrWrite| (xstr d) (system:xdr-write (xdr-stream-handle xstr) d) )
>   #+:CCL
>   (defun |xdrWrite| (xstr d) (xdr-write xstr d) )
> ! #+:dos
>   (defun |xdrWrite| (str) (format t "xdrWrite called"))
>  
>   ;; here is a test for XDR
> --- 387,411 ----
>              "A structure to hold XDR streams. The stream is printed out."
>              (handle ) ;; this is what is used for xdr-open xdr-read xdr-write
>              (name ))  ;; this is used for printing
> ! #+(and :akcl (not (or :dos :win32)))
>   (defun |xdrOpen| (str dir) (make-xdr-stream :handle (system:xdr-open str) :name str))
>   #+:CCL
>   (defun |xdrOpen| (str dir) (xdr-open str dir) )
> ! #+(or :dos :win32)
>   (defun |xdrOpen| (str dir) (format t "xdrOpen called"))
>  
> ! #+(and :akcl (not (or :dos :win32)))
>   (defun |xdrRead| (xstr r) (system:xdr-read (xdr-stream-handle xstr) r) )
>   #+:CCL
>   (defun |xdrRead| (xstr r) (xdr-read xstr r) )
> ! #+(or :dos :win32)
>   (defun |xdrRead| (str) (format t "xdrRead called"))
>  
> ! #+(and :akcl (not (or :dos :win32)))
>   (defun |xdrWrite| (xstr d) (system:xdr-write (xdr-stream-handle xstr) d) )
>   #+:CCL
>   (defun |xdrWrite| (xstr d) (xdr-write xstr d) )
> ! #+(or :dos :win32)
>   (defun |xdrWrite| (str) (format t "xdrWrite called"))
>  
>   ;; here is a test for XDR

\start
Date: Mon, 11 Dec 2006 20:08:45 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: GCL in batch mode
Cc: Camm Maguire

> 
> Camm --
> 
>   I'm wondering what the behaviour of "gcl -batch" is.  The info page
> says:
> 
>    `-batch'
>         Do not enter the command print loop.  Useful if the other command
>         line arguments do something.  Do not print the License and
>         acknowledgement information.  Note if your program does print any
>         License information, it must print the GCL header information
>         also.
> 
> 

AFAICS "not enter the command print loop" really means "do not enter
read-eval-print loop", so in particular nothing is read from standard
input.  For me the following works:

gcl -batch -eval '(format t "~a~&" si::*system-directory*)'

\start
Date: Mon, 11 Dec 2006 13:12:30 -0600 (CST)
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: GCL in batch mode
Cc: Camm Maguire

On Mon, 11 Dec 2006, Waldek Hebisch wrote:

| >
| > Camm --
| >
| >   I'm wondering what the behaviour of "gcl -batch" is.  The info page
| > says:
| >
| >    `-batch'
| >         Do not enter the command print loop.  Useful if the other command
| >         line arguments do something.  Do not print the License and
| >         acknowledgement information.  Note if your program does print any
| >         License information, it must print the GCL header information
| >         also.
| >
| >
|
| AFAICS "not enter the command print loop" really means "do not enter
| read-eval-print loop", so in particular nothing is read from standard
| input.  For me the following works:
|
| gcl -batch -eval '(format t "~a~&" si::*system-directory*)'

Interesting.  I tried that combination too; it did not work -- which
perplexed me.

\start
Date: Mon, 11 Dec 2006 14:17:24 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: GCL in batch mode
Cc: Camm Maguire

> a@nongnu.org] On Behalf Of Gabriel Dos Reis
> 
> On Mon, 11 Dec 2006, Waldek Hebisch wrote:
> ...
> | For me the following works:
> |
> | gcl -batch -eval '(format t "~a~&" si::*system-directory*)'
> 
> Interesting.  I tried that combination too; it did not work --
> which perplexed me.
> 

The above commmand also works for me on axiom-developer.org.
No banner. Only the output you want.

\start
Date: 11 Dec 2006 13:10:45 -0600
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Axiom/GCL on windows

Gregory Vanuxem writes:

| Le dimanche 10 d=E9cembre 2006 =E0 10:16 -0600, Gabriel Dos Reis a =E9crit :
|
| [...]
|
| > start address -T 10629000 Finished loading xrun.o
| > Loading interop.o
| > start address -T 1062f000 Finished loading interop.o
| > Loading patches.o
| > start address -T 10638000 Finished loading patches.o
| >    Using local database ../../../axiom.bi/src/share/algebra/compress.daase..   Re-reading compress.daase   Using local database ../../../axiom.bi/src/share/algebra/interp.daase..   Re-reading interp.daase
| >
| > Error: Caught fatal error [memory may be damaged]
| > Fast links are on: do (si::use-fast-links nil) for debugging
| > Error signalled by RETURN.
| > Broken at APPLY.  Type :H for Help.
|
| The segfault occurs in cacheKeyedMsg (src/interp/patches.lisp). This is
| a path problem, |fetchKeyedMsg| (patches.lisp) calls cacheKeyedMsg with
| |$defaultMsgDatabaseName| as argument. This argument is a pathname (path
| to target/*/share/msg/s2-us.msgs). GCL can not open this file since it's
| a unix path (/some/where) and segfault (I don't know where).

Thanks for your insight into this puzzle.  I would have expected a
notification on failure, instead of proceeding ahead and craching.

Before rebuilding the database, the "old" DAASE is set to point to
the databases coming with the source code
axiom.bi/src/share/algebra/*.daase.

This is even mysterous because other database files in the same
directory (compress.daase) seem to have been opened successfully.

| With GCL on
| Windows you have to use mixed path (c:/some/where)

I noticed that GCL itself will figure out part of the path (the "C:/"
part), sometimes not.  The inconsistency puzzled me at the time but I
did not relate it to a mysterous "segmentation fault".  This is very
tricky.  Because, we're compiling under MinWG/MSYS and the path would
come out as /some/path, not C:/some/path.

| (I know that truename
| accept Windows path with two backslash as separator (c:\\some\\where) so
| may be other functions too).
|
| I don't know exactly where is the problem but you're rerooting (function
| reroot) Axiom when you compile some interpreter's files. Reroot accepts
| an argument which has to be the root of Axiom.

yes, that invariant is met too.

| You give him (to reroot)
| a unix path and that's a problem (consequently $spadroot is wrong).

So, in essence, are you saying that we must convert the path to
something usable by GCL?  Isn't this something that GCL should take
care of?

Thanks!

\start
Date: Mon, 11 Dec 2006 20:22:13 +0100 (CET)
From: Waldek Hebisch
To: Gabriel Dos Reis
Subject: Re: GCL in batch mode
Cc: Camm Maguire

> On Mon, 11 Dec 2006, Waldek Hebisch wrote:
> 
> | >
> | > Camm --
> | >
> | >   I'm wondering what the behaviour of "gcl -batch" is.  The info page
> | > says:
> | >
> | >    `-batch'
> | >         Do not enter the command print loop.  Useful if the other command
> | >         line arguments do something.  Do not print the License and
> | >         acknowledgement information.  Note if your program does print any
> | >         License information, it must print the GCL header information
> | >         also.
> | >
> | >
> |
> | AFAICS "not enter the command print loop" really means "do not enter
> | read-eval-print loop", so in particular nothing is read from standard
> | input.  For me the following works:
> |
> | gcl -batch -eval '(format t "~a~&" si::*system-directory*)'
> 
> Interesting.  I tried that combination too; it did not work -- which
> perplexed me.
> 

Maybe I snipped too much. You wrote:

echo '(format nil "~a" si::*system-directory*)' | gcl -batch
              ^^^

Just usning '-eval' gives:

gcl -batch -eval '(format nil "~a" si::*system-directory*)'

which prints nothing. IIUC without '-batch' you print return _value_ of
format function, but '-batch' supresess printing of return value, so
you get nothing.

\start
Date: Mon, 11 Dec 2006 13:23:55 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: GCL in batch mode
Cc: Camm Maguire

On Mon, 11 Dec 2006, Bill Page wrote:

| > a@nongnu.org] On Behalf Of Gabriel Dos Reis
| >
| > On Mon, 11 Dec 2006, Waldek Hebisch wrote:
| > ...
| > | For me the following works:
| > |
| > | gcl -batch -eval '(format t "~a~&" si::*system-directory*)'
| >
| > Interesting.  I tried that combination too; it did not work --
| > which perplexed me.
| >
|
| The above commmand also works for me on axiom-developer.org.
| No banner. Only the output you want.

OK; something must not be OK with my setting.  I'll give it one more
try later.

\start
Date: Mon, 11 Dec 2006 13:28:26 -0600 (CST)
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: GCL in batch mode
Cc: Camm Maguire

On Mon, 11 Dec 2006, Waldek Hebisch wrote:

| > On Mon, 11 Dec 2006, Waldek Hebisch wrote:
| >
| > | >
| > | > Camm --
| > | >
| > | >   I'm wondering what the behaviour of "gcl -batch" is.  The info page
| > | > says:
| > | >
| > | >    `-batch'
| > | >         Do not enter the command print loop.  Useful if the other command
| > | >         line arguments do something.  Do not print the License and
| > | >         acknowledgement information.  Note if your program does print any
| > | >         License information, it must print the GCL header information
| > | >         also.
| > | >
| > | >
| > |
| > | AFAICS "not enter the command print loop" really means "do not enter
| > | read-eval-print loop", so in particular nothing is read from standard
| > | input.  For me the following works:
| > |
| > | gcl -batch -eval '(format t "~a~&" si::*system-directory*)'
| >
| > Interesting.  I tried that combination too; it did not work -- which
| > perplexed me.
| >
|
| Maybe I snipped too much. You wrote:
|
| echo '(format nil "~a" si::*system-directory*)' | gcl -batch
|               ^^^
| Just usning '-eval' gives:
|
| gcl -batch -eval '(format nil "~a" si::*system-directory*)'
|
| which prints nothing.


Yes, I did not include all the variations I tried :-/

| IIUC without '-batch' you print return _value_ of
| format function, but '-batch' supresess printing of return value, so
| you get nothing.

OK; thanks!

\start
Date: Mon, 11 Dec 2006 21:01:40 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: Re: Axiom/GCL on windows

Le lundi 11 d=E9cembre 2006 =E0 13:10 -0600, Gabriel Dos Reis a =E9crit :

[...]

> So, in essence, are you saying that we must convert the path to
> something usable by GCL?

Yes.

>  Isn't this something that GCL should take
> care of?

Don't know. What I'm sure is that I don't want to use a MSYS shell to
work with GCL (I hate this shell :-).

\start
Date: Mon, 11 Dec 2006 15:24:43 -0500
From: Bill Page
To: Gregory Vanuxem
Subject: RE: Axiom/GCL on windows

On December 11, 2006 3:02 PM Vanuxem Gregory wrote:

> ...
> What I'm sure is that I don't want to use a MSYS shell to
> work with GCL (I hate this shell :-).
> 

What shell on Windows do you use to run ./configure?

\start
Date: Mon, 11 Dec 2006 21:29:06 +0100 (CET)
From: Waldek Hebisch
To: Gernot Hueber
Subject: Re: Nag libraries

> I have spent some thoughts in how Axiom can interface external (shared) 
> libraries. I have tried this one for a few functions of the Gnu Scientific 
> Library (GSL) - the work is unfiniished, due to that there are numerous 
> functions.
> However, this approach is easily adoptably for any external C library.
> Furthermore, some of the NAG related domains will be still requried, 
> especially that one, converting Axiom functions to Fortran (actually a 
> conversion to C are necessary). 
> 
> What do you think which approach is more powerful, reliable, ...? 

Linking functons directly into Lisp image has many advantages.  But
I feel that with current GCL FFI it is unworkable as a general method.
>From my point of view killer issue is memory management.  As Camm
Maguire wrote external routines can not use 'malloc' or one has to
allocate all arguments as 'unmovable'.  Not using 'malloc' can not
work as a general method.  To efficiently allocatate 'unmovable' arguments
require a lot of effort.  A simple (but inefficient) way is just copy
arguments to freshly allocated memory.

So in short term I feel that socket interface may be competitive:  for
larger arguments performance should be comparable with copying interface,
and we avoid most memory management problems.

The old Axiom scheme consisting of AXIOMsys comunicating with naglink
which in turn comunicates with Nag demon is probably too complicated.
One possiblility that I consider is linking external routines into
naglink.

However, in short time ressurecting Nag demon may be usefull.  Algebra
and interpreter contains together about 40 000 lines of code to support
Nag link.  Much of this code is really above the link level and should
be usable for any chosen way of comunicating with Fortran routines.
And yes -- we certainly want support comunication with other langages
like C.

\start
Date: Mon, 11 Dec 2006 21:50:48 +0100
From: Gregory Vanuxem
To: Bill Page
Subject: RE: Axiom/GCL on windows
Cc: Gabriel Dos Reis

Le lundi 11 d=E9cembre 2006 =E0 15:24 -0500, Bill Page a =E9crit :
> On December 11, 2006 3:02 PM Vanuxem Gregory wrote:
>
> > ...
> > What I'm sure is that I don't want to use a MSYS shell to
> > work with GCL (I hate this shell :-).
> >
>
> What shell on Windows do you use to run ./configure?

Bash 2.04.0(1) in a rxvt terminal (v2.7.2). When I say a shell I speak
of the two. I have a lot of problems with it, for example if I resize
the main window I can no longer type something. The key are incorrectly
mapped (can not use the arrows, end, home etc..).

\start
Date: Mon, 11 Dec 2006 21:56:34 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: Re: Axiom/GCL on windows

[...]

> I don't know exactly where is the problem but you're rerooting (function
> reroot) Axiom when you compile some interpreter's files. Reroot accepts
> an argument which has to be the root of Axiom. You give him (to reroot)
> a unix path and that's a problem (consequently $spadroot is wrong).
> $spadroot is used everywhere to create path relative to it so may be
> this is the problem ($spadroot is used to define |
> $defaultMsgDatabaseName|).

After further investigation, $spadroot is more likely set, when building
depsys, via makedep.lisp.

\start
Date: Mon, 11 Dec 2006 15:02:14 -0600 (CST)
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Axiom/GCL on windows

On Mon, 11 Dec 2006, Vanuxem Gregory wrote:

| >  Isn't this something that GCL should take
| > care of?
|
| Don't know. What I'm sure is that I don't want to use a MSYS shell to
| work with GCL (I hate this shell :-).

Cygwin does not build GCL at the moment either.

(And I have no time to become a Windows programmer -- MinGW/MSYS is
all I can do).

\start
Date: Mon, 11 Dec 2006 15:04:10 -0600 (CST)
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Axiom/GCL on windows

On Mon, 11 Dec 2006, Vanuxem Gregory wrote:

| Le lundi 11 d=E9cembre 2006 =E0 19:42 +0100, Vanuxem Gregory a =E9crit :
|
| [...]
|
| > I don't know exactly where is the problem but you're rerooting (function
| > reroot) Axiom when you compile some interpreter's files. Reroot accepts
| > an argument which has to be the root of Axiom. You give him (to reroot)
| > a unix path and that's a problem (consequently $spadroot is wrong).
| > $spadroot is used everywhere to create path relative to it so may be
| > this is the problem ($spadroot is used to define |
| > $defaultMsgDatabaseName|).
|
| After further investigation, $spadroot is more likely set, when building
| depsys, via makedep.lisp.

Hmm, depsys builds fine and translates/compiles files with no problem.

\start
Date: 11 Dec 2006 15:07:35 -0600
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: Re: Nag libraries

Waldek Hebisch writes:

[...]

| And yes -- we certainly want support comunication with other langages
| like C.

And C++, yes.  One of my project here is to build a translation from
Axiom/ASPAD to C++.  But, that is not going to be finished for Xmas
:-)

\start
Date: Tue, 12 Dec 2006 02:28:41 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: Re: Axiom/GCL on windows

Le lundi 11 d=E9cembre 2006 =E0 15:04 -0600, Gabriel Dos Reis a =E9crit :
> On Mon, 11 Dec 2006, Vanuxem Gregory wrote:
>
> | Le lundi 11 d=E9cembre 2006 =E0 19:42 +0100, Vanuxem Gregory a =E9crit :
> |
> | [...]
> |
> | > I don't know exactly where is the problem but you're rerooting (function
> | > reroot) Axiom when you compile some interpreter's files. Reroot accepts
> | > an argument which has to be the root of Axiom. You give him (to reroot)
> | > a unix path and that's a problem (consequently $spadroot is wrong).
> | > $spadroot is used everywhere to create path relative to it so may be
> | > this is the problem ($spadroot is used to define |
> | > $defaultMsgDatabaseName|).
> |
> | After further investigation, $spadroot is more likely set, when building
> | depsys, via makedep.lisp.
>
> Hmm, depsys builds fine and translates/compiles files with no problem.

Yes, I was wrong. What I said is applicable to depsys (via build-depsys)
only. Building interpsys (via build-interpsys) is similar, the Lisp
'spad' variable holds the root of Axiom. build-depsys and
build-interpsys call initroot (with spad as argument) which calls reroot
(and set $spadroot). So I hardcoded the SPAD variable in AX_FLAGS
(src/Makfile and src/interp/Makefile) to a usable path for GCL
(C:/staging/build/directory) for testing purpose and tried to rebuild
Axiom. The build process reached "layer 1" of the algebra and I stopped
there.

I wonder how it'll be possible to have a "correct" SPAD variable for
Windows with the autotools or any other tools. For Cygwin there is
cygpath to do that.

\start
Date: Mon, 11 Dec 2006 23:12:51 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

On December 11, 2006 11:40 AM Gabriel Dos Reis wrote:
> 
> On Mon, 11 Dec 2006, Bill Page wrote:
> 
> | On December 10, 2006 11:41 PM Gabriel Dos Reis wrote:
> | > ...
> | > Axiom build-improvements branch revision 395 contains all the
> | > necessary bits to build Axiom on windows and reproduce the
> | > above. Please could you give it a try?
> | >
> |
> | I pulled the latest patches to build-improvements and tried an
> | out-of-source build in MSYS but
> |
> |   mkdir axiom.test
> |   cd axiom.test
> |   ../build-improvements/configure
> |
> | hangs my Windows XP system during a confidence test. I am not
> | able even to kill the process.
> 
> That is very odd.
>

Yes, it was VERY ODD indeed, but it turned out not to be a problem
with MSYS/MinGW or build-improvements at all. See solution below.
 
> |
> | This same MSYS environment builds axiom--windows--1 and
> | gcl-2.6.8pre with no problems.
> |

After a little more testing, I discovered that this problem was
not limited to build-improvements. Contrary to what I said above
the build of axiom--windows--1 and gcl also failed.

> | Can you give me some more specifics about how you are testing
> | this on windows?
> 
> I pretty much do the same thing as you.
> 
>   (1) get the axiom source
>   (2) create a build directory
>   (3) invoke configure
>   (4) make
> 
> Could you send me the (partial) config.log?
> 

After spending most of the day on this problem, I finally
determined that at random places during the configure (or in
fact any long build operation involving MinGW) some process
named 'LVPrcSrv.exe' was suddenly hogging 99% of all available
CPU time. Google told me that this program was part of the
Logitech QuikCam video effects package. In fact I had installed
the new camera and software about a couple of months ago. And
another search turned up reports of exactly this type of problem
reported by cygwin users with a work-round of stopping the video
effects service. (I have not yet been able to find a fix for
this from Logitech.)

The final result.

As you asked, I was able to run:

  mkdir axiom.test
  cd axiom.test
  ../build-improvements/configure
  make

up to this point:

...
compiling SETCAT-.lsp to SETCAT-.o
compiling SINT.lsp to SINT.o
compiling STAGG.lsp to STAGG.o
compiling STAGG-.lsp to STAGG-.o
compiling SYMBOL.lsp to SYMBOL.o
compiling TSETCAT.lsp to TSETCAT.o
compiling TSETCAT-.lsp to TSETCAT-.o
compiling UFD.lsp to UFD.o
compiling UFD-.lsp to UFD-.o
compiling ULSCAT.lsp to ULSCAT.o
compiling UPOLYC.lsp to UPOLYC.o
compiling UPOLYC-.lsp to UPOLYC-.o
compiling URAGG.lsp to URAGG.o
compiling URAGG-.lsp to URAGG-.o
compiling VECTOR.lsp to VECTOR.o
=====================================
=== algebra bootstrap complete ======
=====================================
compiling AHYP.spad to AHYP.NRLIB
/bin/sh: ./../..//build/i686-pc-mingw32/bin/interpsys: No such file or
directory
make[2]: *** [../..//int/algebra/AHYP.NRLIB/code.o] Error 127
make[2]: Leaving directory `/home/Administrator/axiom/src/algebra'
make[1]: *** [all-algebra] Error 2
make[1]: Leaving directory `/home/Administrator/axiom/src'
make: *** [all-src] Error 2

-------------

This looks very promising to me.

I recall a problem similar to this in the axiom--windows--1
build. Did you catch the patch from axiom--windows--1 in boot
where you need to ignore CR in windows line endings?

I will look at this further tomorrow.

\start
Date: Tue, 12 Dec 2006 00:41:11 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Mon, 11 Dec 2006, Bill Page wrote:

[...]

| After spending most of the day on this problem, I finally
| determined that at random places during the configure (or in
| fact any long build operation involving MinGW) some process
| named 'LVPrcSrv.exe' was suddenly hogging 99% of all available
| CPU time. Google told me that this program was part of the
| Logitech QuikCam video effects package. In fact I had installed
| the new camera and software about a couple of months ago. And
| another search turned up reports of exactly this type of problem
| reported by cygwin users with a work-round of stopping the video
| effects service. (I have not yet been able to find a fix for
| this from Logitech.)

Woaw!  I was mant light-years away of guessing that.

| The final result.
|
| As you asked, I was able to run:
|
|   mkdir axiom.test
|   cd axiom.test
|   ../build-improvements/configure
|   make
|
| up to this point:
|
| ...
| compiling SETCAT-.lsp to SETCAT-.o
| compiling SINT.lsp to SINT.o
| compiling STAGG.lsp to STAGG.o
| compiling STAGG-.lsp to STAGG-.o
| compiling SYMBOL.lsp to SYMBOL.o
| compiling TSETCAT.lsp to TSETCAT.o
| compiling TSETCAT-.lsp to TSETCAT-.o
| compiling UFD.lsp to UFD.o
| compiling UFD-.lsp to UFD-.o
| compiling ULSCAT.lsp to ULSCAT.o
| compiling UPOLYC.lsp to UPOLYC.o
| compiling UPOLYC-.lsp to UPOLYC-.o
| compiling URAGG.lsp to URAGG.o
| compiling URAGG-.lsp to URAGG-.o
| compiling VECTOR.lsp to VECTOR.o
| =====================================
| === algebra bootstrap complete ======
| =====================================
| compiling AHYP.spad to AHYP.NRLIB
| /bin/sh: ./../..//build/i686-pc-mingw32/bin/interpsys: No such file or
| directory

Ah, yes; that means the segfault occured earlier resulting in
interpsys not being created.

[...]

| This looks very promising to me.

Thanks.

| I recall a problem similar to this in the axiom--windows--1
| build. Did you catch the patch from axiom--windows--1 in boot
| where you need to ignore CR in windows line endings?

No, unfortunately not.  I thought of a CR problem corruptign the
databases; but I also remember Tim saying that those files are not
text files so I just assumed they are marked binary and kept as such.

I'm trying to build Axiom with AXIOM and SPAD set to relative
paths and see what happens (testing Vanuxem's findings).

\start
Date: 12 Dec 2006 00:59:07 -0600
From: Gabriel Dos Reis
To: Waldek Hebisch
Subject: member from new Boot

Hi,

  Among the Boot files in src/interp/ currently translated by bootsys,
alql.boot is the only one that uses member.  I've temporarily disabled
"member" as a special new Boot function, so that its translation matches
that of old Boot (depsys).

Built and tested on an x86_64-suse-linux

-- Gaby

src/boot/

2006-12-11  Gabriel Dos Reis  Gabriel Dos Reis

	* typrops.boot.pamphlet: Temporarily isable "member" as special
	new Boot function.

src/interp/

2006-12-11  Gabriel Dos Reis  Gabriel Dos Reis

	* alql.boot.pamphlet (getBrowseDatabase): Directly call member.

*** src/boot/Makefile.pamphlet	(revision 15343)
--- src/boot/Makefile.pamphlet	(local)
*************** Translates the file filename, and writes
*** 1033,1038 ****
--- 1033,1064 ----
  names  used, and  where used to the file filename.xref
  \end{verbatim}
  
+ \subsection{Reserved identifiers}
+ 
+ The following identifiers are reserved by Boot.
+ \begin{verbatim}
+   and    append   apply     atom      car    cdr       cons      copy
+   croak  drop     exit      false     first  function  genvar    IN
+   is     isnt     lastNode  LAST      list   member    mkpf      nconc
+   nil    not      NOT       nreverse  null   or        otherwise PAIRP
+   removeDuplicates          rest      reverse          setDifference
+   setIntersection setPart   setUnion  size   strconc   substitute
+   take   true     PLUS      MINUS     TIMES  POWER     SLASH     LT
+   GT     LE       GE        SHOEEQ    NE     T
+ \end{verbatim}
+ 
+ The following identifiers designate special accessor functions in Boot.
+ \begin{verbatim}
+   setName     setLabel    setLevel   setType    setVar    setLeaf
+   setLeaf     setDef      aGeneral   aMode      aTree     aValue
+   attributes  cacheCount  cacheName  cacheReset cacheType env
+   expr        CAR         mmCondition           mmDC      mmImplementation
+   mmSignature mmTarget    mode       op         opcode    opSig
+   CDR         sig         source     streamCode streamDef streamName
+   target
+ \end{verbatim}
+ 
+ 
  \section{The Makefile}
  
  When all of the native object files are produced we construct a
*** src/boot/typrops.boot.pamphlet	(revision 15343)
--- src/boot/typrops.boot.pamphlet	(local)
*************** for i in [ _
*** 204,210 ****
    ["lastNode",    "LAST"]  , _
    ["LAST",        "last"] , _
    ["list",        "LIST"]  , _
!   ["member",        "MEMBER"]  , _
    ["mkpf",        "MKPF"]  , _
    ["nconc",      "NCONC"]  , _
    ["nil"           ,NIL ]  , _
--- 204,210 ----
    ["lastNode",    "LAST"]  , _
    ["LAST",        "last"] , _
    ["list",        "LIST"]  , _
! --  ["member",        "MEMBER"]  , _
    ["mkpf",        "MKPF"]  , _
    ["nconc",      "NCONC"]  , _
    ["nil"           ,NIL ]  , _
*** src/interp/alql.boot.pamphlet	(revision 15343)
--- src/interp/alql.boot.pamphlet	(local)
***************
*** 50,56 ****
  
  getBrowseDatabase(kind) ==
    $includeUnexposed? : local := true
!   not FUNCALL("member",kind,'("o" "k" "c" "d" "p")) => nil
    grepConstruct('"*",INTERN kind)
  
  stringMatches?(pattern,subject) ==
--- 50,56 ----
  
  getBrowseDatabase(kind) ==
    $includeUnexposed? : local := true
!   not member(kind,'("o" "k" "c" "d" "p")) => nil
    grepConstruct('"*",INTERN kind)
  
  stringMatches?(pattern,subject) ==

\start
Date: Tue, 12 Dec 2006 01:10:21 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: GCL in batch mode
Cc: Camm Maguire

On Mon, 11 Dec 2006, Bill Page wrote:

| > a@nongnu.org] On Behalf Of Gabriel Dos Reis
| >
| > On Mon, 11 Dec 2006, Waldek Hebisch wrote:
| > ...
| > | For me the following works:
| > |
| > | gcl -batch -eval '(format t "~a~&" si::*system-directory*)'
| >
| > Interesting.  I tried that combination too; it did not work --
| > which perplexed me.
| >
|
| The above commmand also works for me on axiom-developer.org.
| No banner. Only the output you want.

I rechecked, and it indeed it works for me too.  I must have done
or tried something very odd before.

\start
Date: Tue, 12 Dec 2006 03:52:29 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Mon, 11 Dec 2006, Bill Page wrote:

| I recall a problem similar to this in the axiom--windows--1
| build. Did you catch the patch from axiom--windows--1 in boot
| where you need to ignore CR in windows line endings?
|
| I will look at this further tomorrow.
|
| Regards,
| Bill Page.

Bill, Greg --

  I believe I solved the mystery:  After the recent reorganization I
made, the variable SPAD did not have a have a value by the time Make
did substitution -- though it has a value set in the _shell_ command
line used to invoke depsys.  Why that isn't an issue under linux is
not clear to me at this moment.

After re-reading Greg's message, I decided to trace build-interpsys
and that is how I spotted that the last argument was empty -- which is
not supposed to be.

Having two ways of saying the same thing (AXIOM and SPAD) is just
confusing and plain wrong.  I changed src/interp/Makefile to use only
AXIOM (and not SPAD).  interpsys was build successfully.
As I'm writing this message, algebra layer 1 is being built.

I also arranged the Makefile to use a relative path for $(AXIOM) during
the build -- that way, I sidestep all issues related to GCL unable to
find files with absolute pathnames not mentioning the harddrive.  At
installation time, I'll set AXIOM to the value returned by "pwd -W",
which is what GCL should be happy with.

I'll report later once the build is complete.
(the windows machine is a very slow machine, so it will take a while).

Many thanks to both of you, and sorry for having wasted your time with
a such a silly issue.  The good news is that we may be able to
build Axiom.build-improvements on windows soon :-)

\start
Date: Tue, 12 Dec 2006 11:24:36 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

On December 12, 2006 4:52 AM Gabriel Dos Reis wrote:
> ... 
> Many thanks to both of you, and sorry for having wasted your
> time with a such a silly issue.

Not at all. I solved a problem I didn't even know I had. :-)

> The good news is that we may be able to build Axiom.
> build-improvements on windows soon :-)
> 

That's excellent! Let me know how/if I can help. One thing I
plan to do after you commit the recent change for the SPAD
variable is to diff against axiom--windows--1. There were
several patches to Axiom that as far as I know were never
incorporated into the axiom--main--1 branch from which Axiom
silver and build-improvements were cloned, although most of
these might already be obsoleted by build-improvements. The
most critical are probably some unix system dependencies such
as 'rm' and 'mv' commands which should really be implemented
in a more portable lisp manner.

When this is accomplished, I would like to suggest that it may
well be time to consider a new "official" silver release of
Axiom. If we could merge in Waldek's improvements to hyperdoc
and his recent bug fixes, that would make a very nice present
for all of us anxious Axiom users!

\start
Date: Wed, 13 Dec 2006 04:02:12 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

On Tuesday, December 12, 2006 4:52 AM Gabriel Dos Reis wrote:
>
> I believe I solved the mystery:  After the recent reorganization
> I made, the variable SPAD did not have a have a value by the time
> Make did substitution -- though it has a value set in the _shell_
> command line used to invoke depsys.  Why that isn't an issue under
> linux is not clear to me at this moment.
>
> After re-reading Greg's message, I decided to trace build-interpsys
> and that is how I spotted that the last argument was empty -- which
> is not supposed to be.
>
> Having two ways of saying the same thing (AXIOM and SPAD) is just
> confusing and plain wrong.  I changed src/interp/Makefile to use
> only AXIOM (and not SPAD).  interpsys was build successfully.
> As I'm writing this message, algebra layer 1 is being built.
>

Have you committed the required changes to build-improvements yet?
I pulled Revision: #401 from SourceForge at about 11:00 PM EST
yesterday (Dec 12). But I still get the same failure at point of
trying to create interpsys. Here's a partial log at the point of the
first failure:

...
5 invoking make in /home/bpage/axiom.test/src/interp with parms:
SYS= i686-pc-mingw32
LISP=lsp BYE=bye
../../../build-improvements/config/mkinstalldirs
./../..//target/i686-pc-mingw32/share
/msgs
mkdir -p -- ./../..//target/i686-pc-mingw32/share/msgs
/bin/install -c -m 644
../../../build-improvements/src/doc/msgs/s2-us.msgs \
         ./../..//target/i686-pc-mingw32/share/msgs
echo '(progn (gbc t) (load "makeint.lisp") (gbc t) (user::spad-save
"../..//build/i686
-pc-mingw32/bin/interpsys.exe"))' |
DAASE="../../../build-improvements/src/share" ./..
/..//build/i686-pc-mingw32/bin/lisp
GCL (GNU Common Lisp)  2.6.8 CLtL1    Dec 13 2006 00:25:13
Source License: LGPL(gcl,gmp), GPL(unexec,bfd,xgcl)
Binary License:  GPL due to GPL'ed components: (UNEXEC)
Modifications of this banner must retain notice of a compatible license
Dedicated to the memory of W. Schelter

Use (help) to get some basic information on how to use GCL.
Temporary directory for compiler files set to
./../..//build/i686-pc-mingw32/

>
Loading makeint.lisp
Loading sys-pkg.lisp
Finished loading sys-pkg.lisp
Loading ../../../build-improvements/src/interp/interp-proclaims.lisp
Finished loading
../../../build-improvements/src/interp/interp-proclaims.lisp
...
Loading interop.o
start address -T 1062f000 Finished loading interop.o
Loading patches.o
start address -T 10638000 Finished loading patches.o
   Using local database
../../../build-improvements/src/share/algebra/compress.daase..
Re-reading compress.daase   Using local database
../../../build-improvements/src/share/algebra/interp.daase..
Re-reading interp.daase

Error: Caught fatal error [memory may be damaged]
Fast links are on: do (si::use-fast-links nil) for debugging
Error signalled by RETURN.
Broken at APPLY.  Type :H for Help.
BOOT>> ...

\start
Date: Wed, 13 Dec 2006 09:08:46 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Wed, 13 Dec 2006, Page, Bill wrote:

| On Tuesday, December 12, 2006 4:52 AM Gabriel Dos Reis wrote:
| >
| > I believe I solved the mystery:  After the recent reorganization
| > I made, the variable SPAD did not have a have a value by the time
| > Make did substitution -- though it has a value set in the _shell_
| > command line used to invoke depsys.  Why that isn't an issue under
| > linux is not clear to me at this moment.
| >
| > After re-reading Greg's message, I decided to trace build-interpsys
| > and that is how I spotted that the last argument was empty -- which
| > is not supposed to be.
| >
| > Having two ways of saying the same thing (AXIOM and SPAD) is just
| > confusing and plain wrong.  I changed src/interp/Makefile to use
| > only AXIOM (and not SPAD).  interpsys was build successfully.
| > As I'm writing this message, algebra layer 1 is being built.

layers 0 through 18 were built, then I got a crash; looking into
src/algebra/Makefile, it looks like we may have another path issue
there too.


| >
|
| Have you committed the required changes to build-improvements yet?

Not yet.

src/algebra needs changes too -- about the path.
I was testing my changes yesterday , and it was late so I went to bed.

I'll ping you later.

\start
Date: Thu, 14 Dec 2006 23:46:48 +0100
From: Gregory Vanuxem
To: list
Subject: Socket and build-improvements under Linux

Hello,

I know that the build-improvements is a work in progress but the
execution of #405 (installed) stopped with:

greg@ellipse:~$ axiom
opening local server socket: Protocol not supported
Fatal error opening I/O socket

This was just for information and I hope it was not specific to me (if
not please let me know).

\start
Date: Thu, 14 Dec 2006 23:50:29 +0100
From: Gregory Vanuxem
To: list
Subject: Re: Socket and build-improvements under Linux

Le jeudi 14 d=E9cembre 2006 =E0 23:46 +0100, Vanuxem Gregory a =E9crit :
> Hello,
>
> I know that the build-improvements is a work in progress but the
> execution of #405 (installed) stopped with:
               ^^^
#402, sorry,

\start
Date: Thu, 14 Dec 2006 23:58:07 +0100 (CET)
From: Waldek Hebisch
To: Francois Maltey
Subject: Re: Interest of the second parameter in normalize

Francois Maltey wrote:
> I'm playing with normalize (expr, x) and normalize (expr, y).
> 
> normalize (expr, x) limits the number of kernel with x.
> So exp (2*x) become exp (x)^2. The other variables remain.
> Is it right ?
> 
> But axiom don't recognize 0 in coefficients in y. Is it right ?
> I test normalize ((exp(2*x)+exp(x))*exp(2*y)/exp(y)-exp(x)*exp(y), x).
> I get ((e^x)^2 + e^x (e^2y-(e^y)^2)) / e^y.
> 
> But if we want to simplify/resolve this polynomial in e^x it's necessary to
> recognize it's simplified coefficients. Am I right ?
> 
> So what is the interest of normalize (expr, x) in front of normalize (expr) ?
> If then axiom must normalize theses coefficients. I don't understand.
> 

I can not give good answers your questions.  But some remarks may be
helpfull:

1) in general computer algebra systems have to choose when to
normalize expressions.  Normalizing sometimes is impossible 
(non-computable), usually takes time and can make expressions
bigger.  OTOH normalizing is frequently neccessary to get
correct results

2) rischNormalize is used by Axiom integrator. AFAICS common
belif is that in order to integrate with respect to x one
has first normalize with respect to x (otherwise integration
procedure may give wrong results).  There were claims that
there is no need to normalize with respect to other variables
(and currently Axiom integration procedure normalizes only
with respect to x).  OTOH I have examples when Axiom fails
due to lack of normalization...

3) main work of normalize(expr) is in localnorm and localnorm is:

  localnorm f ==
      for x in variables f repeat
        f := rischNormalize(f, x).func
      f

so essentially normalize(expr) is equivalent to
   normalize(...(normalize(expr, v1), v2,...,vn)

where v1,..., vn are all variables appearing in expr.  As I wrote
in another message I think this is wrong.

4) rischNormalize (so also normalize) is limited to elementary functions.
If a function is non-elementary in y and elementary in x it makes
some sense to use rischNormalize with respect to x (presumably using
some more complicated procedure with respect to y).

\start
Date: 14 Dec 2006 18:21:12 -0600
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Socket and build-improvements under Linux

Gregory Vanuxem writes:

| Hello,
| 
| I know that the build-improvements is a work in progress but the
| execution of #405 (installed) stopped with:
| 
| greg@ellipse:~$ axiom
| opening local server socket: Protocol not supported
| Fatal error opening I/O socket

Please could you send me the corresponding config.log?

\start
Date: Fri, 15 Dec 2006 04:18:46 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: Re: Socket and build-improvements under Linux

Le jeudi 14 d=E9cembre 2006 =E0 18:21 -0600, Gabriel Dos Reis a =E9crit :
> Gregory Vanuxem writes:
>
> | Hello,
> |
> | I know that the build-improvements is a work in progress but the
> | execution of #405 (installed) stopped with:
> |
> | greg@ellipse:~$ axiom
> | opening local server socket: Protocol not supported
> | Fatal error opening I/O socket
>
> Please could you send me the corresponding config.log?

No, forget what I'm saying. I'm working on some things and I forgot all
other things. The problem, which I consider has to be fixed (probably
later), was that I "reconfigured" Axiom after the completion of the
build process (so there are some issues there...[1]). Sorry. I tried to
copy your branch and do a freshly build without success:

==========================
==========================
==========================
==========
../config/mkinstalldirs ./..//target//usr/local/axiom.build-improvements/=
share
cd hyper &&  make
"AXIOM=/usr/local/axiom-build-improvements/target//usr/local/axiom.buil=
d-improvements" "SPAD=/usr/local/axiom-build-improvements/target//usr/l=
ocal/axiom.build-improvements" SYS=/usr/local/axiom.build-improvements =
"NOISE=-o .//build//usr/local/axiom.build-improvements/trace"
make[2]: entrant dans le r=E9pertoire
=AB /usr/local/axiom-build-improvements/src/hyper =BB
gcc -O2 -mtune=k8 -O2 -fno-strength-reduce -Wall -D_GNU_SOURCE
-I../../src/include -I../..//config  -I. \
                -c -o initx.o initx.c
initx.c: In function 'ingItColors_and_fonts':
initx.c:701: erreur: 'RmFontDefault' undeclared (first use in this
function)
initx.c:701: erreur: (Each undeclared identifier is reported only once
initx.c:701: erreur: for each function it appears in.)
initx.c:714: erreur: 'TtFontDefault' undeclared (first use in this
function)
initx.c:726: erreur: 'ActiveFontDefault' undeclared (first use in this
function)
initx.c:744: erreur: 'AxiomFontDefault' undeclared (first use in this
function)
initx.c:758: erreur: 'EmphasizeFontDefault' undeclared (first use in
this function)
initx.c:770: erreur: 'BoldFontDefault' undeclared (first use in this
function)
make[2]: *** [initx.o] Erreur 1
make[2]: quittant le r=E9pertoire
=AB /usr/local/axiom-build-improvements/src/hyper =BB
make[1]: *** [all-hyper] Erreur 2
make[1]: quittant le r=E9pertoire
=AB /usr/local/axiom-build-improvements/src =BB
make: *** [all-src] Erreur 2
==========================
==========================
==========================
===========
(the first time I built your branch this error was not present)


But I insist forget what I'm saying, if I have fixes (and if there are
some bugs) I'll send them, I'm obsessed by what I'm doing and this is
not generally, for me, a good thing to mixes theses types of task.


Ah, last thing, _THIS IS MARVELOUS_, the build process takes
approximately 3 hours on my machines,  I love that (I don't why but I'm
happy :-)), I don't need documentation I have an Axiom "standard"
version. Many, Many thanks.

Greg

[1] I built Axiom without 'prefix' and reconfigured it (with another
prefix) and installed it.

\start
Date: Thu, 14 Dec 2006 22:27:52 -0600 (CST)
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Socket and build-improvements under Linux

On Fri, 15 Dec 2006, Vanuxem Gregory wrote:

| Le jeudi 14 d=E9cembre 2006 =E0 18:21 -0600, Gabriel Dos Reis a =E9crit :
| > Gregory Vanuxem writes:
| >
| > | Hello,
| > |
| > | I know that the build-improvements is a work in progress but the
| > | execution of #405 (installed) stopped with:
| > |
| > | greg@ellipse:~$ axiom
| > | opening local server socket: Protocol not supported
| > | Fatal error opening I/O socket
| >
| > Please could you send me the corresponding config.log?
|
| No, forget what I'm saying. I'm working on some things and I forgot all
| other things. The problem, which I consider has to be fixed (probably
| later), was that I "reconfigured" Axiom after the completion of the
| build process (so there are some issues there...[1]).

Definitely, there must be something there that needs fixinig.  I'll
get to that later.

| Sorry.

Please don't.

| I tried to
| copy your branch and do a freshly build without success:
|
| =========================
==========================
==========================
==========| ../config/mkinstalldirs ./..//target//usr/local/axiom.build-improvements/share
| cd hyper &&  make
| "AXIOM=/usr/local/axiom-build-improvements/target//usr/local/axiom.build-improvements" "SPAD=/usr/local/axiom-build-improvements/target//usr/local/axiom.build-improvements" SYS=/usr/local/axiom.build-improvements "NOISE=-o .//build//usr/local/axiom.build-improvements/trace"
| make[2]: entrant dans le r=E9pertoire
| =AB /usr/local/axiom-build-improvements/src/hyper =BB
| gcc -O2 -mtune=k8 -O2 -fno-strength-reduce -Wall -D_GNU_SOURCE
| -I../../src/include -I../..//config  -I. \
|                 -c -o initx.o initx.c
| initx.c: In function 'ingItColors_and_fonts':
| initx.c:701: erreur: 'RmFontDefault' undeclared (first use in this
| function)
| initx.c:701: erreur: (Each undeclared identifier is reported only once
| initx.c:701: erreur: for each function it appears in.)
| initx.c:714: erreur: 'TtFontDefault' undeclared (first use in this
| function)
| initx.c:726: erreur: 'ActiveFontDefault' undeclared (first use in this
| function)
| initx.c:744: erreur: 'AxiomFontDefault' undeclared (first use in this
| function)
| initx.c:758: erreur: 'EmphasizeFontDefault' undeclared (first use in
| this function)
| initx.c:770: erreur: 'BoldFontDefault' undeclared (first use in this
| function)
| make[2]: *** [initx.o] Erreur 1
| make[2]: quittant le r=E9pertoire
| =AB /usr/local/axiom-build-improvements/src/hyper =BB
| make[1]: *** [all-hyper] Erreur 2
| make[1]: quittant le r=E9pertoire
| =AB /usr/local/axiom-build-improvements/src =BB
| make: *** [all-src] Erreur 2
| =========================
==========================
==========================
============
| (the first time I built your branch this error was not present)

this is weird.

| But I insist forget what I'm saying, if I have fixes (and if there are
| some bugs) I'll send them, I'm obsessed by what I'm doing and this is
| not generally, for me, a good thing to mixes theses types of task.
|
|
| Ah, last thing, _THIS IS MARVELOUS_, the build process takes
| approximately 3 hours on my machines,  I love that (I don't why but I'm
| happy :-)), I don't need documentation I have an Axiom "standard"
| version. Many, Many thanks.

well, I don't know whether it is marvelous to take 3 hours to build.
I don't know how long it used to take before. :-)

There is something that I did to _marginally_ improve the build time:
remove most of the sub-shells present in Axiom gold or silver.  On
mnay platforms (especially, with previous solaris implementation of
sh), sub-shells can be wonderfully expensive to create.

\start
Date: Thu, 14 Dec 2006 22:43:51 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Wed, 13 Dec 2006, Page, Bill wrote:

| On Tuesday, December 12, 2006 4:52 AM Gabriel Dos Reis wrote:
| >
| > I believe I solved the mystery:  After the recent reorganization
| > I made, the variable SPAD did not have a have a value by the time
| > Make did substitution -- though it has a value set in the _shell_
| > command line used to invoke depsys.  Why that isn't an issue under
| > linux is not clear to me at this moment.
| >
| > After re-reading Greg's message, I decided to trace build-interpsys
| > and that is how I spotted that the last argument was empty -- which
| > is not supposed to be.
| >
| > Having two ways of saying the same thing (AXIOM and SPAD) is just
| > confusing and plain wrong.  I changed src/interp/Makefile to use
| > only AXIOM (and not SPAD).  interpsys was build successfully.
| > As I'm writing this message, algebra layer 1 is being built.
| >
|
| Have you committed the required changes to build-improvements yet?

Bill --

  As of revision 403, I can successfully build Axiom.build-improvements
to produce AXIOMsys on Windows, using MinGW/MSYS.  I followed the
existing description of the dependencies between components, so I did
not build src/input.  I believe that is not correct.  We should be
able to build src/input too , and in particular to run the
regression test.  This is a heads-up, that something is buiilding and
running.

Furthermore, when I run AXIOMsys to test simple things, I noticed that
I don't have the usual output under linux or other unix-variant systems.  I
don't know whether this is "normal" under windows, or a collateral
damage I've done recently.  Your insight would be most appreciated.

Below is a sample session I run.

Thanks,

-- Gaby

$ DAASE=./target/i686-pc-mingw32 AXIOM=./target/i686-pc-mingw32/ ./target/i686-
pc-mingw32/bin/AXIOMsys.exe
GCL (GNU Common Lisp)  2.6.8 CLtL1    Dec 14 2006 20:51:04
Source License: LGPL(gcl,gmp), GPL(unexec,bfd,xgcl)
Binary License:  GPL due to GPL'ed components: (UNEXEC)
Modifications of this banner must retain notice of a compatible license
Dedicated to the memory of W. Schelter

Use (help) to get some basic information on how to use GCL.
Temporary directory for compiler files set to C:/DOCUME~1/gdr/LOCALS~1/Temp/
                        AXIOM Computer Algebra System
             Version: Axiom build-improvements branch 2006-12-04
             Timestamp: Thursday December 14, 2006 at 22:00:35
-----------------------------------------------------------------------------
   Issue )copyright to view copyright notices.
   Issue )summary for a summary of useful system commands.
   Issue )quit to leave AXIOM and return to shell.
-----------------------------------------------------------------------------

   Using local database ./target/i686-pc-mingw32/algebra/compress.daase..   Usin  g local database ./target/i686-pc-mingw32/algebra/interp.daase..
   Using local database ./target/i686-pc-mingw32/algebra/operation.daase..
   Using local database ./target/i686-pc-mingw32/algebra/category.daase..
   Using local database ./target/i686-pc-mingw32/algebra/browse.daase..
(1) -> 2 + 3

   (1)  5
\axPrintType{\lispLink{\verb!(|conPage| '( |PositiveInteger| ))!}{\verb`Positive  Integer`}}(2) ->
(2) -> x + 3 * x^3
   Loading ./target/i686-pc-mingw32//algebra/UPMP.o for package
      UnivariatePolynomialMultiplicationPackage

          3
   (2)  3x  + x
\axPrintType{\lispLink{\verb!(|conPage| '( |Polynomial| ( |Integer| ) ))!}{\verb  `Polynomial`} \lispLink{\verb!(|conPage| '( |Integer| ))!}{\verb`Integer`}}(3) -  > )quit

\start
Date: Fri, 15 Dec 2006 12:17:08 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

On December 14, 2006 11:44 PM Gabriel Dos Reis wrote:
> ... 
> As of revision 403, I can successfully build
> Axiom.build-improvements
> to produce AXIOMsys on Windows, using MinGW/MSYS.  I followed
> the existing description of the dependencies between components,
> so I did not build src/input.  I believe that is not correct.
> We should be able to build src/input too , and in particular to
> run the regression test.

There may be some input files that depend on the presence of
X. Do we want to just let these fail or somehow prevent them
from running?

> This is a heads-up, that something is buiilding and running.

I updated to revision 403 and then got the following result:

$ mkdir axiom.test
$ cd axiom.test
$ ../build-improvements/configure
...
configure: creating ./config.status
config.status: creating src/booklets/Makefile
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/lib/Makefile
config.status: creating src/lisp/Makefile
config.status: creating src/boot/Makefile
config.status: creating src/interp/Makefile
config.status: creating src/share/Makefile
config.status: creating src/algebra/Makefile
config.status: creating src/etc/Makefile
config.status: creating src/doc/Makefile
config.status: creating build/scripts/document
config.status: creating config/axiom-c-macros.h
building list of Algebra bootstrap files...done
extracting list of SPAD type definitions...done

$ make 2>&1 | tee build.log
Making in noweb
make[1]: Entering directory `/home/Administrator/axiom.test/noweb/src'
cd c; make "CC=gcc -ansi -pedantic" "CFLAGS=" all 
make[2]: Entering directory `/home/Administrator/axiom.test/noweb/src/c'
notangle -Rheader getline.nw > getline.h
/bin/sh: notangle: command not found
make[2]: *** [getline.h] Error 127
make[2]: Leaving directory `/home/Administrator/axiom.test/noweb/src/c'
make[1]: *** [all] Error 2
make[1]: Leaving directory `/home/Administrator/axiom.test/noweb/src'
make: *** [build/i686-pc-mingw32/bin/notangle] Error 2

-----------

I don't understand the line:

  notangle -Rheader getline.nw > getline.h

since noweb is not yet built.

> 
> Furthermore, when I run AXIOMsys to test simple things, I noticed
> that I don't have the usual output under linux or other 
> unix-variant systems.  I don't know whether this is "normal" under
> windows, or a collateral damage I've done recently.  Your insight
> would be most appreciated.
> 
> Below is a sample session I run.
> 
> Thanks,
> 
> -- Gaby
> 
> $ DAASE=./target/i686-pc-mingw32 
> AXIOM=./target/i686-pc-mingw32/ ./target/i686-
> pc-mingw32/bin/AXIOMsys.exe
> GCL (GNU Common Lisp)  2.6.8 CLtL1    Dec 14 2006 20:51:04
> Source License: LGPL(gcl,gmp), GPL(unexec,bfd,xgcl)
> Binary License:  GPL due to GPL'ed components: (UNEXEC)
> Modifications of this banner must retain notice of a 
> compatible license
> Dedicated to the memory of W. Schelter
> 
> Use (help) to get some basic information on how to use GCL.
> Temporary directory for compiler files set to 
> C:/DOCUME~1/gdr/LOCALS~1/Temp/
>                         AXIOM Computer Algebra System
>              Version: Axiom build-improvements branch 2006-12-04
>              Timestamp: Thursday December 14, 2006 at 22:00:35
> --------------------------------------------------------------
> ---------------
>    Issue )copyright to view copyright notices.
>    Issue )summary for a summary of useful system commands.
>    Issue )quit to leave AXIOM and return to shell.
> --------------------------------------------------------------
> ---------------
> 
>    Using local database 
> ./target/i686-pc-mingw32/algebra/compress.daase..   Usin  g 
> local database ./target/i686-pc-mingw32/algebra/interp.daase..
>    Using local database 
> ./target/i686-pc-mingw32/algebra/operation.daase..
>    Using local database 
> ./target/i686-pc-mingw32/algebra/category.daase..
>    Using local database 
> ./target/i686-pc-mingw32/algebra/browse.daase..
> (1) -> 2 + 3
> 
>    (1)  5
> \axPrintType{\lispLink{\verb!(|conPage| '( |PositiveInteger| 
> ))!}{\verb`Positive  Integer`}}(2) ->
> (2) -> x + 3 * x^3
>    Loading ./target/i686-pc-mingw32//algebra/UPMP.o for package
>       UnivariatePolynomialMultiplicationPackage
> 
>           3
>    (2)  3x  + x
> \axPrintType{\lispLink{\verb!(|conPage| '( |Polynomial| ( 
> |Integer| ) ))!}{\verb  `Polynomial`} 
> \lispLink{\verb!(|conPage| '( |Integer| 
> ))!}{\verb`Integer`}}(3) -  > )quit
> 
> 

This stuff:

> \axPrintType{\lispLink{\verb!(|conPage| '( |Polynomial| ( 
> |Integer| ) ))!}{\verb  `Polynomial`} 
> \lispLink{\verb!(|conPage| '( |Integer| 
> ))!}{\verb`Integer`}}(3) -  > )quit

is definitely not normal. Of course it should look exactly the
same as on linux. This looks like the type information in some
hyperdoc markup format. Very strange.

\start
Date: Fri, 15 Dec 2006 11:56:14 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Fri, 15 Dec 2006, Bill Page wrote:

| On December 14, 2006 11:44 PM Gabriel Dos Reis wrote:
| > ...
| > As of revision 403, I can successfully build
| > Axiom.build-improvements
| > to produce AXIOMsys on Windows, using MinGW/MSYS.  I followed
| > the existing description of the dependencies between components,
| > so I did not build src/input.  I believe that is not correct.
| > We should be able to build src/input too , and in particular to
| > run the regression test.
|
| There may be some input files that depend on the presence of
| X. Do we want to just let these fail or somehow prevent them
| from running?

It would be nice to prevent them from running.  Of course, that
means we know which ones require X being present.

| > This is a heads-up, that something is buiilding and running.
|
| I updated to revision 403 and then got the following result:
|
| $ mkdir axiom.test
| $ cd axiom.test
| $ ../build-improvements/configure
| ...
| configure: creating ./config.status
| config.status: creating src/booklets/Makefile
| config.status: creating Makefile
| config.status: creating src/Makefile
| config.status: creating src/lib/Makefile
| config.status: creating src/lisp/Makefile
| config.status: creating src/boot/Makefile
| config.status: creating src/interp/Makefile
| config.status: creating src/share/Makefile
| config.status: creating src/algebra/Makefile
| config.status: creating src/etc/Makefile
| config.status: creating src/doc/Makefile
| config.status: creating build/scripts/document
| config.status: creating config/axiom-c-macros.h
| building list of Algebra bootstrap files...done
| extracting list of SPAD type definitions...done
|
| $ make 2>&1 | tee build.log
| Making in noweb
| make[1]: Entering directory `/home/Administrator/axiom.test/noweb/src'
| cd c; make "CC=gcc -ansi -pedantic" "CFLAGS=" all
| make[2]: Entering directory `/home/Administrator/axiom.test/noweb/src/c'
| notangle -Rheader getline.nw > getline.h
| /bin/sh: notangle: command not found
| make[2]: *** [getline.h] Error 127
| make[2]: Leaving directory `/home/Administrator/axiom.test/noweb/src/c'
| make[1]: *** [all] Error 2
| make[1]: Leaving directory `/home/Administrator/axiom.test/noweb/src'
| make: *** [build/i686-pc-mingw32/bin/notangle] Error 2
|
| -----------
|
| I don't understand the line:
|
|   notangle -Rheader getline.nw > getline.h
|
| since noweb is not yet built.

Neither do I.  I have refrain from changing anything in the noweb
directory.

The build I did was with noweb preinstalled.

I'll look into why this command gets run in the first place.
Maybe a date stamp issue because of the import into SVN repo?
I'll check.

[...]

| This stuff:
|
| > \axPrintType{\lispLink{\verb!(|conPage| '( |Polynomial| (
| > |Integer| ) ))!}{\verb  `Polynomial`}
| > \lispLink{\verb!(|conPage| '( |Integer|
| > ))!}{\verb`Integer`}}(3) -  > )quit
|
| is definitely not normal.

OK.  Thanks for concurring.

| Of course it should look exactly the same as on linux.

That is what I thought but wasn't sure.

| This looks like the type information in some
| hyperdoc markup format. Very strange.

Indeed.

\start
Date: Fri, 15 Dec 2006 20:21:35 +0100
From: Gregory Vanuxem
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

Le jeudi 14 d=E9cembre 2006 =E0 22:43 -0600, Gabriel Dos Reis a =E9crit :

[...]

>
> Furthermore, when I run AXIOMsys to test simple things, I noticed that
> I don't have the usual output under linux or other unix-variant systems.  I
> don't know whether this is "normal" under windows, or a collateral
> damage I've done recently.  Your insight would be most appreciated.
>
> Below is a sample session I run.

[...]

> (1) -> 2 + 3
>
>    (1)  5
> \axPrintType{\lispLink{\verb!(|conPage| '( |PositiveInteger| ))!}{\verb`Positive  Integer`}}(2) ->
> (2) -> x + 3 * x^3
>    Loading ./target/i686-pc-mingw32//algebra/UPMP.o for package
>       UnivariatePolynomialMultiplicationPackage
>
>           3
>    (2)  3x  + x
> \axPrintType{\lispLink{\verb!(|conPage| '( |Polynomial| ( |Integer| ) ))!}{\verb  `Polynomial`} \lispLink{\verb!(|conPage| '( |Integer| ))!}{\verb`Integer`}}(3) -  > )quit
>

--- /usr/local/axiom-testing/src/interp/patches.lisp.pamphlet
+++ axiom-windows/AxiomOnWindows/src/interp/patches.lisp.pamphlet
@@ -66,8 +123,8 @@
 ;; browser stuff:
 #+:UNIX (defvar |$standard| 't)
 #-:UNIX (defvar |$standard| 'nil)
-#+:UNIX (defvar |$saturn| 'nil)
-#-:UNIX (defvar |$saturn| 't)
+#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
+#-(or :UNIX :WINNT) (defvar |$saturn| 't)

? (diff between build-improvements and AxiomOnWindows branch)

See src/interp/i-toplev.boot.pamphlet, the function printTypeAndTime. Or
if you prefer type in an Axiom session:

)boot $saturn := true
2+3

)boot $saturn := false
2+3

\start
Date: Fri, 15 Dec 2006 20:11:09 -0600 (CST)
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: Re: Socket and build-improvements under Linux

On Fri, 15 Dec 2006, Vanuxem Gregory wrote:

| Le jeudi 14 d=E9cembre 2006 =E0 18:21 -0600, Gabriel Dos Reis a =E9crit :
| > Gregory Vanuxem writes:
| >
| > | Hello,
| > |
| > | I know that the build-improvements is a work in progress but the
| > | execution of #405 (installed) stopped with:
| > |
| > | greg@ellipse:~$ axiom
| > | opening local server socket: Protocol not supported
| > | Fatal error opening I/O socket
| >
| > Please could you send me the corresponding config.log?
|
| No, forget what I'm saying.

There were real bugs there that I unfortunately introduced.  I believe
to have fixed all that are known to me, in revision 407. Many thanks
for your feedback.

\start
Date: Fri, 15 Dec 2006 20:14:22 -0600 (CST)
From: Gabriel Dos Reis
To: Gregory Vanuxem
Subject: RE: Axiom/GCL on windows

On Fri, 15 Dec 2006, Vanuxem Gregory wrote:

| --- /usr/local/axiom-testing/src/interp/patches.lisp.pamphlet
| +++ axiom-windows/AxiomOnWindows/src/interp/patches.lisp.pamphlet
| @@ -66,8 +123,8 @@
|  ;; browser stuff:
|  #+:UNIX (defvar |$standard| 't)
|  #-:UNIX (defvar |$standard| 'nil)
| -#+:UNIX (defvar |$saturn| 'nil)
| -#-:UNIX (defvar |$saturn| 't)
| +#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
| +#-(or :UNIX :WINNT) (defvar |$saturn| 't)
|
| ? (diff between build-improvements and AxiomOnWindows branch)
|
| See src/interp/i-toplev.boot.pamphlet, the function printTypeAndTime. Or
| if you prefer type in an Axiom session:

Yes, that does the trick for me.  Thanks for the pointer.

Again, I must rant about this irritating puzzle-ridding habit of Axiom
testing for platforms when, in fact, it is interested in
*functionalities*.  We should not be testing for platform in this
specific case, we should be testing for functionality.

\start
Date: Fri, 15 Dec 2006 22:04:18 -0500
From: Bill Page
To: Gabriel Dos Reis,
Subject: RE: Axiom/GCL on windows

On December 15, 2006 9:14 PM Gabriel Dos Reis
> On Fri, 15 Dec 2006, Vanuxem Gregory wrote:
> 
> | --- /usr/local/axiom-testing/src/interp/patches.lisp.pamphlet
> | +++ axiom-windows/AxiomOnWindows/src/interp/patches.lisp.pamphlet
> | @@ -66,8 +123,8 @@
> |  ;; browser stuff:
> |  #+:UNIX (defvar |$standard| 't)
> |  #-:UNIX (defvar |$standard| 'nil)
> | -#+:UNIX (defvar |$saturn| 'nil)
> | -#-:UNIX (defvar |$saturn| 't)
> | +#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
> | +#-(or :UNIX :WINNT) (defvar |$saturn| 't)
> |
> | ? (diff between build-improvements and AxiomOnWindows branch)
> |

What is "AxiomOnWindows branch"?

> | See src/interp/i-toplev.boot.pamphlet, the function 
> | printTypeAndTime. Or if you prefer type in an Axiom
> | session:
> 
> Yes, that does the trick for me.  Thanks for the pointer.
> 
> Again, I must rant about this irritating puzzle-ridding habit
> of Axiom testing for platforms when, in fact, it is interested
> in *functionalities*.  We should not be testing for platform
> in this specific case, we should be testing for functionality.
> 

+1 Yes!

\start
Date: Sat, 16 Dec 2006 13:22:35 +0100
From: Gregory Vanuxem
To: Bill Page
Subject: RE: Axiom/GCL on windows
Cc: Gabriel Dos Reis

Le vendredi 15 d=E9cembre 2006 =E0 22:04 -0500, Bill Page a =E9crit :

[...]

> > | -#+:UNIX (defvar |$saturn| 'nil)
> > | -#-:UNIX (defvar |$saturn| 't)
> > | +#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
> > | +#-(or :UNIX :WINNT) (defvar |$saturn| 't)
> > |
> > | ? (diff between build-improvements and AxiomOnWindows branch)
> > |
>
> What is "AxiomOnWindows branch"?

This is the axiom--windows--1 branch. I didn't remember its name :-)


>
> > | See src/interp/i-toplev.boot.pamphlet, the function
> > | printTypeAndTime. Or if you prefer type in an Axiom
> > | session:
> >
> > Yes, that does the trick for me.  Thanks for the pointer.
> >
> > Again, I must rant about this irritating puzzle-ridding habit
> > of Axiom testing for platforms when, in fact, it is interested
> > in *functionalities*.  We should not be testing for platform
> > in this specific case, we should be testing for functionality.
> >
>
> +1 Yes!

+1,

I totally agree. I sent this patch just to show you that |$saturn| is
set to nil in this branch.

\start
Date: Sat, 16 Dec 2006 20:38:00 -0500
From: Bill Page
To: Gregory Vanuxem,
Subject: RE: Axiom/GCL on windows

On December 15, 2006 2:22 PM Vanuxem Gregory wrote:
>
> Le jeudi 14 d=E9cembre 2006 =E0 22:43 -0600, Gabriel Dos Reis a =E9crit :
>
> [...]
>
> --- /usr/local/axiom-testing/src/interp/patches.lisp.pamphlet
> +++ axiom-windows/AxiomOnWindows/src/interp/patches.lisp.pamphlet
> @@ -66,8 +123,8 @@
>  ;; browser stuff:
>  #+:UNIX (defvar |$standard| 't)
>  #-:UNIX (defvar |$standard| 'nil)
> -#+:UNIX (defvar |$saturn| 'nil)
> -#-:UNIX (defvar |$saturn| 't)
> +#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
> +#-(or :UNIX :WINNT) (defvar |$saturn| 't)
>
> ...
> Hope this help,
>

I can confirm that as of revision #407 (Friday, 15 Dec) the
build-improvements branch together with Greg's patch above
builds successfully on Windows. Congratulations!

I am SO HAPPY to finally be able to say goodbye to the old
axiom--windows--1! This the best Christmas/New Year's present
ever!  :-)

\start
Date: 16 Dec 2006 20:08:51 -0600
From: Gabriel Dos Reis
To: Bill Page
Subject: Re: Axiom/GCL on windows

Bill Page writes:

| On December 15, 2006 2:22 PM Vanuxem Gregory wrote:
| >
| > Le jeudi 14 d=E9cembre 2006 =E0 22:43 -0600, Gabriel Dos Reis a =E9crit :
| >
| > [...]
| >
| > --- /usr/local/axiom-testing/src/interp/patches.lisp.pamphlet
| > +++ axiom-windows/AxiomOnWindows/src/interp/patches.lisp.pamphlet
| > @@ -66,8 +123,8 @@
| >  ;; browser stuff:
| >  #+:UNIX (defvar |$standard| 't)
| >  #-:UNIX (defvar |$standard| 'nil)
| > -#+:UNIX (defvar |$saturn| 'nil)
| > -#-:UNIX (defvar |$saturn| 't)
| > +#+(or :UNIX :WINNT) (defvar |$saturn| 'nil)
| > +#-(or :UNIX :WINNT) (defvar |$saturn| 't)
| >
| > ...
| > Hope this help,
| >
|
| I can confirm that as of revision #407 (Friday, 15 Dec) the
| build-improvements branch together with Greg's patch above
| builds successfully on Windows. Congratulations!

Congratulations to all of you who helped!
I'm glad to see that we have the basics working (e.g. building
AXIOMsys, algebra).

I hope to check in some other modifications I have in my local trees
before I mebrak on a trip to EU (where I don't expect to have much
time left for working on Axiom).

Next is finaizing the other bits on the TODO list.

| I am SO HAPPY to finally be able to say goodbye to the old
| axiom--windows--1! This the best Christmas/New Year's present
| ever!  :-)

I'm glad you like it :-)

\start
Date: 17 Dec 2006 18:13:45 +0100
From: Francois Maltey
To: list 
Subject: How can I get the constant term in a polynomial

Hello,

I want to simplify sin ((a+1)*(b+%pi)) = sin (a*b + a*%pi + b + %pi) 
                to - sin (a*b + a*%pi + b) 

I can get the coefficient of %pi in the numerator of the argument of sin x.

MP ==>  SparseMultivariatePolynomial(R, K)
 K ==> Kernel F
 Z ==> Integer

    kpi : K := retract(pi())@K   -- the constant %pi

    coeffPi : MP -> Z
    coeffPi x == 
      R has retractIfCan : R -> Union(Integer,"failed") =>
        ccz := retractIfCan (coefficient (p, kpi, 1))@Union(Z, "failed")
        ccz case Integer => ccz::Integer
      0

In this example this coefficient is (a+1). 

I don't want the all coefficient a+1, but only the constant term, 1 in R.

How can I get this 1 in R ? 

The coeffPi function is sufficient for sin (a+3*%pi), 
not for sin ((a+b+1)*%pi)

I don't see this function in SMP by )sh SMP nor in polycat.spad.

\start
Date: Mon, 18 Dec 2006 03:20:56 -0500
From: Tim Daly
To: William Sit
Subject: Re: [#329 fuzzy error in factor.] Windows version seems correct.

Bill,

I tried this on the May 18, 2005 and December 14, 2006 versions.
The December version is the current "gold", arch version 50.
I can't seem to reproduce the error.

Curious about the factor factorial 12399....

If I do 

a:= factorial 12399
b:= factor a
c:= a - expand b

I get c = 0

\start
Date: Mon, 18 Dec 2006 03:54:04 -0500
From: Tim Daly
To: William Sit
Subject: factor bug

I compared 3 versions, the original NAG version, the May 18, 2005
version, and the Dec 14, 2006 version:

NAG                      MAY18/05                DEC14/06
f:=119646463             f:=119646463            f:=119646463
factor f => 119646463    factor f => 119646463   factor f => 119646463
prime? f => false        prime? f => false       prime? f => false
g:=129864979             g:=129864979            g:=129864979
factor g => 11027 11777  factor g => 129864979   factor g => 129864979
prime? g => false        prime? g => false       prime? g => false
g-11027*11777 => 0       g-11027*11777 => 0      g-11027*11777 => 0

So it looks like the error was introduced into FR when compiled
under GCL.

\start
Date: Sun, 17 Dec 2006 16:25:46 -0500
From: William Sit
To: Tim Daly, William Sit
Subject: Re: factor bug

Tim:

Could you please re-verify the NAG version?

According to your report, NAG version already has the 
problem for factoring 119646463, which is a prime (so in 
this case, 'factor' is correct and 'prime?' is wrong, 
according to your report for NAG). Also, my Windows 
version reports prime? 119646463 => true, so there is no 
error here.

Note that in my earlier report, the number is 119643463, 
which is not prime and is 10111 * 11833.

William

On Mon, 18 Dec 2006 03:54:04 -0500
  Tim Daly wrote:
>I compared 3 versions, the original NAG version, the May 
>18, 2005
>version, and the Dec 14, 2006 version:
>
>NAG                      MAY18/05                DEC14/06
>f:=119646463             f:=119646463 
>           f:=119646463
>factor f => 119646463    factor f => 119646463   factor f 
>=> 119646463
>prime? f => false        prime? f => false       prime? f 
>=> false
>g:=129864979             g:=129864979 
>           g:=129864979
>factor g => 11027 11777  factor g => 129864979   factor g 
>=> 129864979
>prime? g => false        prime? g => false       prime? g 
>=> false
>g-11027*11777 => 0       g-11027*11777 => 0 
>     g-11027*11777 => 0
>
>So it looks like the error was introduced into FR when 
>compiled
>under GCL.

\start
Date: Sun, 17 Dec 2006 16:30:34 -0500
From: William Sit
To: Tim Daly,William Sit
Subject: re: [#329 fuzzy error in factor.] Windows version seems correct.

On Mon, 18 Dec 2006 03:20:56 -0500
  Tim Daly wrote:
>Bill,
>
>I tried this on the May 18, 2005 and December 14, 2006 
>versions.
>The December version is the current "gold", arch version 
>50.
>I can't seem to reproduce the error.
>
>Curious about the factor factorial 12399....
>
>If I do 
>
>a:= factorial 12399
>b:= factor a
>c:= a - expand b
>
>I get c = 0
>
>Tim

All that says is that the factorization produces factors 
(NOT prime factors) that multiplied back to give the 
original number. What is needed are PRIME factors. You 
have to actually look at the last few factors returned in 
Factored Integer; any thing larger than 12399 in that list 
must be a composite and not a prime factor and hence an 
error.

Too bad Wiki right now is not displaying the entire 
result, but your Axiom should display it.

\start
Date: 17 Dec 2006 23:04:44 +0100
From: Francois Maltey
To: list
Subject: Re: Re: [#329 fuzzy error in factor.] Windows version seems correct.

I use my own compiled axiom without change for integer and so.
I have a random reponse :

petoncle:~/Axiom$ axiom -noht
                        AXIOM Computer Algebra System
                       Version: Axiom (September 2006)
              Timestamp: Saturday October 28, 2006 at 12:18:07
-----------------------------------------------------------------------

I test : 

[#factors (117661597+0*i) for i in 1..1000]   -- there are 1 and 2 factors 
reduce (+, [#factors (117661597+0*i) for i in 1..1000])     -- around 1650

The exact solution is 2000 of corse.

F. [I don't know how to add this in the wiki]

\start
Date: Sun, 17 Dec 2006 17:21:06 -0500
From: William Sit
To: Tim Daly
Subject: Re: factor bug

On Mon, 18 Dec 2006 05:00:12 -0500
  Tim Daly wrote:
>NAG                      MAY18/05                DEC14/06
>f:=119646463             f:=119646463 
>           f:=119646463
>factor f => 119646463    factor f => 119646463   factor f 
>=> 119646463
>prime? f => false        prime? f => false       prime? f 
>=> false
>g:=129864979             g:=129864979 
>           g:=129864979
>factor g => 11027 11777  factor g => 129864979   factor g 
>=> 129864979
>prime? g => false        prime? g => false       prime? g 
>=> false
>g-11027*11777 => 0       g-11027*11777 => 0 
>     g-11027*11777 => 0
>
>m:=119643463             m:=119643463 
>           m:=119643463
>factor m => 119643463    factor m => 119643463   factor m 
>=> 119643463
>prime? m => false        prime? m => false       prime? m 
>=> false
>m - 10111*11833 => 0     m - 10111*11833 => 0    m - 
>10111*11833 => 0
>
>Clearly we've found a counter-example to one of the 
>fundamental
>theorems of number theory. :-)
>
>Tim
>
>

So you confirmed that even the NAG version exhibited 
problems? Just hope no one uses these two "primes" for 
RSA.

\start
Date: 18 Dec 2006 09:38:12 +0100
From: Martin Rubey
To: Francois Maltey
Subject: Re: How can I get the constant term in a polynomial

Francois Maltey writes:

> I want to simplify sin ((a+1)*(b+%pi)) = sin (a*b + a*%pi + b + %pi)
>                 to - sin (a*b + a*%pi + b)
> 
> I can get the coefficient of %pi in the numerator of the argument of sin x.
> 
> MP ==>  SparseMultivariatePolynomial(R, K)
>  K ==> Kernel F
>  Z ==> Integer
> 
>     kpi : K := retract(pi())@K   -- the constant %pi
> 
>     coeffPi : MP -> Z
>     coeffPi x ==
>       R has retractIfCan : R -> Union(Integer,"failed") =>
>         ccz := retractIfCan (coefficient (p, kpi, 1))@Union(Z, "failed")
>         ccz case Integer => ccz::Integer
>       0
> 
> In this example this coefficient is (a+1).
> 
> I don't want the all coefficient a+1, but only the constant term, 1 in R.

So you want the constant term of a SparseMultivariatePolynomial(R, K), that is,
a polynomial with variables being in K an coefficients in R. 

I guess you want to use

coefficient(p,0$IndexedExponents(Symbol)) 

\start
Date: 18 Dec 2006 09:49:01 +0100
From: Martin Rubey
To: list
Subject: a problem, maybe with strict typing

Dear all, especially all fans of strict typing!

I'm also sending this to aldor-l, although I can really describe the problem
only with a concrete example, it may well be that one of the aldor experts has
seen something like that before. In fact, I'd be already grateful for a
"reasonable" abstract description of my problem, since I find it difficult to
extract the "real" problem. On the other hand, what I want to do seems natural
to me...

I would like to determine a Taylor series expansion using undetermined
coefficients for an implicitely given function y. Suppose I am given the
equation for y as a function z: TS -> TS, where TS is a suitable Taylor series
domain. z stands for "zero", i.e., the power series solution g will satisfy 

z g = O(x^something).  


In the following:

UTS     ==> UnivariateTaylorSeries
SUP     ==> SparseUnivariatePolynomial -- the variable is displayed as ?
EXPR    ==> Expression
FRAC    ==> Fraction
INT     ==> Integer
TRANFUN ==> TranscendentalFunctionCategory -- allows computation of sin, etc.


Currently I use UTS(SUP F, x, 0) where F is a field of coefficients, for
example EXPR INT, or just FRAC INT.

Then I let g: UTS(SUP F, x, 0) be the power series consisting of those terms
whose coefficients are already computed (or given as initial values), plus one
term with coefficient monomial(1,1)$SUP F, which is thus transcendental over F
and will serve as placeholder for the undetermined coefficient.

Now I can compute z g, and find the first non-zero coefficient, which will
usually be a linear polynomial in SUP F. (Otherwise I have to supply more
initial values, since only in the linear case the coefficient is uniquely
determined...)

This works very well. For example, I can compute asin with g +-> g sin x - x,
even things like g +-> g(g(x))-x and more complicated stuff work. 

Now let F be EXPR INT, or, in fact, any domain that has TRANFUN. Already series
as simple as g +-> sin g - sin 1, g(0) = 1 fail: I get the error

"sincos: series expansion involves transcendental constants".

Of course, that's what I should get: SUP EXPR INT does not have TRANFUN, and it
cannot have it, since sin(?) is not a SUP EXPR INT. The error is raised when
one tries to compute sin of a series which has a constant term, which seems to
make sense. To compute the next term of our example, we set g = 1+?x and need
to compute sin(1+?x)-sin(1), which in turn wants to compute sin(1+?x) which
equals

sin(1) + cos(1) ? x - sin(1)/2 ?^2 x^2 - ...

(remember, the variable of a SUP is displayed as ?)

OK, SUP EXPR INT does not have TRANFUN, but EXPR has, and sin(1+?x) does not
involve anything that does not "fit" into SUP EXPR INT, for example,
sin(?). But how can I explain that to axiom?


Any ideas are greatly appreciated.

\start
Date: Mon, 18 Dec 2006 07:20:00 -0500
From: William Sit
To: Martin Rubey,axiom-dev
Subject: Re: a problem, maybe with strict typing

Martin:

If I understand your question correctly, at least in the 
interpreter, there is no need to go to SUP F, especially 
for domains like F = EXPR INT. In the example you give, 

>Now let F be EXPR INT, or, in fact, any domain that has 
>TRANFUN. Already series
>as simple as g +-> sin g - sin 1, g(0) = 1 fail: 

it would be possible to "find g" with enough initial data 
using, with t standing for the next undetermined 
coefficient

taylor(sin(1+t*x)-sin(1),x=0)
     t cos(1)x - O(x^2)  

Now you want this to be zero, say. so t = 0.  You then 
iterate:

taylor(sin(1 + t*x^2) - sin(1), x=0)

and of course you get g = 1.  In general, you may want to 
use Puiseaux series.  For example, if you want sin(g(x))= 
sqrt(x), g(0) = 0, you would get

g(x) = sqrt(x)+(1/6)*x^(3/2)+(3/40)*x^(5/2)+t*x^(7/2) 

after a few iterations, which is the beginning terms of 
the series for asin(sqrt(x)) of course.

Now if you want to write a package, you do not want to fix 
the variable x (which a user of your package may use t, 
for example). However, assuming you are only using input 
functions (like z and initial data) that are univariate in 
EXPR INT, you can extract the main variable, and assign it 
to x (in your package). Let axiom generate a new symbol 
and assign it to t, which will be different from x (even 
if the user also uses t for his main variable, it will be 
a different t). Now you form your partial series for g 
involving t and x, and substitute g for x to form z g. 
 Then compute the resulting series ending up in 
R:=UPXS(EXPR F,x,a) or UPS(EXPR F,x,a), where F can be 
simply INT. (If you require your user to give input 
functions directly from GR:=UPXS(F,x,a) or UPS(F,x,a), you 
will need to first "embed" gr to SGR:=UPXS(SUP F,x,a) or 
UPS(SUP F,x,a), and you can assign t to the main variable 
of SUP F; then you have to repack everything (just the 
normal part of the series up to the order you need) back 
into EXPR F before forming the series in R). In any case, 
you can now compute your undetermine coefficient one at a 
time using arithmetic in EXPR F. The series for g may be 
retracted to GR. The user of your package would not need 
to know anything about your auxilliary variable t.

Something similar to this can be found in IDEAL 
(PolynomialIdeals) package where we need an auxilliary 
variable (like your t) to turn inequations h \ne 0 into an 
equation of the form h*t-1 = 0 (here t must not be mixed 
up with user variables). A lot of type conversion is 
needed between different polynomial rings. So here, you 
need to write type conversion routines between EXPR INT 
and UPXS or UPS (one direction is given by series or 
taylor already).

\start
Date: 18 Dec 2006 14:17:27 +0100
From: Martin Rubey
To: William Sit
Subject: Re: a problem, maybe with strict typing

Dear William,

William Sit writes:

> Martin:
> 
> If I understand your question correctly, at least in the interpreter, there is
> no need to go to SUP F, especially for domains like F = EXPR INT. In the
> example you give,

So, you would check whether F allows a "transcendental" element (i.e., another
variable)? That doesn't look very "clean" to me. (I'm writing a package, by the
way...)

> > Now let F be EXPR INT, or, in fact, any domain that has TRANFUN. Already
> > series
> > as simple as g +-> sin g - sin 1, g(0) = 1 fail:
> 
> it would be possible to "find g" with enough initial data using, with t
> standing for the next undetermined coefficient
> 
> taylor(sin(1+t*x)-sin(1),x=0)
>      t cos(1)x - O(x^2)  Now you want this to be zero, say. so t = 0.  You then
> iterate:
> 
> taylor(sin(1 + t*x^2) - sin(1), x=0)
> 
> and of course you get g = 1.  

Yes, that's what I do.

> Now if you want to write a package, you do not want to fix the variable x
> (which a user of your package may use t, for example). However, assuming you
> are only using input functions (like z and initial data) that are univariate in
> EXPR INT, 

I definitely don't want to restrict to EXPR INT.  It should work with any
domain that has TRANFUN.

> you can extract the main variable, and assign it to x (in your package).  Let
> axiom generate a new symbol and assign it to t, which will be different from
> x (even if the user also uses t for his main variable, it will be a different
> t). Now you form your partial series for g involving t and x,

So, what will be the coefficient ring of this partial series? I currently use
SUP F. I thought about using EXPR F instead, but this looks rather like a
workaround than a solution. (That's why I asked for a more abstract problem
description, by the way) I think so, because, suppose there is another category
InterestingFunctions. It may well be that EXPR does not export
InterestingFunctions, and then wrapping the coefficient domain with EXPR won't
help. It seems that the present problem is quite close to the problem of
"indeterminates".

> and substitute g for x to form z g. Then compute the resulting series ending
> up in R:=UPXS(EXPR F,x,a) or UPS(EXPR F,x,a), where F can be simply INT.

This rather sounds like replacing my SUP with EXPR.

> (If you require your user to give input functions directly from
> GR:=UPXS(F,x,a) or UPS(F,x,a), you will need to first "embed" gr to
> SGR:=UPXS(SUP F,x,a) or UPS(SUP F,x,a), and you can assign t to the main
> variable of SUP F; then you have to repack everything (just the normal part
> of the series up to the order you need) back into EXPR F before forming the
> series in R).

That sounds interesting, but I don't think I understand. Do you mean I can
"lift" a function from GR -> GR to a function SGR -> SGR? I don't see how this
could be done...

> In any case, you can now compute your undetermine coefficient one at a time
> using arithmetic in EXPR F. The series for g may be retracted to GR. The user
> of your package would not need to know anything about your auxilliary
> variable t.

> Something similar to this can be found in IDEAL (PolynomialIdeals) package
> where we need an auxilliary variable (like your t) to turn inequations h \ne
> 0 into an equation of the form h*t-1 = 0 (here t must not be mixed up with
> user variables). A lot of type conversion is needed between different
> polynomial rings. 

Hm, you mean the code in relationsIdeal(listf : List DPoly): ST ? I must admit
that I find it quite difficult to read. THere couldn't be less documentation, I
suppose.

> So here, you need to write type conversion routines between EXPR INT and UPXS
> or UPS (one direction is given by series or taylor already).

\start
Date: Mon, 18 Dec 2006 23:32:30 -0500
From: Tim Daly
To: list
Subject: Re: [#330 generating 3d plot from hyperdoc fails] gazonk again

> The "gazonk" files are created when the interpreter tries to
> compile the argument to draw as a Lisp function. The error
> message that you observe can be generated in the case that
> gazonk file remain in the /tmp directory that were created by
> another user on your system for which you do not have the right
> to delete (e.g. If you were previously testing using 'root' by
> now are using a non-privileged account.) These files should
> normally be automatically deleted but in some cases Axiom seems
> to carelessly or accidently leave them lying around in the the
> /tmp directory.
> 
> Try to correct this problem by signing on as 'root' and
> removing all temporary files::
> 
>   rm /tmp/*

The gazonk-name function, previously discussed, should handle
this problem. I'm not sure why it wasn't applied.

\start
Date: Mon, 18 Dec 2006 12:24:49 -0500
From: Bill Page
To: Tim Daly
Subject: re: [#330 generating 3d plot from hyperdoc	fails] gazonk again

On Monday, December 18, 2006 11:33 PM Tim Daly wrote:
> ...
> The gazonk-name function, previously discussed, should handle
> this problem. I'm not sure why it wasn't applied.
>

Tim, is this a problem with Axiom or with GCL? If it is GCL
has anyone submitted a patch?

\start
Date: Mon, 18 Dec 2006 13:35:38 -0500
From: William Sit
To: Martin Rubey
Subject: Re: a problem, maybe with strict typing

Martin Rubey wrote:

> > If I understand your question correctly, at least in the
> > interpreter, there is no need to go to SUP F, especially for
> > domains like F = EXPR INT. In the example you give,

> So, you would check whether F allows a "transcendental" element
> (i.e., another variable)? That doesn't look very "clean" to me. (I'm
> writing a package, by the way...)

This was only used to see if I understood your question. I was aware
you are writing a package. With the exception perhaps of Inteval,
domains that descends from TRANFUN are either constants or series, or
EXPR. Only EXPR allows you to have a new symbol without "adding" it to
F as in SUP F. But the problem is not adding a new variable, which is
the easy part. So it is not even necessary to check if F allows a new
symbol. It is the series expansion that is causing the problems that
forces you to use EXPR.

> > Now if you want to write a package, you do not want to fix the
> > variable x (which a user of your package may use t, for
> > example). However, assuming you are only using input functions
> > (like z and initial data) that are univariate in EXPR INT,

> I definitely don't want to restrict to EXPR INT.  It should work with any
> domain that has TRANFUN.

No you don't have to, at least not for the user, but I think you must,
to do your computation. As you observed, if you add a new variable as
the undetermined coefficient using SUP F, the domain no longer has
TRANFUN even if F has. Moreover, the series expansion operation
requires AlgebraicallyClosedField and FunctionSpace in addition to
TRANFUN. This means you cannot expand the transcendental functions in
SUP F into a series (example, expand series(sin(1+t*x)) ) without
going to EXPR anyway.  But EXPR SUP F can then be replaced by EXPR
F. Of course, if F is EXPR INT, you should not add another layer, but
this is "easy" to test by checking whether F has FunctionSpace(some
ring) (and really easy, whether F has AlgebraicallyClosedField)).  I
am putting the first "easy" in quote because we went there before:
Axiom does not provide info of how F is constructed unless in you
package, you ask for it in the parameters. If you want to avoid such
trouble, write your package for EXPR over some numeric domain.

> > you can extract the main variable, and assign it to x (in your
> > package).  Let axiom generate a new symbol and assign it to t,
> > which will be different from x (even if the user also uses t for
> > his main variable, it will be a different t). Now you form your
> > partial series for g involving t and x,

> So, what will be the coefficient ring of this partial series? I currently use
> SUP F. I thought about using EXPR F instead, but this looks rather like a
> workaround than a solution.

Ideally, assuming F is a domain from TRANFUN, the coefficient ring for
the partial series is F if F is already EXPR(S) and EXPR F if not
(this second case include the cases when F is itself is a numeric
domain, or a series ring, wrt some other independent variable). If
what I said so far is correct, you have no choice.

> (That's why I asked for a more abstract problem description, by the
> way) I think so, because, suppose there is another category
> InterestingFunctions. It may well be that EXPR does not export
> InterestingFunctions, and then wrapping the coefficient domain with
> EXPR won't help. It seems that the present problem is quite close to
> the problem of "indeterminates".

No, it is much simpler (conceptually speaking). In your hypothetical
scenario, you must construct in InterestingFunctions the series
expansion operation. At this time, all roads lead to EXPR! (The only
SPFCAT domain constructor is EXPR, which is also the only FS domain
constructor). So it is very likely that if there are new interesting
functions, you will certainly "extend" EXPR to belong to that category
as well.

> > and substitute g for x to form z g. Then compute the resulting
> > series ending up in R:=UPXS(EXPR F,x,a) or UPS(EXPR F,x,a), where
> > F can be simply INT.  > > This rather sounds like replacing my SUP
> > with EXPR.

Well, yes, for the reasons above. I don't think you can avoid this, at
least not in your computations. Users don't have to enter the z
function that implicitly defines the g function using EXPR
domains---any TRANFUN domain is fine if no special functions are
involved.

> > (If you require your user to give input functions directly from
> > GR:=UPXS(F,x,a) or UPS(F,x,a), you will need to first "embed" GR to
> > SGR:=UPXS(SUP F,x,a) or UPS(SUP F,x,a), and you can assign t to the main
> > variable of SUP F; then you have to repack everything (just the normal part
> > of the series up to the order you need) back into EXPR F before forming the
> > series in R).

> That sounds interesting, but I don't think I understand. Do you mean
> I can "lift" a function from GR -> GR to a function SGR -> SGR? I
> don't see how this could be done...

F is a subring of SUP F, so if you have a series with coefficients in
F, these are in SUP F (basically, "constants" with respect to the "?"
variable). Is it trivial to lift a series in GR to SGR? (you can just
use "map"). It is only a coercion from a subdomain to a domain. It is
NOT lifting a function from GR -> GR to another function from SGR ->
SGR (such lifting would be possible, but not unique unless the image
for "?" is decided first, in which case, "map" will do the job too).

> > In any case, you can now compute your undetermined coefficients
> > one at a time using arithmetic in EXPR F. The series for g may be
> > retracted to GR. The user of your package would not need to know
> > anything about your auxilliary variable t.  > Something similar to
> > this can be found in IDEAL (PolynomialIdeals) package where we
> > need an auxilliary variable (like your t) to turn inequations h
> > \ne 0 into an equation of the form h*t-1 = 0 (here t must not be
> > mixed up with user variables). A lot of type conversion is needed
> > between different polynomial rings.

> Hm, you mean the code in relationsIdeal(listf : List DPoly): ST ? I
> must admit that I find it quite difficult to read. THere couldn't be
> less documentation, I suppose.

I mean the definition of the macros newPoly and the functions npoly,
oldpoly and inRadical? in ideal.spad, where a polynomial ring domain
used for the input polynomials is extended by a new variable. You will
notice a lot of similar code in other routines (look for the variable
tp or tp1). The construction works even when the polynomial domain is
POLY INT (supposedly includes all symbols). This is the beauty of
Axiom because we only need to extend the exponent vectors by one more
dimension (even if the original vectors are conceptually infinite
dimensional). So I am proposing you do the same thing because EXPR
plays the same role as POLY, but in function space.

> > So here, you need to write type conversion routines between EXPR
> > INT and UPXS or UPS (one direction is given by series or taylor
> > already).

\start
Date: Mon, 18 Dec 2006 14:07:38 -0500
From: Bill Page
To: Tim Daly
Subject: re: [#330 generating 3d plot from hyperdoc	fails]gazonk again
Cc: Camm Maguire

On Tuesday, December 19, 2006 1:30 AM Tim Daly wrote:
>
> > > The gazonk-name function, previously discussed, should handle
> > > this problem. I'm not sure why it wasn't applied.

> > Tim, is this a problem with Axiom or with GCL? If it is GCL
> > has anyone submitted a patch?

> ummm, that would be a source of debate i'd guess.
> arguably there is a failure in axiom causing the file to remain.

What does Axiom care about temporary files generated by GCL?
Isn't the goal just to compile and load a Lisp function?

> arguably there should never be a gcl failure leaving the file.
>

Yes, probably.

> of course, if there are multiple users of the system you can have
> name collisions because they are both writing to the same temp
> file name and do not have permission to erase each others files.
>

Do you mean to suggest that GCL can not be successfully used on a
multi-user system? Surely this is not a problem with must software
intended to run on unix/linux? There is a standard unix function
to create unique temporary file names in a multi-user environment.

> perhaps these files are left around from a previously failing
> axiom build. however axiom plays with the default system path
> names of gcl so that, by design, it never writes outside of
> the build directory so this should not happen.
>

In my experience the gazonk files are always created in /tmp
in all version of Axiom I have used so far - for both explicit
SPAD compiles ")compile xxx.spad" and for implicit function
compiles ")set function compile on". The axiom draw operation
always seems to try to compile it's first argument and for some
reason leaves some gazonk files in the /tmp directory - not only
when it fails but all the time.  If the resulting gazonk file is
owned by the current user then everything is ok. But if the file
is owned by another user/group to which I do not have write
access, then the next time someone else tries to use the Axiom
draw function, an error like this:

>> System error: Cannot create the file /tmp/gazonk0.fn.

occurs. Does this error message originate with GCL or with
something else that Axiom is trying to do with/too this file?

\start
Date: 18 Dec 2006 13:01:40 -0600
From: Gabriel Dos Reis
To: Bill Page
Subject: re: [#330 generating 3d plot from hyperdoc fails]gazonk again

Bill Page writes:

| On Monday, December 18, 2006 11:33 PM Tim Daly wrote:
| > ... 
| > The gazonk-name function, previously discussed, should handle
| > this problem. I'm not sure why it wasn't applied.
| > 
| 
| Tim, is this a problem with Axiom or with GCL? If it is GCL
| has anyone submitted a patch?

The gazonk-name function, as Tim and I discussed earlier, is already
in GCL.  But Axiom's version is still there.  So, presumably Axiom's
version is taking over.  Someone has to test 
   (1) Remove Axiom's version and test again
   (2) If the problem persists, fix it in GCL upstream.

\start
Date: 19 Dec 2006 10:10:00 +0100
From: Martin Rubey
To: William Sit
Subject: Re: a problem, maybe with strict typing

Dear William, dear Aldor experts,

The bit for the Aldor exports is enclosed in

The rest can be safely skipped, I guess.

William, thanks for your input. Most of it makes sense, however, the paragraph
which I find most interesting I still don't understand. Thus a follow up.

First things first. I had yet another idea, which avoids the problems
of EXPR a little. To put things into the right setting, I quote our
discussion:

> > I definitely don't want to restrict to EXPR INT.  It should work with any
> > domain that has TRANFUN.
> 
> No you don't have to, at least not for the user, but I think you must, to do
> your computation.

However, suppose that there is a domain Holonomic which enables us to compute
with functions that satisfy an linear differential equation, i.e., there is a
linear polynomial p such that p(x, y, y',...,y^(n))=0. Holonomic cannot inherit
from TRANFUN, since tan is not Holonomic, but it still captures a large class
of trigonometric functions. Furthermore, it is a computable domain, i.e., we
can automatically check whether an expression is zero. So, it is definitely an
interesting domain.

Currently I have the signature

solve(UTS SUP F -> UTS SUP F, List F)

where the first argument gives the series expansion of the equation defining my
series, the second is a list of initial values. For example, I could say

solve(s +-> -s * D(s,2) + D(s)^2 + s*D s, [1,1]) 

to obtain the exponential generating function for the Bell numbers. There is no
computation in an "Expression" domain involved here... (Note, furthermore, that
the necessity of SUP is not really clear for the user here, more on this below)

Thus, the signature 

solve(UTS EXPR INT -> UTS EXPR INT, List EXPR INT)

is, at least for me, not an option. I could imagine to have

solve(UTS EXPR F -> UTS EXPR F, List F)

but that poses some new problems, since EXPR EXPR INT is "forbidden" in the
interpreter. 


-ALDOR QUESTION----------------------------------------------------------------

My "new" idea is to create a new domain SUPEXPR that is like SUP but has
TRANFUN. That sounds childish, but I think it is not. I would do it as follows:

SUPEXPR(R: Ring):UPOLYC R with 
       if R has TRANFUN then TRANFUN

    add

        sin(p: %): % ==
            ground? p => coerce sin ground p
            output(hconcat("Cannot compute sin p for p=", p::OutputForm)
                  $OutputPackage
            error "SUPEXPR: sin defined for elements of the coefficient ring
            only"

        cos(p: %): % ==
            ground? p => coerce cos ground p
            output(hconcat("Cannot compute cos p for p=", p::OutputForm)
                  $OutputPackage
            error "SUPEXPR: cos defined for elements of the coefficient ring
            only"

etc. Of course, it would be nice if this could be done generically. But I
suppose, Aldor cannot do something like this, i.e., define some operations
generically only for a "subdomain"?

-------------------------------------------------------------------------------

In any case, this seems to do the trick, and should be quite easy to extend.

Now the paragraph I still don't quite understand.

> > > (If you require your user to give input functions directly from
> > > GR:=UPXS(F,x,a) or UPS(F,x,a), you will need to first "embed" GR to
> > > SGR:=UPXS(SUP F,x,a) or UPS(SUP F,x,a), and you can assign t to the main
> > > variable of SUP F; then you have to repack everything (just the normal
> > > part of the series up to the order you need) back into EXPR F before
> > > forming the series in R).

> > That sounds interesting, but I don't think I understand. Do you mean I can
> > "lift" a function from GR -> GR to a function SGR -> SGR? I don't see how
> > this could be done...
 
> F is a subring of SUP F, so if you have a series with coefficients in F,
> these are in SUP F (basically, "constants" with respect to the "?"
> variable). Is it trivial to lift a series in GR to SGR? (you can just use
> "map"). It is only a coercion from a subdomain to a domain. It is NOT lifting
> a function from GR -> GR to another function from SGR -> SGR (such lifting
> would be possible, but not unique unless the image for "?" is decided first,
> in which case, "map" will do the job too).

The one thing I dislike about the signature

  solve(UTS SUP F -> UTS SUP F, List F)

or

  solve(UTS SUPEXPR F -> UTS SUPEXPR F, List F)

is that the necessity of the constructor SUPEXPR is not really obvious. I'd
rather have

  solve(UTS F -> UTS F, List F)

and "lift" the mapping to a mapping UTS SUPEXPR F -> UTS SUPEXPR F. Somehow I
have the feeling that your suggestion above is relevant, however, I don't see
at all how this can be done. In fact, I doubt that this can be done at all,
but maybe I'm wrong.

Could you please try to re-phrase what you mean with

  If you require your user to give input functions directly from
  GR:=UPS(F,x,a), you will need to first "embed" GR to SGR:=UPS(SUP F,x,a),

in particular, to make things precise, could you give the signature you propose
for solve(...)?

\start
Date: Mon, 18 Dec 2006 20:45:21 -0800 (PST)
From: billitch
To: list
Subject: Re: SourceForge SVN

Waldek Hebisch wrote:
> 
> We have problem with SF SVN: first Gaby then I can not make "svn copy".
> Adding file works, but emulating "svn copy" via removal and addition
> of a copy increases repository size, which may bit us in the future.
> 
> Actually I am merging changes from build-improvements. I tried to
> "svn copy" gcl and noweb, but I am getting errors:
> 
> svn: COPY of gcl: 403 Forbidden (https://svn.sourceforge.net)
> 
> I am reluctant to commit gcl without sharing, so I will probably
> commit a version which requires users to separately fetch gcl (
> and noweb) if needed.
> 

Hi !
I had the same problem and this post fixed my problems :
http://sourceforge.net/tracker/index.php?func=detail&aid=1599910&group_id=1&atid0001

I now acces via the new URL scheme and everything works... Kinda strange
solution but at least it works.

-- 
  billitch

\start
Date: Wed, 20 Dec 2006 03:06:53 +0100 (CET)
From: Waldek Hebisch
To: William Sit
Subject: re: factor bug

William Sit wrote:
> Tim:
> 
> Could you please re-verify the NAG version?
> 
> According to your report, NAG version already has the 
> problem for factoring 119646463, which is a prime (so in 
> this case, 'factor' is correct and 'prime?' is wrong, 
> according to your report for NAG). Also, my Windows 
> version reports prime? 119646463 => true, so there is no 
> error here.
> 
> Note that in my earlier report, the number is 119643463, 
> which is not prime and is 10111 * 11833.
> 

Francois Maltey wrote:
> I test :
>
> [#factors (117661597+0*i) for i in 1..1000]   -- there are 1 and 2 factors
> reduce (+, [#factors (117661597+0*i) for i in 1..1000])     -- around 1650

The exact solution is 2000 of corse.

AFAICS the problem is that the map x -> (x^2+5) mod p has cycle
of the same length for both factors of 119643463 and 117661597. For
many examples just running Pollard method more times is sufficient.
However there are some nasty examples like 93281*97499 = 9094804219
or 90149*93229*97387 = 818489150670827 where probability of getting
right answer (using x^2+5 map) seem to be lower then 0.03.
Heuristically, using different map for succesive trials should solve
the problem, but at least at first glance it looks hard to prove
that changing map will work for _all_ numbers that we want to factor.

Below I implemented a different approach: I we detect that all factors
give cycle of the same length we look at the _first_ place when cycle
begin.  It is easy to prove that with probability at least 0.5 
cycles for different factors begin in different places. If this is the
case we can still find a proper factor.

In practise, it seems that that probability of success is much higher
than 0.5, but there is still non-negligable probability of failure, so
I also decided to repeat Pollard method up to 20 times.  I have not good
justification for choosing 20 -- for all bad examples that I was able to
produce 20 repetitions bring probability of failure way below hardware
error rate.

We probably should use better factorization method -- Pollard rho needs
a lot of time to find 17-digit factor and will probably never finish
if factors have more than 20 digits.  For comparison, I tried ecm-6.1.1
program and it found 37-digit factor of 69-digit number in about 2000
seconds, which is probably faster then Axiom Pollard for 17-digit 
factors.  But even simplest ECM is more compilcated then Pollard and
AFAICS ECM becomes really competitive only when one adds a bunch of
improvements which significantly increase complexity.  Other fast
methods look more complicated then ECM...

Anyway, the following patch fixed for me factorisation problems:

--- wh-sandbox/src/algebra/intfact.spad.pamphlet	2006-11-17 19:30:20.000000000 +0100
+++ wh-sandbox2/src/algebra/intfact.spad.pamphlet	2006-12-20 02:05:36.284242184 +0100
@@ -401,27 +401,51 @@
        r:I := 1
        q:I := 1
        G:I := 1
+       l:I
+       k:I
        until G > 1 repeat
           x := y
+          ys := y
           for i in 1..convert(r)@Integer repeat
              y := (y*y+5::I) rem n
              q := (q*abs(x-y)) rem n
-             k:I := 0
+          k := 0::I
+          G := gcd(q,n)
           until (k>=r) or (G>1) repeat
              ys := y
              for i in 1..convert(min(m,r-k))@Integer repeat
                 y := (y*y+5::I) rem n
-                q := q*abs(x-y) rem n
+                q := (q*abs(x-y)) rem n
              G := gcd(q,n)
              k := k+m
+          k := k + r
           r := 2*r
        if G=n then
+          l := k - m
+          G := 1::I
           until G>1 repeat
              ys := (ys*ys+5::I) rem n
              G := gcd(abs(x-ys),n)
+             l := l + 1
+          if G = n then
+             y := x0
+             x := x0
+             for i in 1..convert(l)@Integer repeat
+               y := (y*y+5::I) rem n
+             G := gcd(abs(x-y), n)
+             until G>1 repeat
+               y := (y*y+5::I) rem n
+               x := (x*x+5::I) rem n
+               G := gcd(abs(x-y), n)
        G=n => "failed"
        G
 
+    PollardSmallFactor20(n:I):Union(I,"failed") ==
+       for i in 1..20 repeat
+          r := PollardSmallFactor n
+          r case I => return r
+       r
+
     BasicSieve(r, lim) ==
        l:List(I) :=
           [1::I,2::I,2::I,4::I,2::I,4::I,2::I,4::I,6::I,2::I,6::I]
@@ -470,7 +494,7 @@
           (y:=perfectSqrt (x**2-n)) case I =>
                 insert_!(x+y,a,c)
                 insert_!(x-y,a,c)
-          (d := PollardSmallFactor n) case I =>
+          (d := PollardSmallFactor20 n) case I =>
              for m in 0.. while zero?(n rem d) repeat n := n quo d
              insert_!(d, a, m * c)
              if n > 1 then insert_!(n, a, c)

\start
Date: Tue, 19 Dec 2006 22:48:31 -0500
From: William Sit
To: Martin Rubey
Subject: Re: a problem, maybe with strict typing

Martin Rubey wrote:

> First things first. I had yet another idea, which avoids the
> problems of EXPR a little. To put things into the right setting, I
> quote our discussion:

> > > I definitely don't want to restrict to EXPR INT.  It should work
> > > with any domain that has TRANFUN.

> > No you don't have to, at least not for the user, but I think you
> > must, to do your computation.

> However, suppose that there is a domain Holonomic which enables us
> to compute with functions that satisfy an linear differential
> equation, i.e., there is a linear polynomial p such that p(x, y,
> y',...,y^(n))=0. Holonomic cannot inherit from TRANFUN, since tan is
> not Holonomic, but it still captures a large class of trigonometric
> functions. Furthermore, it is a computable domain, i.e., we can
> automatically check whether an expression is zero. So, it is
> definitely an interesting domain.

> Currently I have the signature
>
> solve(UTS SUP F -> UTS SUP F, List F)

> where the first argument gives the series expansion of the equation
> defining my series, the second is a list of initial values. For
> example, I could say solve(s +-> -s * D(s,2) + D(s)^2 + s*D s,
> [1,1]) to obtain the exponential generating function for the Bell
> numbers. There is no computation in an "Expression" domain involved
> here... (Note, furthermore, that the necessity of SUP is not really
> clear for the user here, more on this below)

Speaking for myself, I won't use the expanded series as input from a
user. I may use your function or something similar as a
behind-the-scene local function.  As will be seen in previous
discussion and below, series expansions require more than just
TRANFUN.

Note your example argument in solve is not a linear polynomial in the
derivatives of s. Ignoring that and assuming you are really interested
in non-linear ODEs, I don't see the relevance of transcendental
functions unless you allow them in the coefficients of the ODE. But
then you will have trouble evaluating the map in the argument of solve
(see below).

> Thus, the signature
>
> solve(UTS EXPR INT -> UTS EXPR INT, List EXPR INT)
>
> is, at least for me, not an option. I could imagine to have
>
> solve(UTS EXPR F -> UTS EXPR F, List F)
>
> but that poses some new problems, since EXPR EXPR INT is "forbidden" in the
> interpreter.

Before we get into the signature of solve, we have to make sure what
is to be computed can be effectively done within the domain. At first
I thought any domain having TRANFUN might be enough for your purpose
because afterall, such a domain is supposedly closed under all
elementary function operators. Then I tried with UTS(FRAC INT, x, 0):

(1) -> dom:=UTS(FRAC INT,x,0)

   (1)  UnivariateTaylorSeries(Fraction Integer,x,0)
                                                                 Type: Domain

(2) -> dom has TRANFUN

   (2)  true
                                                                Type: Boolean
(3) -> a:=series(1/(1-x),x=0)::dom

                 2    3    4    5    6    7    8    9    10      11
   (3)  1 + x + x  + x  + x  + x  + x  + x  + x  + x  + x   + O(x  )
                           Type: UnivariateTaylorSeries(Fraction Integer,x,0)
(4) -> sin a

   >> Error detected within library code:
   "sincos: series expansion involves transcendental constants"

protected-symbol-warn called with (NIL)
(4) -> sin series(1/(1-x),x=0)

   (4)

     sin(1) + cos(1)x  + (rest omitted)

                        Type: UnivariatePuiseuxSeries(Expression Integer,x,0)

The above shows that even though domains in TRANFUN may have sin
SPECIFIED, it does not mean the implementation is possible because the
underlying coefficient ring (in my example, FRAC INT) may not have
enough constants such as sin(1) to support the construction.  You
cannot get around this even if you use UTS(SUP F, x, a) or UTS(F,x,a)
since F, not necessarily, but even if, a domain in TRANFUN, must still
have transcendental constants since UTS or SUP is not going to add
these to F. (You may however use Float instead of FRAC INT as F, but
that gets us into approximations.)

> -ALDOR QUESTION----------------------------------------------------------------
>
> My "new" idea is to create a new domain SUPEXPR that is like SUP but has
> TRANFUN. That sounds childish, but I think it is not. I would do it as follows:
>
> SUPEXPR(R: Ring):UPOLYC R with
>        if R has TRANFUN then TRANFUN
>
>     add
>
>         sin(p: %): % ==
>             ground? p => coerce sin ground p
>             output(hconcat("Cannot compute sin p for p=", p::OutputForm)
>                   $OutputPackage
>             error "SUPEXPR: sin defined for elements of the coefficient ring
>             only"
>
>         cos(p: %): % ==
>             ground? p => coerce cos ground p
>             output(hconcat("Cannot compute cos p for p=", p::OutputForm)
>                   $OutputPackage
>             error "SUPEXPR: cos defined for elements of the coefficient ring
>             only"
>
> etc. Of course, it would be nice if this could be done generically. But I
> suppose, Aldor cannot do something like this, i.e., define some operations
> generically only for a "subdomain"?
>
> -------------------------------------------------------------------------------

> In any case, this seems to do the trick, and should be quite easy to extend.

I am not familiar with Aldor, but what you suggested does not seem to
be Aldor specific (except for "extend").  Note that you avoided the
most important operation in the example implementation of sin above:
for example, sin(1+?*x), where 1+?*x is in R = UTS(FRAC INT, x,0) and
presumably SUPEXPR R would have a new symbol ? from UPOLYC R, would
yield an error message, in addition to what I got in the above test
(that is, sin(1) need not be available during a series expansion of
sin even if you "extend" the definition of sin in series).

> Now the paragraph I still don't quite understand.
>
>> > > (If you require your user to give input functions directly from
>> > > GR:=UPXS(F,x,a) or UPS(F,x,a), you will need to first "embed" GR to
>> > > SGR:=UPXS(SUP F,x,a) or UPS(SUP F,x,a), and you can assign t to the main
>> > > variable of SUP F; then you have to repack everything (just the normal
>> > > part of the series up to the order you need) back into EXPR F before
>> > > forming the series in R).

>> > That sounds interesting, but I don't think I understand. Do you mean I can
>> > "lift" a function from GR -> GR to a function SGR -> SGR? I don't see how
>> > this could be done...

>> F is a subring of SUP F, so if you have a series with coefficients
>> in F, these are in SUP F (basically, "constants" with respect to
>> the "?"  variable). Is it trivial to lift a series in GR to SGR?
>> (you can just use "map"). It is only a coercion from a subdomain to
>> a domain. It is NOT lifting a function from GR -> GR to another
>> function from SGR -> SGR (such lifting would be possible, but not
>> unique unless the image for "?" is decided first, in which case,
>> "map" will do the job too).

> The one thing I dislike about the signature
>
>   solve(UTS SUP F -> UTS SUP F, List F)
>
> or
>
>   solve(UTS SUPEXPR F -> UTS SUPEXPR F, List F)
>
> is that the necessity of the constructor SUPEXPR is not really obvious. I'd
> rather have
>
>   solve(UTS F -> UTS F, List F)

> and "lift" the mapping to a mapping UTS SUPEXPR F -> UTS SUPEXPR
> F. Somehow I have the feeling that your suggestion above is
> relevant, however, I don't see at all how this can be done. In fact,
> I doubt that this can be done at all, but maybe I'm wrong.

The signature you proposed probably won't be ideal for the user
because if the map argument in solve involves transcendental
functions, you will be in trouble when it is to be evaluated. I would
think a much simpler way of giving the implicit equation is just an
expression in a single variable, something like: solve(z:EXPR F,
x:Symbol, c:F, g:BasicOperator):UTS(EXPR F,x,c) The EXPR F in the
target is meant to allow for other parametric constants in z, and F is
a numerical domain like INT or Float; x is the series variable and c
is the center for the series expansion.

The problem you are interested in has nothing to do with differential
equations (it may have an application to differential equation)
because it is just solving an implicit equation in series or power
series. So all that is needed is an expression giving the implicit
equation, where the dependent and independent variables are given.

   solve(sin(g(x))- sqrt(x), x,0, g)

would solve g(x) as a series solution in x around 0 for the equation

   sin(g(x) -sqrt(x)=0;

and you may want to allow the first argument to be a list LIST EXPR F:

   solve([g(x) * D(g(x),x,2) + D(g(x),x)^2 + g(x)*D(g(x),x), g(0)-1,
g'(0)-1],x,0,g)

would solve the ODE with initial conditions (but this is really not
within the setup until after one writes down g(x), g'(x), g''(x) in a
series with undetermined coefficients; but then for a fixed order, the
equations boil down to an algebraic system in the undetermined
coefficients. Or, if you don't like the similarity with Mathematica
syntax, you can use:

   solve(sin(y) - sqrt(x),x,0,y)

but then you will be using an implicit convention that y depends on x.

> Could you please try to re-phrase what you mean with
>
>   If you require your user to give input functions directly from
>   GR:=UPS(F,x,a), you will need to first "embed" GR to SGR:=UPS(SUP F,x,a),

> in particular, to make things precise, could you give the signature
> you propose for solve(...)?

> Many thanks,
>
> Martin

Not sure what you are puzzled about. By "give input functions directly
from GR", I mean allowing the implicit equation to be given by
expressions involving a power series, which is probably a bad idea
anyway since equations are generally not given that way. The series
expansion of any special or transcendental function should be dealt
with by the solve package (that is, you).

If you are asking about "embed", then perhaps you like the language of
category theory? Treat UTS(-,x,a) (sorry, UPS is not the correct
abbreviation) as a functor from Ring to Ring. Then we have the
following diagram:

                F    ----->   UTS(F,x,a)
             id |                   | map
                v                   v
             SUP(F) ---> UTS(SUP(F),x,a)

So the map in the picture is just UTS(-,x,a) applied to the ring morphism
F->SUP(F), which is the identity embedding (SUP(F) as an F-algebra).

The "lifting" is provided I think by the "map" in
ExpressionSpaceFunctions2(E,F) in ES2.spad. So for any s in GR, map(s,
s)$ES2(GR,SGR) would be the lifting or embedding. Of course "map" is
far more general, just like UTS(-,x,a) is, and accepts any morphism
between rings.

[Disclaimer: I have no experience whatsoever with ExpressionSpace or
related domains and packages. I am only exploring this by looking up
hyperdoc. Intuition does not always work in Axiom and syntax may not
be correct.]

\start
Date: Wed, 20 Dec 2006 00:13:42 -0500
From: Bill Page
To: billitch
Subject: New url for SourceForge SVN
Cc: David Burley

Thanks to the message from 'billitch' and the work of David Burley
at SourceForge it seems that we might finally have a solution to
our problems with access to svn at SourceForge! For the first time
since we started to use svn I have actually be able to complete an
entire checkout of the build-improvements sources using Tortiose
SVN on Windows without any failures of any kind. In all other
cases TortioseSVN has always failed with one HTTP-related error
message or another and irrevocably locked the archive so that it
was completely unusable. Using svn from the commmand line in both
Linux and Windows frequently gave the "secure connection truncated
errors" which neceesitated re-starting the check-out many times to
get a complete and usable copy of the repository.

At long last I finally have an Axiom svn archive on Windows that
I can really use! :-)

Using the formula given by David Burley below, the new url for
accessing the build-improvements branch at SourceForge is:

https://axiom.svn.sourceforge.net/svnroot/axiom/branches/build-improvements

The usual variations of this url can be used check out the trunk
or other branches.

I highly recommend that other Axiom developers give this a try.
Notice that David also describes how to switch an existing
repository to use the new url via the 'svn switch --relocate'
command.

Thank you very much to David Burley at SourceForge for making this
new url available and for the changes to Apache/SVN/network that
corrected the problems.

Regards,
Bill Page.

> Waldek Hebisch wrote:
> >
> > We have problem with SF SVN: first Gaby then I can not make
> > "svn copy". Adding file works, but emulating "svn copy" via
> > removal and addition of a copy increases repository size, which
> > may bit us in the future.
> >
> > Actually I am merging changes from build-improvements. I tried
> > to "svn copy" gcl and noweb, but I am getting errors:
> >
> > svn: COPY of gcl: 403 Forbidden (https://svn.sourceforge.net)
> >
> > I am reluctant to commit gcl without sharing, so I will probably
> > commit a version which requires users to separately fetch gcl
> > (and noweb) if needed.
> >
>

On December 18, 2006 11:45 PM billitch wrote:
>
> Hi !
> I had the same problem and this post fixed my problems :
>
http://sourceforge.net/tracker/index.php?func=detail&aid=1599910&group_id=1&
atid=200001
>
> I now acces via the new URL scheme and everything works...
> Kinda strange solution but at least it works.

On 2006-11-30 15:45 burley (SourceForge.net Site Admin) wrote:

> Greetings,
>
> I have created another access method for SVN repositories
> hosted on SourceForge.net. This new access method is
> currently undocumented but is generally accessible. I
> believe this new method may solve the secure connection
> truncated errors, and perhaps some others, but haven't had
> enough time to fully test it to be sure. However, as its
> little effort and risk to try it out (it uses the same data
> on disk, etc.), you may want to give it a shot and let me
> know on this ticket if it resolves your issues.
>
> To use this new SVN access method, you'll need to access SVN
> through the following URL spec:
>
> https://PROJECTNAME.svn.sourceforge.net/svnroot/PROJECTNAME
>
> note that the only change is that your project's UNIX name
> is added to the front of the hostname (i.e.
> svn.sourceforge.net gets modified to
> PROJECTNAME.svn.sourceforge.net), nothing else changes.
>
> To make this change on an existing working copy, which I
> recommend you make a backup of first, just in case, do the
> following:
>
> 1. Run 'svn info' at the root of the repository content, it
> should display a line that appears similar to:
>
>   URL: https://svn.sourceforge.net/svnroot/gaim/trunk
>
> 2. Run the following command at the root of the working copy:
>
> svn switch --relocate /
>   https://svn.sourceforge.net/svnroot/gaim/trunk  /
>   https://gaim.svn.sourceforge.net/svnroot/gaim/trunk
>
> This example is for the project gaim, but it would modify
> similarly for any other project. If it works for you, please
> post feedback here. If it doesn't, please also post feedback
> here.

\start
Date: 20 Dec 2006 10:35:08 +0100
From: Martin Rubey
To: William Sit
Subject: Re: a problem, maybe with strict typing

Dear William,

it seems that I am quite difficult to understand. I hope I can clarify some
things. The package works now, as I said already in my previous mail, I only
dislike one thing about it, but obviously, I couldn't make it clear. The
package is attached below.

> Speaking for myself, I won't use the expanded series as input from a user. 

I don't do that either, nor would I suggest it.

> As will be seen in previous discussion and below, series expansions require
> more than just TRANFUN.

TRANFUN serves as an example, as I stated, I think.
 
> > -ALDOR
> > QUESTION----------------------------------------------------------------

> > My "new" idea is to create a new domain SUPEXPR that is like SUP but has
> > TRANFUN. That sounds childish, but I think it is not. I would do it as
> > follows:

> > SUPEXPR(R: Ring):UPOLYC R with
> >        if R has TRANFUN then TRANFUN
> >
> >     add
> >
> >         sin(p: %): % ==
> >             ground? p => coerce sin ground p
> >             output(hconcat("Cannot compute sin p for p=", p::OutputForm)
> >                   $OutputPackage
> >             error "SUPEXPR: sin defined for elements of the coefficient
> >         ring
> >             only"
> >
> >         cos(p: %): % ==
> >             ground? p => coerce cos ground p
> >             output(hconcat("Cannot compute cos p for p=", p::OutputForm)
> >                   $OutputPackage
> >             error "SUPEXPR: cos defined for elements of the coefficient
> >         ring
> >             only"

> > etc. Of course, it would be nice if this could be done generically. But I
> > suppose, Aldor cannot do something like this, i.e., define some operations
> > generically only for a "subdomain"?

> > -------------------------------------------------------------------------------
> >
> > In any case, this seems to do the trick, and should be quite easy to
> > extend.
 
> I am not familiar with Aldor, but what you suggested does not seem to be
> Aldor specific (except for "extend").  

Replace Aldor with SPAD if you like. But it seems to me that there is more hope
to make things "generic" in Aldor...

> Note that you avoided the most important operation in the example
> implementation of sin above: for example, sin(1+?*x), where 1+?*x is in R > UTS(FRAC INT, x,0) and presumably SUPEXPR R would have a new symbol ? from
> UPOLYC R, would yield an error message,

No, I didn't omit anything I need. Even if R = UTS(FRAC INT, x, 0), i.e., R has
TRANFUN, I don't want to teach SUPEXPR to do something with sin(1+?*x). I guess
you meant 1+?*x would be in SUPEXPR R. Obviously, 1+?*x is not in R, thus
SUPEXPR *should* throw an error. 

> The signature you proposed probably won't be ideal for the user because if
> the map argument in solve involves transcendental functions, you will be in
> trouble when it is to be evaluated.

No. As long as F is "large" enough, it just works.

> The problem you are interested in has nothing to do with differential
> equations (it may have an application to differential equation) because it is
> just solving an implicit equation in series or power series. So all that is
> needed is an expression giving the implicit equation, where the dependent and
> independent variables are given.

Yes.

> > Could you please try to re-phrase what you mean with

> >   If you require your user to give input functions directly from
> >   GR:=UPS(F,x,a), you will need to first "embed" GR to SGR:=UPS(SUP F,x,a),

> > in particular, to make things precise, could you give the signature you
> > propose for solve(...)?

> Not sure what you are puzzled about. By "give input functions directly from
> GR", I mean allowing the implicit equation to be given by expressions
> involving a power series, which is probably a bad idea anyway since equations
> are generally not given that way. The series expansion of any special or
> transcendental function should be dealt with by the solve package (that is,
> you).

I don't understand. Nowhere I suggested to deal with expressions involving
power series - assuming that, with "expressions" you refer to something like
EXPR. So far I only considered maps from UTS -> UTS and, somewhat
alternatively, elements of a FunctionSpace that I interpret as maps UTS -> UTS.

> If you are asking about "embed", then perhaps you like the language of
> category theory? Treat UTS(-,x,a) (sorry, UPS is not the correct
> abbreviation) as a functor from Ring to Ring. Then we have the following
> diagram:

>                 F    ----->   UTS(F,x,a)
>              id |                   | map
>                 v                   v
>              SUP(F) ---> UTS(SUP(F),x,a)

In this picture, I guess that elements f of F are really implicit equations
defining y(x) which get mapped to the power series expansion of the function
y(x)?


Martin

(The following pamphlet requires allprose.sty for LaTeXing, but the spad
generation using document works even if allprose.sty is not present.)

\documentclass{article}
\usepackage{allprose}

\begin{document}
\title{ssolve.spad}
\author{Martin Rubey}
\maketitle
\begin{abstract}
\end{abstract}
\tableofcontents
\section{domain SUPEXPR SparseUnivariatePolynomialExpressions}

This domain is a hack, in some sense. What I'd really like to do -
automatically - is to provide all operations supported by the coefficient
domain, as long as the polynomials can be retracted to that domain, i.e., as
long as they are just constants. I don't see another way to do this,
unfortunately.

<<dom: SUPEXPR SparseUnivariatePolynomialExpressions>>=
)abb domain SUPTRAFUN SparseUnivariatePolynomialExpressions
SparseUnivariatePolynomialExpressions(R: Ring): Exports == Implementation where

    Exports == UnivariatePolynomialCategory R with

        if R has TranscendentalFunctionCategory
        then TranscendentalFunctionCategory

    Implementation == SparseUnivariatePolynomial R add

        if R has TranscendentalFunctionCategory then
            sin(p: %): % ==
                ground? p => coerce sin ground p
                output(hconcat("sin p for p= ", p::OutputForm))$OutputPackage
                error "SUPTRAFUN: sin only defined for elements of the
            coefficient ring"
            cos(p: %): % ==
                ground? p => coerce cos ground p
                output(hconcat("cos p for p= ", p::OutputForm))$OutputPackage
                error "SUPTRAFUN: cos only defined for elements of the
            coefficient ring"
@


\section{package UTSSOL TaylorSolve}

[[UTSSOL]] is a facility to compute the first few coefficients of a Taylor
series given only implicitely by a function [[f]] that vanishes when applied to
the Taylor series.

It uses the method of undetermined coefficients.

\begin{ToDo}
  Could I either
  \begin{itemize}
  \item take a function [[UTSCAT F -> UTSCAT F]] and still be able to compute
    with undetermined coefficients, or
  \item take a function [[F -> F]], and do likewise?
  \end{itemize}

  Let's see.

  Try to compute the equation without resorting to power series. I.e., %
  [[c: SUP SUP F]], and [[f: SUP SUP F -> SUP SUP F]]. Won't this make the
  computation of coefficients terribly slow?

  I could also try to replace transcendental kernels with variables\dots

  Unfortunately, [[SUP F]] does not have [[TRANFUN]] -- well, it can't, of
  course. However, I'd like to be able to compute %
  [[sin(1+monomial(1,1)$UFPS SUP EXPR INT)]].
\end{ToDo}

<<pkg: UTSSOL TaylorSolve>>=
)abb package UTSSOL TaylorSolve
TaylorSolve(F, UTSF, UTSSUPF): Exports == Implementation where
    F: Field
    SUP  ==> SparseUnivariatePolynomialExpressions
    UTSF: UnivariateTaylorSeriesCategory F
    UTSSUPF: UnivariateTaylorSeriesCategory SUP F
    NNI  ==> NonNegativeInteger

    Exports == with
        ssolve: (UTSSUPF -> UTSSUPF, List F) -> UTSF

    Implementation == add
<<implementation: UTSSOL TaylorSolve>>
@

<<implementation: UTSSOL TaylorSolve>>=
        ssolve(f, l) ==
            c1 := map(#1::(SUP F), l)$ListFunctions2(F, SUP F)::(Stream SUP F)
            c: Stream SUP F := concat(c1, generate(monomial(1$F,1$NNI)))
@

[[c]] is the stream of the already computed coefficients of the solution, plus
one which is so far undetermined.

<<implementation: UTSSOL TaylorSolve>>=
            st: List Stream SUP F := [c, c]
@

Consider an arbitrary equation $f\big(x, y(x)\big)=0$. When setting $x=0$, we
obtain $f\big(0, y(0)\big)=0$. It is not necessarily the case that this
determines $y(0)$ uniquely, so we need one initial value that satisfies this
equation.
\begin{ToDo}
  [[ssolve]] should check that the given initial values satisfy $f\big(0, y(0),
  y'(0),...\big) = 0$.
\end{ToDo}
Now consider the derivatives of $f$, where we write $y$ instead of $y(x)$ for
better readability:
\begin{equation*}
\frac{d}{dx}f(x, y)=f_1(x, y) + f_2(x, y)y^\prime
\end{equation*}
and
\begin{align*}
 \frac{d^2}{dx^2}f(x, y)&=f_{1,1}(x, y)\\
                        &+f_{1,2}(x, y)y^\prime\\
                        &+f_{2,1}(x, y)y^\prime\\
                        &+f_{2,2}(x, y)(y^\prime)^2\\
                        &+f_2(x, y)y^{\prime\prime}.
\end{align*}
In general, $\frac{d^2}{dx^2}f(x, y)$ depends only linearly on
$y^{\prime\prime}$.

\begin{ToDo}
  This points to another possibility: Since we know that we only need to solve
  linear equations, we could compute two values and then use interpolation.
  This might be a bit slower, but more importantly: can we still check that we
  have enough initial values? Furthermore, we then really need that $f$ is
  analytic, i.e., operators are not necessarily allowed anymore. However, it
  seems that composition is allowed.
\end{ToDo}

<<implementation: UTSSOL TaylorSolve>>=
            next: () -> F :=
               nr := st.1
               res: F

               if ground?(coeff: SUP F := nr.1)$(SUP F)
@
If the ne element was already calculated, we can simply return it:

<<implementation: UTSSOL TaylorSolve>>=
               then res := ground coeff
               else
@

Otherwise, we have to find the first non-satisfied relation and solve it. It
should be linear, or a single non-constant monomial. That is, the solution
should be unique.
<<implementation: UTSSOL TaylorSolve>>=
                   ns := st.2
                   eqs: Stream SUP F := coefficients f series ns
                   while zero? first eqs repeat eqs := rest eqs
                   eq: SUP F := first eqs
                   if degree eq > 1 then
                       if monomial? eq then res := 0
                       else
                          output(hconcat("The equation is: ", eq::OutputForm))
                                 $OutputPackage
                          error "ssolve: equation for coefficient not linear"
                   else res := (-coefficient(eq, 0$NNI)$(SUP F)
                                /coefficient(eq, 1$NNI)$(SUP F))

               nr.1 := res::SUP F
               st.1 := rest nr
               res

            series generate next
@
%$


\section{package EXPRSOL ExpressionSolve}

\begin{ToDo}
  I'd really like to be able to specify a function that works for all domains
  in a category. For example, [[x +-> y(x)^2 + sin x + x]] should \lq work\rq\
  for [[EXPR INT]] as well as for [[UTS INT]], both being domains having
  [[TranscendentalFunctionCategory]].
\end{ToDo}

<<pkg: EXPRSOL ExpressionSolve>>=
)abb package EXPRSOL ExpressionSolve
ExpressionSolve(R, F, UTSF, UTSSUPF): Exports == Implementation where
    R: Join(OrderedSet, IntegralDomain, ConvertibleTo InputForm)
    F: FunctionSpace R
    UTSF: UnivariateTaylorSeriesCategory F
    SUP  ==> SparseUnivariatePolynomialExpressions
    UTSSUPF: UnivariateTaylorSeriesCategory SUP F
    OP   ==> BasicOperator
    SY   ==> Symbol
    NNI  ==> NonNegativeInteger
    MKF ==> MakeBinaryCompiledFunction(F, UTSSUPF, UTSSUPF, UTSSUPF)
    NNI  ==> NonNegativeInteger
    MKF ==> MakeBinaryCompiledFunction(F, UTSSUPF, UTSSUPF, UTSSUPF)

    Exports == with

        ssolve: (F, OP, SY, List F) -> UTSF

    Implementation == add
<<implementation: EXPRSOL ExpressionSolve>>
@

The general method is to transform the given expression into a form which can
then be compiled. There is currently no other way in Axiom to transform an
expression into a function.

We need to replace the differentiation operator by the corresponding function
in the power series category, and make composition explicit. Furthermore, we
need to replace the variable by the corresponding variable in the power series.
It turns out that the compiler doesn't find the right definition of
[[monomial(1,1)]]. Thus we introduce it as a second argument. In fact, maybe
that's even cleaner. Also, we need to tell the compiler that kernels that are
independent of the main variable should be coerced to elements of the
coefficient ring, since he will complain otherwise.

<<implementation: EXPRSOL ExpressionSolve>>=
        opelt := operator("elt"::Symbol)$OP
        opdiff := operator("D"::Symbol)$OP
        opcoerce := operator("coerce"::Symbol)$OP

        replaceDiffs: (F, OP, Symbol) -> F
        replaceDiffs (expr, op, sy) ==
            lk := kernels expr
            for k in lk repeat
                if freeOf?(coerce k, sy) then
                    expr := subst(expr, [k], [opcoerce [coerce k]])

                if is?(k, op) then
                    arg := first argument k
                    if arg = sy::F
                    then expr := subst(expr, [k], [(name op)::F])
                    else expr := subst(expr, [k], [opelt [(name op)::F,
                                                          replaceDiffs(arg, op,
                                                          sy)]])
--                    => "iterate"

                if is?(k, %diff) then
                    args := argument k
                    differentiand := replaceDiffs(subst(args.1, args.2 =
                    args.3), op, sy)
                    expr := subst(expr, [k], [opdiff differentiand])
--                    => "iterate"
            expr


        ssolve(expr, op, sy, l) ==
            ex := replaceDiffs(expr, op, sy)
            f := compiledFunction(ex, name op, sy)$MKF
            ssolve(f(#1, monomial(1,1)$UTSSUPF), l)$TaylorSolve(F, UTSF,
            UTSSUPF)
@
%$

\section{Bugs}

<<inp: ssolve>>=
ssolve(sin f x / cos x, f, x, [1])$EXPRSOL(INT, EXPR INT, UFPS EXPR INT, UFPS
SUPEXPR EXPR INT)
@
returns
\begin{verbatim}
(((0 . 1) 0 . 1) NonNullStream #<compiled-function |STREAM;generate;M$;62!0|> . UNPRINTABLE)
\end{verbatim}

but
<<inp: ssolve>>=
U ==> UFPS SUPEXPR EXPR INT
ssolve(s +-> sin s *((cos monomial(1,1)$U)**-1)$U, f, x, [0])$EXPRSOL(INT, EXPR
INT, UFPS EXPR INT, UFPS SUPEXPR EXPR INT)
@

works. This is probably due to missing [[/]] in [[UFPS]].

\section{License}
<<license>>=
-- Copyright (C) 2006 Martin Rubey <Martin.Rubey@univie.ac.at>
--
-- This program is free software; you can redistribute it and/or
-- modify it under the terms of the GNU General Public License as
-- published by the Free Software Foundation; either version 2 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be
-- useful, but WITHOUT ANY WARRANTY; without even the implied
-- warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
-- PURPOSE. See the GNU General Public License for more details.
@


<<*>>=
<<license>>

<<dom: SUPEXPR SparseUnivariatePolynomialExpressions>>

<<pkg: UTSSOL TaylorSolve>>

<<pkg: EXPRSOL ExpressionSolve>>

@
\end{document}

\start
Date: 20 Dec 2006 15:25:02 -0500
From: Camm Maguire
To: Stavros Macrakis
Subject: Re: [Maxima] computation time information
Cc: Bill Page, Robert Dodier

Greetings!  At least on unix, we have:

>(si::gettimeofday)

1.1666460602236531E9

for microsecond resolution.  Perhaps you could suggest a patch?  We
are in need of a windows developer.  Specifically, there is a windows
specific read.d patch which needs reverting and testing -- I've asked
several people to test but have received no replies.  I'd like to get
this out before 2.6.8 is release if possible.  

The patch should be on the mailing lists.  Out of the office for one
week.  Would be absolutely wonderful if someone could try this by
then. 

Take care,

Stavros Macrakis writes:

> > (get-internal-real-time)) (float internal-time-units-per-second)))
> > By the way, I tried the above with Clisp, GCL, and SBCL on Linux.
> > The code is pure Common Lisp so it should work for other Lisps.
> > I would be interested to hear if it works correctly for GCL on Windows.
> 
> GCL on Windows apparently uses a 10 mS resolution real-time clock for
> both (get-internal-real-time) and (get-internal-run-time).  This is
> unfortunate -- Windows does provide several different high-resolution
> runtime clocks (but I'm not an expert in them).  Maybe there is
> already some other interface to the high-resolution runtime clock in
> GCL?

\start
Date: 20 Dec 2006 15:28:46 -0500
From: Camm Maguire
To: Bill Page
Subject: re: [#330 generating 3d plot from hyperdoc fails]gazonk again

Greetings!  2.6.8pre uses an approximate scheme using the pid in the
file name, at least on unix.  Is this not available on windows?  cvs
head has (si::with-temp-file...) using mkstemp.  If this could be
ported to windows too, we could get gazonk to use this mechanism.  See
do-recompile in gcl_callhash.lsp for example usage.

It is not clear to me from the below if you are describing gcl
standard behavior, or the axiom modified behavior.

Out of office for one week.

Take care,

Bill Page writes:

> On Tuesday, December 19, 2006 1:30 AM Tim Daly wrote:
> > 
> > > > The gazonk-name function, previously discussed, should handle
> > > > this problem. I'm not sure why it wasn't applied.
> > > > 
> > > 
> > > Tim, is this a problem with Axiom or with GCL? If it is GCL
> > > has anyone submitted a patch?
> > 
> > ummm, that would be a source of debate i'd guess.
> > arguably there is a failure in axiom causing the file to remain.
> 
> What does Axiom care about temporary files generated by GCL?
> Isn't the goal just to compile and load a Lisp function?
> 
> > arguably there should never be a gcl failure leaving the file.
> >
> 
> Yes, probably.
>  
> > of course, if there are multiple users of the system you can have
> > name collisions because they are both writing to the same temp
> > file name and do not have permission to erase each others files.
> >
> 
> Do you mean to suggest that GCL can not be successfully used on a
> multi-user system? Surely this is not a problem with must software
> intended to run on unix/linux? There is a standard unix function
> to create unique temporary file names in a multi-user environment.
> 
> > perhaps these files are left around from a previously failing
> > axiom build. however axiom plays with the default system path
> > names of gcl so that, by design, it never writes outside of 
> > the build directory so this should not happen.
> > 
> 
> In my experience the gazonk files are always created in /tmp
> in all version of Axiom I have used so far - for both explicit
> SPAD compiles ")compile xxx.spad" and for implicit function
> compiles ")set function compile on". The axiom draw operation
> always seems to try to compile it's first argument and for some
> reason leaves some gazonk files in the /tmp directory - not only
> when it fails but all the time.  If the resulting gazonk file is
> owned by the current user then everything is ok. But if the file
> is owned by another user/group to which I do not have write
> access, then the next time someone else tries to use the Axiom
> draw function, an error like this:
> 
> >> System error: Cannot create the file /tmp/gazonk0.fn.
> 
> occurs. Does this error message originate with GCL or with
> something else that Axiom is trying to do with/too this file?

\start
Date: 21 Dec 2006 15:50:09 +0100
From: Francois Maltey
To: Francois Maltey
Subject: My latex produces error for standard *.pamphlet file.

Hello,

I run  
/usr/local/axiom-local/mnt/linux/bin/lib/noweave afile.pamphlet > afile.ltx

Then I compile 
latex afile.ltx

I get errors at the beginning of the latex compilation 
about \documentclass{article}

! LaTeX Error: Can be used only in preamble.

My $TEXINPUTS is :

.:/usr/share/texmf-tetex/tex/latex//:/home/fmy/Init-tex//:
/usr/local/axiom-local/mnt/linux/doc/src/algebra//:
/usr/local/axiom-local/mnt/linux/bin/tex//

The error is the same for all *.pamphlet file.

The result is a silly page with the text thefile.pamphlet0article axiom

The other pages are right.

Do you have any idea ?

----------------------------------------------------------------------------

This is pdfeTeX, Version 3.141592-1.21a-2.2 (Web2C 7.5.4)
entering extended mode
(./elemntry.ltx
LaTeX2e <2003/12/01>
Babel <v3.8d> and hyphenation patterns for american, french, german, ngerman, b
ahasa, basque, bulgarian, catalan, croatian, czech, danish, dutch, esperanto, e
stonian, finnish, greek, icelandic, irish, italian, latin, magyar, norsk, polis
h, portuges, romanian, russian, serbian, slovak, slovene, spanish, swedish, tur
kish, ukrainian, nohyphenation, loaded.
(/usr/share/texmf-tetex/tex/latex/base/article.cls
Document Class: article 2004/02/16 v1.4f Standard LaTeX document class
(/usr/share/texmf-tetex/tex/latex/base/size10.clo))
(/usr/local/axiom-local/mnt/linux/bin/tex/noweb.sty) (./elemntry.aux)

! LaTeX Error: Can be used only in preamble.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...

l.1 ...ntry.pamphlet}\nwbegindocs{0}\documentclass
                                                  {article}
?
! Emergency stop.
 ...

l.1 ...ntry.pamphlet}\nwbegindocs{0}\documentclass
                                                  {article}
No pages of output.
Transcript written on elemntry.log.
petoncle:~/Axiom$ /usr/local/axiom-local/mnt/linux/bin/lib/noweave Lattice.pamphlet > Lattice.ltx

\start
Date: Thu, 21 Dec 2006 16:06:35 +0100
From: Ralf Hemmecke
To: Francois Maltey
Subject: Re: My latex produces error for standard *.pamphlet file.

It seems you are creating a latex file with \documentclass appearing 
twice in it.

Have you tried "noweave -n"? And maybe you even have to add the option
-delay. Just try. Without knowing your file I cannot say anything more.

Ralf

On 12/21/2006 03:50 PM, Francois Maltey wrote:
> Hello,
> 
> I run  
> /usr/local/axiom-local/mnt/linux/bin/lib/noweave afile.pamphlet > afile.ltx
> 
> Then I compile 
> latex afile.ltx
> 
> I get errors at the beginning of the latex compilation 
> about \documentclass{article}
> 
> ! LaTeX Error: Can be used only in preamble.
> 
> My $TEXINPUTS is :
> 
> .:/usr/share/texmf-tetex/tex/latex//:/home/fmy/Init-tex//:
> /usr/local/axiom-local/mnt/linux/doc/src/algebra//:
> /usr/local/axiom-local/mnt/linux/bin/tex//
> 
> The error is the same for all *.pamphlet file.
> 
> The result is a silly page with the text thefile.pamphlet0article axiom
> 
> The other pages are right.
> 
> Do you have any idea ?

\start
Date: 21 Dec 2006 16:12:23 +0100
From: Francois Maltey
To: Ralf Hemmecke
Subject: Re: My latex produces error for standard *.pamphlet file.

Hello Ralf, thanks a lot !

 Hemmecke Ralf Hemmecke writes:

> It seems you are creating a latex file with \documentclass appearing
> twice in it.

With -n I got a lot of error.
The -delay option, with or without -n, seems right

\start
Date: Thu, 21 Dec 2006 15:48:20 -0500
From: William Sit
To: Martin Rubey
Subject: Re: a problem, maybe with strict typing

Martin Rubey wrote:

> it seems that I am quite difficult to understand. ... The
> package is attached below.

I would agree :-). Since you already have the package, I don't know
why you are asking these questions! Actually, after a preliminary
reading your package, I have more questions than answers. I have not
yet tried your package and most likely, all these questions may go
away once I do that.

> Replace Aldor with SPAD if you like. But it seems to me that there
> is more hope to make things "generic" in Aldor...

I'm not sure about that. I am not convinced that Aldor is a more
powerful language. It may have a better compiler though (better error
messages). But we have been through this, too.

> No, I didn't omit anything I need. Even if R = UTS(FRAC INT, x, 0),
> i.e., R has TRANFUN, I don't want to teach SUPEXPR to do something
> with sin(1+?*x). I guess you meant 1+?*x would be in SUPEXPR
> R. Obviously, 1+?*x is not in R, thus SUPEXPR *should* throw an
> error.

>From a user viewpoint, I was surprised that the authors of UTS and
UPXS would allow a coefficient domain that does not have enough
transcendental constants to be lifted to a series domain with
transcendental functions. In your case, if you are not teaching
SUPEXPR anything (including expanding sin(1+?*x) in series) then I
don't know why you need SUPEXPR or what it is for. Do you mean just to
"make" a domain similar to SUP F but just say it belong to the
category TRANFUN, without actually being so (much like UTS)?  Don't
you need to expand things in series at all? Even if you are relegating
the users to provide the series map, where do you expect them to
obtain the series other than starting with EXPR?

> > The signature you proposed probably won't be ideal for the user
> > because if the map argument in solve involves transcendental
> > functions, you will be in trouble when it is to be evaluated.

> No. As long as F is "large" enough, it just works.

Well how "large"? Including transcendental constants? Which domain has
them besides EXPR?

> > The problem you are interested in has nothing to do with
> > differential equations (it may have an application to differential
> > equation) because it is just solving an implicit equation in
> > series or power series. So all that is needed is an expression
> > giving the implicit equation, where the dependent and independent
> > variables are given.

> Yes.

Do you restrict the implicit equation to be polynomial? Why do you
consider an implicit equation as a map from UTS to UTS? Say I want to
solve the implicit equation x y(x) = 1 in power series around x=1.  Do
you want me to create a map from UTS(INT,x,1) to UTS(INT,x,1) by
sending a series s(x) to x s(x) - 1? And you would not allow implicit
equation such as sin(y(x))=sqrt(x) be entered that way, but you
require the user to create a map sending a series s(x) to the series
expansion of sin(s(x))-sqrt(x) (so the user is responsible for the
series expansion)? And what would be the implicit equation you are to
solve if the user actually inputs some map that say takes a series
s(x) = c0 + c1 (x-1) + t(x) (where t(x) is the tail end of s(x)) to
the series c1 + c0(x-1) + t(x) (or some other ways of mangling the
series such as swapping all even-indexed coefficients with previous
odd-coefficients and the result combined with other operations)?

>> > Could you please try to re-phrase what you mean with

>>>   If you require your user to give input functions directly from
>>>   GR:=UPS(F,x,a), you will need to first "embed" GR to SGR:=UPS(SUP F,x,a),

>>> in particular, to make things precise, could you give the signature you
>>> propose for solve(...)?

> > Not sure what you are puzzled about. By "give input functions
> > directly from GR", I mean allowing the implicit equation to be
> > given by expressions involving a power series, which is probably a
> > bad idea anyway since equations are generally not given that
> > way. The series expansion of any special or transcendental
> > function should be dealt with by the solve package (that is, you).

> I don't understand. Nowhere I suggested to deal with expressions
> involving power series - assuming that, with "expressions" you refer
> to something like EXPR. So far I only considered maps from UTS ->
> UTS and, somewhat alternatively, elements of a FunctionSpace that I
> interpret as maps UTS -> UTS.

Even in UTS, which is of category TRANFUN, you are allowed to form
"expressions" like sin, cos, etc with arguments in UTS and supposedly
returning elements in UTS. But unless the coefficient ring has
transcendental constants, sin and cos, etc. simply don't work in
UTS. But, there is nothing to prevent a user to use transcendental
functions in the implicit equation (especially if the implicit
equation is not actually evaluated). Moreover, as indicated above,
maps from UTS to UTS can be very general and need not be given by a
"formula" involving the argument s(x) in UTS, but by an infinite
stream of formulae for its (new) coefficients. And, if you allow using
f: UTSSUPF -> UTSSUPF, what is the implicit equation if f(s(x))
involves the main variable in SUP F? Why do you treat f as if it has
two arguments, as in f(x,y(x))? Is y(x) being substituted into the
main variable of SUP F? In that case, why must f involve it?  Are
there any restrictions on f for your package?

> > If you are asking about "embed", then perhaps you like the language of
> > category theory? Treat UTS(-,x,a) (sorry, UPS is not the correct
> > abbreviation) as a functor from Ring to Ring. Then we have the following
> > diagram:
>
> >                 F    ----->   UTS(F,x,a)
> >              id |                   | map
> >                 v                   v
> >              SUP(F) ---> UTS(SUP(F),x,a)
>
> In this picture, I guess that elements f of F are really implicit equations
> defining y(x) which get mapped to the power series expansion of the function
> y(x)?

No, I said treat UTS(-,x,a) as a functor. So the arrow F ---->
UTS(F,x,a) simply associates a ring F (an object of the ring category)
with another ring UTS(F,x,a). In math notation, suppressing the center
a, it takes F to F[[x]]. It is NOT a set map that takes f in F to some
g in F[[x]] (even though of course, F can be embedded naturally in
F[[x]]). The map id is a SET map that takes f in F to f in SUP(F),
thus inducing a SET map from on the right of the diagram.  Of course,
both id and map are algebra homomorphisms over F.

\start
Date: 21 Dec 2006 22:52:20 +0100
From: Francois Maltey
To: list
Subject: I can't extract a constant coefficient.

Hello,

An example, suppose I have x = a+b*c + 2/3 + 1/(d+1)

Is it possible to extract the 2/3 coefficient in this case.

// A // I can extract an integer coefficient in polynomial x = a+b*c + 4
thanks to the coefficient of null degree.

// B // I can extract a rational coefficient in this fraction 
polynomial integer x = a+b*c + 4/3 because the denominator is 
an integer : this constant is coefficient of null degree / denominator.

// C // I can extract a rational coefficient in this fraction polynomial 
integer x = a+b*c/d + 4/3 because the denominator is monic.
It's the remainder for a monic divide.

But I can't do it for the first example. Is it possible or not.

In this first example 2/3 is the better coefficient because
for other rational the fraction 1/(d+1) is worse, the numerator 
has a d : 2/3 + 1/(d+1) = 1+(-d+2)/(3d+3)

Of corse, it's possible to hace a=d, and then the degree argument is false

My aim is to simplify sin (.....+ m/n %pi) in +/- sin/cos (....+ k/n %pi)
where abs (k) is a smaller integer than m and n. The smallest one.

I have done the //A// case, I think I'm going to do the //B// case.
I don't know if it's a good idea to do the //C// case.
I don't know how to do the first example.

\start
Date: 23 Dec 2006 06:40:46 +0100
From: Gabriel Dos Reis
To: Bill Page
Subject: Re: New url for  SourceForge SVN
Cc: billitch, David Burley

Bill Page writes:

[...]

| At long last I finally have an Axiom svn archive on Windows that
| I can really use! :-)

Great!

| Using the formula given by David Burley below, the new url for
| accessing the build-improvements branch at SourceForge is:
| 
| https://axiom.svn.sourceforge.net/svnroot/axiom/branches/build-improvements
| 
| The usual variations of this url can be used check out the trunk
| or other branches.

I concur that I was able to get whole Axiom svn repo in a go without a
fuss.  

I've now relocated my depot path.  For those who use SVK, one of my
Axiom depot paths is a direct mirror and the command is

    svk mirror --relocate /mirror/axiom https://axiom.svn.sourceforge.net/svnroot/axiom

where "/mirror/axiom" is my direct mirrored path to Axiom.

\start
Date: 26 Dec 2006 01:43:56 -0600
From: Gabriel Dos Reis
To: Bill Page
Subject: Re: Axiom/GCL on windows

Bill Page writes:

[...]

| That's excellent! Let me know how/if I can help. One thing I
| plan to do after you commit the recent change for the SPAD
| variable is to diff against axiom--windows--1. There were
| several patches to Axiom that as far as I know were never
| incorporated into the axiom--main--1 branch from which Axiom
| silver and build-improvements were cloned, although most of
| these might already be obsoleted by build-improvements. The
| most critical are probably some unix system dependencies such
| as 'rm' and 'mv' commands which should really be implemented
| in a more portable lisp manner.

Bill --

   Let me know when you get a chance to have a shot at this diff.

\start
Date: Fri, 29 Dec 2006 17:12:53 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows

On December 26, 2006 2:44 AM Gabriel Dos Reis wrote:
> Bill Page writes:
> ...
> | That's excellent! Let me know how/if I can help. One thing I
> | plan to do after you commit the recent change for the SPAD
> | variable is to diff against axiom--windows--1. There were
> | several patches to Axiom that as far as I know were never
> | incorporated into the axiom--main--1 branch from which Axiom
> | silver and build-improvements were cloned, although most of
> | these might already be obsoleted by build-improvements. The
> | most critical are probably some unix system dependencies such
> | as 'rm' and 'mv' commands which should really be implemented
> | in a more portable lisp manner.
>
> Bill --
>
>    Let me know when you get a chance to have a shot at this diff.
>

Here is the list of patches that I was able to isolate between
axiom--windows--1 and the current build-improvements. These patches
where first applied to the axiom--windows--1 branch by Mike Thomas.
I think they probably represents the minimum changes necessary to
allow AXIOMsys to run on natively on Windows outside of an MSYS
shell.

-------

diff -r d4e8f2a7df42 src/interp/cfuns.lisp.pamphlet
--- a/src/interp/cfuns.lisp.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/cfuns.lisp.pamphlet	Fri Dec 29 16:15:41 2006 -0500
@@ -58,12 +58,23 @@
   (system:define-foreign-function :c '|copyEnvValue| :fixnum)
   )

+;; Staged directoryp to deal with Windows/Unix stat differences.
 #+KCL
 (progn
-  (defentry |directoryp| (string)        (int "directoryp"))
+  (defentry |directoryp-c| (string)      (int "directoryp"))
+  (defentry |makedir-c| (string)           (int "makedir"))
   (defentry |writeablep| (string)        (int "writeablep"))
   (defentry |findString| (string string) (int "findString"))
   )
+
+#+KCL
+(defun |directoryp| (fn)
+  (cond ((not (probe-file fn)) -1)
+        ((|directoryp-c| fn) 1)
+        (t 0)))
+#+KCL
+(defun |makedir| (directory-name)
+  (|makedir-c| directory-name))

 #+:CCL
 (defun |directoryp| (fn)
diff -r d4e8f2a7df42 src/interp/construc.lisp.pamphlet
--- a/src/interp/construc.lisp.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/construc.lisp.pamphlet	Fri Dec 29 16:15:41 2006 -0500
@@ -147,8 +147,8 @@
    (concatenate 'string $spadroot "/../../int/algebra/" (string name)
".NRLIB/code.lsp")))
  (let (masterindex blanks index newindex (space (* 22 (length
innames))))
  (setq newindex space)
- (system::system (concatenate 'string "rm -r " (libname outname)))
- (system::system (concatenate 'string "mkdir " (libname outname)))
+ (delete-file (libname outname))
+ (ensure-directories-exist (libname outname))
  (with-open-file (out (indexname outname) :direction :output)
   (setq blanks (make-string space :initial-element #\ ))
   (write  blanks :stream out)       ; reserve space for the masterindex
@@ -171,10 +171,11 @@
      (write alist :stream out :level nil :length nil :escape t)))))
   (file-position out 0)
   (print masterindex out))
+  (with-open-file (out (lspname outname) :direction :output)
   (dolist (inname innames)
-   (format t "cat ~a >>~a~%" (fullcode inname) (lspname outname))
-   (system::system
-    (format nil "cat ~a >>~a" (fullcode inname) (lspname outname)))))))
+     (format t "Appending file ~a to ~a~%" (fullcode inname) (lspname
outname))
+     (with-open-file (in (fullcode inname))
+      (si::copy-stream in out)))))))


 (defun |pathname| (p)
diff -r d4e8f2a7df42 src/interp/daase.lisp.pamphlet
--- a/src/interp/daase.lisp.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/daase.lisp.pamphlet	Fri Dec 29 16:15:41 2006 -0500
@@ -1246,7 +1246,7 @@ database.
     (setq filename  (concatenate 'string daase "/algebra/" name))
     (format t "   Using local database ~a.." filename))
    (setq filename (concatenate 'string $spadroot "/algebra/" name)))
-  (when erase? (system::system (concatenate 'string "rm -f "
filename)))
+  (when erase? (delete-file filename))
   filename))

 ;; rewrite this so it works in mnt
diff -r d4e8f2a7df42 src/interp/i-syscmd.boot.pamphlet
--- a/src/interp/i-syscmd.boot.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/i-syscmd.boot.pamphlet	Fri Dec 29 16:23:12 2006 -0500
@@ -834,9 +834,9 @@ withAsharpCmd args ==
 --% )copyright -- display copyright notice

 summary l ==
- OBEY STRCONC ('"cat ",getEnv('"AXIOM"),'"/lib/summary")
+ TYPE_-CONTENTS_-OF_-FILE STRCONC (getEnv('"AXIOM"),'"/lib/summary")
 copyright () ==
- OBEY STRCONC ('"cat ",getEnv('"AXIOM"),'"/lib/copyright")
+ TYPE_-CONTENTS_-OF_-FILE STRCONC (getEnv('"AXIOM"),'"/lib/copyright")

 --% )credits -- display credit list

diff -r d4e8f2a7df42 src/interp/nlib.lisp.pamphlet
--- a/src/interp/nlib.lisp.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/nlib.lisp.pamphlet	Fri Dec 29 16:15:41 2006 -0500
@@ -94,6 +94,9 @@ but has been changed to read:
              optionlist)))

 (defun directory? (filename) (|directoryp| filename))
+;makedir (fname) fname is a directory name.
+#+:AKCL(defun makedir (fname) (|makedir| fname))
+

 ;; (RDEFIOSTREAM ((MODE . IO) (FILE fn ft dir))) IO is I,O,INPUT,OUTPUT
 #+:AKCL
@@ -240,11 +243,6 @@ but has been changed to read:
     (file-position stream :end)
     (write-indextable indextable stream)))

-;makedir (fname) fname is a directory name.
-#+:AKCL
-(defun makedir (fname)
-  (system (concat "mkdir " fname)))
-
 ;; (RREAD key rstream)
 (defun rread (key rstream &optional (error-val nil error-val-p))
   (if (equal (libstream-mode rstream) 'output) (error "not input
stream"))
diff -r d4e8f2a7df42 src/interp/sys-pkg.lisp.pamphlet
--- a/src/interp/sys-pkg.lisp.pamphlet	Tue Dec 26 10:35:30 2006 +0000
+++ b/src/interp/sys-pkg.lisp.pamphlet	Fri Dec 29 16:15:41 2006 -0500
@@ -114,7 +114,7 @@ provides support for compiler code.
 (lisp:export
     '(BOOT::|$FormalMapVariableList| BOOT::|$userModemaps|
 	 boot::restart boot::$IEEE
-	 BOOT::|directoryp| boot::help boot::|version| boot::|pp|
+	 BOOT::|directoryp| BOOT::|makedir| boot::help boot::|version|
boot::|pp|
 	 BOOT::POP-STACK-4 BOOT::|$BasicDomains| BOOT::|$DomainFrame|
 	 BOOT::|$SideEffectFreeFunctionList|
 	 BOOT::ATOM2STRING BOOT::|$DoubleQuote| BOOT::|$genSDVar|
@@ -220,7 +220,7 @@ provides support for compiler code.
 	 BOOT::GETTAIL BOOT::|QuotientField| BOOT::CURRENT-TOKEN
 	 BOOT::|$suffix| BOOT::|$VariableCount| BOOT::COMPARE
 	 LISP:SEQUENCE BOOT::|$Exit| BOOT::BOOT-EQUAL BOOT::LT
-	 VMLISP::OBEY BOOT::|UnSizedBox| BOOT::|Integer| BOOT::|Nud|
+	 VMLISP::OBEY BOOT::TYPE-CONTENTS-OF-FILE BOOT::|UnSizedBox|
BOOT::|Integer| BOOT::|Nud|
 	 BOOT::IOCLEAR BOOT::|$BigFloatOpt| BOOT::|$EmptyEnvironment|
 	 BOOT::|$forceDatabaseUpdate| BOOT::$LINESTACK BOOT::ULCASEFG
 	 BOOT::|$Boolean| BOOT::|$clamList| BOOT::COLLECT
@@ -330,7 +330,7 @@ provides support for compiler code.
 <<GCL.DEFINE-MACRO>>
 <<GCL.MEMQ>>
 <<GCL.PNAME>>
-	  BOOT:|directoryp|))
+	  BOOT:|directoryp| BOOT:|makedir|))
 (lisp:export
     '(VMLISP::SINTP VMLISP::$FCOPY
 <<GCL.DEFINE-MACRO>>
@@ -338,7 +338,7 @@ provides support for compiler code.
 <<GCL.PNAME>>
          VMLISP::PUT
 	 VMLISP::QVELT-1 VMLISP::QSETVELT-1 vmlisp::throw-protect
-	 VMLISP::|directoryp| VMLISP::EQCAR
+	 VMLISP::|directoryp| VMLISP::|makedir| VMLISP::EQCAR
 	 VMLISP::DEFIOSTREAM VMLISP::RDEFIOSTREAM VMLISP::MLAMBDA
 	 VMLISP::QSLESSP VMLISP::QSDIFFERENCE VMLISP::QSQUOTIENT
 	 VMLISP::ERROROUTSTREAM VMLISP::CREATE-SBC VMLISP::LASTPAIR
@@ -455,7 +455,7 @@ provides support for compiler code.
 (lisp:shadow '(BOOT::MAP))
 (lisp:import
     '(VMLISP::ERROROUTSTREAM LISP:COUNT VMLISP::NE VMLISP::FLUID
-	 LISP:SEQUENCE VMLISP::OBEY LISP::NUMBER VMLISP::|union|
+	 LISP:SEQUENCE VMLISP::OBEY BOOT::TYPE-CONTENTS-OF-FILE
LISP::NUMBER VMLISP::|union|
 	 LISP:STEP VMLISP::OPTIONLIST VMLISP::EXIT VMLISP::LEXGREATERP))
 (lisp:import '(vmlisp::make-input-filename))
 (lisp:import '(vmlisp::libstream-dirname))


---------

There are still some other places in the source that make
non-portable assumptions about the shell such as those
listed below. In general these will all eventually have
to be replaced with their portable lisp equivalents as in
the patches above.

$ egrep -e '(OBEY|"rm |"mv |"cat |"awk )' *.pamphlet
as.boot.pamphlet:  OBEY '"rm -f temp.text"
as.boot.pamphlet:  OBEY '"ls as/*.asy > temp.text"
bookvol5.pamphlet:  --OBEY STRCONC('"rm -rf ", file)
br-data.boot.pamphlet:  OBEY
br-data.boot.pamphlet:  --OBEY '"mv libdb.text olibdb.text"
br-data.boot.pamphlet:  OBEY '"rm olibdb.text"
br-data.boot.pamphlet:  OBEY STRCONC('"rm -f ",keypath)
br-data.boot.pamphlet:  OBEY STRCONC('"rm -f ",htpath)
br-data.boot.pamphlet:  obey '"rm libdb.text"
br-saturn.boot.pamphlet:--    OBEY  '"cat /tmp/sat.text"
br-saturn.boot.pamphlet:--OBEY '"rm libdb.text"
br-saturn.boot.pamphlet:  OBEY STRCONC('"sort -f _"",sin,'".text_" >
_"", sout, '".text_"")
br-saturn.boot.pamphlet:  OBEY STRCONC('"rm ", sin, '".text")
br-saturn.boot.pamphlet:--  --obey STRCONC('"mv ", before, '" ", after)
br-saturn.boot.pamphlet:--  obey STRCONC('"rm ",fn)
br-search.boot.pamphlet:  OBEY x
br-search.boot.pamphlet:  obey STRCONC('"rm -f ", pathname)
c-doc.boot.pamphlet:  OBEY '"rm docreport.input"
c-doc.boot.pamphlet:  OBEY STRCONC('"echo _")bo
setOutStream('",STRINGIMAGE nam,'")_" > temp.input")
c-doc.boot.pamphlet:  OBEY '"cat docreport.header temp.input >
docreport.input"
c-doc.boot.pamphlet:  OBEY STRCONC('"awk '/",STRINGIMAGE nam,'"/
{printf(_")co %s.spad\n_",$2)}' whofiles > temp.input")
c-doc.boot.pamphlet:  OBEY '"cat docreport.input temp.input >
temp1.input"
c-doc.boot.pamphlet:  OBEY '"cat temp1.input docreport.trailer >
docreport.input"
c-doc.boot.pamphlet:  OBEY '"rm temp.input"
c-doc.boot.pamphlet:  OBEY '"rm temp1.input"
c-doc.boot.pamphlet:  OBEY STRCONC('"awk '$2 ==
",quoteChar,filename,quoteChar,'" {print $1}' whofiles > /tmp/temp")
compat.boot.pamphlet:  sayMessage ["   Return Code = ", OBEY string]
compat.boot.pamphlet:    OBEY STRCONC('"notepad ", namestring pathname
file)
compat.boot.pamphlet:  OBEY STRCONC('"$AXIOM/lib/SPADEDIT ",namestring
pathname file)
daase.lisp.pamphlet:;;  (when erase? (system::system (concatenate
'string "rm -f " filename)))
debug.lisp.pamphlet:              (RETURN (OBEY "EXEC SPADEDIT /C
TELL")))
debug.lisp.pamphlet:          (OBEY
debug.lisp.pamphlet:      (OBEY "EXEC NORMEDIT TRACE TELL")
debug.lisp.pamphlet:      (if (member '? L :test #'eq) (RETURN (OBEY
"EXEC NORMEDIT TRACE TELL")))
debug.lisp.pamphlet:            (RETURN (OBEY (if (EQ (SYSID) 1)
debug.lisp.pamphlet:       ((member '? L :test #'eq) (OBEY "EXEC
NORMEDIT EMBED TELL"))
fortcall.boot.pamphlet:  -- SYSTEM STRCONC("rm -f ",tmpFile1,"
",tmpFile2)
fortcall.boot.pamphlet:  -- if objFiles then SYSTEM STRCONC("rm -f
",addSpaces objFiles)
g-util.boot.pamphlet:  OBEY
g-util.boot.pamphlet:;  OBEY
g-util.boot.pamphlet:(DEFUN |update| NIL (PROGN (OBEY (STRCONC
(MAKESTRING "SPADEDIT ") (STRINGIMAGE /VERSION) (MAKESTRING " ")
(STRINGIMAGE /WSNAME) (MAKESTRING " A"))) (/UPDATE)))
ht-root.boot.pamphlet:  -- OBEY STRCONC('"rm -f ", pathname)
ht-root.boot.pamphlet:  OBEY STRCONC('"$AXIOM/lib/hthits",'" _"",s,'"_"
",source,'" > ",target)
i-syscmd.boot.pamphlet:    rc := OBEY command
i-syscmd.boot.pamphlet:        rc   := OBEY cmd
i-syscmd.boot.pamphlet:    rc := OBEY cmd
i-syscmd.boot.pamphlet:    OBEY STRCONC('"$AXIOM/lib/SPADEDIT
",namestring helpFile)
i-syscmd.boot.pamphlet:  OBEY command
nlib.lisp.pamphlet:        (si::system (format nil "mv ~S ~S~%"
nlib.lisp.pamphlet:   (system (concat "rm  -r " dirname)))
obey.lisp.pamphlet:(defun OBEY (S)
spad.lisp.pamphlet:(defun CLEARDATABASE () (OBEY "ERASE MODEMAP
DATABASE"))
spad.lisp.pamphlet:  (OBEY (STRCONC "ERASE " (STRINGIMAGE FN) " "
(STRINGIMAGE FT))))
spad.lisp.pamphlet:(defun CPSAY (X) (let (n) (if (EQ 0 (setq N (OBEY
X))) NIL (PRINT N))))
spad.lisp.pamphlet:             (OBEY (STRCONC "ERASE " (PNAME (CAR
/EDITFILE)) " NBOOT E1"))
sys-pkg.lisp.pamphlet:   LISP:SEQUENCE VMLISP::OBEY LISP:NUMBER
VMLISP::|union|
sys-pkg.lisp.pamphlet:   VMLISP::OBEY BOOT::TYPE-CONTENTS-OF-FILE
BOOT::|UnSizedBox| BOOT::|Integer| BOOT::|Nud|
sys-pkg.lisp.pamphlet:   VMLISP::CHANGELENGTH VMLISP::ECQ VMLISP::OBEY
VMLISP::QASSQ
sys-pkg.lisp.pamphlet:   LISP:SEQUENCE VMLISP::OBEY
BOOT::TYPE-CONTENTS-OF-FILE LISP::NUMBER VMLISP::|union|
util.lisp.pamphlet:  (obey "cat /tmp/boot.TAGS >> /tmp/TAGS"))
vmlisp.lisp.pamphlet:(defun OBEY (S)
vmlisp.lisp.pamphlet:(defun OBEY (S)
vmlisp.lisp.pamphlet:(defun OBEY (S) (SYSTEM S))
vmlisp.lisp.pamphlet:(defun OBEY (S) (excl::run-shell-command s))

----------

Finally, of course Axiom also requires gcc to compile
generated lisp to object code when compiling functions
and SPAD library code. To run Axiom completely natively on
Windows without MinGW installed, it is necessary to include
a subset of gcc as described here:

http://lists.nongnu.org/archive/html/axiom-developer/2005-01/msg00518.ht
ml

It is necessary that

    bin\gcc.exe
    bin\as.exe

be accessible in the Windows PATH.

\start
Date: Fri, 29 Dec 2006 20:27:17 -0500
From: Bill Page
To: Gabriel Dos Reis
Subject: RE: Axiom/GCL on windows
Cc: Camm Maguire

Gaby, Camm,

The most recent revision of build-improvements seems to
demonstrate a bug in gcl-2.6.8pre on Windows. The following
command generated a lisp error:

$ cd src/boot
$ ./../..//build/i686-pc-mingw32/bin/lisp.exe -batch -eval '(progn
(mapcar (function (lambda (x) (load x))) (quote ( "boothdr.o"
"exports.o"  "npextras.o"  "stage0/ptyout.o"  "stage0/btincl2.o"
"stage0/btscan2.o"  "stage0/typrops.o"  "
stage0/btpile2.o"  "stage0/typars.o"  "stage0/tytree1.o")))
(system::save-system "bootsys.exe"))'

Error: Unexpected end of #<string-input stream from "(progn (mapcar
(...">.
Fast links are on: do (si::use-fast-links nil) for debugging
Error signalled by SYSTEM:TOP-LEVEL.
Broken at SYSTEM:TOP-LEVEL.  Type :H for Help.
>>(quit)

-------

This works however if read via stdin.

$ echo '(progn (mapcar (function (lambda (x) (load x))) (quote (
"boothdr.o"  "exports.o"  "npextras.o"  "stage0/ptyout.o"
"stage0/btincl2.o"  "stage0/btscan2.o"  "stage0/typrops.o"
"stage0/btpile2.o"  "stage0/typars.o"  "stage0/tytree1.o")))
(system::save-system "bootsys.exe"))' |
./../..//build/i686-pc-mingw32/bin/lisp.exe

And it also works when replacing the unix / path separator with
the Windows \ path separator.

$ ./../..//build/i686-pc-mingw32/bin/lisp.exe -batch -eval '(progn
(mapcar (function (lambda (x) (load x))) (quote ( "boothdr.o"
"exports.o"  "npextras.o"  "stage0\\ptyout.o"  "stage0\\btincl2.o"
"stage0\\btscan2.o"  "stage0\\typrops.o
"  "stage0\\btpile2.o"  "stage0\\typars.o"  "stage0\\tytree1.o")))
(system::save-system "bootsys.exe"))'
Dumping from
C:/msys/1.0/home/bpage/axiom.test/build/i686-pc-mingw32/bin/lisp.exe
          to bootsys.exe
Copying executable up to data section...
        0x00000000 Offset in input file.
        0x00000000 Offset in output file.
        0x00136600 Size in bytes.
Dumping .data section...
        0x00538000 Address in process.
        0x00136600 Offset in output file.
        0x00009fa0 Size in bytes.
Copying rest of executable...
        0x001405a0 Offset in input file.
        0x001405a0 Offset in output file.
        0x00304d00 Size in bytes.
Dumping heap into executable...
        0x10100000 Heap start in process.
        0x00450000 Heap offset in executable.
        0x001b0000 Heap size in bytes.
Dumping .bss into executable...
        0x00553020 BSS start in process.
        0x00600000 BSS offset in executable.
        0x001152a0 BSS size in bytes.

---------

Perhaps there is something missing in the lisp reader
that evaluations the -eval string on Windows?

\start
Date: Fri, 29 Dec 2006 19:56:08 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows
Cc: Camm Maguire

On Fri, 29 Dec 2006, Page, Bill wrote:

| Gaby, Camm,
|
| The most recent revision of build-improvements seems to
| demonstrate a bug in gcl-2.6.8pre on Windows. The following
| command generated a lisp error:
|
| $ cd src/boot
| $ ./../..//build/i686-pc-mingw32/bin/lisp.exe -batch -eval '(progn
| (mapcar (function (lambda (x) (load x))) (quote ( "boothdr.o"
| "exports.o"  "npextras.o"  "stage0/ptyout.o"  "stage0/btincl2.o"
| "stage0/btscan2.o"  "stage0/typrops.o"  "
| stage0/btpile2.o"  "stage0/typars.o"  "stage0/tytree1.o")))
| (system::save-system "bootsys.exe"))'
|
| Error: Unexpected end of #<string-input stream from "(progn (mapcar
| (...">.
| Fast links are on: do (si::use-fast-links nil) for debugging
| Error signalled by SYSTEM:TOP-LEVEL.
| Broken at SYSTEM:TOP-LEVEL.  Type :H for Help.
| >>(quit)

I have not tested the build on Windows with the recen changes -- only
linux boxes.

| -------
|
| This works however if read via stdin.
|
| $ echo '(progn (mapcar (function (lambda (x) (load x))) (quote (
| "boothdr.o"  "exports.o"  "npextras.o"  "stage0/ptyout.o"
| "stage0/btincl2.o"  "stage0/btscan2.o"  "stage0/typrops.o"
| "stage0/btpile2.o"  "stage0/typars.o"  "stage0/tytree1.o")))
| (system::save-system "bootsys.exe"))' |
| ./../..//build/i686-pc-mingw32/bin/lisp.exe
|
| And it also works when replacing the unix / path separator with
| the Windows \ path separator.
|
| $ ./../..//build/i686-pc-mingw32/bin/lisp.exe -batch -eval '(progn
| (mapcar (function (lambda (x) (load x))) (quote ( "boothdr.o"
| "exports.o"  "npextras.o"  "stage0\\ptyout.o"  "stage0\\btincl2.o"
| "stage0\\btscan2.o"  "stage0\\typrops.o
| "  "stage0\\btpile2.o"  "stage0\\typars.o"  "stage0\\tytree1.o")))
| (system::save-system "bootsys.exe"))'

Nice detective work.

\start
Date: Fri, 29 Dec 2006 20:26:11 -0600 (CST)
From: Gabriel Dos Reis
To: Bill Page
Subject: RE: Axiom/GCL on windows

On Fri, 29 Dec 2006, Page, Bill wrote:

| On December 26, 2006 2:44 AM Gabriel Dos Reis wrote:
| > Bill Page writes:
| > ...
| > | That's excellent! Let me know how/if I can help. One thing I
| > | plan to do after you commit the recent change for the SPAD
| > | variable is to diff against axiom--windows--1. There were
| > | several patches to Axiom that as far as I know were never
| > | incorporated into the axiom--main--1 branch from which Axiom
| > | silver and build-improvements were cloned, although most of
| > | these might already be obsoleted by build-improvements. The
| > | most critical are probably some unix system dependencies such
| > | as 'rm' and 'mv' commands which should really be implemented
| > | in a more portable lisp manner.
| >
| > Bill --
| >
| >    Let me know when you get a chance to have a shot at this diff.
| >
|
| Here is the list of patches that I was able to isolate between
| axiom--windows--1 and the current build-improvements. These patches
| where first applied to the axiom--windows--1 branch by Mike Thomas.
| I think they probably represents the minimum changes necessary to
| allow AXIOMsys to run on natively on Windows outside of an MSYS
| shell.

Thanks!



\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
