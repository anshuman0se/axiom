\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}
\begin{verbatim}
\start
Date: Sun, 08 Aug 2010 01:40:48 -0400
From: Tim Daly
To: list
Subject: Axiom Tenth Anniversary on August 11,2010

Axiom was originally developed at IBM Research under Dr. Richard
Jenks. The project went through several generations and had many
contributors. It was the one of the leading research projects at
the lab. Eventually IBM's fortunes changed and Axiom was sold to
the Numerical Algorithms Group (NAG). For a while it was one of
"the big three" (along with Mathematica and Maple) commercial
systems.

In August of 2000 (August 11th, I believe) I had a conversation
with my son, Tim Daly Jr., who had called me to tell me that
Bill Schelter died.

I had worked with Bill on GCL (then called AKCL). Bill was under
contract to IBM to develop a lisp that would support Axiom. He
and I worked closely together on it. Bill not only built a lisp
to support Axiom but he worked to get a copy of Maxima as open
source.

I called Barry Trager, an IBM coworker and one of the fundamental
contributors to Axiom, to tell him about Bill. Barry told me that
NAG planned to remove Axiom from the commercial market.

I called NAG and they confirmed that they were going to stop
selling Axiom commercially. I asked them to release it as open
source and said that I would do what was necessary to make it
into freely available software.

NAG spent a considerable amount of time and effort to release
Axiom under the BSD license. They deserve a lot of credit for
ensuring that Axiom lives on. It took about a year to get the
CD containing the released sources. For various reasons there
were "missing parts" of the commercial version including the
techexplorer front-end, the numerics, and the Aldor compiler.

During that year there was a lot of debate about the goals
of Axiom. The open source version of Axiom was intended to be a
research platform, with no attempt to compete with commercial
offerings. Axiom's fundamental weakness as open source revolved
around the lack of deep documentation. The algorithms are hard,
the whole system internal structure was obscure, and the build
process was black magic. Some system internals were written in a
language nobody spoke. In order to correct these flaws the
focus was on completely rewriting the system, using literate
programming to provide a basis for integrating documentation
and code. Since Axiom is nearly a million "things of code" this
was expected to take a while (and is still ongoing 10 years later).

Axiom required a running copy of Axiom to build itself. But an
open source version could not assume the user already had Axiom.
So the fundamental problem was how to get around this circular issue.
This represented a major stumbling block that consumed a large portion
of the time from the CD release until the first open source
version "went live". The lattice of 1100 objects had to be
sorted, an inner clique of co-dependent objects had to be found,
and a method of building this clique and lattice needed to be
invented. Solving this problem took up most of the time from the
release. A second issue was that the commercial version ran on a
byte-coded interpreted lisp which I could not get to build. Axiom
moved back to AKCL (now GCL) with the help of Camm Maguire. All of
this work was supported by Dr. Gilbert Baumslag (CCNY).

Today Axiom consists of 20 books which contain a large portion
of the literate source code. There is an associated video and
more are planned. Axiom has been validated against two
major test suites and a third suite is in process. Axiom has
more tests, more documentation, a simplified build system, a
single lisp-based internal langage, new algebra, the beginnings
of a numerics library, and a firefox front end. It is freely
available on savannah (GNU), sourceforge, and github. It is
downloaded thousands of times per month. It is used by researchers
worldwide. Work still remains and "The 30 Year Horizon" doesn't
seem to be any closer but the progress is obvious.

Axiom is the work of these 226 people, over a lifespan of
nearly 40 years. The people who have contributed to it, as clearly
as we can determine, are listed here. Some of them have already
passed away, including Dr. Richard Jenks, the founding father of
Axiom. This makes it all the more important that we document the
work so the next generation can carry on to "The 30 Year Horizon".

An alphabetical listing of contributors to AXIOM:

Cyril Alberga          Roy Adler              Christian Aistleitner
Richard Anderson       George Andrews         S.J. Atkins
Henry Baker            Martin Baker           Stephen Balzac
Yurij Baransky         David R. Barton        Gerald Baumgartner
Gilbert Baumslag       Michael Becker         Nelson H. F. Beebe
Jay Belanger           David Bindel           Fred Blair
Vladimir Bondarenko    Mark Botch             Alexandre Bouyer
Peter A. Broadbery     Martin Brock           Manuel Bronstein
Stephen Buchwald       Florian Bundschuh      Luanne Burns
William Burge
Quentin Carpent        Robert Caviness        Bruce Char
Ondrej Certik          Cheekai Chin           David V. Chudnovsky
Gregory V. Chudnovsky  Josh Cohen             Christophe Conil
Don Coppersmith        George Corliss         Robert Corless
Gary Cornell           Meino Cramer           Claire Di Crescenzo
David Cyganski
Nathaniel Daly         Timothy Daly Sr.       Timothy Daly Jr.
James H. Davenport     Didier Deshommes       Michael Dewar
Jean Della Dora        Gabriel Dos Reis       Claire DiCrescendo
Sam Dooley             Lionel Ducos           Lee Duhem
Martin Dunstan         Brian Dupee            Dominique Duval
Robert Edwards         Heow Eide-Goodman      Lars Erickson
Richard Fateman        Bertfried Fauser       Stuart Feldman
John Fletcher          Brian Ford             Albrecht Fortenbacher
George Frances         Constantine Frangos    Timothy Freeman
Korrinn Fu
Marc Gaetano           Rudiger Gebauer        Kathy Gerber
Patricia Gianni        Samantha Goldrich      Holger Gollan
Teresa Gomez-Diaz      Laureano Gonzalez-Vega Stephen Gortler
Johannes Grabmeier     Matt Grayson           Klaus Ebbe Grue
James Griesmer         Vladimir Grinberg      Oswald Gschnitzer
Jocelyn Guidry
Gaetan Hache           Steve Hague            Satoshi Hamaguchi
Mike Hansen            Richard Harke          Bill Hart
Vilya Harvey           Martin Hassner         Arthur S. Hathaway
Dan Hatton             Waldek Hebisch         Karl Hegbloom
Ralf Hemmecke          Henderson              Antoine Hersen
Gernot Hueber
Pietro Iglio
Alejandro Jakubi       Richard Jenks
Kai Kaminski           Grant Keady            Tony Kennedy
Ted Kosan              Paul Kosinski          Klaus Kusche
Bernhard Kutzler
Tim Lahey              Larry Lambe            Kaj Laurson
Franz Lehner           Frederic Lehobey       Michel Levaud
Howard Levy            Liu Xiaojun            Rudiger Loos
Michael Lucks          Richard Luczak
Camm Maguire           Francois Maltey        Alasdair McAndrew
Bob McElrath           Michael McGettrick     Ian Meikle
David Mentre           Victor S. Miller       Gerard Milmeister
Mohammed Mobarak       H. Michael Moeller     Michael Monagan
Marc Moreno-Maza       Scott Morrison         Joel Moses
Mark Murray
William Naylor         Patrice Naudin         C. Andrew Neff
John Nelder            Godfrey Nolan          Arthur Norman
Jinzhong Niu
Michael O'Connor       Summat Oemrawsingh     Kostas Oikonomou
Humberto Ortiz-Zuazaga
Julian A. Padget       Bill Page              David Parnas
Susan Pelzel           Michel Petitot         Didier Pinchon
Ayal Pinkus            Jose Alfredo Portes
Claude Quitte
Arthur C. Ralfs        Norman Ramsey          Anatoly Raportirenko
Albert D. Rich         Michael Richardson     Renaud Rioboo
Jean Rivlin            Nicolas Robidoux       Simon Robinson
Raymond Rogers         Michael Rothstein      Martin Rubey
Philip Santas          Alfred Scheerhorn      William Schelter
Gerhard Schneider      Martin Schoenert       Marshall Schor
Frithjof Schulze       Fritz Schwarz          Steven Segletes
Nick Simicich          William Sit            Elena Smirnova
Jonathan Steinbach     Fabio Stumbo           Christine Sundaresan
Robert Sutor           Moss E. Sweedler       Eugene Surowitz
Max Tegmark            James Thatcher         Balbir Thomas
Mike Thomas            Dylan Thurston         Steve Toleque
Barry Trager           Themos T. Tsikas
Gregory Vanuxem
Bernhard Wall          Stephen Watt           Jaap Weel
Juergen Weiss          M. Weller              Mark Wegman
James Wen              Thorsten Werther       Michael Wester
John M. Wiley          Berhard Will           Clifton J. Williamson
Stephen Wilson         Shmuel Winograd        Robert Wisbauer
Sandra Wityak          Waldemar Wiwianka      Knut Wolf
Clifford Yapp          David Yun
Vadim Zhytnikov        Richard Zippel         Evelyn Zoernack
Bruno Zuercher         Dan Zwillinger

\start
Date: Sun, 08 Aug 2010 23:49:20 -0400
From: Camm Maguire
To: Tim Daly
Subject: Re: Axiom Tenth Anniversary on August 11,2010

Greetings!  Tim, this history is simply breathtaking.  Thank you so
much for all you have done and continue to do for this project.
Congratulations, and happy anniversary!

Take care,

Tim Daly writes:

> Axiom was originally developed at IBM Research under Dr. Richard
> Jenks. The project went through several generations and had many
> contributors. It was the one of the leading research projects at
> the lab. Eventually IBM's fortunes changed and Axiom was sold to
> the Numerical Algorithms Group (NAG). For a while it was one of
> "the big three" (along with Mathematica and Maple) commercial
> systems.
>
> In August of 2000 (August 11th, I believe) I had a conversation
> with my son, Tim Daly Jr., who had called me to tell me that
> Bill Schelter died.
>
> I had worked with Bill on GCL (then called AKCL). Bill was under
> contract to IBM to develop a lisp that would support Axiom. He
> and I worked closely together on it. Bill not only built a lisp
> to support Axiom but he worked to get a copy of Maxima as open
> source.
>
> I called Barry Trager, an IBM coworker and one of the fundamental
> contributors to Axiom, to tell him about Bill. Barry told me that
> NAG planned to remove Axiom from the commercial market.
>
> I called NAG and they confirmed that they were going to stop
> selling Axiom commercially. I asked them to release it as open
> source and said that I would do what was necessary to make it
> into freely available software.
>
> NAG spent a considerable amount of time and effort to release
> Axiom under the BSD license. They deserve a lot of credit for
> ensuring that Axiom lives on. It took about a year to get the
> CD containing the released sources. For various reasons there
> were "missing parts" of the commercial version including the
> techexplorer front-end, the numerics, and the Aldor compiler.
>
> During that year there was a lot of debate about the goals
> of Axiom. The open source version of Axiom was intended to be a
> research platform, with no attempt to compete with commercial
> offerings. Axiom's fundamental weakness as open source revolved
> around the lack of deep documentation. The algorithms are hard,
> the whole system internal structure was obscure, and the build
> process was black magic. Some system internals were written in a
> language nobody spoke. In order to correct these flaws the
> focus was on completely rewriting the system, using literate
> programming to provide a basis for integrating documentation
> and code. Since Axiom is nearly a million "things of code" this
> was expected to take a while (and is still ongoing 10 years later).
>
> Axiom required a running copy of Axiom to build itself. But an
> open source version could not assume the user already had Axiom.
> So the fundamental problem was how to get around this circular issue.
> This represented a major stumbling block that consumed a large portion
> of the time from the CD release until the first open source
> version "went live". The lattice of 1100 objects had to be
> sorted, an inner clique of co-dependent objects had to be found,
> and a method of building this clique and lattice needed to be
> invented. Solving this problem took up most of the time from the
> release. A second issue was that the commercial version ran on a
> byte-coded interpreted lisp which I could not get to build. Axiom
> moved back to AKCL (now GCL) with the help of Camm Maguire. All of
> this work was supported by Dr. Gilbert Baumslag (CCNY).
>
> Today Axiom consists of 20 books which contain a large portion
> of the literate source code. There is an associated video and
> more are planned. Axiom has been validated against two
> major test suites and a third suite is in process. Axiom has
> more tests, more documentation, a simplified build system, a
> single lisp-based internal langage, new algebra, the beginnings
> of a numerics library, and a firefox front end. It is freely
> available on savannah (GNU), sourceforge, and github. It is
> downloaded thousands of times per month. It is used by researchers
> worldwide. Work still remains and "The 30 Year Horizon" doesn't
> seem to be any closer but the progress is obvious.
>
> Axiom is the work of these 226 people, over a lifespan of
> nearly 40 years. The people who have contributed to it, as clearly
> as we can determine, are listed here. Some of them have already
> passed away, including Dr. Richard Jenks, the founding father of
> Axiom. This makes it all the more important that we document the
> work so the next generation can carry on to "The 30 Year Horizon".
>
> An alphabetical listing of contributors to AXIOM:
>
> Cyril Alberga          Roy Adler              Christian Aistleitner
> Richard Anderson       George Andrews         S.J. Atkins
> Henry Baker            Martin Baker           Stephen Balzac
> Yurij Baransky         David R. Barton        Gerald Baumgartner
> Gilbert Baumslag       Michael Becker         Nelson H. F. Beebe
> Jay Belanger           David Bindel           Fred Blair
> Vladimir Bondarenko    Mark Botch             Alexandre Bouyer
> Peter A. Broadbery     Martin Brock           Manuel Bronstein
> Stephen Buchwald       Florian Bundschuh      Luanne Burns
> William Burge
> Quentin Carpent        Robert Caviness        Bruce Char
> Ondrej Certik          Cheekai Chin           David V. Chudnovsky
> Gregory V. Chudnovsky  Josh Cohen             Christophe Conil
> Don Coppersmith        George Corliss         Robert Corless
> Gary Cornell           Meino Cramer           Claire Di Crescenzo
> David Cyganski
> Nathaniel Daly         Timothy Daly Sr.       Timothy Daly Jr.
> James H. Davenport     Didier Deshommes       Michael Dewar
> Jean Della Dora        Gabriel Dos Reis       Claire DiCrescendo
> Sam Dooley             Lionel Ducos           Lee Duhem
> Martin Dunstan         Brian Dupee            Dominique Duval
> Robert Edwards         Heow Eide-Goodman      Lars Erickson
> Richard Fateman        Bertfried Fauser       Stuart Feldman
> John Fletcher          Brian Ford             Albrecht Fortenbacher
> George Frances         Constantine Frangos    Timothy Freeman
> Korrinn Fu
> Marc Gaetano           Rudiger Gebauer        Kathy Gerber
> Patricia Gianni        Samantha Goldrich      Holger Gollan
> Teresa Gomez-Diaz      Laureano Gonzalez-Vega Stephen Gortler
> Johannes Grabmeier     Matt Grayson           Klaus Ebbe Grue
> James Griesmer         Vladimir Grinberg      Oswald Gschnitzer
> Jocelyn Guidry
> Gaetan Hache           Steve Hague            Satoshi Hamaguchi
> Mike Hansen            Richard Harke          Bill Hart
> Vilya Harvey           Martin Hassner         Arthur S. Hathaway
> Dan Hatton             Waldek Hebisch         Karl Hegbloom
> Ralf Hemmecke          Henderson              Antoine Hersen
> Gernot Hueber
> Pietro Iglio
> Alejandro Jakubi       Richard Jenks
> Kai Kaminski           Grant Keady            Tony Kennedy
> Ted Kosan              Paul Kosinski          Klaus Kusche
> Bernhard Kutzler
> Tim Lahey              Larry Lambe            Kaj Laurson
> Franz Lehner           Frederic Lehobey       Michel Levaud
> Howard Levy            Liu Xiaojun            Rudiger Loos
> Michael Lucks          Richard Luczak
> Camm Maguire           Francois Maltey        Alasdair McAndrew
> Bob McElrath           Michael McGettrick     Ian Meikle
> David Mentre           Victor S. Miller       Gerard Milmeister
> Mohammed Mobarak       H. Michael Moeller     Michael Monagan
> Marc Moreno-Maza       Scott Morrison         Joel Moses
> Mark Murray
> William Naylor         Patrice Naudin         C. Andrew Neff
> John Nelder            Godfrey Nolan          Arthur Norman
> Jinzhong Niu
> Michael O'Connor       Summat Oemrawsingh     Kostas Oikonomou
> Humberto Ortiz-Zuazaga
> Julian A. Padget       Bill Page              David Parnas
> Susan Pelzel           Michel Petitot         Didier Pinchon
> Ayal Pinkus            Jose Alfredo Portes
> Claude Quitte
> Arthur C. Ralfs        Norman Ramsey          Anatoly Raportirenko
> Albert D. Rich         Michael Richardson     Renaud Rioboo
> Jean Rivlin            Nicolas Robidoux       Simon Robinson
> Raymond Rogers         Michael Rothstein      Martin Rubey
> Philip Santas          Alfred Scheerhorn      William Schelter
> Gerhard Schneider      Martin Schoenert       Marshall Schor
> Frithjof Schulze       Fritz Schwarz          Steven Segletes
> Nick Simicich          William Sit            Elena Smirnova
> Jonathan Steinbach     Fabio Stumbo           Christine Sundaresan
> Robert Sutor           Moss E. Sweedler       Eugene Surowitz
> Max Tegmark            James Thatcher         Balbir Thomas
> Mike Thomas            Dylan Thurston         Steve Toleque
> Barry Trager           Themos T. Tsikas
> Gregory Vanuxem
> Bernhard Wall          Stephen Watt           Jaap Weel
> Juergen Weiss          M. Weller              Mark Wegman
> James Wen              Thorsten Werther       Michael Wester
> John M. Wiley          Berhard Will           Clifton J. Williamson
> Stephen Wilson         Shmuel Winograd        Robert Wisbauer
> Sandra Wityak          Waldemar Wiwianka      Knut Wolf
> Clifford Yapp          David Yun
> Vadim Zhytnikov        Richard Zippel         Evelyn Zoernack
> Bruno Zuercher         Dan Zwillinger

\start
Date: Thu, 12 Aug 2010 15:50:56 -0400
From: Tim Daly
To: list
Subject: TeX examples page

*This* is why documentation needs to use TeX, in case
there was any doubt :-)

http://www.tug.org/texshowcase/

\start
Date: Mon, 16 Aug 2010 21:30:36 +0200
From: Guillaume Yziquel
To: list
Subject: Low-level stuff and where to look for documentation.

Hello.

I've been reading a few things, as time allows, when it comes to my 
project of embedding Axiom into OCaml.

As far as I understand it, it seems to be better to bind a GCL 
interpreter (I do not know Lisp well, so feel free to correct), and 
access Axiom stuff from this interpreter. So I'm currently looking as to 
how this should be done.

But, on the other hand, The Axiom / Lisp 'interface' isn't so clear to 
me. I've been reading chapter 4, and specifically section entitled 
"Understanding a compiled function", which is the only place I've found 
low-level information. I've got a few questions on this topic:

-1- What is the purpose of the vmlisp.lisp.pamphlet file?

-2- It also seems that the commands

	)trace ONEP )break
	(trace (ONEP :entry (break))

are equivalent but that one is on the Axiom command prompt and that the 
other is on the Lisp command prompt. How do you access the Lisp command 
prompt

-3- Where is the source code of the /usr/lib/axiom-20100701/bin/AXIOMsys 
file (as installed by Debian)?

Thanks for clarifying these issues...

\start
Date: Mon, 16 Aug 2010 18:01:16 -0400
From: Tim Daly
To: Guillaume Yziquel
Subject: Re: Low-level stuff and where to look for documentation.

Guillaume Yziquel wrote:
> Hello.
>
> I've been reading a few things, as time allows, when it comes to my 
> project of embedding Axiom into OCaml.
>
> As far as I understand it, it seems to be better to bind a GCL 
> interpreter (I do not know Lisp well, so feel free to correct), and 
> access Axiom stuff from this interpreter. So I'm currently looking as 
> to how this should be done.
This is a possible path. It would be possible to grab the top level of the
lisp loop using pseudo-ttys (an expect-like interface). GCL is just a 
big C program
so you can add your own code to the GCL build.
>
>
> But, on the other hand, The Axiom / Lisp 'interface' isn't so clear to 
> me. I've been reading chapter 4, and specifically section entitled 
> "Understanding a compiled function", which is the only place I've 
> found low-level information. I've got a few questions on this topic:
>
> -1- What is the purpose of the vmlisp.lisp.pamphlet file?
"Axiom" used to be written in Maclisp (MIT), then was rewritten into VMLisp
(IBM Mainframe), and then I helped rewrite it into common lisp. Because of
the complexity of the system the vmlisp port was written by implementing the
maclisp primitives. Because of the complexity of the system the common lisp
port was written by implementing the maclisp and vmlisp primitives in 
common lisp.
These "foreign primitive implementations" live in vmlisp.lisp

The low-level information does not yet exist. The fundamental task of 
the Axiom
project has been, and continues to be, writing this kind of 
documentation. But
Axiom is about 1 million things of code and we are still in the phase of 
collecting
the code into a literate form so it can be documented.
>
> -2- It also seems that the commands
>
>     )trace ONEP )break
>     (trace (ONEP :entry (break))
>
> are equivalent but that one is on the Axiom command prompt and that 
> the other is on the Lisp command prompt. How do you access the Lisp 
> command prompt
>
They are equivalent.
You can access the lisp command line with
   )lisp ...some lisp s-expression...
as in
  )lisp (trace (onep :entry (break))


> -3- Where is the source code of the 
> /usr/lib/axiom-20100701/bin/AXIOMsys file (as installed by Debian)?
http://axiom-developer.org/axiom-website/downloads/axiom-july2010-src.tgz

AXIOMsys is the whole interpreter/compiler/system. It consists of 
hundreds of files.
You can see the source from any release (they happen every 2 months) at:
http://axiom-developer.org/axiom-website/download.html

\start
Date: Tue, 17 Aug 2010 22:49:01 +0200
From: Guillaume Yziquel
To: Tim Daly
Subject: Re: Low-level stuff and where to look for documentation.

Tim Daly a =C3=A9crit :
>
> Guillaume Yziquel wrote:
>
>> Hello.
>>
>> I've been reading a few things, as time allows, when it comes to my
>> project of embedding Axiom into OCaml.
>>
>> As far as I understand it, it seems to be better to bind a GCL
>> interpreter (I do not know Lisp well, so feel free to correct), and
>> access Axiom stuff from this interpreter. So I'm currently looking as
>> to how this should be done.

> This is a possible path. It would be possible to grab the top level
> of the lisp loop using pseudo-ttys (an expect-like interface). GCL
> is just a big C program so you can add your own code to the GCL
> build.

I've been looking at ECL for embedding ECL into OCaml.

I'd really love to avoid pushing custom code into my GCL build if it
doesn't end up upstream. My hope would be to use things as packaged by
Debian, and therefore be able to repackage an OCaml-GCL binding.

I haven't looked at GCL very much yet, as ECL seems to be better suited
for bindings. I'll look into GCL source code for something like a C API
when I find the time for it.

Should I expect Axiom to run seemlessly under ECL?

>> But, on the other hand, The Axiom / Lisp 'interface' isn't so clear to=

>> me. I've been reading chapter 4, and specifically section entitled
>> "Understanding a compiled function", which is the only place I've
>> found low-level information. I've got a few questions on this topic:
>>
>> -1- What is the purpose of the vmlisp.lisp.pamphlet file?

> "Axiom" used to be written in Maclisp (MIT), then was rewritten into
> VMLisp (IBM Mainframe), and then I helped rewrite it into common
> lisp. Because of the complexity of the system the vmlisp port was
> written by implementing the maclisp primitives. Because of the
> complexity of the system the common lisp port was written by
> implementing the maclisp and vmlisp primitives in common lisp.
> These "foreign primitive implementations" live in vmlisp.lisp

Reading that, I'm wondering whether ECL is really an option. And even an
unmodified GCL doesn't seem to fit entirely the bill.

Would you welcome modifications in the source code allowing to expose a
C API? (I'm not committing to that, mind you...)

> The low-level information does not yet exist. The fundamental task
> of the Axiom project has been, and continues to be, writing this
> kind of documentation. But Axiom is about 1 million things of code
> and we are still in the phase o= f collecting the code into a
> literate form so it can be documented.

I do not have much against literate programming, but I must admit that
I'm having a tough time with a build system that I cannot easily find
nor understand.

>> -2- It also seems that the commands
>>
>>     )trace ONEP )break
>>     (trace (ONEP :entry (break))
>>
>> are equivalent but that one is on the Axiom command prompt and that
>> the other is on the Lisp command prompt. How do you access the Lisp
>> command prompt
>
> They are equivalent.
> You can access the lisp command line with
>   )lisp ...some lisp s-expression...
> as in
>  )lisp (trace (onep :entry (break))

OK. And where can I find the source code implementing the ')lisp' token?
That would be of great help.

>> -3- Where is the source code of the
>> /usr/lib/axiom-20100701/bin/AXIOMsys file (as installed by Debian)?
> http://axiom-developer.org/axiom-website/downloads/axiom-july2010-src.tgz
>
> AXIOMsys is the whole interpreter/compiler/system. It consists of
> hundreds of files.
> You can see the source from any release (they happen every 2 months) at=
:
> http://axiom-developer.org/axiom-website/download.html

I think I better rephrase my question: I'm looking for the main()
function for AXIOMsys. Could it be possible to pinpoint it in the source
code?

\start
Date: Tue, 17 Aug 2010 23:38:07 -0500
From: Gabriel Dos Reis
To: Guillaume Yziquel
Subject: Re: Low-level stuff and where to look for documentation.

On Tue, Aug 17, 2010 at 3:49 PM, Guillaume Yziquel
Guillaume Yziquel wrote:

> I think I better rephrase my question: I'm looking for the main() function
> for AXIOMsys. Could it be possible to pinpoint it in the source code?

The closest approximation is the Boot function 'restart' (or |restart| in LISP).

In OpenAxiom it is exactly systemMain (or |systemMain| in LISP.)

\start
Date: Wed, 18 Aug 2010 04:30:33 -0400
From: Tim Daly
To: Gabriel Dos Reis
Subject: re: Low-level stuff and where to look for documentation.

Note that in Axiom, the restart function name in not escaped
so you just invoke (restart), not (|restart|).

Gabriel Dos Reis wrote:
> On Tue, Aug 17, 2010 at 3:49 PM, Guillaume Yziquel
> Guillaume Yziquel wrote:
>
>   
>> I think I better rephrase my question: I'm looking for the main() function
>> for AXIOMsys. Could it be possible to pinpoint it in the source code?
>>     
>
> The closest approximation is the Boot function 'restart' (or |restart| in LISP).
>
> In OpenAxiom it is exactly systemMain (or |systemMain| in LISP.)

\start
Date: Fri, 20 Aug 2010 08:46:07 -0400
From: Tim Daly
To: list
Subject: [Fwd: International Lisp Conference 2010 - Update]

With the usual apologies to those who receive multiple copies of
this...

 INTERNATIONAL LISP CONFERENCE 2010 - HIGHLIGHTS and CALL for PAPERS

Important Dates:
~~~~~~~~~~~~~~~~

 * Deadline for all submissions (FIRM): September 6, 2010
 * Early registration: September 16, 2010
 * Author notification: September 20, 2010
 * Final paper due (in electronic form): October 5, 2010
 * Conference: October 19-21, 2010


Invited Speakers:
~~~~~~~~~~~~~~~~~

We are proud to announce that, for the 2010 edition, we will have the
following invited talks:

 * Lawrence Hunter
     Building a Mind for Life

 * Jans Aasman
     AllegroGraph and the Linked Open Data Cloud

 * Marc Feeley
     Gambit Scheme: Inside Out

 * Peter Seibel
     Common Lisp Standardization: The Good, the Bad, and the Ugly

 * Don Syme
     F#: Taking Succinct, Efficient, Typed Functional Programming
     into the Mainstream

 * Lowel Hawkinson
     Lisp for Breakthrough Products

More information about speakers and talks is available at
http://www.international-lisp-conference.org/2010/speakers


Registration:
~~~~~~~~~~~~~

Rates for Early Registration (before or on September 16, 2010)

ALU member
 & ACM member      $355
 & ACM non member  $390
 & Student         $150

ALU Individual Sponsors
 & ACM member      $280
 & ACM non-member  $315
 & Student         n/a

non-member of ALU
 & ACM member      $430
 & ACM non-member  $465
 & Student         $165

Rates for Late Registration (after September 16, 2010 & Onsite)

ALU member
 & ACM member      $440
 & ACM non member  $485
 & Student         $185

ALU Individual Sponsors
 & ACM member      $365
 & ACM non-member  $410
 & Student         n/a

non-member of ALU
 & ACM member      $515
 & ACM non-member  $560
 & Student         $200

Due to colocation, registration must be done using ILC/SPLASH'10
unified registration forms available at http://splashcon.org

Please note that the registration page (page 3) has the option "SPLASH
(OOPSLA/Onward!)" selected by default.  If you are only planning to
attend ILC, don't forget to deselect that option.


Travel and Accommodation:
~~~~~~~~~~~~~~~~~~~~~~~~~

SouthWest Airlines offers low fares into Reno but requires booking
online at www.southwest.com

John Ascuaga's Nugget offers reduced rates for ILC participants.
Please, visit http://splashcon.org to obtain the group code.


Scope:
~~~~~~

Lisp is one of the greatest ideas from computer science and a major
influence for almost all programming languages and for all
sufficiently complex software applications.

The International Lisp Conference is a forum for the discussion of
Lisp and, in particular, the design, implementation and application of
any of the Lisp dialects.  We encourage everyone interested in Lisp to
participate.

We invite high quality submissions in all areas involving Lisp
dialects and any other languages in the Lisp family, including, but
not limited to, ACL2, AutoLisp, Clojure, Common Lisp, ECMAScript,
Dylan, Emacs Lisp, ISLISP, Racket, Scheme, etc.

Topics may include any and all combinations of Lisp and:

 * Language design and implementation
 * Language critique
 * Language integration, inter-operation and deployment
 * Applications (especially commercial)
 * 'Pearls' (of wisdom)
 * Experience reports and case studies
 * Reflection, meta-object protocols, meta-programming
 * Domain-specific languages
 * Programming paradigms and environments
 * Parallel and distributed computing
 * Software evolution
 * Theorem proving
 * Scientific computing
 * Data mining
 * Semantic web

We also encourage submissions about known ideas as long as they are
presented in a new setting and/or in a highly elegant way.

Authors concerned about the appropriateness of a topic may communicate
by electronic mail with the program chair prior to submission.

Accepted papers will be published in the ACM Digital Library
(PENDING).

Papers must be written in English and submitted electronically at
http://www.easychair.org/conferences?conf=ilc2010 in PDF or WORD
format.  Final submissions must not exceed 15 pages and need to use
the ACM format, for which templates can be found at:
http://www.acm.org/sigs/pubs/proceed/template.html.

Each paper should explain its contributions in both general and
technical terms, identifying what has been accomplished, explaining
why it is significant, and comparing it with previous work. Authors
should strive to make their papers understandable to a broad audience.
Each paper will be judged according to its significance, novelty,
correctness, clarity, and elegance.

The official language of the conference is English.  Some further
information is available at the conference web site, with more details
added later.  See: http://www.international-lisp-conference.org

Technical Program:
~~~~~~~~~~~~~~~~~~

Original submissions in all areas related to the conference themes are
invited for the following categories.

 * Papers: Technical papers of up to 15 pages that describe original
   results or explain known ideas in new and elegant ways.

 * Demonstrations: Abstracts of up to 4 pages for demonstrations of
   tools, libraries, and applications.

 * Tutorials: Abstracts of up to 4 pages for in-depth presentations
   about topics of special interest for at least 90 minutes and up to
   180 minutes.

 * Workshops: Abstracts of up to 4 pages for groups of people who
   intend to work on a focused topic for half a day.

 * Panel discussions: Abstracts of up to 4 pages for discussions about
   current themes. Panel discussion proposals must mention panel
   members who are willing to partake in a discussion.

 * Lightning talks: Abstracts of up to one page for talks to last for
   no more than 5 minutes.

Depending on the technical content, each submitted paper will be
classified by the program committee as either a technical paper or as
an experience paper; and authors will be informed about this
classification.  Note that all interesting submissions are considered
valuable contributions to the success of the ILC series of
conferences.  As in past ILC's since 2007, accepted papers in both
categories will be presented at the conference, included in the
proceedings, and submitted to the ACM digital library.


Organizing Committee:
~~~~~~~~~~~~~~~~~~~~~

 * General Chair:
   JonL White - The Ginger IceCream Factory of Palo Alto, ALU

 * Program Chair:
   Antonio Leitao - Instituto Superior Tecnico/INESC-ID

 * Conference Treasurer:
   Duane Rettig - Franz, Inc., ALU Director

 * Publicity Chair:
   Daniel Herring - ALU Director

 * ALU Treasurer:
   Rusty Johnson - TASC, Inc., ALU Director


Program Committee:
~~~~~~~~~~~~~~~~~~

 * Antonio Leitao - Instituto Superior Tecnico/INESC-ID, Portugal
 * Alex Fukunaga - University of Tokyo, Japan
 * Charlotte Herzeel - Vrije Universiteit Brussel, Belgium
 * Christophe Rhodes - Goldsmiths College, University of London, UK
 * Didier Verna - EPITA Research and Development Laboratory, France
 * Duane Rettig - Franz, Inc., USA
 * Giuseppe Attardi - University of Pisa, Italy
 * Jeff Shrager - Symbolic Systems Program, Stanford University, USA
 * Joe Marshall - Google, Inc., USA
 * Julian Padget - University of Bath, UK
 * Keith Corbett - Clozure Associates, USA
 * Kent Pitman - PTC, USA
 * Manuel Serrano - INRIA Sophia Antipolis, France
 * Marc Feeley - University of Montreal, Canada
 * Marie Beurton-Aimar University of Bordeaux 1, France
 * Mark Stickel - SRI International, USA
 * Matthias Felleisen - Northeastern University, USA
 * Scott McKay - ITA Software, USA


Contacts:
~~~~~~~~~

 * Questions: ilc10-organizing-committee at alu.org

 * Program Chair: ilc2010 at easychair.org

For more information, see http://www.international-lisp-conference.org

\start
Date: Fri, 20 Aug 2010 16:17:00 -0400
From: Eugene Surowitz
To: list
Subject: Re: LiSP in Small Pieces

I just got a copy of "LiSP in Small Pieces".
On page xix he gives a reference for the source code as well as his email
but as with he and it have moved on:

http://pagesperso-systeme.lip6.fr/Christian.Queinnec/WWW/LiSP.html

just in case anyone needs to go on this particular snipe hunt.

\start
Date: Tue, 24 Aug 2010 14:47:50 -0400
From: Tim Daly
To: Camm Maguire
Subject: Invocation history stack overflow

(defun compfail (parts0 parts1)
 (let ((same t))
    (loop for p0 in parts0 for p1 in parts1
       while same
       (setq same (eq p0 p1)))))

\start
Date: Tue, 24 Aug 2010 14:54:32 -0400
From: Camm Maguire
To: Tim Daly
Subject: Re: Invocation history stack overflow

Tim Daly writes:

> (defun compfail (parts0 parts1)
> (let ((same t))
>    (loop for p0 in parts0 for p1 in parts1
>       while same
>       (setq same (eq p0 p1)))))
>

(compile 'compfail)

\start
Date: Tue, 31 Aug 2010 12:38:53 -0400
From: Camm Maguire
To: Tim Daly
Subject: Win32/Win64 machines remotely accessible?

Greetings!  Tim, do you have such as you did with the mac?

\start
Date: Tue, 31 Aug 2010 13:01:32 -0400
From: Tim Daly
To: Camm Maguire
Subject: Re: Win32/Win64 machines remotely accessible?

I can set that up if you can do remote-desktop work.
I don't know how to do ssh into windows.

Camm Maguire wrote:
> Greetings!  Tim, do you have such as you did with the mac?

\start
Date: Tue, 31 Aug 2010 13:29:27 -0400
From: Camm Maguire
To: Tim Daly
Subject: Re: Win32/Win64 machines remotely accessible?

If this means vnc, then I can do that.

Take care,

Tim Daly writes:

> I can set that up if you can do remote-desktop work.
> I don't know how to do ssh into windows.
>
> Camm Maguire wrote:
>> Greetings!  Tim, do you have such as you did with the mac?


\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
