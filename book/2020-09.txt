\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}
\begin{verbatim}
\start
Date: Sat, 5 Sep 2020 01:19:02 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-developer@nongnu.org, axiomcas@gmail.com
Subject: Re: Axiom musings...

I'm in the process of re-architecting Axiom, of course.

The primary research effort, as you know, is incorporating
proof technology.

But in the process of re-architecting there are more things
to consider. Two of them are "front and center" at the moment.

One concern is "Geometric Algebra". See
http://geometricalgebra.net/
https://www.youtube.com/watch?v=0fF2xToQmgs&list=PLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79

Geometric algebra unifies a lot of mathematics. In particular,
it "cleans up" linear algebra, creating a "coordinate-free"
representation. This greatly simplifies and unifies a lot of
mathematics.

So the question becomes, can this be used to "re-represent"
Axiom mathematics dependent on linear algebra? I don't
know but the idea has a lot of potential for simplification.


The second concern is "Category Theory". This theory
provides a simplification and a generalization of various
ideas in Axiom. It also puts constraints on things like an
Axiom "category" to Axiom "category" functors so that the
conversion preserves the mathematical "Category"
structure and properties.

MIT has a "course" on "Programming with Categories"
https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS
which makes things rather more understandable.

So one question is how to re-represent Axiom's type
structure so that it has a correct mathematical "Category"
structure. This, of course, raises the question of Group
Theory with Type Theory with Proof Theory with Category
Theory.

Getting all of this "aligned" (and hopefully reasonably
correct) will give Axiom a solid mathematical foundation.

Mathematics has changed a lot since Axiom was created
and many of those changes have shown that we need a
much stronger basis for ad-hoc things like coercion, etc.


Tim


On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
> A briliant essay:
>
> In exactly the same way a small change in axioms
> (of which we cannot be completely sure) is capable,
> generally speaking, of leading to completely different
> conclusions than those that are obtained from theorems
> which have been deduced from the accepted axioms.
> The longer and fancier is the chain of deductions
> ("proofs"), the less reliable is the final result.
>
> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>
>
> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>> Mark,
>>
>> You're right, of course. The problem is too large.
>> So what. is the plan to achieve a research result?
>>
>> There are 3 major restrictions on the effort (so far).
>>
>> First, the focus is on the GCD in NonNegativeInteger.
>> Volume 13 is basically a collection of published thoughts
>> by various authors on the GCD, a background literature
>> search. Build a limited system with essentially one user
>> visible function (the NNI GCD) and implement all of the
>> ideas there. This demonstrates inheritance of axioms,
>> specification of functions, pre- and post-conditions,
>> proof integration, provisos, the new compiler, etc.
>>
>> Second, make the SANE GCD work in the current Axiom
>> system by generating compatible code. This gives a
>> stepping-stone approach where things can be grounded.
>> Obviously none of the new proof ideas will be expected
>> to work in the current system but it "gives a place to stand".
>>
>> Third, develop a lattice of functions. The idea is to attack the
>> functions that  depend on almost nothing, prove them correct,
>> and use them to prove functions that only depend on the
>> prior layer. I did this with the category structure when I first
>> got the system since it was necessary to bootstrap Axiom
>> without a running system (something that was not possible
>> with the IBM/NAG version). That effort took several months
>> so I expect that function-lattice to take about the same time.
>>
>> This makes the research "incremental" so that a result can
>> be achieved in one lifetime. Like a PhD thesis, it is initially
>> intended as a small step forward but still be a valid instance
>> of "computational mathematics", deeply combining proof and
>> computer algebra.
>>
>> Tim

\start
Date: Sat, 5 Sep 2020 01:35:37 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-developer@nongnu.org, axiomcas@gmail.com
Subject: Re: Axiom musings...

Geometric algebra also affects another "in-process" goal.

I have BLAS and LAPACK in the Axiom sources (volume 10.5).

I've spent some time on the question of changing BLAS to use
John Gustafson's UNUM representation, which eliminates a lot
of code because various "standard errors" cannot occur. See
his book "The End Of Error"
https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868

But since Geometric algebra is coordinate free, many of the
computations can be done symbolically and then evalulated
in final form.

BLAS re-caste in Geometric Algebra means that some of the
errors, such as roundoff, cannot occur in the symbolic form.

This has the potential to make Axiom's BLAS and LAPACK
computations faster and more accurate.

Tim


On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
> I'm in the process of re-architecting Axiom, of course.
>
> The primary research effort, as you know, is incorporating
> proof technology.
>
> But in the process of re-architecting there are more things
> to consider. Two of them are "front and center" at the moment.
>
> One concern is "Geometric Algebra". See
> http://geometricalgebra.net/
> https://www.youtube.com/watch?v=0fF2xToQmgs&list=PLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79
>
> Geometric algebra unifies a lot of mathematics. In particular,
> it "cleans up" linear algebra, creating a "coordinate-free"
> representation. This greatly simplifies and unifies a lot of
> mathematics.
>
> So the question becomes, can this be used to "re-represent"
> Axiom mathematics dependent on linear algebra? I don't
> know but the idea has a lot of potential for simplification.
>
>
> The second concern is "Category Theory". This theory
> provides a simplification and a generalization of various
> ideas in Axiom. It also puts constraints on things like an
> Axiom "category" to Axiom "category" functors so that the
> conversion preserves the mathematical "Category"
> structure and properties.
>
> MIT has a "course" on "Programming with Categories"
> https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS
> which makes things rather more understandable.
>
> So one question is how to re-represent Axiom's type
> structure so that it has a correct mathematical "Category"
> structure. This, of course, raises the question of Group
> Theory with Type Theory with Proof Theory with Category
> Theory.
>
> Getting all of this "aligned" (and hopefully reasonably
> correct) will give Axiom a solid mathematical foundation.
>
> Mathematics has changed a lot since Axiom was created
> and many of those changes have shown that we need a
> much stronger basis for ad-hoc things like coercion, etc.
>
>
> Tim
>
>
> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>> A briliant essay:
>>
>> In exactly the same way a small change in axioms
>> (of which we cannot be completely sure) is capable,
>> generally speaking, of leading to completely different
>> conclusions than those that are obtained from theorems
>> which have been deduced from the accepted axioms.
>> The longer and fancier is the chain of deductions
>> ("proofs"), the less reliable is the final result.
>>
>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>>
>>
>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>>> Mark,
>>>
>>> You're right, of course. The problem is too large.
>>> So what. is the plan to achieve a research result?
>>>
>>> There are 3 major restrictions on the effort (so far).
>>>
>>> First, the focus is on the GCD in NonNegativeInteger.
>>> Volume 13 is basically a collection of published thoughts
>>> by various authors on the GCD, a background literature
>>> search. Build a limited system with essentially one user
>>> visible function (the NNI GCD) and implement all of the
>>> ideas there. This demonstrates inheritance of axioms,
>>> specification of functions, pre- and post-conditions,
>>> proof integration, provisos, the new compiler, etc.
>>>
>>> Second, make the SANE GCD work in the current Axiom
>>> system by generating compatible code. This gives a
>>> stepping-stone approach where things can be grounded.
>>> Obviously none of the new proof ideas will be expected
>>> to work in the current system but it "gives a place to stand".
>>>
>>> Third, develop a lattice of functions. The idea is to attack the
>>> functions that  depend on almost nothing, prove them correct,
>>> and use them to prove functions that only depend on the
>>> prior layer. I did this with the category structure when I first
>>> got the system since it was necessary to bootstrap Axiom
>>> without a running system (something that was not possible
>>> with the IBM/NAG version). That effort took several months
>>> so I expect that function-lattice to take about the same time.
>>>
>>> This makes the research "incremental" so that a result can
>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>>> intended as a small step forward but still be a valid instance
>>> of "computational mathematics", deeply combining proof and
>>> computer algebra.
>>>
>>> Tim

\start
Date: Wed, 23 Sep 2020 01:26:10 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-developer@nongnu.org, axiomcas@gmail.com
Subject: Re: Axiom musings...

Rich Hickey gave a keynote:
https://www.youtube.com/watch?v=oyLBGkS5ICk
which, like all of Hickey's talks, is worth watching.

He talks about programs breaking due to things like
library changes. Around minute 30 he started to talk
about why "semantic versioning" (e.g. version 1.2.3)
is meaningless.

I realized this years ago and changed Axiom to use
the date of the release. It provides the same sort of
"non-information" but it is easy to find in the changelog.

Tim


On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
> Geometric algebra also affects another "in-process" goal.
>
> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>
> I've spent some time on the question of changing BLAS to use
> John Gustafson's UNUM representation, which eliminates a lot
> of code because various "standard errors" cannot occur. See
> his book "The End Of Error"
> https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868
>
> But since Geometric algebra is coordinate free, many of the
> computations can be done symbolically and then evalulated
> in final form.
>
> BLAS re-caste in Geometric Algebra means that some of the
> errors, such as roundoff, cannot occur in the symbolic form.
>
> This has the potential to make Axiom's BLAS and LAPACK
> computations faster and more accurate.
>
> Tim
>
>
> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>> I'm in the process of re-architecting Axiom, of course.
>>
>> The primary research effort, as you know, is incorporating
>> proof technology.
>>
>> But in the process of re-architecting there are more things
>> to consider. Two of them are "front and center" at the moment.
>>
>> One concern is "Geometric Algebra". See
>> http://geometricalgebra.net/
>> https://www.youtube.com/watch?v=0fF2xToQmgs&list=PLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79
>>
>> Geometric algebra unifies a lot of mathematics. In particular,
>> it "cleans up" linear algebra, creating a "coordinate-free"
>> representation. This greatly simplifies and unifies a lot of
>> mathematics.
>>
>> So the question becomes, can this be used to "re-represent"
>> Axiom mathematics dependent on linear algebra? I don't
>> know but the idea has a lot of potential for simplification.
>>
>>
>> The second concern is "Category Theory". This theory
>> provides a simplification and a generalization of various
>> ideas in Axiom. It also puts constraints on things like an
>> Axiom "category" to Axiom "category" functors so that the
>> conversion preserves the mathematical "Category"
>> structure and properties.
>>
>> MIT has a "course" on "Programming with Categories"
>> https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS
>> which makes things rather more understandable.
>>
>> So one question is how to re-represent Axiom's type
>> structure so that it has a correct mathematical "Category"
>> structure. This, of course, raises the question of Group
>> Theory with Type Theory with Proof Theory with Category
>> Theory.
>>
>> Getting all of this "aligned" (and hopefully reasonably
>> correct) will give Axiom a solid mathematical foundation.
>>
>> Mathematics has changed a lot since Axiom was created
>> and many of those changes have shown that we need a
>> much stronger basis for ad-hoc things like coercion, etc.
>>
>>
>> Tim
>>
>>
>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>>> A briliant essay:
>>>
>>> In exactly the same way a small change in axioms
>>> (of which we cannot be completely sure) is capable,
>>> generally speaking, of leading to completely different
>>> conclusions than those that are obtained from theorems
>>> which have been deduced from the accepted axioms.
>>> The longer and fancier is the chain of deductions
>>> ("proofs"), the less reliable is the final result.
>>>
>>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>>>
>>>
>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>> Mark,
>>>>
>>>> You're right, of course. The problem is too large.
>>>> So what. is the plan to achieve a research result?
>>>>
>>>> There are 3 major restrictions on the effort (so far).
>>>>
>>>> First, the focus is on the GCD in NonNegativeInteger.
>>>> Volume 13 is basically a collection of published thoughts
>>>> by various authors on the GCD, a background literature
>>>> search. Build a limited system with essentially one user
>>>> visible function (the NNI GCD) and implement all of the
>>>> ideas there. This demonstrates inheritance of axioms,
>>>> specification of functions, pre- and post-conditions,
>>>> proof integration, provisos, the new compiler, etc.
>>>>
>>>> Second, make the SANE GCD work in the current Axiom
>>>> system by generating compatible code. This gives a
>>>> stepping-stone approach where things can be grounded.
>>>> Obviously none of the new proof ideas will be expected
>>>> to work in the current system but it "gives a place to stand".
>>>>
>>>> Third, develop a lattice of functions. The idea is to attack the
>>>> functions that  depend on almost nothing, prove them correct,
>>>> and use them to prove functions that only depend on the
>>>> prior layer. I did this with the category structure when I first
>>>> got the system since it was necessary to bootstrap Axiom
>>>> without a running system (something that was not possible
>>>> with the IBM/NAG version). That effort took several months
>>>> so I expect that function-lattice to take about the same time.
>>>>
>>>> This makes the research "incremental" so that a result can
>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>>>> intended as a small step forward but still be a valid instance
>>>> of "computational mathematics", deeply combining proof and
>>>> computer algebra.
>>>>
>>>> Tim

\start
Date: Thu, 24 Sep 2020 01:06:36 -0400
From: Tim Daly <axiomcas@gmail.com>
To: axiom-developer@nongnu.org, axiomcas@gmail.com
Subject: Re: Axiom musings...

The new Axiom version needs to have a better user interface.

I'm experimenting with a browser front end that has an Axiom
editor that runs Axiom in the background. This isn't really
a new idea. Maxima has been doing it for years.

Using the browser has the advantage of integrating the
compiler, interpreter, graphics, and documentation in one
interface.

I managed to get the editor-in-browser working.

Axiom already has a browser connection (book volume 11)
designed to replace hyperdoc and working as an
interpreter I/O so this editor would be an extension.

Since almost all of Axiom is already in hyperlinked PDF
files it will be possible to jump directly to related sections
in the various books.

Tim



On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:
> Rich Hickey gave a keynote:
> https://www.youtube.com/watch?v=oyLBGkS5ICk
> which, like all of Hickey's talks, is worth watching.
>
> He talks about programs breaking due to things like
> library changes. Around minute 30 he started to talk
> about why "semantic versioning" (e.g. version 1.2.3)
> is meaningless.
>
> I realized this years ago and changed Axiom to use
> the date of the release. It provides the same sort of
> "non-information" but it is easy to find in the changelog.
>
> Tim
>
>
> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>> Geometric algebra also affects another "in-process" goal.
>>
>> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>>
>> I've spent some time on the question of changing BLAS to use
>> John Gustafson's UNUM representation, which eliminates a lot
>> of code because various "standard errors" cannot occur. See
>> his book "The End Of Error"
>> https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482239868
>>
>> But since Geometric algebra is coordinate free, many of the
>> computations can be done symbolically and then evalulated
>> in final form.
>>
>> BLAS re-caste in Geometric Algebra means that some of the
>> errors, such as roundoff, cannot occur in the symbolic form.
>>
>> This has the potential to make Axiom's BLAS and LAPACK
>> computations faster and more accurate.
>>
>> Tim
>>
>>
>> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>> I'm in the process of re-architecting Axiom, of course.
>>>
>>> The primary research effort, as you know, is incorporating
>>> proof technology.
>>>
>>> But in the process of re-architecting there are more things
>>> to consider. Two of them are "front and center" at the moment.
>>>
>>> One concern is "Geometric Algebra". See
>>> http://geometricalgebra.net/
>>> https://www.youtube.com/watch?v=0fF2xToQmgs&list=PLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79
>>>
>>> Geometric algebra unifies a lot of mathematics. In particular,
>>> it "cleans up" linear algebra, creating a "coordinate-free"
>>> representation. This greatly simplifies and unifies a lot of
>>> mathematics.
>>>
>>> So the question becomes, can this be used to "re-represent"
>>> Axiom mathematics dependent on linear algebra? I don't
>>> know but the idea has a lot of potential for simplification.
>>>
>>>
>>> The second concern is "Category Theory". This theory
>>> provides a simplification and a generalization of various
>>> ideas in Axiom. It also puts constraints on things like an
>>> Axiom "category" to Axiom "category" functors so that the
>>> conversion preserves the mathematical "Category"
>>> structure and properties.
>>>
>>> MIT has a "course" on "Programming with Categories"
>>> https://www.youtube.com/playlist?list=PLhgq-BqyZ7i7MTGhUROZy3BOICnVixETS
>>> which makes things rather more understandable.
>>>
>>> So one question is how to re-represent Axiom's type
>>> structure so that it has a correct mathematical "Category"
>>> structure. This, of course, raises the question of Group
>>> Theory with Type Theory with Proof Theory with Category
>>> Theory.
>>>
>>> Getting all of this "aligned" (and hopefully reasonably
>>> correct) will give Axiom a solid mathematical foundation.
>>>
>>> Mathematics has changed a lot since Axiom was created
>>> and many of those changes have shown that we need a
>>> much stronger basis for ad-hoc things like coercion, etc.
>>>
>>>
>>> Tim
>>>
>>>
>>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>> A briliant essay:
>>>>
>>>> In exactly the same way a small change in axioms
>>>> (of which we cannot be completely sure) is capable,
>>>> generally speaking, of leading to completely different
>>>> conclusions than those that are obtained from theorems
>>>> which have been deduced from the accepted axioms.
>>>> The longer and fancier is the chain of deductions
>>>> ("proofs"), the less reliable is the final result.
>>>>
>>>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>>>>
>>>>
>>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>> Mark,
>>>>>
>>>>> You're right, of course. The problem is too large.
>>>>> So what. is the plan to achieve a research result?
>>>>>
>>>>> There are 3 major restrictions on the effort (so far).
>>>>>
>>>>> First, the focus is on the GCD in NonNegativeInteger.
>>>>> Volume 13 is basically a collection of published thoughts
>>>>> by various authors on the GCD, a background literature
>>>>> search. Build a limited system with essentially one user
>>>>> visible function (the NNI GCD) and implement all of the
>>>>> ideas there. This demonstrates inheritance of axioms,
>>>>> specification of functions, pre- and post-conditions,
>>>>> proof integration, provisos, the new compiler, etc.
>>>>>
>>>>> Second, make the SANE GCD work in the current Axiom
>>>>> system by generating compatible code. This gives a
>>>>> stepping-stone approach where things can be grounded.
>>>>> Obviously none of the new proof ideas will be expected
>>>>> to work in the current system but it "gives a place to stand".
>>>>>
>>>>> Third, develop a lattice of functions. The idea is to attack the
>>>>> functions that  depend on almost nothing, prove them correct,
>>>>> and use them to prove functions that only depend on the
>>>>> prior layer. I did this with the category structure when I first
>>>>> got the system since it was necessary to bootstrap Axiom
>>>>> without a running system (something that was not possible
>>>>> with the IBM/NAG version). That effort took several months
>>>>> so I expect that function-lattice to take about the same time.
>>>>>
>>>>> This makes the research "incremental" so that a result can
>>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>>>>> intended as a small step forward but still be a valid instance
>>>>> of "computational mathematics", deeply combining proof and
>>>>> computer algebra.
>>>>>
>>>>> Tim

\start
Date: Thu, 24 Sep 2020 00:35:24 -0500
From: "Ricardo Corral C." <ricardocorralc@gmail.com>
To: Tim Daly <axiomcas@gmail.com>
Subject: Re: Axiom musings...

Elixir LiveView offers a nice way to interact with the browser. I=E2=80=99v=
e been
playing rendering OpenAI Atari frames from their Python objects (using
erlport), so it seems like a plausible option for interacting with axiom
too. Note that sagemath.org already interacts with axiom, so maybe
connecting through it serves like a bridge.

On Thu 24 Sep 2020 at 0:06 Tim Daly <axiomcas@gmail.com> wrote:

> The new Axiom version needs to have a better user interface.
>
> I'm experimenting with a browser front end that has an Axiom
> editor that runs Axiom in the background. This isn't really
> a new idea. Maxima has been doing it for years.
>
> Using the browser has the advantage of integrating the
> compiler, interpreter, graphics, and documentation in one
> interface.
>
> I managed to get the editor-in-browser working.
>
> Axiom already has a browser connection (book volume 11)
> designed to replace hyperdoc and working as an
> interpreter I/O so this editor would be an extension.
>
> Since almost all of Axiom is already in hyperlinked PDF
> files it will be possible to jump directly to related sections
>
> in the various books.
>
> Tim
>
> On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:
> > Rich Hickey gave a keynote:
> > https://www.youtube.com/watch?v=3DoyLBGkS5ICk
> > which, like all of Hickey's talks, is worth watching.
>
> > He talks about programs breaking due to things like
> > library changes. Around minute 30 he started to talk
> > about why "semantic versioning" (e.g. version 1.2.3)
> > is meaningless.
>
> > I realized this years ago and changed Axiom to use
> > the date of the release. It provides the same sort of
> > "non-information" but it is easy to find in the changelog.
>
> > Tim
>
> > On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>
> >> Geometric algebra also affects another "in-process" goal.
>
> >> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>
> >> I've spent some time on the question of changing BLAS to use
> >> John Gustafson's UNUM representation, which eliminates a lot
> >> of code because various "standard errors" cannot occur. See
> >> his book "The End Of Error"
> >>
> https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/14822=
39868
>
> >>
> >> But since Geometric algebra is coordinate free, many of the
> >> computations can be done symbolically and then evalulated
> >> in final form.
> >>
> >> BLAS re-caste in Geometric Algebra means that some of the
> >> errors, such as roundoff, cannot occur in the symbolic form.
> >>
> >> This has the potential to make Axiom's BLAS and LAPACK
> >> computations faster and more accurate.
> >>
> >> Tim
> >>
> >>
>
> >> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>
> >>> I'm in the process of re-architecting Axiom, of course.
> >>>
> >>> The primary research effort, as you know, is incorporating
> >>> proof technology.
> >>>
> >>> But in the process of re-architecting there are more things
> >>> to consider. Two of them are "front and center" at the moment.
> >>>
> >>> One concern is "Geometric Algebra". See
> >>> http://geometricalgebra.net/
> >>>
> https://www.youtube.com/watch?v=3D0fF2xToQmgs&list=3DPLsSPBzvBkYjzcQ4eCVA=
ntETNNVD2d5S79
>
> >>>
> >>> Geometric algebra unifies a lot of mathematics. In particular,
> >>> it "cleans up" linear algebra, creating a "coordinate-free"
> >>> representation. This greatly simplifies and unifies a lot of
> >>> mathematics.
>
> >>> So the question becomes, can this be used to "re-represent"
> >>> Axiom mathematics dependent on linear algebra? I don't
> >>> know but the idea has a lot of potential for simplification.
>
> >>> The second concern is "Category Theory". This theory
> >>> provides a simplification and a generalization of various
> >>> ideas in Axiom. It also puts constraints on things like an
> >>> Axiom "category" to Axiom "category" functors so that the
> >>> conversion preserves the mathematical "Category"
> >>> structure and properties.
>
> >>> MIT has a "course" on "Programming with Categories"
>
> https://www.youtube.com/playlist?list=3DPLhgq-BqyZ7i7MTGhUROZy3BOICnVixET=
S
>
> >>> which makes things rather more understandable.
>
> >>> So one question is how to re-represent Axiom's type
> >>> structure so that it has a correct mathematical "Category"
> >>> structure. This, of course, raises the question of Group
> >>> Theory with Type Theory with Proof Theory with Category
> >>> Theory.
>
> >>> Getting all of this "aligned" (and hopefully reasonably
> >>> correct) will give Axiom a solid mathematical foundation.
> >>>
> >>> Mathematics has changed a lot since Axiom was created
> >>> and many of those changes have shown that we need a
> >>> much stronger basis for ad-hoc things like coercion, etc.
> >>>
>
> >>> Tim
> >>>
>
> >>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
> >>>> A briliant essay:
> >>>>
> >>>> In exactly the same way a small change in axioms
> >>>> (of which we cannot be completely sure) is capable,
> >>>> generally speaking, of leading to completely different
> >>>> conclusions than those that are obtained from theorems
> >>>> which have been deduced from the accepted axioms.
> >>>> The longer and fancier is the chain of deductions
> >>>> ("proofs"), the less reliable is the final result.
>
> >>>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>
> >>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>
> >>>>> Mark,

> >>>>> You're right, of course. The problem is too large.
> >>>>> So what. is the plan to achieve a research result?
>
> >>>>> There are 3 major restrictions on the effort (so far).
> >>>>> First, the focus is on the GCD in NonNegativeInteger.
> >>>>> Volume 13 is basically a collection of published thoughts
> >>>>> by various authors on the GCD, a background literature
> >>>>> search. Build a limited system with essentially one user
> >>>>> visible function (the NNI GCD) and implement all of the
> >>>>> ideas there. This demonstrates inheritance of axioms,
> >>>>> specification of functions, pre- and post-conditions,
> >>>>> proof integration, provisos, the new compiler, etc.
>
> >>>>> Second, make the SANE GCD work in the current Axiom
> >>>>> system by generating compatible code. This gives a
> >>>>> stepping-stone approach where things can be grounded.
> >>>>> Obviously none of the new proof ideas will be expected
> >>>>> to work in the current system but it "gives a place to stand".
>
> >>>>> Third, develop a lattice of functions. The idea is to attack the
> >>>>> functions that  depend on almost nothing, prove them correct,
> >>>>> and use them to prove functions that only depend on the
> >>>>> prior layer. I did this with the category structure when I first
> >>>>> got the system since it was necessary to bootstrap Axiom
> >>>>> without a running system (something that was not possible
> >>>>> with the IBM/NAG version). That effort took several months
> >>>>> so I expect that function-lattice to take about the same time.
>
> >>>>> This makes the research "incremental" so that a result can
> >>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
> >>>>> intended as a small step forward but still be a valid instance
> >>>>> of "computational mathematics", deeply combining proof and
> >>>>> computer algebra.
>
> >>>>> Tim

Ricardo Corral C.
--------------------------------------------

\start
Date: Thu, 24 Sep 2020 03:28:57 -0400
From: Tim Daly <axiomcas@gmail.com>
To: "Ricardo Corral C." <ricardocorralc@gmail.com>
Subject: Re: Axiom musings...

Ricardo,

Yes, I'm familar with Sage. Axiom was originally connected
back around 2006 / 2007. William Stein showed me that it
runs fine in the latest version.

Unfortunately it doesn't do all of the things Axiom supports.

I will look at Elixer LiveView. Thanks.

Tim


On 9/24/20, Ricardo Corral C. <ricardocorralc@gmail.com> wrote:
> Elixir LiveView offers a nice way to interact with the browser. I=E2=80=
=99ve been
> playing rendering OpenAI Atari frames from their Python objects (using
> erlport), so it seems like a plausible option for interacting with axiom
> too. Note that sagemath.org already interacts with axiom, so maybe
> connecting through it serves like a bridge.
>
> On Thu 24 Sep 2020 at 0:06 Tim Daly <axiomcas@gmail.com> wrote:
>
>> The new Axiom version needs to have a better user interface.
>> I'm experimenting with a browser front end that has an Axiom
>> editor that runs Axiom in the background. This isn't really
>> a new idea. Maxima has been doing it for years.
>> Using the browser has the advantage of integrating the
>> compiler, interpreter, graphics, and documentation in one
>> interface.
>>
>> I managed to get the editor-in-browser working.
>>
>> Axiom already has a browser connection (book volume 11)
>> designed to replace hyperdoc and working as an
>> interpreter I/O so this editor would be an extension.
>>
>> Since almost all of Axiom is already in hyperlinked PDF
>> files it will be possible to jump directly to related sections
>> in the various books.
>>
>> Tim

>> On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:
>>
>> > Rich Hickey gave a keynote:
>>
>> > https://www.youtube.com/watch?v=3DoyLBGkS5ICk
>>
>> > which, like all of Hickey's talks, is worth watching.
>>
>> > He talks about programs breaking due to things like
>> > library changes. Around minute 30 he started to talk
>> > about why "semantic versioning" (e.g. version 1.2.3)
>> > is meaningless.
>>
>> > I realized this years ago and changed Axiom to use
>> > the date of the release. It provides the same sort of
>> > "non-information" but it is easy to find in the changelog.
>>
>> > Tim
>>
>> > On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>> >> Geometric algebra also affects another "in-process" goal.
>>
>> >> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>>
>> >> I've spent some time on the question of changing BLAS to use
>> >> John Gustafson's UNUM representation, which eliminates a lot
>> >> of code because various "standard errors" cannot occur. See
>> >> his book "The End Of Error"
>> >>
>> https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/1482=
239868
>>
>> >> But since Geometric algebra is coordinate free, many of the
>> >> computations can be done symbolically and then evalulated
>> >> in final form.
>>
>> >> BLAS re-caste in Geometric Algebra means that some of the
>> >> errors, such as roundoff, cannot occur in the symbolic form.
>>
>> >> This has the potential to make Axiom's BLAS and LAPACK
>> >> computations faster and more accurate.
>>
>> >> Tim
>>
>> >> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>
>> >>> I'm in the process of re-architecting Axiom, of course.
>>
>> >>> The primary research effort, as you know, is incorporating
>> >>> proof technology.
>>
>> >>> But in the process of re-architecting there are more things
>> >>> to consider. Two of them are "front and center" at the moment.
>>
>> >>> One concern is "Geometric Algebra". See
>> >>> http://geometricalgebra.net/
>>
>> >>>
>> https://www.youtube.com/watch?v=3D0fF2xToQmgs&list=3DPLsSPBzvBkYjzcQ4eCV=
AntETNNVD2d5S79
>>
>> >>> Geometric algebra unifies a lot of mathematics. In particular,
>> >>> it "cleans up" linear algebra, creating a "coordinate-free"
>> >>> representation. This greatly simplifies and unifies a lot of
>> >>> mathematics.
>>
>> >>> So the question becomes, can this be used to "re-represent"
>> >>> Axiom mathematics dependent on linear algebra? I don't
>> >>> know but the idea has a lot of potential for simplification.
>>
>> >>> The second concern is "Category Theory". This theory
>> >>> provides a simplification and a generalization of various
>> >>> ideas in Axiom. It also puts constraints on things like an
>> >>> Axiom "category" to Axiom "category" functors so that the
>> >>> conversion preserves the mathematical "Category"
>> >>> structure and properties.
>>
>> >>> MIT has a "course" on "Programming with Categories"
>> >>>
>> https://www.youtube.com/playlist?list=3DPLhgq-BqyZ7i7MTGhUROZy3BOICnVixE=
TS
>>
>> >>> which makes things rather more understandable.
>>
>> >>> So one question is how to re-represent Axiom's type
>> >>> structure so that it has a correct mathematical "Category"
>> >>> structure. This, of course, raises the question of Group
>> >>> Theory with Type Theory with Proof Theory with Category
>> >>> Theory.
>>
>> >>> Getting all of this "aligned" (and hopefully reasonably
>> >>> correct) will give Axiom a solid mathematical foundation.
>>
>> >>> Mathematics has changed a lot since Axiom was created
>> >>> and many of those changes have shown that we need a
>> >>> much stronger basis for ad-hoc things like coercion, etc.
>>
>> >>> Tim
>>
>> >>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>>
>> >>>> A briliant essay:

>> >>>> In exactly the same way a small change in axioms
>> >>>> (of which we cannot be completely sure) is capable,
>> >>>> generally speaking, of leading to completely different
>> >>>> conclusions than those that are obtained from theorems
>> >>>> which have been deduced from the accepted axioms.
>> >>>> The longer and fancier is the chain of deductions
>> >>>> ("proofs"), the less reliable is the final result.
>>
>> >>>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>>
>> >>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>> >>>>> Mark,
>>
>> >>>>> You're right, of course. The problem is too large.
>> >>>>> So what. is the plan to achieve a research result?
>> >>>>> There are 3 major restrictions on the effort (so far).

>> >>>>> First, the focus is on the GCD in NonNegativeInteger.
>> >>>>> Volume 13 is basically a collection of published thoughts
>> >>>>> by various authors on the GCD, a background literature
>> >>>>> search. Build a limited system with essentially one user
>> >>>>> visible function (the NNI GCD) and implement all of the
>> >>>>> ideas there. This demonstrates inheritance of axioms,
>> >>>>> specification of functions, pre- and post-conditions,
>> >>>>> proof integration, provisos, the new compiler, etc.
>>
>> >>>>> Second, make the SANE GCD work in the current Axiom
>> >>>>> system by generating compatible code. This gives a
>> >>>>> stepping-stone approach where things can be grounded.
>> >>>>> Obviously none of the new proof ideas will be expected
>> >>>>> to work in the current system but it "gives a place to stand".
>>
>> >>>>> Third, develop a lattice of functions. The idea is to attack the
>> >>>>> functions that  depend on almost nothing, prove them correct,
>> >>>>> and use them to prove functions that only depend on the
>> >>>>> prior layer. I did this with the category structure when I first
>> >>>>> got the system since it was necessary to bootstrap Axiom
>> >>>>> without a running system (something that was not possible
>> >>>>> with the IBM/NAG version). That effort took several months
>> >>>>> so I expect that function-lattice to take about the same time.
>>

>> >>>>> This makes the research "incremental" so that a result can
>> >>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>> >>>>> intended as a small step forward but still be a valid instance
>> >>>>> of "computational mathematics", deeply combining proof and
>> >>>>> computer algebra.
>>
>> >>>>> Tim
>> --
> Ricardo Corral C.
> --------------------------------------------
>

\start
Date: Thu, 24 Sep 2020 04:26:51 -0400
From: Tim Daly <axiomcas@gmail.com>
To: "Ricardo Corral C." <ricardocorralc@gmail.com>
Subject: Re: Axiom musings...

Today's Headline:

Axiom finalizing agreements for private astronaut mission to space station

https://spaceflightnow.com/2020/09/23/axiom-finalizing-agreements-for-priva=
te-astronaut-mission-to-space-station/

Wow. I HAVE been busy :-)

Tim


On 9/24/20, Tim Daly <axiomcas@gmail.com> wrote:
> Ricardo,
>
> Yes, I'm familar with Sage. Axiom was originally connected
> back around 2006 / 2007. William Stein showed me that it
> runs fine in the latest version.
>
> Unfortunately it doesn't do all of the things Axiom supports.
>
> I will look at Elixer LiveView. Thanks.
>
> Tim
>
>
> On 9/24/20, Ricardo Corral C. <ricardocorralc@gmail.com> wrote:
>> Elixir LiveView offers a nice way to interact with the browser. I=E2=80=
=99ve been
>> playing rendering OpenAI Atari frames from their Python objects (using
>> erlport), so it seems like a plausible option for interacting with axiom
>> too. Note that sagemath.org already interacts with axiom, so maybe
>> connecting through it serves like a bridge.
>>
>> On Thu 24 Sep 2020 at 0:06 Tim Daly <axiomcas@gmail.com> wrote:
>>
>>> The new Axiom version needs to have a better user interface.
>>>
>>>
>>>
>>> I'm experimenting with a browser front end that has an Axiom
>>>
>>> editor that runs Axiom in the background. This isn't really
>>>
>>> a new idea. Maxima has been doing it for years.
>>>
>>>
>>>
>>> Using the browser has the advantage of integrating the
>>>
>>> compiler, interpreter, graphics, and documentation in one
>>>
>>> interface.
>>>
>>>
>>>
>>> I managed to get the editor-in-browser working.
>>>
>>>
>>>
>>> Axiom already has a browser connection (book volume 11)
>>>
>>> designed to replace hyperdoc and working as an
>>>
>>> interpreter I/O so this editor would be an extension.
>>>
>>>
>>>
>>> Since almost all of Axiom is already in hyperlinked PDF
>>>
>>> files it will be possible to jump directly to related sections
>>>
>>> in the various books.
>>>
>>>
>>>
>>> Tim
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>> > Rich Hickey gave a keynote:
>>>
>>> > https://www.youtube.com/watch?v=3DoyLBGkS5ICk
>>>
>>> > which, like all of Hickey's talks, is worth watching.
>>>
>>> >
>>>
>>> > He talks about programs breaking due to things like
>>>
>>> > library changes. Around minute 30 he started to talk
>>>
>>> > about why "semantic versioning" (e.g. version 1.2.3)
>>>
>>> > is meaningless.
>>>
>>> >
>>>
>>> > I realized this years ago and changed Axiom to use
>>>
>>> > the date of the release. It provides the same sort of
>>>
>>> > "non-information" but it is easy to find in the changelog.
>>>
>>> >
>>>
>>> > Tim
>>>
>>> >
>>>
>>> >
>>>
>>> > On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>> >> Geometric algebra also affects another "in-process" goal.
>>>
>>> >>
>>>
>>> >> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>>>
>>> >>
>>>
>>> >> I've spent some time on the question of changing BLAS to use
>>>
>>> >> John Gustafson's UNUM representation, which eliminates a lot
>>>
>>> >> of code because various "standard errors" cannot occur. See
>>>
>>> >> his book "The End Of Error"
>>>
>>> >>
>>> https://www.amazon.com/End-Error-Computing-Chapman-Computational/dp/148=
2239868
>>>
>>> >>
>>>
>>> >> But since Geometric algebra is coordinate free, many of the
>>>
>>> >> computations can be done symbolically and then evalulated
>>>
>>> >> in final form.
>>>
>>> >>
>>>
>>> >> BLAS re-caste in Geometric Algebra means that some of the
>>>
>>> >> errors, such as roundoff, cannot occur in the symbolic form.
>>>
>>> >>
>>>
>>> >> This has the potential to make Axiom's BLAS and LAPACK
>>>
>>> >> computations faster and more accurate.
>>>
>>> >>
>>>
>>> >> Tim
>>>
>>> >>
>>>
>>> >>
>>>
>>> >> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>> >>> I'm in the process of re-architecting Axiom, of course.
>>>
>>> >>>
>>>
>>> >>> The primary research effort, as you know, is incorporating
>>>
>>> >>> proof technology.
>>>
>>> >>>
>>>
>>> >>> But in the process of re-architecting there are more things
>>>
>>> >>> to consider. Two of them are "front and center" at the moment.
>>>
>>> >>>
>>>
>>> >>> One concern is "Geometric Algebra". See
>>>
>>> >>> http://geometricalgebra.net/
>>>
>>> >>>
>>> https://www.youtube.com/watch?v=3D0fF2xToQmgs&list=3DPLsSPBzvBkYjzcQ4eC=
VAntETNNVD2d5S79
>>>
>>> >>>
>>>
>>> >>> Geometric algebra unifies a lot of mathematics. In particular,
>>>
>>> >>> it "cleans up" linear algebra, creating a "coordinate-free"
>>>
>>> >>> representation. This greatly simplifies and unifies a lot of
>>>
>>> >>> mathematics.
>>>
>>> >>>
>>>
>>> >>> So the question becomes, can this be used to "re-represent"
>>>
>>> >>> Axiom mathematics dependent on linear algebra? I don't
>>>
>>> >>> know but the idea has a lot of potential for simplification.
>>>
>>> >>>
>>>
>>> >>>
>>>
>>> >>> The second concern is "Category Theory". This theory
>>>
>>> >>> provides a simplification and a generalization of various
>>>
>>> >>> ideas in Axiom. It also puts constraints on things like an
>>>
>>> >>> Axiom "category" to Axiom "category" functors so that the
>>>
>>> >>> conversion preserves the mathematical "Category"
>>>
>>> >>> structure and properties.
>>>
>>> >>>
>>>
>>> >>> MIT has a "course" on "Programming with Categories"
>>>
>>> >>>
>>> https://www.youtube.com/playlist?list=3DPLhgq-BqyZ7i7MTGhUROZy3BOICnVix=
ETS
>>>
>>> >>> which makes things rather more understandable.
>>>
>>> >>>
>>>
>>> >>> So one question is how to re-represent Axiom's type
>>>
>>> >>> structure so that it has a correct mathematical "Category"
>>>
>>> >>> structure. This, of course, raises the question of Group
>>>
>>> >>> Theory with Type Theory with Proof Theory with Category
>>>
>>> >>> Theory.
>>>
>>> >>>
>>>
>>> >>> Getting all of this "aligned" (and hopefully reasonably
>>>
>>> >>> correct) will give Axiom a solid mathematical foundation.
>>>
>>> >>>
>>>
>>> >>> Mathematics has changed a lot since Axiom was created
>>>
>>> >>> and many of those changes have shown that we need a
>>>
>>> >>> much stronger basis for ad-hoc things like coercion, etc.
>>>
>>> >>>
>>>
>>> >>>
>>>
>>> >>> Tim
>>>
>>> >>>
>>>
>>> >>>
>>>
>>> >>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>> >>>> A briliant essay:
>>>
>>> >>>>
>>>
>>> >>>> In exactly the same way a small change in axioms
>>>
>>> >>>> (of which we cannot be completely sure) is capable,
>>>
>>> >>>> generally speaking, of leading to completely different
>>>
>>> >>>> conclusions than those that are obtained from theorems
>>>
>>> >>>> which have been deduced from the accepted axioms.
>>>
>>> >>>> The longer and fancier is the chain of deductions
>>>
>>> >>>> ("proofs"), the less reliable is the final result.
>>>
>>> >>>>
>>>
>>> >>>> https://www.uni-muenster.de/Physik.TP/~munsteg/arnold.html
>>>
>>> >>>>
>>>
>>> >>>>
>>>
>>> >>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>> >>>>> Mark,
>>>
>>> >>>>>
>>>
>>> >>>>> You're right, of course. The problem is too large.
>>>
>>> >>>>> So what. is the plan to achieve a research result?
>>>
>>> >>>>>
>>>
>>> >>>>> There are 3 major restrictions on the effort (so far).
>>>
>>> >>>>>
>>>
>>> >>>>> First, the focus is on the GCD in NonNegativeInteger.
>>>
>>> >>>>> Volume 13 is basically a collection of published thoughts
>>>
>>> >>>>> by various authors on the GCD, a background literature
>>>
>>> >>>>> search. Build a limited system with essentially one user
>>>
>>> >>>>> visible function (the NNI GCD) and implement all of the
>>>
>>> >>>>> ideas there. This demonstrates inheritance of axioms,
>>>
>>> >>>>> specification of functions, pre- and post-conditions,
>>>
>>> >>>>> proof integration, provisos, the new compiler, etc.
>>>
>>> >>>>>
>>>
>>> >>>>> Second, make the SANE GCD work in the current Axiom
>>>
>>> >>>>> system by generating compatible code. This gives a
>>>
>>> >>>>> stepping-stone approach where things can be grounded.
>>>
>>> >>>>> Obviously none of the new proof ideas will be expected
>>>
>>> >>>>> to work in the current system but it "gives a place to stand".
>>>
>>> >>>>>
>>>
>>> >>>>> Third, develop a lattice of functions. The idea is to attack the
>>>
>>> >>>>> functions that  depend on almost nothing, prove them correct,
>>>
>>> >>>>> and use them to prove functions that only depend on the
>>>
>>> >>>>> prior layer. I did this with the category structure when I first
>>>
>>> >>>>> got the system since it was necessary to bootstrap Axiom
>>>
>>> >>>>> without a running system (something that was not possible
>>>
>>> >>>>> with the IBM/NAG version). That effort took several months
>>>
>>> >>>>> so I expect that function-lattice to take about the same time.
>>>
>>> >>>>>
>>>
>>> >>>>> This makes the research "incremental" so that a result can
>>>
>>> >>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>>>
>>> >>>>> intended as a small step forward but still be a valid instance
>>>
>>> >>>>> of "computational mathematics", deeply combining proof and
>>>
>>> >>>>> computer algebra.
>>>
>>> >>>>>
>>>
>>> >>>>> Tim
>> Ricardo Corral C.
>> --------------------------------------------
>>
>

\start
Date: Fri, 25 Sep 2020 21:58:16 +0000
From: William Sit <wsit@ccny.cuny.edu>
To: Tim Daly <axiomcas@gmail.com>, Ricardo Corral C. <ricardocorralc@gmail.com>
Subject: Re: [EXTERNAL] Re: Axiom musings...

Axiom Space, a Houston-based company, is not related to Axiom the scientifi=
c computation system. Or is it?=0A=
=0A=
William=0A=
=0A=
William Sit=0A=
Professor Emeritus=0A=
Department of Mathematics=0A=
The City College of The City University of New York=0A=
New York, NY 10031=0A=
homepage: wsit.ccny.cuny.edu=0A=
=0A=
________________________________________=0A=
From: Axiom-developer <axiom-developer-bounces+wyscc=3Dsci.ccny.cuny.edu@no=
ngnu.org> on behalf of Tim Daly <axiomcas@gmail.com>=0A=
Sent: Thursday, September 24, 2020 4:26 AM=0A=
To: Ricardo Corral C.=0A=
Cc: axiom-developer@nongnu.org=0A=
Subject: [EXTERNAL] Re: Axiom musings...=0A=
=0A=
Today's Headline:=0A=
=0A=
Axiom finalizing agreements for private astronaut mission to space station=
=0A=
=0A=
https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__spaceflightnow.com_2=
020_09_23_axiom-2Dfinalizing-2Dagreements-2Dfor-2Dprivate-2Dastronaut-2Dmis=
sion-2Dto-2Dspace-2Dstation_&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKr=
kZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7=
m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DAvUAZpZ9vnJiQ37yQyMSdNeJQH8qv3HLt5_V1=
qQ3q2g&e=3D=0A=
=0A=
Wow. I HAVE been busy :-)=0A=
=0A=
Tim=0A=
=0A=
=0A=
On 9/24/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
> Ricardo,=0A=
>=0A=
> Yes, I'm familar with Sage. Axiom was originally connected=0A=
> back around 2006 / 2007. William Stein showed me that it=0A=
> runs fine in the latest version.=0A=
>=0A=
> Unfortunately it doesn't do all of the things Axiom supports.=0A=
>=0A=
> I will look at Elixer LiveView. Thanks.=0A=
>=0A=
> Tim=0A=
>=0A=
>=0A=
> On 9/24/20, Ricardo Corral C. <ricardocorralc@gmail.com> wrote:=0A=
>> Elixir LiveView offers a nice way to interact with the browser. I=92ve b=
een=0A=
>> playing rendering OpenAI Atari frames from their Python objects (using=
=0A=
>> erlport), so it seems like a plausible option for interacting with axiom=
=0A=
>> too. Note that sagemath.org already interacts with axiom, so maybe=0A=
>> connecting through it serves like a bridge.=0A=
>>=0A=
>> On Thu 24 Sep 2020 at 0:06 Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>=0A=
>>> The new Axiom version needs to have a better user interface.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> I'm experimenting with a browser front end that has an Axiom=0A=
>>>=0A=
>>> editor that runs Axiom in the background. This isn't really=0A=
>>>=0A=
>>> a new idea. Maxima has been doing it for years.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> Using the browser has the advantage of integrating the=0A=
>>>=0A=
>>> compiler, interpreter, graphics, and documentation in one=0A=
>>>=0A=
>>> interface.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> I managed to get the editor-in-browser working.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> Axiom already has a browser connection (book volume 11)=0A=
>>>=0A=
>>> designed to replace hyperdoc and working as an=0A=
>>>=0A=
>>> interpreter I/O so this editor would be an extension.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> Since almost all of Axiom is already in hyperlinked PDF=0A=
>>>=0A=
>>> files it will be possible to jump directly to related sections=0A=
>>>=0A=
>>> in the various books.=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> Tim=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>>=0A=
>>> > Rich Hickey gave a keynote:=0A=
>>>=0A=
>>> > https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.co=
m_watch-3Fv-3DoyLBGkS5ICk&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZX=
HRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29=
H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DoF9rfp-E-CqJ8LCcpq87aURaYtjVP8DwSljlOvjZ=
UFw&e=3D=0A=
>>>=0A=
>>> > which, like all of Hickey's talks, is worth watching.=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>> > He talks about programs breaking due to things like=0A=
>>>=0A=
>>> > library changes. Around minute 30 he started to talk=0A=
>>>=0A=
>>> > about why "semantic versioning" (e.g. version 1.2.3)=0A=
>>>=0A=
>>> > is meaningless.=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>> > I realized this years ago and changed Axiom to use=0A=
>>>=0A=
>>> > the date of the release. It provides the same sort of=0A=
>>>=0A=
>>> > "non-information" but it is easy to find in the changelog.=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>> > Tim=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>> > On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>>=0A=
>>> >> Geometric algebra also affects another "in-process" goal.=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> I have BLAS and LAPACK in the Axiom sources (volume 10.5).=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> I've spent some time on the question of changing BLAS to use=0A=
>>>=0A=
>>> >> John Gustafson's UNUM representation, which eliminates a lot=0A=
>>>=0A=
>>> >> of code because various "standard errors" cannot occur. See=0A=
>>>=0A=
>>> >> his book "The End Of Error"=0A=
>>>=0A=
>>> >>=0A=
>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.amazon.com_E=
nd-2DError-2DComputing-2DChapman-2DComputational_dp_1482239868&d=3DDwIFaQ&c=
=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ7=
9PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DyWX=
uK9IV2lgeUVht6IFybABGGvhsgr0zuqsb6jwFr-4&e=3D=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> But since Geometric algebra is coordinate free, many of the=0A=
>>>=0A=
>>> >> computations can be done symbolically and then evalulated=0A=
>>>=0A=
>>> >> in final form.=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> BLAS re-caste in Geometric Algebra means that some of the=0A=
>>>=0A=
>>> >> errors, such as roundoff, cannot occur in the symbolic form.=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> This has the potential to make Axiom's BLAS and LAPACK=0A=
>>>=0A=
>>> >> computations faster and more accurate.=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> Tim=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>>=0A=
>>> >>> I'm in the process of re-architecting Axiom, of course.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> The primary research effort, as you know, is incorporating=0A=
>>>=0A=
>>> >>> proof technology.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> But in the process of re-architecting there are more things=0A=
>>>=0A=
>>> >>> to consider. Two of them are "front and center" at the moment.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> One concern is "Geometric Algebra". See=0A=
>>>=0A=
>>> >>> https://urldefense.proofpoint.com/v2/url?u=3Dhttp-3A__geometricalge=
bra.net_&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9=
SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNa=
rNjIlj8UKFSH8&s=3DZSIE2k7gRluHIWuMRbAKuxvuEhNW5fsAY_7JkHIt_6Y&e=3D=0A=
>>>=0A=
>>> >>>=0A=
>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.com_=
watch-3Fv-3D0fF2xToQmgs-26list-3DPLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79&d=3DDwI=
FaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7w=
wWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=
=3DajUPImTLlq7Lp3ZyQySQVbWMzGahjwqMv3VbbDADxyc&e=3D=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> Geometric algebra unifies a lot of mathematics. In particular,=0A=
>>>=0A=
>>> >>> it "cleans up" linear algebra, creating a "coordinate-free"=0A=
>>>=0A=
>>> >>> representation. This greatly simplifies and unifies a lot of=0A=
>>>=0A=
>>> >>> mathematics.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> So the question becomes, can this be used to "re-represent"=0A=
>>>=0A=
>>> >>> Axiom mathematics dependent on linear algebra? I don't=0A=
>>>=0A=
>>> >>> know but the idea has a lot of potential for simplification.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> The second concern is "Category Theory". This theory=0A=
>>>=0A=
>>> >>> provides a simplification and a generalization of various=0A=
>>>=0A=
>>> >>> ideas in Axiom. It also puts constraints on things like an=0A=
>>>=0A=
>>> >>> Axiom "category" to Axiom "category" functors so that the=0A=
>>>=0A=
>>> >>> conversion preserves the mathematical "Category"=0A=
>>>=0A=
>>> >>> structure and properties.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> MIT has a "course" on "Programming with Categories"=0A=
>>>=0A=
>>> >>>=0A=
>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.com_=
playlist-3Flist-3DPLhgq-2DBqyZ7i7MTGhUROZy3BOICnVixETS&d=3DDwIFaQ&c=3D4Nmam=
NZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRx=
NZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DwAlbj134Biw=
AcAdG60K3dYfrkb5lDwA7M0swRlmjAU8&e=3D=0A=
>>>=0A=
>>> >>> which makes things rather more understandable.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> So one question is how to re-represent Axiom's type=0A=
>>>=0A=
>>> >>> structure so that it has a correct mathematical "Category"=0A=
>>>=0A=
>>> >>> structure. This, of course, raises the question of Group=0A=
>>>=0A=
>>> >>> Theory with Type Theory with Proof Theory with Category=0A=
>>>=0A=
>>> >>> Theory.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> Getting all of this "aligned" (and hopefully reasonably=0A=
>>>=0A=
>>> >>> correct) will give Axiom a solid mathematical foundation.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> Mathematics has changed a lot since Axiom was created=0A=
>>>=0A=
>>> >>> and many of those changes have shown that we need a=0A=
>>>=0A=
>>> >>> much stronger basis for ad-hoc things like coercion, etc.=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> Tim=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>>=0A=
>>> >>>> A briliant essay:=0A=
>>>=0A=
>>> >>>>=0A=
>>>=0A=
>>> >>>> In exactly the same way a small change in axioms=0A=
>>>=0A=
>>> >>>> (of which we cannot be completely sure) is capable,=0A=
>>>=0A=
>>> >>>> generally speaking, of leading to completely different=0A=
>>>=0A=
>>> >>>> conclusions than those that are obtained from theorems=0A=
>>>=0A=
>>> >>>> which have been deduced from the accepted axioms.=0A=
>>>=0A=
>>> >>>> The longer and fancier is the chain of deductions=0A=
>>>=0A=
>>> >>>> ("proofs"), the less reliable is the final result.=0A=
>>>=0A=
>>> >>>>=0A=
>>>=0A=
>>> >>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.uni-2Dm=
uenster.de_Physik.TP_-7Emunsteg_arnold.html&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC=
6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc=
&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3Db11uIoYmlhACkj0JDy8Bbl=
3aTCMbW6OC_caxDDDN2YU&e=3D=0A=
>>>=0A=
>>> >>>>=0A=
>>>=0A=
>>> >>>>=0A=
>>>=0A=
>>> >>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:=0A=
>>>=0A=
>>> >>>>> Mark,=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> You're right, of course. The problem is too large.=0A=
>>>=0A=
>>> >>>>> So what. is the plan to achieve a research result?=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> There are 3 major restrictions on the effort (so far).=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> First, the focus is on the GCD in NonNegativeInteger.=0A=
>>>=0A=
>>> >>>>> Volume 13 is basically a collection of published thoughts=0A=
>>>=0A=
>>> >>>>> by various authors on the GCD, a background literature=0A=
>>>=0A=
>>> >>>>> search. Build a limited system with essentially one user=0A=
>>>=0A=
>>> >>>>> visible function (the NNI GCD) and implement all of the=0A=
>>>=0A=
>>> >>>>> ideas there. This demonstrates inheritance of axioms,=0A=
>>>=0A=
>>> >>>>> specification of functions, pre- and post-conditions,=0A=
>>>=0A=
>>> >>>>> proof integration, provisos, the new compiler, etc.=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> Second, make the SANE GCD work in the current Axiom=0A=
>>>=0A=
>>> >>>>> system by generating compatible code. This gives a=0A=
>>>=0A=
>>> >>>>> stepping-stone approach where things can be grounded.=0A=
>>>=0A=
>>> >>>>> Obviously none of the new proof ideas will be expected=0A=
>>>=0A=
>>> >>>>> to work in the current system but it "gives a place to stand".=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> Third, develop a lattice of functions. The idea is to attack the=
=0A=
>>>=0A=
>>> >>>>> functions that  depend on almost nothing, prove them correct,=0A=
>>>=0A=
>>> >>>>> and use them to prove functions that only depend on the=0A=
>>>=0A=
>>> >>>>> prior layer. I did this with the category structure when I first=
=0A=
>>>=0A=
>>> >>>>> got the system since it was necessary to bootstrap Axiom=0A=
>>>=0A=
>>> >>>>> without a running system (something that was not possible=0A=
>>>=0A=
>>> >>>>> with the IBM/NAG version). That effort took several months=0A=
>>>=0A=
>>> >>>>> so I expect that function-lattice to take about the same time.=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> This makes the research "incremental" so that a result can=0A=
>>>=0A=
>>> >>>>> be achieved in one lifetime. Like a PhD thesis, it is initially=
=0A=
>>>=0A=
>>> >>>>> intended as a small step forward but still be a valid instance=0A=
>>>=0A=
>>> >>>>> of "computational mathematics", deeply combining proof and=0A=
>>>=0A=
>>> >>>>> computer algebra.=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>> Tim=0A=
>>>=0A=
>>> >>>>>=0A=
>>>=0A=
>>> >>>>=0A=
>>>=0A=
>>> >>>=0A=
>>>=0A=
>>> >>=0A=
>>>=0A=
>>> >=0A=
>>>=0A=
>>>=0A=
>>>=0A=
>>> --=0A=
>> Ricardo Corral C.=0A=
>> --------------------------------------------=0A=
>>=0A=
>=0A=
=0A=

\start
Date: Fri, 25 Sep 2020 19:57:40 -0400
From: Tim Daly <axiomcas@gmail.com>
To: William Sit <wsit@ccny.cuny.edu>
Subject: Re: [EXTERNAL] Re: Axiom musings...
Cc: "Ricardo Corral C." <ricardocorralc@gmail.com>, 

No, the name 'Axiom" is used by many different companies.

Trademarks only cover infringement "in the same area"
(although the Lexus car company sued a diner named
Lexus and "won" because the diner couldn't compete
against big corporate lawyer money).

One company in New Jersey named their language "Axiom"
and I keep getting calls from recruiters because that company
will pay big bucks to hire an "Axiom Developer". Sigh.

I just thought the space one was "over the top".

I'd sign up to go to space in a heartbeat.
I applied to be an astronaut in the 1990s. NASA
wanted someone with at least a Master's degree,
a background in Robotics, and less than 5'9" tall.
I fit the criteria but never heard back.

Tim

On 9/25/20, William Sit <wsit@ccny.cuny.edu> wrote:
> Axiom Space, a Houston-based company, is not related to Axiom the scienti=
fic
> computation system. Or is it?
>
> William
>
> William Sit
> Professor Emeritus
> Department of Mathematics
> The City College of The City University of New York
> New York, NY 10031
> homepage: wsit.ccny.cuny.edu
>
> ________________________________________
> From: Axiom-developer
> <axiom-developer-bounces+wyscc=3Dsci.ccny.cuny.edu@nongnu.org> on behalf =
of
> Tim Daly <axiomcas@gmail.com>
> Sent: Thursday, September 24, 2020 4:26 AM
> To: Ricardo Corral C.
> Cc: axiom-developer@nongnu.org
> Subject: [EXTERNAL] Re: Axiom musings...
>
> Today's Headline:
>
> Axiom finalizing agreements for private astronaut mission to space statio=
n
>
> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__spaceflightnow.com=
_2020_09_23_axiom-2Dfinalizing-2Dagreements-2Dfor-2Dprivate-2Dastronaut-2Dm=
ission-2Dto-2Dspace-2Dstation_&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbV=
KrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447=
T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DAvUAZpZ9vnJiQ37yQyMSdNeJQH8qv3HLt5_=
V1qQ3q2g&e=3D
>
> Wow. I HAVE been busy :-)
>
> Tim
>
>
> On 9/24/20, Tim Daly <axiomcas@gmail.com> wrote:
>> Ricardo,
>>
>> Yes, I'm familar with Sage. Axiom was originally connected
>> back around 2006 / 2007. William Stein showed me that it
>> runs fine in the latest version.
>>
>> Unfortunately it doesn't do all of the things Axiom supports.
>>
>> I will look at Elixer LiveView. Thanks.
>>
>> Tim
>>
>>
>> On 9/24/20, Ricardo Corral C. <ricardocorralc@gmail.com> wrote:
>>> Elixir LiveView offers a nice way to interact with the browser. I=E2=80=
=99ve been
>>> playing rendering OpenAI Atari frames from their Python objects (using
>>> erlport), so it seems like a plausible option for interacting with axio=
m
>>> too. Note that sagemath.org already interacts with axiom, so maybe
>>> connecting through it serves like a bridge.
>>>
>>> On Thu 24 Sep 2020 at 0:06 Tim Daly <axiomcas@gmail.com> wrote:
>>>
>>>> The new Axiom version needs to have a better user interface.
>>>>
>>>>
>>>>
>>>> I'm experimenting with a browser front end that has an Axiom
>>>>
>>>> editor that runs Axiom in the background. This isn't really
>>>>
>>>> a new idea. Maxima has been doing it for years.
>>>>
>>>>
>>>>
>>>> Using the browser has the advantage of integrating the
>>>>
>>>> compiler, interpreter, graphics, and documentation in one
>>>>
>>>> interface.
>>>>
>>>>
>>>>
>>>> I managed to get the editor-in-browser working.
>>>>
>>>>
>>>>
>>>> Axiom already has a browser connection (book volume 11)
>>>>
>>>> designed to replace hyperdoc and working as an
>>>>
>>>> interpreter I/O so this editor would be an extension.
>>>>
>>>>
>>>>
>>>> Since almost all of Axiom is already in hyperlinked PDF
>>>>
>>>> files it will be possible to jump directly to related sections
>>>>
>>>> in the various books.
>>>>
>>>>
>>>>
>>>> Tim
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On 9/23/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>
>>>> > Rich Hickey gave a keynote:
>>>>
>>>> > https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.c=
om_watch-3Fv-3DoyLBGkS5ICk&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZ=
XHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m2=
9H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DoF9rfp-E-CqJ8LCcpq87aURaYtjVP8DwSljlOvj=
ZUFw&e=3D
>>>>
>>>> > which, like all of Hickey's talks, is worth watching.
>>>>
>>>> >
>>>>
>>>> > He talks about programs breaking due to things like
>>>>
>>>> > library changes. Around minute 30 he started to talk
>>>>
>>>> > about why "semantic versioning" (e.g. version 1.2.3)
>>>>
>>>> > is meaningless.
>>>>
>>>> >
>>>>
>>>> > I realized this years ago and changed Axiom to use
>>>>
>>>> > the date of the release. It provides the same sort of
>>>>
>>>> > "non-information" but it is easy to find in the changelog.
>>>>
>>>> >
>>>>
>>>> > Tim
>>>>
>>>> >
>>>>
>>>> >
>>>>
>>>> > On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>
>>>> >> Geometric algebra also affects another "in-process" goal.
>>>>
>>>> >>
>>>>
>>>> >> I have BLAS and LAPACK in the Axiom sources (volume 10.5).
>>>>
>>>> >>
>>>>
>>>> >> I've spent some time on the question of changing BLAS to use
>>>>
>>>> >> John Gustafson's UNUM representation, which eliminates a lot
>>>>
>>>> >> of code because various "standard errors" cannot occur. See
>>>>
>>>> >> his book "The End Of Error"
>>>>
>>>> >>
>>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.amazon.com_=
End-2DError-2DComputing-2DChapman-2DComputational_dp_1482239868&d=3DDwIFaQ&=
c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ=
79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DyW=
XuK9IV2lgeUVht6IFybABGGvhsgr0zuqsb6jwFr-4&e=3D
>>>>
>>>> >>
>>>>
>>>> >> But since Geometric algebra is coordinate free, many of the
>>>>
>>>> >> computations can be done symbolically and then evalulated
>>>>
>>>> >> in final form.
>>>>
>>>> >>
>>>>
>>>> >> BLAS re-caste in Geometric Algebra means that some of the
>>>>
>>>> >> errors, such as roundoff, cannot occur in the symbolic form.
>>>>
>>>> >>
>>>>
>>>> >> This has the potential to make Axiom's BLAS and LAPACK
>>>>
>>>> >> computations faster and more accurate.
>>>>
>>>> >>
>>>>
>>>> >> Tim
>>>>
>>>> >>
>>>>
>>>> >>
>>>>
>>>> >> On 9/5/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>
>>>> >>> I'm in the process of re-architecting Axiom, of course.
>>>>
>>>> >>>
>>>>
>>>> >>> The primary research effort, as you know, is incorporating
>>>>
>>>> >>> proof technology.
>>>>
>>>> >>>
>>>>
>>>> >>> But in the process of re-architecting there are more things
>>>>
>>>> >>> to consider. Two of them are "front and center" at the moment.
>>>>
>>>> >>>
>>>>
>>>> >>> One concern is "Geometric Algebra". See
>>>>
>>>> >>> https://urldefense.proofpoint.com/v2/url?u=3Dhttp-3A__geometricalg=
ebra.net_&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW=
9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbN=
arNjIlj8UKFSH8&s=3DZSIE2k7gRluHIWuMRbAKuxvuEhNW5fsAY_7JkHIt_6Y&e=3D
>>>>
>>>> >>>
>>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.com=
_watch-3Fv-3D0fF2xToQmgs-26list-3DPLsSPBzvBkYjzcQ4eCVAntETNNVD2d5S79&d=3DDw=
IFaQ&c=3D4NmamNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7=
wwWYZ79PdSWMRxNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=
=3DajUPImTLlq7Lp3ZyQySQVbWMzGahjwqMv3VbbDADxyc&e=3D
>>>>
>>>> >>>
>>>>
>>>> >>> Geometric algebra unifies a lot of mathematics. In particular,
>>>>
>>>> >>> it "cleans up" linear algebra, creating a "coordinate-free"
>>>>
>>>> >>> representation. This greatly simplifies and unifies a lot of
>>>>
>>>> >>> mathematics.
>>>>
>>>> >>>
>>>>
>>>> >>> So the question becomes, can this be used to "re-represent"
>>>>
>>>> >>> Axiom mathematics dependent on linear algebra? I don't
>>>>
>>>> >>> know but the idea has a lot of potential for simplification.
>>>>
>>>> >>>
>>>>
>>>> >>>
>>>>
>>>> >>> The second concern is "Category Theory". This theory
>>>>
>>>> >>> provides a simplification and a generalization of various
>>>>
>>>> >>> ideas in Axiom. It also puts constraints on things like an
>>>>
>>>> >>> Axiom "category" to Axiom "category" functors so that the
>>>>
>>>> >>> conversion preserves the mathematical "Category"
>>>>
>>>> >>> structure and properties.
>>>>
>>>> >>>
>>>>
>>>> >>> MIT has a "course" on "Programming with Categories"
>>>>
>>>> >>>
>>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.youtube.com=
_playlist-3Flist-3DPLhgq-2DBqyZ7i7MTGhUROZy3BOICnVixETS&d=3DDwIFaQ&c=3D4Nma=
mNZG3KTnUCoC6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMR=
xNZvTih0Bkxc&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3DwAlbj134Bi=
wAcAdG60K3dYfrkb5lDwA7M0swRlmjAU8&e=3D
>>>>
>>>> >>> which makes things rather more understandable.
>>>>
>>>> >>>
>>>>
>>>> >>> So one question is how to re-represent Axiom's type
>>>>
>>>> >>> structure so that it has a correct mathematical "Category"
>>>>
>>>> >>> structure. This, of course, raises the question of Group
>>>>
>>>> >>> Theory with Type Theory with Proof Theory with Category
>>>>
>>>> >>> Theory.
>>>>
>>>> >>>
>>>>
>>>> >>> Getting all of this "aligned" (and hopefully reasonably
>>>>
>>>> >>> correct) will give Axiom a solid mathematical foundation.
>>>>
>>>> >>>
>>>>
>>>> >>> Mathematics has changed a lot since Axiom was created
>>>>
>>>> >>> and many of those changes have shown that we need a
>>>>
>>>> >>> much stronger basis for ad-hoc things like coercion, etc.
>>>>
>>>> >>>
>>>>
>>>> >>>
>>>>
>>>> >>> Tim
>>>>
>>>> >>>
>>>>
>>>> >>>
>>>>
>>>> >>> On 8/21/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>
>>>> >>>> A briliant essay:
>>>>
>>>> >>>>
>>>>
>>>> >>>> In exactly the same way a small change in axioms
>>>>
>>>> >>>> (of which we cannot be completely sure) is capable,
>>>>
>>>> >>>> generally speaking, of leading to completely different
>>>>
>>>> >>>> conclusions than those that are obtained from theorems
>>>>
>>>> >>>> which have been deduced from the accepted axioms.
>>>>
>>>> >>>> The longer and fancier is the chain of deductions
>>>>
>>>> >>>> ("proofs"), the less reliable is the final result.
>>>>
>>>> >>>>
>>>>
>>>> >>>> https://urldefense.proofpoint.com/v2/url?u=3Dhttps-3A__www.uni-2D=
muenster.de_Physik.TP_-7Emunsteg_arnold.html&d=3DDwIFaQ&c=3D4NmamNZG3KTnUCo=
C6InoLJ6KV1tbVKrkZXHRwtIMGmo&r=3DqW9SUYRDo6sWEVPpx7wwWYZ79PdSWMRxNZvTih0Bkx=
c&m=3DHjfsC447T7m29H3fRO5mjUS7vORbNarNjIlj8UKFSH8&s=3Db11uIoYmlhACkj0JDy8Bb=
l3aTCMbW6OC_caxDDDN2YU&e=3D
>>>>
>>>> >>>>
>>>>
>>>> >>>>
>>>>
>>>> >>>> On 8/8/20, Tim Daly <axiomcas@gmail.com> wrote:
>>>>
>>>> >>>>> Mark,
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> You're right, of course. The problem is too large.
>>>>
>>>> >>>>> So what. is the plan to achieve a research result?
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> There are 3 major restrictions on the effort (so far).
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> First, the focus is on the GCD in NonNegativeInteger.
>>>>
>>>> >>>>> Volume 13 is basically a collection of published thoughts
>>>>
>>>> >>>>> by various authors on the GCD, a background literature
>>>>
>>>> >>>>> search. Build a limited system with essentially one user
>>>>
>>>> >>>>> visible function (the NNI GCD) and implement all of the
>>>>
>>>> >>>>> ideas there. This demonstrates inheritance of axioms,
>>>>
>>>> >>>>> specification of functions, pre- and post-conditions,
>>>>
>>>> >>>>> proof integration, provisos, the new compiler, etc.
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> Second, make the SANE GCD work in the current Axiom
>>>>
>>>> >>>>> system by generating compatible code. This gives a
>>>>
>>>> >>>>> stepping-stone approach where things can be grounded.
>>>>
>>>> >>>>> Obviously none of the new proof ideas will be expected
>>>>
>>>> >>>>> to work in the current system but it "gives a place to stand".
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> Third, develop a lattice of functions. The idea is to attack the
>>>>
>>>> >>>>> functions that  depend on almost nothing, prove them correct,
>>>>
>>>> >>>>> and use them to prove functions that only depend on the
>>>>
>>>> >>>>> prior layer. I did this with the category structure when I first
>>>>
>>>> >>>>> got the system since it was necessary to bootstrap Axiom
>>>>
>>>> >>>>> without a running system (something that was not possible
>>>>
>>>> >>>>> with the IBM/NAG version). That effort took several months
>>>>
>>>> >>>>> so I expect that function-lattice to take about the same time.
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> This makes the research "incremental" so that a result can
>>>>
>>>> >>>>> be achieved in one lifetime. Like a PhD thesis, it is initially
>>>>
>>>> >>>>> intended as a small step forward but still be a valid instance
>>>>
>>>> >>>>> of "computational mathematics", deeply combining proof and
>>>>
>>>> >>>>> computer algebra.
>>>>
>>>> >>>>>
>>>>
>>>> >>>>> Tim
>>>>
>>>> >>>>>
>>>>
>>>> >>>>
>>>>
>>>> >>>
>>>>
>>>> >>
>>>>
>>>> >
>>>>
>>>>
>>>>
>>>> --
>>> Ricardo Corral C.
>>> --------------------------------------------
>>>
>>
>
>

\start
Date: Mon, 28 Sep 2020 03:03:20 -0400
From: Tim Daly <axiomcas@gmail.com>
To: Ralf Hemmecke <ralf@hemmecke.de>, Waldek Hebisch <hebisch@math.uni.wroc.pl>,
Subject: Axiom musings...

(https://groups.google.com/g/fricas-devel/c/lF4w9MduSVg)

-- <rant> There is quality called "cohesion" or "conceptual
-- integrity" meaning that parts of system follow common
-- design and compose into coherent whole. I could list
-- rather long list of design choices made in Axiom time
-- that I am not happy about. But I keep most of them,
-- because current choices play together reasonably well.
-- Change which improves one aspect can make other things
-- worse and balance may be negative. There is also
-- reality factor: some changes need a lot of work to
-- implement correctly and partial, incomplete change can
-- make things worse. Due to modularity of Spad incompatible
-- changes can coexist in different packages, but this is
-- suboptimal situation, leading to duplicate developement
-- effort and user confusion.
-- </rant>

-- 
-- Waldek Hebisch

<rant in reply>

Scratchpad was developed from software that was just a few
years away from the suggestion that GOTO was considered
harmful and "structured programming" was still discussed.

Scratchpad pushed the state of the art, based on CLU (Liskov)
with features such as (to quote Wikipedia)  "abstract data types,
call-by-sharing, iterators, multiple return values (a form of
parallel assignment), type-safe parameterized types, and
type-safe variant types. It is also notable for its use of
classes with constructors and methods, but without inheritance."
Scratchpad pushed the state of the art by basing on group theory,
not rewrite rules (e.g.MMA).

The Scratchpad project was a RESEARCH project. For a while
I had to replace the parser every week with the new, new,
new, new. new parser. Everyone had a suggestion for
some new feature or some different output or some
strange syntax. "Which new parser?" was a running gag
in the group. Bill Burge was very busy making new ones,
exploiting his own research interest (zipper parsing).

I sent magnetic tapes to people who wanted copies of
the software (including source code). There was no plan
to release the code as a product. Each of us had our own
idea of what was important. Mine was to rewrite the system
so it ran on "common lisp", but common lisp was still just
an X3J13 proposal that was being reviewed (I still have my
review copies that I marked up) so the language was not
stable. We had a contract with William Schelter to create a
version of common lisp, which was also changed weekly.
Scratchpad ran on 12 different "common lisps", all from the
same source tree.

We were told that Scratchpad was going to be shut down.
We asked to have it made into a product, which involved
working with Sales and Marketing. Sales, insisting that there
were a dozen "required" manuals (e.g. User, Installation,
Internals, etc.), all of which had documentation standards.

Furthermore, all of the manuals had to be written to the 8th
grade level (about a 13 year old child). Somehow we didn't
think that we could write about differential equations that
could pass that criteria (which was enfored by software
that Sales used to ensure we didn't use big words). All
we had time for was a single book.

You've had the system for 12 years and are just now
trying to recover a book that took us a couple months to
write. You have almost no new documentation. I don't
understand how you expect the system to survive the
day you stop working on it, given that "lisp code" seems
to be too hard to read and only about 3 people speak
"boot code".

I got Scratchpad running on a laptop running DOS, which
was the state of the art at the time for personal computers.
Otherwise it had to run on "workstations" (multi-thousand
dollar computers), like a Symbolics machine or RS6000.

We had no warning that Scratchpad would be stopped
and we were trying very hard to turn research software
into something that "just worked" for anyone when, at
times, it barely worked for us due to the latest hack.

So ranting about how bad it is, or poorly designed, or
how it could be so much better just missed the fact that
an astonishing amount of effort went into cleaning it up
and selling it at the very last moment. We all wanted
more and IBM forced us to stop working on it.

Of course Axiom could be so much better. That's what
the new SANE effort is working on. Categories are first
class objects, able to be created and used at run time,
for example. The internals are strongly typed using the
latest dependent type theory. The design allows proofs
and specifications to accompany algorithms. The internals
and externals are designed to be trusted "down to the metal".
Coercions are true functors (in the category theory sense).

The Groebner basis proof was done years ago in Coq
(https://www.ricam.oeaw.ac.at/specsem/srs/groeb/download/coq-linz.pdf)
(https://hal.inria.fr/inria-00504727/document)

This work existed in 2008, well over a decade old,
near the time of the great fork. Surely your "new, improved"
system would be able to incorporate this proof by now and
be able to manipulate it, right? It's been available for
12 years and you have a whole team.

Rewriting pieces of the interpreter or compiler happened
every week. I don't understand why this is considered hard.

You're still using "compress.daase" which I wrote so I could
put Scratchpad on floppy disks. It has no use now other than
wasting CPU, I/O, and disk space. Removing it takes an hour
or two.

In fact, the whole 'daase' idea needs to disappear. It was written
to optimize random access to hard drives, something that is
meaningless on SSDs. In fact, the databases are so small
they should be "in core" at all times. Removing this should
also take an hour or two, again saving CPU and I/O time.

I optimized the whole database access code into a single
(documented) function so the rewrite would be completely
local and transparent (gosh, it might be a rare bit of
"conceptual integrity"?)

In 40 years software development has changed a lot.
Complaining about "poor" design of software from the
last century ignores that these ideas didn't even exist
at the time Scratchpad was written.

It seems to me to be the height of arrogance to complain
that software from the 1980s, saved from near death 3
times (sale to NAG, rebuild into free (2000), and surviving
a fork (2007)), is a source of complaint about its design.
If Scratchpad had been worked on by the original group
until now it would be much better.

You have had the source code for 12 years, which is
longer than the Scratchpad project existed. You could
have rewritten it completely by now...
but compress.daase still exists.

</rant>

Tim

\start
Date: Mon, 28 Sep 2020 09:50:59 -0400
From: Tim Daly <axiomcas@gmail.com>
To: Waldek Hebisch <hebisch@math.uni.wroc.pl>,
Subject: Re: Axiom musings...

My apologies. I reacted poorly to what I
interpreted as a criticism of the developers of
Scratchpad. I consider them among the most
clever and intelligent people I've ever met. I was
lucky to work with them.

Tim


\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
