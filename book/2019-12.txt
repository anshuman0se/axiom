\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}
\begin{verbatim}
\start
Date: Thu, 5 Dec 2019 18:41:47 -0500
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>
Subject: Neural Net outperforms MMA on integration?

https://arxiv.org/pdf/1912.01412.pdf

\start
Date: Sun, 8 Dec 2019 17:45:56 -0500
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>
Subject: New Release

The December release is up.

The only significant change is new code in the Sane compiler
(volume 15)

Tim

\start
Date: Sun, 8 Dec 2019 23:55:58 -0500
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>, Tim Daly <axiomcas@gmail.com>
Subject: Re: Axiom musings...

The Axiom Sane compiler is being "shaped by the hammer
blows of reality", to coin a phrase.

There are many goals. One of the primary goals is creating a
compiler that can be understood, maintained, and modified.

So the latest changes involved adding multiple index files.
These are documentation (links to where terms are mentioned
in the text), code (links to the implementation of things),
error (links to where errors are defined), signatures (links to
the signatures of lisp functions), figures (links to figures),
and separate category, domain, and package indexes.

The tikz package is now used to create "railroad diagrams"
of syntax (ala, the PASCAL report). The implementation of
those diagrams follows immediately. Collectively these will
eventually define at least the syntax of the language. In the
ideal, changing the diagram would change the code but I'm
not that clever.

Reality shows up with the curent constraint that the
compiler should accept the current Spad language as
closely as possible. Of course, plans are to include new
constructs (e.g. hypothesis, axiom, specification, etc)
but these are being postponed until "syntax complete".

All parse information is stored in a parse object, which
is a CLOS object (and therefore a Common Lisp type)
Fields within the parse object, e.g. variables are also
CLOS objects (and therefore a Common Lisp type).
It's types all the way down.

These types are being used as 'signatures' for the
lisp functions. The goal is to be able to type-check the
compiler implementation as well as the Sane language.

The parser is designed to "wrap around" so that the
user-level output of a parse should be the user-level
input (albeit in a 'canonical" form). This "mirror effect"
should make it easy to see that the parser properly
parsed the user input.

The parser is "first class" so it will be available at
runtime as a domain allowing Spad code to construct
Spad code.

One plan, not near implementation, is to "unify" some
CLOS types with the Axiom types (e.g. String). How
this will happen is still in the land of design. This would
"ground" Spad in lisp, making them co-equal.

Making lisp "co-equal" is a feature, especially as Spad is
really just a domain-specific language in lisp. Lisp
functions (with CLOS types as signatures) would be
avaiable for implementing Spad functions. This not
only improves the efficiency, it would make the
BLAS/LAPACK (see volume 10.5) code "native" to Axiom.
.
On the theory front I plan to attend the Formal Methods
in Mathematics / Lean Together conference, mostly to
know how little I know, especially that I need to know.
http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/

Tim



On 11/28/19, Jacques Carette <carette@mcmaster.ca> wrote:
> The underlying technology to use for building such an algebra library is
> documented in the paper " Building on the Diamonds between Theories:
> Theory Presentation Combinators"
> http://www.cas.mcmaster.ca/~carette/publications/tpcj.pdf [which will
> also be on the arxiv by Monday, and has been submitted to a journal].
>
> There is a rather full-fledged prototype, very well documented at
> https://alhassy.github.io/next-700-module-systems/prototype/package-former.html
>
> (source at https://github.com/alhassy/next-700-module-systems). It is
> literate source.
>
> The old prototype was hard to find - it is now at
> https://github.com/JacquesCarette/MathScheme.
>
> There is also a third prototype in the MMT system, but it does not quite
> function properly today, it is under repair.
>
> The paper "A Language Feature to Unbundle Data at Will"
> (https://alhassy.github.io/next-700-module-systems/papers/gpce19_a_language_feature_to_unbundle_data_at_will.pdf)
>
> is also relevant, as it solves a problem with parametrized theories
> (parametrized Categories in Axiom terminology) that all current systems
> suffer from.
>
> Jacques
>
> On 2019-11-27 11:47 p.m., Tim Daly wrote:
>> The new Sane compiler is also being tested with the Fricas
>> algebra code. The compiler knows about the language but
>> does not depend on the algebra library (so far). It should be
>> possible, by design, to load different algebra towers.
>>
>> In particular, one idea is to support the "tiny theories"
>> algebra from Carette and Farmer. This would allow much
>> finer grain separation of algebra and axioms.
>>
>> This "flexible algebra" design would allow things like the
>> Lean theorem prover effort in a more natural style.
>>
>> Tim
>>
>>
>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>> The current design and code base (in bookvol15) supports
>>> multiple back ends. One will clearly be a common lisp.
>>>
>>> Another possible design choice is to target the GNU
>>> GCC intermediate representation, making Axiom "just
>>> another front-end language" supported by GCC.
>>>
>>> The current intermediate representation does not (yet)
>>> make any decision about the runtime implementation.
>>>
>>> Tim
>>>
>>>
>>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>>> Jason Gross and Adam Chlipala ("Parsing Parses") developed
>>>> a dependently typed general parser for context free grammar
>>>> in Coq.
>>>>
>>>> They used the parser to prove its own completeness.
>>>>
>>>> Unfortunately Spad is not a context-free grammar.
>>>> But it is an intersting thought exercise to consider
>>>> an "Axiom on Coq" implementation.
>>>>
>>>> Tim
>>>>
>

\start
Date: Mon, 09 Dec 2019 11:45:39 -0500
From: Camm Maguire <camm@maguirefamily.org>
To: Tim Daly <axiomcas@gmail.com>,camm@maguirefamily.org
Subject: Re: New Release

Congrats, Tim!

Take care,

Tim Daly <axiomcas@gmail.com> writes:

> The December release is up.
>
> The only significant change is new code in the Sane compiler
> (volume 15)
>
> Tim

-- 
Camm Maguire			     		    camm@maguirefamily.org

\start
Date: Wed, 11 Dec 2019 13:36:55 -0500
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>, Tim Daly <axiomcas@gmail.com>
Subject: Re: Axiom musings...

I've been reading Stephen Kell's (Univ of Kent
https://www.cs.kent.ac.uk/people/staff/srk21/) on
Seven deadly sins of talking about =E2=80=9Ctypes=E2=80=9D
https://www.cs.kent.ac.uk/people/staff/srk21//blog/2014/10/07/

He raised an interesting idea toward the end of the essay
that type-checking could be done outside the compiler.

I can see a way to do this in Axiom's Sane compiler.
It would be possible to run a program over the source code
to collect the information and write a stand-alone type
checker. This "unbundles" type checking and compiling.

Taken further I can think of several other kinds of checkers
(aka 'linters') that could be unbundled.

It is certainly something to explore.

Tim


On 12/8/19, Tim Daly <axiomcas@gmail.com> wrote:
> The Axiom Sane compiler is being "shaped by the hammer
> blows of reality", to coin a phrase.
>
> There are many goals. One of the primary goals is creating a
> compiler that can be understood, maintained, and modified.
>
> So the latest changes involved adding multiple index files.
> These are documentation (links to where terms are mentioned
> in the text), code (links to the implementation of things),
> error (links to where errors are defined), signatures (links to
> the signatures of lisp functions), figures (links to figures),
> and separate category, domain, and package indexes.
>
> The tikz package is now used to create "railroad diagrams"
> of syntax (ala, the PASCAL report). The implementation of
> those diagrams follows immediately. Collectively these will
> eventually define at least the syntax of the language. In the
> ideal, changing the diagram would change the code but I'm
> not that clever.
>
> Reality shows up with the curent constraint that the
> compiler should accept the current Spad language as
> closely as possible. Of course, plans are to include new
> constructs (e.g. hypothesis, axiom, specification, etc)
> but these are being postponed until "syntax complete".
>
> All parse information is stored in a parse object, which
> is a CLOS object (and therefore a Common Lisp type)
> Fields within the parse object, e.g. variables are also
> CLOS objects (and therefore a Common Lisp type).
> It's types all the way down.
>
> These types are being used as 'signatures' for the
> lisp functions. The goal is to be able to type-check the
> compiler implementation as well as the Sane language.
>
> The parser is designed to "wrap around" so that the
> user-level output of a parse should be the user-level
> input (albeit in a 'canonical" form). This "mirror effect"
> should make it easy to see that the parser properly
> parsed the user input.
>
> The parser is "first class" so it will be available at
> runtime as a domain allowing Spad code to construct
> Spad code.
>
> One plan, not near implementation, is to "unify" some
> CLOS types with the Axiom types (e.g. String). How
> this will happen is still in the land of design. This would
> "ground" Spad in lisp, making them co-equal.
>
> Making lisp "co-equal" is a feature, especially as Spad is
> really just a domain-specific language in lisp. Lisp
> functions (with CLOS types as signatures) would be
> avaiable for implementing Spad functions. This not
> only improves the efficiency, it would make the
> BLAS/LAPACK (see volume 10.5) code "native" to Axiom.
> .
> On the theory front I plan to attend the Formal Methods
> in Mathematics / Lean Together conference, mostly to
> know how little I know, especially that I need to know.
> http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/
>
> Tim
>
>
>
> On 11/28/19, Jacques Carette <carette@mcmaster.ca> wrote:
>> The underlying technology to use for building such an algebra library is
>> documented in the paper " Building on the Diamonds between Theories:
>> Theory Presentation Combinators"
>> http://www.cas.mcmaster.ca/~carette/publications/tpcj.pdf [which will
>> also be on the arxiv by Monday, and has been submitted to a journal].
>>
>> There is a rather full-fledged prototype, very well documented at
>> https://alhassy.github.io/next-700-module-systems/prototype/package-form=
er.html
>>
>> (source at https://github.com/alhassy/next-700-module-systems). It is
>> literate source.
>>
>> The old prototype was hard to find - it is now at
>> https://github.com/JacquesCarette/MathScheme.
>>
>> There is also a third prototype in the MMT system, but it does not quite
>> function properly today, it is under repair.
>>
>> The paper "A Language Feature to Unbundle Data at Will"
>> (https://alhassy.github.io/next-700-module-systems/papers/gpce19_a_langu=
age_feature_to_unbundle_data_at_will.pdf)
>>
>> is also relevant, as it solves a problem with parametrized theories
>> (parametrized Categories in Axiom terminology) that all current systems
>> suffer from.
>>
>> Jacques
>>
>> On 2019-11-27 11:47 p.m., Tim Daly wrote:
>>> The new Sane compiler is also being tested with the Fricas
>>> algebra code. The compiler knows about the language but
>>> does not depend on the algebra library (so far). It should be
>>> possible, by design, to load different algebra towers.
>>>
>>> In particular, one idea is to support the "tiny theories"
>>> algebra from Carette and Farmer. This would allow much
>>> finer grain separation of algebra and axioms.
>>>
>>> This "flexible algebra" design would allow things like the
>>> Lean theorem prover effort in a more natural style.
>>>
>>> Tim
>>>
>>>
>>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>>> The current design and code base (in bookvol15) supports
>>>> multiple back ends. One will clearly be a common lisp.
>>>>
>>>> Another possible design choice is to target the GNU
>>>> GCC intermediate representation, making Axiom "just
>>>> another front-end language" supported by GCC.
>>>>
>>>> The current intermediate representation does not (yet)
>>>> make any decision about the runtime implementation.
>>>>
>>>> Tim
>>>>
>>>>
>>>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>>>> Jason Gross and Adam Chlipala ("Parsing Parses") developed
>>>>> a dependently typed general parser for context free grammar
>>>>> in Coq.
>>>>>
>>>>> They used the parser to prove its own completeness.
>>>>>
>>>>> Unfortunately Spad is not a context-free grammar.
>>>>> But it is an intersting thought exercise to consider
>>>>> an "Axiom on Coq" implementation.
>>>>>
>>>>> Tim
>>>>>
>>
>

\start
Date: Sun, 15 Dec 2019 19:52:51 -0500
From: Tim Daly <axiomcas@gmail.com>
To: axiom-dev <axiom-developer@nongnu.org>, Tim Daly <axiomcas@gmail.com>
Subject: Re: Axiom musings...
Cc: Jacques Carette <carette@mcmaster.ca>,
 William Farmer <wmfarmer@mcmaster.ca>, 
 James Davenport <J.H.Davenport@bath.ac.uk>

Progress in happening on the new Sane Axiom compiler.

Recently I've been musing about methods to insert axioms
into categories so they could be inherited like signatures.
At the moment I've been thinking about adding axioms in
the same way that signatures are written, adding them to
the appropriate categories.

But this is an interesting design question.

Axiom already has a mechanism for inheriting signatures
from categories. That is, we can bet a plus signature from,
say, the Integer category.

Suppose we follow the same pattern. Currently Axiom
inherits certain so-called "attributes", such as ApproximateAttribute,
which implies that the results are only approximate.

We could adapt the same mechnaism to inherit the Transitive
property by defining it in its own category. In fact, if we
follow Carette and Farmer's "tiny theories" architecture,
where each property has its own inheritable category,
we can "mix and match" the axioms at will.

An "axiom" category would also export a function. This function
would essentially be a "tactic" used in a proof. It would modify
the proof step by applying the function to the step.

Theorems would have the same structure.

This allows theorems to be constructed at run time (since
Axiom supports "First Class Dynamic Types".

In addition, this design can be "pushed down" into the Spad
language so that Spad statements (e.g. assignment) had
proof-related properties. A range such as [1..10] would
provide explicit bounds in a proof "by language definition".
Defining the logical properties of language statements in
this way would make it easier to construct proofs since the
invariants would be partially constructed already.

This design merges the computer algebra inheritance
structure with the proof of algorithms structure, all under
the same mechanism.

Tim

On 12/11/19, Tim Daly <axiomcas@gmail.com> wrote:
> I've been reading Stephen Kell's (Univ of Kent
> https://www.cs.kent.ac.uk/people/staff/srk21/) on
> Seven deadly sins of talking about =E2=80=9Ctypes=E2=80=9D
> https://www.cs.kent.ac.uk/people/staff/srk21//blog/2014/10/07/
>
> He raised an interesting idea toward the end of the essay
> that type-checking could be done outside the compiler.
>
> I can see a way to do this in Axiom's Sane compiler.
> It would be possible to run a program over the source code
> to collect the information and write a stand-alone type
> checker. This "unbundles" type checking and compiling.
>
> Taken further I can think of several other kinds of checkers
> (aka 'linters') that could be unbundled.
>
> It is certainly something to explore.
>
> Tim
>
>
> On 12/8/19, Tim Daly <axiomcas@gmail.com> wrote:
>> The Axiom Sane compiler is being "shaped by the hammer
>> blows of reality", to coin a phrase.
>>
>> There are many goals. One of the primary goals is creating a
>> compiler that can be understood, maintained, and modified.
>>
>> So the latest changes involved adding multiple index files.
>> These are documentation (links to where terms are mentioned
>> in the text), code (links to the implementation of things),
>> error (links to where errors are defined), signatures (links to
>> the signatures of lisp functions), figures (links to figures),
>> and separate category, domain, and package indexes.
>>
>> The tikz package is now used to create "railroad diagrams"
>> of syntax (ala, the PASCAL report). The implementation of
>> those diagrams follows immediately. Collectively these will
>> eventually define at least the syntax of the language. In the
>> ideal, changing the diagram would change the code but I'm
>> not that clever.
>>
>> Reality shows up with the curent constraint that the
>> compiler should accept the current Spad language as
>> closely as possible. Of course, plans are to include new
>> constructs (e.g. hypothesis, axiom, specification, etc)
>> but these are being postponed until "syntax complete".
>>
>> All parse information is stored in a parse object, which
>> is a CLOS object (and therefore a Common Lisp type)
>> Fields within the parse object, e.g. variables are also
>> CLOS objects (and therefore a Common Lisp type).
>> It's types all the way down.
>>
>> These types are being used as 'signatures' for the
>> lisp functions. The goal is to be able to type-check the
>> compiler implementation as well as the Sane language.
>>
>> The parser is designed to "wrap around" so that the
>> user-level output of a parse should be the user-level
>> input (albeit in a 'canonical" form). This "mirror effect"
>> should make it easy to see that the parser properly
>> parsed the user input.
>>
>> The parser is "first class" so it will be available at
>> runtime as a domain allowing Spad code to construct
>> Spad code.
>>
>> One plan, not near implementation, is to "unify" some
>> CLOS types with the Axiom types (e.g. String). How
>> this will happen is still in the land of design. This would
>> "ground" Spad in lisp, making them co-equal.
>>
>> Making lisp "co-equal" is a feature, especially as Spad is
>> really just a domain-specific language in lisp. Lisp
>> functions (with CLOS types as signatures) would be
>> avaiable for implementing Spad functions. This not
>> only improves the efficiency, it would make the
>> BLAS/LAPACK (see volume 10.5) code "native" to Axiom.
>> .
>> On the theory front I plan to attend the Formal Methods
>> in Mathematics / Lean Together conference, mostly to
>> know how little I know, especially that I need to know.
>> http://www.andrew.cmu.edu/user/avigad/meetings/fomm2020/
>>
>> Tim
>>
>>
>>
>> On 11/28/19, Jacques Carette <carette@mcmaster.ca> wrote:
>>> The underlying technology to use for building such an algebra library i=
s
>>> documented in the paper " Building on the Diamonds between Theories:
>>> Theory Presentation Combinators"
>>> http://www.cas.mcmaster.ca/~carette/publications/tpcj.pdf [which will
>>> also be on the arxiv by Monday, and has been submitted to a journal].
>>>
>>> There is a rather full-fledged prototype, very well documented at
>>> https://alhassy.github.io/next-700-module-systems/prototype/package-for=
mer.html
>>>
>>> (source at https://github.com/alhassy/next-700-module-systems). It is
>>> literate source.
>>>
>>> The old prototype was hard to find - it is now at
>>> https://github.com/JacquesCarette/MathScheme.
>>>
>>> There is also a third prototype in the MMT system, but it does not quit=
e
>>> function properly today, it is under repair.
>>>
>>> The paper "A Language Feature to Unbundle Data at Will"
>>> (https://alhassy.github.io/next-700-module-systems/papers/gpce19_a_lang=
uage_feature_to_unbundle_data_at_will.pdf)
>>>
>>> is also relevant, as it solves a problem with parametrized theories
>>> (parametrized Categories in Axiom terminology) that all current systems
>>> suffer from.
>>>
>>> Jacques
>>>
>>> On 2019-11-27 11:47 p.m., Tim Daly wrote:
>>>> The new Sane compiler is also being tested with the Fricas
>>>> algebra code. The compiler knows about the language but
>>>> does not depend on the algebra library (so far). It should be
>>>> possible, by design, to load different algebra towers.
>>>>
>>>> In particular, one idea is to support the "tiny theories"
>>>> algebra from Carette and Farmer. This would allow much
>>>> finer grain separation of algebra and axioms.
>>>>
>>>> This "flexible algebra" design would allow things like the
>>>> Lean theorem prover effort in a more natural style.
>>>>
>>>> Tim
>>>>
>>>>
>>>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>>>> The current design and code base (in bookvol15) supports
>>>>> multiple back ends. One will clearly be a common lisp.
>>>>>
>>>>> Another possible design choice is to target the GNU
>>>>> GCC intermediate representation, making Axiom "just
>>>>> another front-end language" supported by GCC.
>>>>>
>>>>> The current intermediate representation does not (yet)
>>>>> make any decision about the runtime implementation.
>>>>>
>>>>> Tim
>>>>>
>>>>>
>>>>> On 11/26/19, Tim Daly <axiomcas@gmail.com> wrote:
>>>>>> Jason Gross and Adam Chlipala ("Parsing Parses") developed
>>>>>> a dependently typed general parser for context free grammar
>>>>>> in Coq.
>>>>>>
>>>>>> They used the parser to prove its own completeness.
>>>>>>
>>>>>> Unfortunately Spad is not a context-free grammar.
>>>>>> But it is an intersting thought exercise to consider
>>>>>> an "Axiom on Coq" implementation.
>>>>>>
>>>>>> Tim

\start
Date: Mon, 16 Dec 2019 11:31:15 +0000
From: Martin Baker <ax87438@martinb.com>
To: axiom-developer@nongnu.org
Subject: Re: Axiom musings...

Tim,

Would this also be compatible with 'propositions as types' as in Idris 
and various proof assistants? That is, could you have both Curry–Howard 
and Carette-Farmer?

I ask this because types (and constructors for types) could also be 
inherited by categories in the way you describe. So an equation (axiom 
or identity) like a=a+0 has a constructor, Refl, if true which can be 
inherited.

Or do you see computer algebra/deduction/proof programs forking into 
constructive or axiomatic approaches?

Martin

On 16/12/2019 00:52, Tim Daly wrote:
> Progress in happening on the new Sane Axiom compiler.
> 
> Recently I've been musing about methods to insert axioms
> into categories so they could be inherited like signatures.
> At the moment I've been thinking about adding axioms in
> the same way that signatures are written, adding them to
> the appropriate categories.
> 
> But this is an interesting design question.
> 
> Axiom already has a mechanism for inheriting signatures
> from categories. That is, we can bet a plus signature from,
> say, the Integer category.
> 
> Suppose we follow the same pattern. Currently Axiom
> inherits certain so-called "attributes", such as ApproximateAttribute,
> which implies that the results are only approximate.
> 
> We could adapt the same mechnaism to inherit the Transitive
> property by defining it in its own category. In fact, if we
> follow Carette and Farmer's "tiny theories" architecture,
> where each property has its own inheritable category,
> we can "mix and match" the axioms at will.
> 
> An "axiom" category would also export a function. This function
> would essentially be a "tactic" used in a proof. It would modify
> the proof step by applying the function to the step.
> 
> Theorems would have the same structure.
> 
> This allows theorems to be constructed at run time (since
> Axiom supports "First Class Dynamic Types".
> 
> In addition, this design can be "pushed down" into the Spad
> language so that Spad statements (e.g. assignment) had
> proof-related properties. A range such as [1..10] would
> provide explicit bounds in a proof "by language definition".
> Defining the logical properties of language statements in
> this way would make it easier to construct proofs since the
> invariants would be partially constructed already.
> 
> This design merges the computer algebra inheritance
> structure with the proof of algorithms structure, all under
> the same mechanism.
> 
> Tim

\start
Date: Sat, 21 Dec 2019 09:56:31 -0500
From: Camm Maguire <camm@maguirefamily.org>
To: Tim Daly <axiomcas@gmail.com>
Subject: Re: New Release

Greetings!  Are you still releasing here:

http://axiom.axiom-developer.org/axiom-website/download.html

20170501 still appears to be the latest.

Take care,

Tim Daly <axiomcas@gmail.com> writes:

> The December release is up.
>
> The only significant change is new code in the Sane compiler
> (volume 15)
>
> Tim

-- 
Camm Maguire			     		    camm@maguirefamily.org


\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
