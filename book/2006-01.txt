\documentclass{book}
%\newcommand{\VolumeName}{Volume 2: Axiom Users Guide}
%\input{bookheader.tex}
\pagenumbering{arabic}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\usepackage{makeidx}
\makeindex
\begin{document}
\begin{verbatim}
\start
Date: Sun, 01 Jan 2006 18:02:29 -0600
From: MathAction (unknown)
To: MathAction
Subject: [TeX] 

\begin{equation}
\int\limits_{-\infty}^{\infty}{e^{x^2}\ dx}
\end{equation}

\start
Date: Sun, 1 Jan 2006 20:25:53 -0500
From: Tim Daly
To: Bill Page
Subject: findSpadFiles problem

Bill,

I'm building Axiom for another release and I've discovered a problem
that needs to be fixed. The findSpadFiles routine in the
src/algebra/Makefile.pamphlet file is generating duplicate targets
resulting in the error messages:

Makefile: NNNN: warning: ignoring old commands for target `.....`

after investigating the problem it appears that there is a built-in
assumption that the chunk names are unique. However, a document style
I use has violated that. This is the first time I've used it in the
algebra so it never happened before. 

In noweb you can say


mumble, mumble, ...
<<foo>>=
  chunk, 
  chunk
@

more words
 
<<foo>>=
  continued chunk
@

etc. That is, you can insert documentation inline in a chunk by 
just using the same chunkname. The second chunk gets concatenated
with the first. In src/algebra/combfunc.spad.pamphlet I've done:

<<package COMBF CominatorialFunction>>=
 .....
@
words to explain the change
<<package COMBF CominatorialFunction>>=
 .....
@

The findSpadFiles stanza reads:


egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | \
awk -F: '{
  chunk=substr($2,3,length($2)-5);
  split(chunk,part," ");
  spadfile="\${MID}/"part[2]".spad";
  print spadfile": \${IN}/"$1;
  print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
  print "";
}'

and I'm tempted to rewrite it to include a call to 'uniq' thus:


egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | uniq | \
awk -F: '{
  chunk=substr($2,3,length($2)-5);
  split(chunk,part," ");
  spadfile="\${MID}/"part[2]".spad";
  print spadfile": \${IN}/"$1;
  print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
  print "";
}'

\start
Date: Sun, 1 Jan 2006 21:13:54 -0500
From: Bill Page
To: Tim Daly
Subject: RE: findSpadFiles problem

Tim,

I think your analysis and suggested change is correct.

And Happy New Year!

> -----Original Message-----
> 
> Bill,
> 
> I'm building Axiom for another release and I've discovered a problem
> that needs to be fixed. The findSpadFiles routine in the
> src/algebra/Makefile.pamphlet file is generating duplicate targets
> resulting in the error messages:
> 
> Makefile: NNNN: warning: ignoring old commands for target `.....`
> 
> after investigating the problem it appears that there is a built-in
> assumption that the chunk names are unique. However, a document style
> I use has violated that. This is the first time I've used it in the
> algebra so it never happened before. 
> 
> In noweb you can say
> 
> 
> mumble, mumble, ...
> <<foo>>=
>   chunk, 
>   chunk
> @
> 
> more words
>  
> <<foo>>=
>   continued chunk
> @
> 
> etc. That is, you can insert documentation inline in a chunk by 
> just using the same chunkname. The second chunk gets concatenated
> with the first. In src/algebra/combfunc.spad.pamphlet I've done:
> 
> <<package COMBF CominatorialFunction>>=
>  .....
> @
> words to explain the change
> <<package COMBF CominatorialFunction>>=
>  .....
> @
> 
> The findSpadFiles stanza reads:
> 
> 
> egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | \
> awk -F: '{
>   chunk=substr($2,3,length($2)-5);
>   split(chunk,part," ");
>   spadfile="\${MID}/"part[2]".spad";
>   print spadfile": \${IN}/"$1;
>   print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
>   print "";
> }'
> 
> and I'm tempted to rewrite it to include a call to 'uniq' thus:
> 
> 
> egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | uniq | \
> awk -F: '{
>   chunk=substr($2,3,length($2)-5);
>   split(chunk,part," ");
>   spadfile="\${MID}/"part[2]".spad";
>   print spadfile": \${IN}/"$1;
>   print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
>   print "";
> }'

\start
Date: Mon, 2 Jan 2006 19:21:22 -0500
From: Tim Daly
To: list
Subject: --patch-47

Patch-47 is up. The primary changes are:

the axiom tutorial book was published at lulu.com (ISBN 1-4116-6597-X)
src/doc contains both the tex source and a pdf of the axiom tutorial book.
it should be available on amazon in about 8 weeks.

changes for the mac version were back-ported.
the mac port still does not work.

cleanup and documentation changes.

i'll be away until the 15th. 

t

=========================================================================


20060102 tpd src/interp/Makefile cp, don't mv bookvol5.dvi
20060102 tpd src/hyper/initx.c comment out rgbdef in initializeWindowSystem
20060102 tpd src/include/spadclient.H1 void main -> int main
20060102 tpd src/include/session.H1 void main -> int main
20060101 tpd src/hyper/spadint.c rewrite ambiguous code
20060101 tpd src/hyper/parse_types.c #include "hterror.h"
20060101 tpd src/hyper/Makefile make parse_types.c depend on hterror.h
20060101 tpd src/hyper/item.c init prev in copy_item_stack
20060101 tpd src/hyper/initx.c init rgbdef in initializeWindowSystem
20060101 tpd src/hyper/htinp.c init file, pfile in make_input_file_from_page
20060101 tpd src/hyper/group.c initialize newgp, prev in copy_group_stack()
20060101 tpd src/hyper/dialog.c initialize line
20060101 tpd src/sman/spadclient.c void main -> int main
20060101 tpd src/sman/session.c void main -> int main
20060101 tpd src/graph/viewAlone/spoon2D.c add missing printf argument
20060101 tpd src/graph/view3d/viewport3d.c #include <stdlib.h>
20060101 tpd src/graph/view3D/surface3d.c initialize tempQuick
20060101 tpd src/graph/view3D/smoothShade3d.c rewrite ambiguous code
20060101 tpd src/graph/view3D/project3d.c initialize x0, y0, xA, yA, xB, yB
20060101 tpd src/graph/view3D/process3d.c initialize changingColor = yes
20060101 tpd src/graph/view3D/process3d.c initialize first_time = yes
20060101 tpd src/graph/view3D/main3d.c void main -> int main
20060101 tpd src/graph/include/main3d.H1 void main -> int main
20060101 tpd src/algebra/Makefile add uniq to findSpadFiles
20060101 tpd src/algebra/Makefile add uniq to findBootstrapFiles
20060101 tpd src/interp/Makefile fix sense of -z test for NOISE
20060101 tpd src/interp/Makefile fix echo on parse.clisp
20051227 tpd bookvol1 version 2 with ISBN 1-4116-6597-X published by lulu.com
20051214 tpd src/doc/bookvol5 fix |getEnv| for debugsys
20051211 tpd src/doc/Makefile bookvol1 added
20051211 tpd src/doc/ps/bookvol1*.ps added
20051211 tpd src/doc/bookvol1.pamphlet added
20051211 tpd src/doc/bookvol1.pdf added
20051211 tpd bookvol1 version 2 published by lulu.com
20051210 cxm FAQ update FAQ 37 with more SELinux fixes
20051209 wsp src/doc/endpaper add hyperref options
20051209 tpd src/doc/Makefile add endpaper.dvi target
20051208 tpd src/interp/setq.lisp Jocelyn Guidry <guidryjocelyn@sbcglobal.net>
20051208 tpd README add Jocelyn Guidry <guidryjocelyn@sbcglobal.net>
20051207 tpd src/doc/endpaper added hyperlinks
20051206 tpd src/interp/sys-pkg.lisp document package usage
20051204 tpd FAQ 39: How can I access lisp code from the Axiom command line?
20051201 tpd bookvol1 published by lulu.com
20051129 tpd src/interp/setq.lisp add Ralf Hemmecke
20051129 tpd README add Ralf Hemmecke
20051129 tpd src/interp/setq.lisp add Clifford Yapp <smustudent@yahoo.com>
20051129 tpd README add Clifford Yapp <smustudent@yahoo.com>
20051126 tpd Makefile change gawk to awk in top level Makefile for MACOSX
20051107 tpd FAQ 38: How can I debug algebra code?
20051206 tpd Makefile change MACOSX to use GCLOPTS-CUSTRELOC
20051204 tpd src/lib/cfuns-c.c include /usr/include/unistd.h not <unistd.h>
20051204 tpd src/lib/wtc.c include /usr/include/time.h instead of <time.h>
20051204 tpd src/lib/wtc.c include /usr/include/unistd.h instead of <unistd.h>
20051204 tpd src/lib/util.c include /usr/include/unistd.h instead of <unistd.h>
20051204 tpd src/lib/spadcolors.c rewrite AllocCells to request pixel values
20051204 tpd src/lib/spadcolors.c initialize rgb values
20051204 tpd src/lib/sockio-c.c include /usr/include/signal.h not <signal.h>
20051204 tpd src/lib/sockio-c.c include /usr/include/unistd.h not <unistd.h>
20051204 tpd src/lib/fnct_key.c include /usr/include/unistd.h not <unistd.h>
20051204 tpd src/lib/edin.c include /usr/include/unistd.h not <unistd.h>
20051204 tpd src/lib/bsdsignal.c include /usr/include/signal.h not <signal.h>
20051104 tpd FAQ update FAQ 19 with |pf2Sex|
20051031 tpd src/interp/bookvol5 allocate-contiguous-pages (cpages 3000)
20051030 tpd FAQ add FAQ 37: Axiom won't build on FC4
20051030 tpd FAQ add FAQ 36: Axiom won't build on FC3

\start
Date: Mon, 02 Jan 2006 18:08:48 +0100
From: Ralf Hemmecke
To: Tim Daly
Subject: Re: findSpadFiles problem

Happy New Year...

On 01/02/2006 02:25 AM, root wrote:
> Bill,
> 
> I'm building Axiom for another release and I've discovered a problem
> that needs to be fixed. The findSpadFiles routine in the
> src/algebra/Makefile.pamphlet file is generating duplicate targets
> resulting in the error messages:
> 
> Makefile: NNNN: warning: ignoring old commands for target `.....`
> 
> after investigating the problem it appears that there is a built-in
> assumption that the chunk names are unique. However, a document style
> I use has violated that. This is the first time I've used it in the
> algebra so it never happened before. 
> 
> In noweb you can say
> 
> 
> mumble, mumble, ...
> <<foo>>=
>   chunk, 
>   chunk
> @
> 
> more words
>  
> <<foo>>=
>   continued chunk
> @
> 
> etc. That is, you can insert documentation inline in a chunk by 
> just using the same chunkname. The second chunk gets concatenated
> with the first. In src/algebra/combfunc.spad.pamphlet I've done:
> 
> <<package COMBF CominatorialFunction>>=
>  .....
> @
> words to explain the change
> <<package COMBF CominatorialFunction>>=
>  .....
> @
> 
> The findSpadFiles stanza reads:
> 
> 
> egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | \
> awk -F: '{
>   chunk=substr($2,3,length($2)-5);
>   split(chunk,part," ");
>   spadfile="\${MID}/"part[2]".spad";
>   print spadfile": \${IN}/"$1;
>   print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
>   print "";
> }'
> 
> and I'm tempted to rewrite it to include a call to 'uniq' thus:
> 
> 
> egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | uniq | \
> awk -F: '{
>   chunk=substr($2,3,length($2)-5);
>   split(chunk,part," ");
>   spadfile="\${MID}/"part[2]".spad";
>   print spadfile": \${IN}/"$1;
>   print "\t@\${TANGLE} -R\""chunk"\" \${IN}/"$1">"spadfile;
>   print "";
> }'
> 
> Comments?

Yes. If you have a file

--begin aaa.txt
abc
def
abc
abc
def
--end aaa.txt

cat aaa.txt | uniq
gives
abc
def
abc
def

Only cat aaa.txt | sort | uniq
results in

abc
def

Ralf

\start
Date: 03 Jan 2006 12:48:58 +0100
From: Martin Rubey
To: Tim Daly
Subject: Re: Axiom Volume 1: Tutorial

Tim Daly writes:

> There is a new book "Axiom Volume 1: Tutorial" ISBN 1-4116-6597-X
> 
> It was printed and approved today.

Sorry that this comes to late, but 

  For example, Axiom's integrator gives you the answer when an answer
  exists. If one does not, it provides a proof that there is no answer.

on page 2 is simply wrong. (Apart from containing a typo) Even if read as 

  For example, Axiom's integrator gives you the answer when an answer in terms
  of elementary functions exists. If one does not, it provides a proof that
  there is no answer.

it is not true. The Risch algorithm is *not* completely implemented in Axiom,
unfortunately. It might be more complete than the ones in MMA and Maple, I
doubt that it's better than MuPAD, but boasting that it is complete is unwise,
I'm afraid.

\start
Date: Tue, 3 Jan 2006 03:39:29 +0100 (CET)
From: Waldek Hebisch
To: list
Subject: Re: Integral challenge

Bob McElrath wrote:
> So, any integral experts want to take a crack at it?  In the problem I
> am interested in, a is real and a>0, b is real and 0 <= b <= 1, and I
> need the integral over theta=0..2*Pi, in case the definite integral is
> easier.
> 
> (3) -> integrate(exp(-a*sqrt(1-b*cos(theta))), theta)
>  3) ->
>    >> Error detected within library code:
>   Function not supported by Risch d.e.
<snip>
> But, I'm surprised to find that such a simple integral has no known
> solution.

>From Axiom point of view your function is very complicated: you have
a transcendental function, that is "cos(theta)" and then you make
an algebraic extension ("sqrt(1-b*cos(theta))") and finally you
again make a transcendental extension. 

There is a calculs-102 method to simplify your integral: take x = cos(theta).
Then we get a new integral:

integrate(exp(-a*sqrt(1-b*x))/sqrt(1 - x*x), x)

Now we have a transcendental extension of an algebraic extension. On this
one Axiom just runs out of memory. However this one is still pretty
complicated since we have an algebraic function in the exponent. So
put z = sqrt(1-b*x). Now we get:

integrate(z*exp(-a*z)/sqrt(1 - ((1 - z^2)/b)^2), z)

which Axiom returns unevaluated. AFAIU that means that Axiom proved
that the function have no elementary integral. 

One way to handle the integral above would be to expand exponential
into Taylor series. Then we will get a sequence of integrals like

integrate(z^k/sqrt(1 - ((1 - z^2)/b)^2), z)

Those are elliptic integrals, typically non-elementary. Since thay have
a common irrational part one can reduce then to a couple of base
cases. Of course, the tricky part is that we have coefficients and
we want to sum the whole thing. I did not try to do reductions (going
from general k tobase case) but since the reductions work in recursive
way the coefficients will be like hypergeometric progression. So
The result seem to be a sum of products of elliptic functions with
some kind of very general hypergeometric functions.

I doubt that one can get more explicit description. OTOH miracles do
happen and due to some strange coincidence the integral may be equal
to something simpler (after all, Axiom got stuck on original integral
in it search for miracles).

\start
Date: Tue, 3 Jan 2006 10:54:56 -0500
From: Bill Page
To: Tim Daly
Subject: RE: findSpadFiles problem

On January 2, 2006 12:09 PM Ralf Hemmecke wrote:
> Tim Daly wrote:
> >
> > and I'm tempted to rewrite it to include a call to 'uniq' thus:
> >
> > egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | uniq =
| \
> ...
> Only cat aaa.txt | sort | uniq
> ...

Of course Ralf is correct. That should read:

egrep '@<<(domain|package|category) .*>>=' *.spad.pamphlet | sort | =
uniq | \

\start
Date: Tue, 03 Jan 2006 11:30:37 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#240 another 'limit' failure] (new) 

\begin{axiom}
  limit(sin(x)-sin(x-1/x),x=%plusInfinity)
\end{axiom}

should be zero...

\start
Date: Tue, 03 Jan 2006 12:46:22 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#243 TeX output broken on factor(15)] (new) TeX output broken on factor(15)

Update of bug #5786 (project axiom):

         Reproducibility:                    None => Every Time             


    _______________________________________________________

\start
Date: Tue, 03 Jan 2006 12:47:17 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#244 partialFraction((2*x^3)::UP(x, FRAC INT), (1-x^2)) is not correctly expanded] (new) 

Update of bug #5785 (project axiom):

         Reproducibility:                    None => Every Time             
    _______________________________________________________

\start
Date: Tue, 03 Jan 2006 12:47:45 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#245 incorrect TeX output from radix()] (new)

Update of bug #5614 (project axiom):

             Assigned to:               billpage1 => None                   

\start
Date: Tue, 03 Jan 2006 12:48:26 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#246 Lisp system should handle unlimited number of arguments] (new)

Update of bug #4585 (project axiom):

         Reproducibility:                    None => Every Time             

\start
Date: Wed, 4 Jan 2006 10:04:58 -0500
From: Bill Page
To: Martin Rubey
Subject: Axiom' integrator (was: Axiom Volume 1: Tutorial)

Martin,

On January 3, 2006 6:49 AM you wrote:
>...
>   "... Axiom's integrator gives you the answer when an answer
>   exists. If one does not, it provides a proof that there is
>   no answer."
>
> on page 2 is simply wrong. (Apart from containing a typo).

Rather than just state that there is a typo: please, please
state exactly the error and the correction. Or better yet
include a 'diff -au' patch to correct the error.

> Even if read as
>
>   ... Axiom's integrator gives you the answer when an answer
>   in terms of elementary functions exists. If one does not,
>   it provides a proof that there is no answer.
>
> it is not true. The Risch algorithm is *not* completely
> implemented in Axiom, unfortunately.

If, we can finish the implementation of this algorithm in Axiom,
then would your re-worded statement above be correct?

Of course we are really talking about "anti-derivatives", not
integration as such. Manuel Bronstein has written extensively
about this:

http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications/issac98.pdf
http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications

So what "elementary functions" are being considered by Axiom's
algorithm? E.g. addition, division, exponents, logarithms,
multiplication, polynomials, radicals, rationals, subtraction,
and trigonometric expressions such as suggested here:

Eric W. Weisstein. "Elementary Function." From MathWorld--A Wolfram
Web Resource. http://mathworld.wolfram.com/ElementaryFunction.html

Or should we be talking about "closed forms" as in the reference:

http://arxiv.org/abs/math.NT/9805045?front

Date: Fri, 8 May 1998 22:49:15 GMT   (12kb)

What is a closed-form number?
Authors: Timothy Y. Chow
Comments: 11 pages; submitted to Amer. Math. Monthly

If a student asks for an antiderivative of exp(x^2), there is a
standard reply: the answer is not an elementary function. But if
a student asks for a closed-form expression for the real root of
x = cos(x), there is no standard reply. We propose a definition
of a closed-form expression for a number (as opposed to a *function*)
that we hope will become standard. With our definition, the question
of whether the root of x = cos(x) has a closed form is, perhaps
surprisingly, still open. We show that Schanuel's conjecture in
transcendental number theory resolves questions like this, and we
also sketch some connections with Tarski's problem of the decidability
of the first-order theory of the reals with exponentiation. Many
(hopefully accessible) open problems are described. 

--------

Or some other definition such as:

http://en.wikipedia.org/wiki/List_of_functions#Elementary_functions

> It might be more complete than the ones in MMA and Maple, I doubt
> that it's better than MuPAD, but boasting that it is complete is
> unwise, I'm afraid.

Since it was obviously the intention of the author of Axiom's
integration algorithm that it completely implement the Risch
algorithm and in spite of:

http://mathworld.wolfram.com/RischAlgorithm.html

"The case of algebraic extensions is quite complicated and is
therefore not completely implemented in any computer algebra
system."

http://en.wikipedia.org/wiki/Risch_algorithm

"The Risch decision procedure is not formally an algorithm because
it requires an oracle that decides whether a constant expression
is zero, a problem shown by Daniel Richardson to be undecidable.
Transforming the Risch decision procedure into an algorithm that
can be executed by a computer is a complex task that requires the
use of heuristics and many refinements."

-------

What are the prospects for actually completing this programme in
Axiom rather than "correcting" the documentation? So far we have
documented the following cases:

http://wiki.axiom-developer.org/198IntegrateSinX2XIsNotHandled

http://wiki.axiom-developer.org/199IntegrateExpX2ExpXXX

and the Risch algorithm is mentioned in the following places in
the current Axiom source:

http://wiki.axiom-developer.org/axiom--test--1/src/algebra/EfstrucSpad
http://wiki.axiom-developer.org/axiom--test--1/src/algebra/IntafSpad
http://wiki.axiom-developer.org/axiom--test--1/src/algebra/IntefSpad
http://wiki.axiom-developer.org/axiom--test--1/src/algebra/IntrfSpad

And we also have Manuel Bronstein's work on

http://www-sop.inria.fr/cafe/Manuel.Bronstein/pmint/index.html

pmint - The Poor Man's Integrator

pmint is a very short (95 lines) Maple program for integrating
transcendental elementary or special functions. It is based on recent
improvements to a powerful heuristic called parallel integration.
While it is not meant to be as complete as the large commercial
integrators based on the Risch algorithm, its very small size makes
it easy to port to any computer algebra system or library capable of
factoring multivariate polynomials. Because it is applicable to special
functions (such as Airy, Bessel, Whittaker, Lambert), it is able to
compute integrals not handled by the existing integrators.

pmint is not meant as a replacement for existing integrators, but either
as an extension, or as a cheap and powerful alternative for any computer
algebra project. 

-------

It would be wonderful to have this available in Axiom.

\start
Date: 04 Jan 2006 18:18:31 +0100
From: Martin Rubey
To: Bill Page
Subject: Re: Axiom' integrator (was: Axiom Volume 1: Tutorial)

Dear Bill,

> Martin,
> 
> On January 3, 2006 6:49 AM you wrote:
> >...
> >   "... Axiom's integrator gives you the answer when an answer
> >   exists. If one does not, it provides a proof that there is
> >   no answer."
> >
> > on page 2 is simply wrong. (Apart from containing a typo).
> 
> Rather than just state that there is a typo: please, please
> state exactly the error and the correction. 

You're right. In fact, I realize now that there is no typo. I thought that

 "If one does not, " ...

should read

 "If it does not, " ...

but I suppose that the above version is correct English, too. Sorry.

> > Even if read as

> >   ... Axiom's integrator gives you the answer when an answer in terms of
> >   elementary functions exists. If one does not, it provides a proof that
> >   there is no answer.

> > it is not true. The Risch algorithm is not completely implemented in Axiom,
> > unfortunately.

Well. I should have been more careful in my wording: I doubt that the Risch
algorithm is completely implemented in Axiom. I should also have added what you
cited from wikipedia:

> http://en.wikipedia.org/wiki/Risch_algorithm

> "The Risch decision procedure is not formally an algorithm because it
> requires an oracle that decides whether a constant expression is zero, a
> problem shown by Daniel Richardson to be undecidable.

Therefore, the answer to

> If, we can finish the implementation of this algorithm in Axiom,
> then would your re-worded statement above be correct?

is no. Furthermore, Axiom only returns "failed" if the Risch procedure didn't
succeed, which constitutes hardly a proof...

Still, it would be great if we could complete the implementation of the Risch
"algorithm". (Or find out that it is completely implemented anyway.)

> So what "elementary functions" are being considered by Axiom's algorithm?
> E.g. addition, division, exponents, logarithms, multiplication, polynomials,
> radicals, rationals, subtraction, and trigonometric expressions

yes.

> Since it was obviously the intention of the author of Axiom's integration
> algorithm that it completely implement the Risch algorithm and in spite of:
> 
> http://mathworld.wolfram.com/RischAlgorithm.html
 
> "The case of algebraic extensions is quite complicated and is therefore not
> completely implemented in any computer algebra system."
 
> What are the prospects for actually completing this programme in Axiom rather
> than "correcting" the documentation? 

Well, hopefully SumIt will become open source some time -- they
promised. Renaud Rioboo told me that the integrator in SumIt *might* be an
updated version of Axioms integrator... The person in charge with open-sourcing
Manuels code is Stephen Dalmas, I was told. However, he did not respond to my
queries. I don't know why we are so unlucky regarding these Aldor related
things.

> So far we have documented the following cases:
 
> http://wiki.axiom-developer.org/198IntegrateSinX2XIsNotHandled
> 
> http://wiki.axiom-developer.org/199IntegrateExpX2ExpXXX

Both of these are unrelated to the Risch procedure, since the results are not
elementary.

However, INTALG in intalg.spad knows the following errors:

  FAIL0 ==> error "integrate: implementation incomplete (constant residues)"
  FAIL1==> error "integrate: implementation incomplete (non-algebraic
  residues)"
  FAIL2 ==> error "integrate: implementation incomplete (residue poly has
  multiple non-linear factors)"
  FAIL3 ==> error "integrate: implementation incomplete (has polynomial part)"

At least FAIL0 does occur:

http://wiki.axiom-developer.org/SymbolicIntegration

However, I do not know whether the integrals are doable by Risch -- I doubt
that they are. Maybe Richard Fateman can help here. He might also know how to
find out whether the Risch algorithm is completely implemented.

> And we also have Manuel Bronstein's work on
> pmint - The Poor Man's Integrator
 
> It would be wonderful to have this available in Axiom.

Yes. Although the implementation of the Risch algorithm in Axiom seems pretty
good, Axiom's integrator is quite weak in pattern matching and integration of
special functions and the like. So it would be nice to do some work here. If
you have too much spare time, maybe you could try to understand what pmint
does? (Do you have Maple available?)

HOWEVER: I am not an integration expert, and I guess that I would waste my time
trying to work on all parts of Axiom. I think we should rather hire an
integration expert :-)

Martin

PS: Google came up with the following by Bronstein himself, confirming that
there are unimplemented branches. This should go into the documentation, I
suppose:

http://groups.google.com/group/sci.math.symbolic/browse_frm/thread/61795a53c580d892

There is also 

http://www.math.univ-montp2.fr/FODESIT/SemJuin2004/Bronstein/bronstein.pdf

which might shed some light on the subject.

\start
Date: Wed, 4 Jan 2006 16:38:35 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Doyen

Jose,

On January 4, 2006 3:19 PM you wrote:
> ...
> >     * Module Products.LatexWiki.pamphletWrapper, line 29, in =
renderPDF
> >       NameError
> ...

Line 29 of pamphletWrapper.py is:
...
class LatexSyntaxError(Exception): pass
class NowebError(Exception): pass            <-------- compare
class DviPdfError(Exception): pass
class DviPngError(Exception): pass

def log(message,summary='',severity=0):
        zLOG.LOG('LatexWikiDebugLog',severity,summary,message)

def renderPDF(fDir,fName):
    """ render body source as PDF.
    """
    os.system("cd '%s'; rm -f '%s.pdf' '%s.ps' '%s.dvi' '%s.tex'"%(
      fDir,fName,fName,fName,fName))
    errors = ""
    try:
       runNoweb(fDir,fName)
    except NowebSyntaxError, data:            <--------- Line 29
       errors = str(data)
       log(errors, 'NowebSyntaxError')
       return escape(errors)

--------

This *is* an error in the source code. It should be:

    except NowebError, data:

In my tests this exception never tripped so I did not find
the error earlier. You should correct this in your version of
the code (I will correct it in on MathAction.). You should
also check to find the reason why the runNoweb call is causing
the exception. One possible reason is that your path to notangle
might be different. The command line for notangle in runNoweb
is at Line 102:

cmdLine =
  "cd '%s'; /usr/local/axiom/mnt/linux/bin/lib/noweave -delay =
'%s.pamphlet'"

which of course is specific to the installation of Axiom on
the axiom-developer.org server. You will have to change this
and other similar local references.

Let me know if this helps.

Regards,
Bill Page.

PS. Please note that the email address for the axiom-developer
list is: list

> -----Original Message-----
> From: Alfredo Portes [mailto:Alfredo Portes]
> Sent: January 4, 2006 3:19 PM
> To: Bill Page; axiom-developer-request@nongnu.org
> Subject: Doyen
>
>
> Hi Mr. Page,
>
> I am currently working in having the pamphlet file support in the
> Doyen LatexWiki. I downloaded the recent version that you told me. I a
> currently getting this error when
> trying to add a pamphlet file:
> =09
> Site Error
>
> An error was encountered while publishing this resource.
>
> NameError
> Sorry, a site error occurred.
>
> Traceback (innermost last):
>
>     * Module ZPublisher.Publish, line 187, in publish_module_standard
>     * Module ZPublisher.Publish, line 144, in publish
>     * Module Zope2.App.startup, line 199, in zpublisher_exception_hook
>     * Module ZPublisher.Publish, line 113, in publish
>     * Module ZPublisher.mapply, line 88, in mapply
>     * Module ZPublisher.Publish, line 40, in call_object
>     * Module Products.ZWiki.Editing, line 261, in edit
>     * Module Products.ZWiki.Editing, line 84, in create
>     * Module Products.ZWiki.Editing, line 757, in setText
>     * Module Products.ZWiki.ZWikiPage, line 260, in preRender
>     * Module Products.LatexWiki, line 129, in preRender
>     * Module Products.LatexWiki.ReplacePamphlet, line 53, in
> replacePamphlet
>     * Module Products.LatexWiki.pamphletWrapper, line 29, in renderPDF
>
> NameError
>
> --------------------------------------------------------------
> ----------------------------------------------------
>
> I will appreciate any help you can give me. Let me know if you need
> more information.
> I opted to just start a fresh installation, with the
> latexwiki and zwiki from:
>
> http://wiki.axiom-developer.org/MathActionRepository

\start
Date: Wed, 04 Jan 2006 17:00:02 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [DoyenCD] 


--

??changed:
-wget ftp://ftp.sylvan.com/pub/noweb/noweb-2.10a-1.i386.rpm
-
-wget ftp://ftp.sylvan.com/pub/noweb/Icon2-9.3.2-7.i386.rpm
wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/noweb-2.8a-4.i386.rpm

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/Icon2-9.3.2-7.i386.rpm

??changed:
-rpm -ivh noweb-2.10a-1.i386.rpm
rpm -ivh noweb-2.8a-4.i386.rpm

??changed:
-wget ftp://rpmfind.net/linux/fedora/extras/3/i386/python-imaging-1.1.4-7.i386.rpm
-
-wget ftp://rpmfind.net/linux/fedora/extras/3/i386/zope-2.8.0-2.fc3.i386.rpm
-
-wget http://zwiki.org/releases/ZWiki-0.43.0.tgz
wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/python-imaging-1.1.4-7.i386.rpm

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/zope-2.8.0-2.fc3.i386.rpm

??changed:
-Add Zwiki to Zope server.
Configure root user for access to the Zope server.

??changed:
-tar -xzf ZWiki-0.43.0.tgz -C /usr/lib/zope/lib/python/Products/
/usr/bin/zopectl adduser root doyen@org

??changed:
-Configure root user for Zwiki access.
\subsubsection{Axiom}

Download the Axiom software package from axiom.developer server.

??changed:
-/usr/bin/zopectl adduser root doyen@org
wget http://axiom.axiom-developer.org/axiom-website/DOWNLOADS/axiom-Feb2005-Fedora3-bin.tgz

tar -xzf axiom-Feb2005-Fedora3-bin.tgz -C /etc/

??changed:
-Test and deploy Zwiki server.
In order to use Axiom, you  must include Axiom in the user path. Open the Vi editor and edit the .bash\_profile file in the root directory and the doyen user home directory with the next set of changes. You can also copy the .bash\_profile provided in the appendix of this document into the /root and /home/doyen directories.

<<edit>>=

vi ~/.bash_profile
export AXIOM=/etc/axiom/mnt/fedora3
PATH=$PATH:$HOME/bin:$AXIOM/bin

@

Activate the changes to the current session.

<<edit>>=

source ~/.bash_profile

@

\subsubsection{LatexWiki}

Download the LatexWiki package from mcelrath.org webpage. LatexWiki is a patch to the ZWiki package that allows rendering of in-line Latex.

++added:
cd /tmp/pkgs

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/LocalFS-1.3-andreas.tar.gz

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/latexwiki.tar.gz

@

Unpack the LatexWiki distribution into the Zope installation's Products directory.

<<step>>=

tar -xzf LocalFS-1.3-andreas.tar.gz -C /usr/lib/zope/lib/python/Products/


tar -xzf latexwiki.tar.gz -C /usr/lib/zope/lib/python/Products/

@

Test and deploy Zope server.
                                                                                
<<step>>=
                                                                                

??changed:
-
                                                                                

??changed:
-\subsubsection{Axiom}
-
-Download the Axiom software package from axiom.developer server.
\subsubsection{Xorg file configuration}

Use Vi to properly configure the video support.

??changed:
-wget http://axiom.axiom-developer.org/axiom-website/DOWNLOADS/axiom-Feb2005-Fedora3.bin.tgz
-
-tar -xzf axiom-Feb2005-Fedora3.bin.tgz -C /etc/
vi /etc/X11/xorg.conf

??changed:
-In order to use Axiom, you  must include Axiom in the user path. Open the Vi editor and edit the .bash\_profile file in the root directory and the doyen user home directory with the next set of changes. You can also copy the .bash\_profile provided in the appendix of this document into the /root and /home/doyen directories.
For multiple video card support change the driver name for the video card indentifier. Set driver value to "vesa".

\subsubsection{Generic mouse configuration}

Place the moused script in the /etc/init.d directory

??changed:
-vi .bash_profile
-export AXIOM=/etc/axiom/mnt/fedora3
-append AXIOM to PATH:
-PATH=\$PATH:\$HOME/bin:\$AXIOM/bin
wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/moused

cp moused /etc/init.d/

chmod 755 /etc/init.d/moused

??changed:
-Activate the changes to the current session.
Add the script to the run levels 3, 4, and 5.

??changed:
-source ~/.bashrc
-source ~/.bash_profile
ln -s /etc/init.d/moused /etc/rc3.d/S01moused

ln -s /etc/init.d/moused /etc/rc4.d/S01moused

ln -s /etc/init.d/moused /etc/rc5.d/S01moused

??changed:
-\subsubsection{LatexWiki}
-
-Download the LatexWiki package from mcelrath.org webpage. LatexWiki is a patch to the ZWiki package that allows rendering of in-line Latex.
\subsubsection{Build Live CD scritps}

Download the scripts necessary to build the CD from the Linux-Live webpage.

??changed:
-wget http://www.easyleading.org/Downloads/LocalFS-1.3-andreas.tar.gz
wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/linux-live-5.1.8.tar.gz

??changed:
-Unpack the LatexWiki distribution into the Zope installation's Products directory.
Get the precompiled 2.6.13.2 kernel with SquashFS and UnionFS module support.

??changed:
-tar -xvf LocalFS-1.3-andreas.tar.gz -C /usr/lib/zope/lib/python/Products/
wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/linux-kernel-2.6.13.2-i486-4.tgz

tar -xzf linux-kernel-2.6.13.2-i486-4.tgz -C /

tar -xzf linux-live-5.1.8.tar.gz -C /tmp

??changed:
-Download and install darcs
Edit the config file and make these changes: Change KERNEL name to KERNEL="2.6.113.2". Save and close the config file.

<<edit>>=

\start
Date: Wed, 4 Jan 2006 20:27:48 -0500
From: Alfredo Portes
To: list
Subject: Error in Main Page

Hi Mr. Page,

I wanted to let you know that the link to LatexWiki in the Related sites
section of http://wiki.axiom-developer.org/FrontPage is broken.

Regards,

Jose Alfredo Perez

\start
Date: Wed, 4 Jan 2006 18:18:35 -0500
From: Alfredo Portes
To: Bill Page
Subject: Re: Doyen

Thank you Mr. Page. I was not able yet to try this fix. I will try
this tomorrow. I will keep you updated. I was working on the
instructions for the Live CD. The old ones were wrong. These are the
updated instructions:

http://wiki.axiom-developer.org/DoyenCD

(Tim: Today the got the internet back in the lab, tomorrow I will
check again all the steps, and correct any typos)

Regards,

On 1/4/06, Bill Page wrote:
> Jose,
>
> On January 4, 2006 3:19 PM you wrote:
> > ...
> > >     * Module Products.LatexWiki.pamphletWrapper, line 29, in renderPD=
F
> > >       NameError
> > ...
>
> Line 29 of pamphletWrapper.py is:
> ...
> class LatexSyntaxError(Exception): pass
> class NowebError(Exception): pass            <-------- compare
> class DviPdfError(Exception): pass
> class DviPngError(Exception): pass
>
> def log(message,summary='',severity=0):
>         zLOG.LOG('LatexWikiDebugLog',severity,summary,message)
>
> def renderPDF(fDir,fName):
>     """ render body source as PDF.
>     """
>     os.system("cd '%s'; rm -f '%s.pdf' '%s.ps' '%s.dvi' '%s.tex'"%(
>       fDir,fName,fName,fName,fName))
>     errors = ""
>     try:
>        runNoweb(fDir,fName)
>     except NowebSyntaxError, data:            <--------- Line 29
>        errors = str(data)
>        log(errors, 'NowebSyntaxError')
>        return escape(errors)
>
> --------
>
> This *is* an error in the source code. It should be:
>
>     except NowebError, data:
>
> In my tests this exception never tripped so I did not find
> the error earlier. You should correct this in your version of
> the code (I will correct it in on MathAction.). You should
> also check to find the reason why the runNoweb call is causing
> the exception. One possible reason is that your path to notangle
> might be different. The command line for notangle in runNoweb
> is at Line 102:
>
> cmdLine =
>   "cd '%s'; /usr/local/axiom/mnt/linux/bin/lib/noweave -delay '%s.pamphle=
t'"
>
> which of course is specific to the installation of Axiom on
> the axiom-developer.org server. You will have to change this
> and other similar local references.
>
> Let me know if this helps.
>
> Regards,
> Bill Page.
>
> PS. Please note that the email address for the axiom-developer
> list is: list
>
> > -----Original Message-----
> > From: Alfredo Portes [mailto:Alfredo Portes]
> > Sent: January 4, 2006 3:19 PM
> > To: Bill Page; axiom-developer-request@nongnu.org
> > Subject: Doyen
> >
> >
> > Hi Mr. Page,
> >
> > I am currently working in having the pamphlet file support in the
> > Doyen LatexWiki. I downloaded the recent version that you told me. I a
> > currently getting this error when
> > trying to add a pamphlet file:
> >
> > Site Error
> >
> > An error was encountered while publishing this resource.
> >
> > NameError
> > Sorry, a site error occurred.
> >
> > Traceback (innermost last):
> >
> >     * Module ZPublisher.Publish, line 187, in publish_module_standard
> >     * Module ZPublisher.Publish, line 144, in publish
> >     * Module Zope2.App.startup, line 199, in zpublisher_exception_hook
> >     * Module ZPublisher.Publish, line 113, in publish
> >     * Module ZPublisher.mapply, line 88, in mapply
> >     * Module ZPublisher.Publish, line 40, in call_object
> >     * Module Products.ZWiki.Editing, line 261, in edit
> >     * Module Products.ZWiki.Editing, line 84, in create
> >     * Module Products.ZWiki.Editing, line 757, in setText
> >     * Module Products.ZWiki.ZWikiPage, line 260, in preRender
> >     * Module Products.LatexWiki, line 129, in preRender
> >     * Module Products.LatexWiki.ReplacePamphlet, line 53, in
> > replacePamphlet
> >     * Module Products.LatexWiki.pamphletWrapper, line 29, in renderPDF
> >
> > NameError
> >
> > --------------------------------------------------------------
> > ----------------------------------------------------
> >
> > I will appreciate any help you can give me. Let me know if you need
> > more information.
> > I opted to just start a fresh installation, with the
> > latexwiki and zwiki from:
> >
> > http://wiki.axiom-developer.org/MathActionRepository

\start
Date: Wed, 4 Jan 2006 21:05:18 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Error in Main Page

On January 4, 2006 8:28 PM Alfredo Portes wrote:

> I wanted to let you know that the link to LatexWiki in
> the Related sites section of
> http://wiki.axiom-developer.org/FrontPage
> is broken.

Thanks. Actually, I think the link is ok - it's Bob McElrath's web
site that is broken :( - a temporary situation, I presume.

\start
Date: Thu, 5 Jan 2006 02:03:59 -0500
From: Alfredo Portes
To: Bill Page
Subject: re: Doyen

Dear Mr. Page,

cmdLine =
  "cd '%s'; /usr/local/axiom/mnt/linux/bin
>
> /lib/noweave -delay '%s.pamphlet'"
>
> which of course is specific to the installation of Axiom on
> the axiom-developer.org server. You will have to change this
> and other similar local references.
>
> Let me know if this helps.



In the Doyen CD, Axiom is located in the /etc directory. I will put it now
in the /usr/local/ directory to follow the standard. However, I am using th=
e
Feb2005 build for Fedora Core 3. This one has the following structure:

axiom/mnt/fedora3/bin instead of axiom/mnt/linux/bin

I changed the name of the directory. Axiom seems to work without a problem.
I wanted to know if this is okay, or if you think I should use another Axio=
m
build with the axiom/mnt/linux/bin structure.

Thank you very much,

On 1/4/06, Bill Page wrote:
>
> Jose,
>
> On January 4, 2006 3:19 PM you wrote:
> > ...
> > >     * Module Products.LatexWiki.pamphletWrapper, line 29, in renderPD=
F
> > >       NameError
> > ...
>
> Line 29 of pamphletWrapper.py is:
> ...
> class LatexSyntaxError(Exception): pass
> class NowebError(Exception): pass            <-------- compare
> class DviPdfError(Exception): pass
> class DviPngError(Exception): pass
>
> def log(message,summary='',severity=0):
>         zLOG.LOG('LatexWikiDebugLog',severity,summary,message)
>
> def renderPDF(fDir,fName):
>     """ render body source as PDF.
>     """
>     os.system("cd '%s'; rm -f '%s.pdf' '%s.ps' '%s.dvi' '%s.tex'"%(
>       fDir,fName,fName,fName,fName))
>     errors = ""
>     try:
>        runNoweb(fDir,fName)
>     except NowebSyntaxError, data:            <--------- Line 29
>        errors = str(data)
>        log(errors, 'NowebSyntaxError')
>        return escape(errors)
>
> --------
>
> This *is* an error in the source code. It should be:
>
>     except NowebError, data:
>
> In my tests this exception never tripped so I did not find
> the error earlier. You should correct this in your version of
> the code (I will correct it in on MathAction.). You should
> also check to find the reason why the runNoweb call is causing
> the exception. One possible reason is that your path to notangle
> might be different. The command line for notangle in runNoweb
> is at Line 102:
>
> cmdLine =
>   "cd '%s'; /usr/local/axiom/mnt/linux/bin/lib/noweave -delay
> '%s.pamphlet'"
>
> which of course is specific to the installation of Axiom on
> the axiom-developer.org server. You will have to change this
> and other similar local references.
>
> Let me know if this helps.
>
> Regards,
> Bill Page.
>
> PS. Please note that the email address for the axiom-developer
> list is: list
>
> > -----Original Message-----
> > From: Alfredo Portes [mailto:Alfredo Portes]
> > Sent: January 4, 2006 3:19 PM
> > To: Bill Page; axiom-developer-request@nongnu.org
> > Subject: Doyen
> >
> >
> > Hi Mr. Page,
> >
> > I am currently working in having the pamphlet file support in the
> > Doyen LatexWiki. I downloaded the recent version that you told me. I a
> > currently getting this error when
> > trying to add a pamphlet file:
> >
> > Site Error
> >
> > An error was encountered while publishing this resource.
> >
> > NameError
> > Sorry, a site error occurred.
> >
> > Traceback (innermost last):
> >
> >     * Module ZPublisher.Publish, line 187, in publish_module_standard
> >     * Module ZPublisher.Publish, line 144, in publish
> >     * Module Zope2.App.startup, line 199, in zpublisher_exception_hook
> >     * Module ZPublisher.Publish, line 113, in publish
> >     * Module ZPublisher.mapply, line 88, in mapply
> >     * Module ZPublisher.Publish, line 40, in call_object
> >     * Module Products.ZWiki.Editing, line 261, in edit
> >     * Module Products.ZWiki.Editing, line 84, in create
> >     * Module Products.ZWiki.Editing, line 757, in setText
> >     * Module Products.ZWiki.ZWikiPage, line 260, in preRender
> >     * Module Products.LatexWiki, line 129, in preRender
> >     * Module Products.LatexWiki.ReplacePamphlet, line 53, in
> > replacePamphlet
> >     * Module Products.LatexWiki.pamphletWrapper, line 29, in renderPDF
> >
> > NameError
> >
> > --------------------------------------------------------------
> > ----------------------------------------------------
> >
> > I will appreciate any help you can give me. Let me know if you need
> > more information.
> > I opted to just start a fresh installation, with the
> > latexwiki and zwiki from:
> >
> > http://wiki.axiom-developer.org/MathActionRepository

\start
Date: Thu, 05 Jan 2006 12:26:15 +0100
From: Ralf Hemmecke
To: list
Subject: Local MathAction

Last night, I followed the steps at

http://wiki.axiom-developer.org/InstallingMathAction

with some modifications. After

      cp /home/AxiomW/latexwiki/LatexWiki/texbreaker* .

I had to add

      cp /home/AxiomW/latexwiki/LatexWiki/useproto.h .

because that file was missing for the compilation.
I also have no Reduce, so I commented out the Reduce related things 
(only the line numbers were a bit different).

In /usr/lib/zope/lib/python/Products/axiomWrapper.py I've changed

     cmdLine = 'export AXIOM=/usr/local/axiom/mnt/linux; export 
PATH=$AXIOM/bin:$PATH; export ALDORROOT=/usr/local/aldor/linux/1.0.2; 
export PATH=$ALDORROOT/bin:$PATH; export HOME=/var/lib/plone2/main; 
AXIOMsys < %s' %(axiomFileName)

to

     cmdLine = 'export AXIOM=/home/hemmecke/software/Axiom/mnt/linux; 
export ALDORROOT=/home/hemmecke/software/Aldor/aldor/linux/1.0.2; 
PATH=$ALDORROOT/bin:$AXIOM/bin:$PATH; AXIOMsys < %s' %(axiomFileName)

(everything on just one line)

I had no idea what to do with HOME since there is no /var/lib/plone2 on 
my system.

texbreaker.mak is ...

swig -python texbreaker.i
gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so

I had to install swig (www.swig.org). Fortunately there was a Debian 
package.

I also had to
gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.2
instead of
gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3

Everything worked fine up to here. But which URL should I write into 
firefox in order to now browse MathAction locally? I somehow fear that 
the webpages are not yet on my computer. Where is the MathAction FrontPage?

Any hints?

Another question... I have the Axiom sources from 
http://axiom-developer.org/archive/axiom. Would that be the same as
"darcs get http://page.axiom-developer.org/repository/axiom"?

\start
Date: Thu, 05 Jan 2006 08:14:06 -0600
From: MathAction (unknown)
To: MathAction
Subject: [FrontPage] Brief Summary

I think a message indicating the current stable and development release and what has changed since the last release should also be present.

\start
Date: Thu, 5 Jan 2006 10:03:31 -0500
From: Bill Page
To: Alfredo Portes
Subject: re: Doyen

On January 5, 2006 2:04 AM Alfredo Portes

> Bill Page wrote:
>> cmdLine =
>>  "cd '%s'; /usr/local/axiom/mnt/linux/bin
>>  /lib/noweave -delay '%s.pamphlet'" 
>>
>> which of course is specific to the installation of Axiom on
>> the axiom-developer.org server. You will have to change this
>> and other similar local references.
>
> In the Doyen CD, Axiom is located in the /etc directory. I will
> put it now in the /usr/local/ directory to follow the standard.

I think there is no standard, but there are a few common conventions
that are used on different linux systems (not all). The important
thing is to be consistent.

> However, I am using the Feb2005 build for Fedora Core 3. This
> one has the following structure: 
>
> axiom/mnt/fedora3/bin instead of axiom/mnt/linux/bin
>
> I changed the name of the directory. Axiom seems to work without
> a problem. I wanted to know if this is okay, or if you think
> I should use another Axiom build with the axiom/mnt/linux/bin
> structure. 

Axiom can be located anywhere but the AXIOM environment variable
has to be set correctly, corresponding to the new location.

\start
Date: Thu, 5 Jan 2006 10:39:12 -0500
From: Bill Page
To: Ralf Hemmecke
Subject: RE: Local MathAction

On January 5, 2006 6:26 AM Ralf Hemmecke wrote:
> 
> Last night, I followed the steps at
> 
> http://wiki.axiom-developer.org/InstallingMathAction
> 
> with some modifications. After
> 
>       cp /home/AxiomW/latexwiki/LatexWiki/texbreaker* .
> 
> I had to add
> 
>       cp /home/AxiomW/latexwiki/LatexWiki/useproto.h .
> 
> because that file was missing for the compilation.

Ok. I've updated the above wiki page.

> I also have no Reduce, so I commented out the Reduce related things 
> (only the line numbers were a bit different).
> 
> In /usr/lib/zope/lib/python/Products/axiomWrapper.py I've changed
> 
>      cmdLine = 'export AXIOM=/usr/local/axiom/mnt/linux; export 
> PATH=$AXIOM/bin:$PATH; export ALDORROOT=/usr/local/aldor/linux/1.0.2; 
> export PATH=$ALDORROOT/bin:$PATH; export HOME=/var/lib/plone2/main; 
> AXIOMsys < %s' %(axiomFileName)
> 
> to
> 
>      cmdLine = 'export AXIOM=/home/hemmecke/software/Axiom/mnt/linux; 
> export ALDORROOT=/home/hemmecke/software/Aldor/aldor/linux/1.0.2; 
> PATH=$ALDORROOT/bin:$AXIOM/bin:$PATH; AXIOMsys < %s' %(axiomFileName)
> 
> (everything on just one line)
> 
> I had no idea what to do with HOME since there is no 
> /var/lib/plone2 on my system.

I think HOME is needed only for running PolyMake in Martin Rubey's
Axiom interface. PolyMake tries to set up some defaults in the
"users" home directory. This can be set to any convenient location.
I chose the root of the Zope instance which on axiom-developer is
'/var/lib/plone2/main'. On your system the Zope instance is probably
in a different place. Check $ZOPEHOME.

> 
> texbreaker.mak is ...
> 
> swig -python texbreaker.i
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
> ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so
> 
> I had to install swig (www.swig.org). Fortunately there was a Debian 
> package.

Do you use

  apt-get install swig

?

> 
> I also had to
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.2
> instead of
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
> 
> Everything worked fine up to here.

Great! You are about half-way there ... :)

> But which URL should I write into firefox in order to now browse
> MathAction locally? I somehow fear that the webpages are not yet on
> my computer. Where is the MathAction FrontPage?
> 
> Any hints?

Well, this is a quesition of a different sort... :) What you
appear to be asking is how to run the wiki software. I presume
that you did previously install Zope, right? So to start Zope
need to do

  $INSTANCE_HOME/bin/zopectl start

This starts the server process and is the way you should normally
start the server. But it might be better to start with

  $INSTANCE_HOME/bin/runzope

which runs zope as a process in your current session and gives
some useful console output. You should see some warning messages
but no error messages.

You should now be able to access the Zope management interface
from a web browser on your system via the url

  http://localhost:8080

(port 8080 is the default port for Zope)

If all is well, then you will need to use this interface to add
new "Zwiki" object called 'mathaction' with the (*) latexwiki
option checked off.

To access the FrontPage of your new 'mathaction' wiki use the
url

  http://localhost:8080/mathaction

If you get this far, then you are doing very well... If not just
ask. Either way, let me know how it goes. I think the learning
curve for Zope probably seems quite steep but really it is not
so difficult once you get used to do (almost) everything through
the web browser interface.

Later there will be some more detailed instructions for making
some additional customizations to the ZWiki page templates that
need to appear in the root folder of the mathaction wiki. But
we will get to that later.

> 
> Another question... I have the Axiom sources from 
> http://axiom-developer.org/archive/axiom. Would that be the
> same as
> "darcs get http://page.axiom-developer.org/repository/axiom"?
> 

Yes it is the same, but this is not a probably. You should be
able to use any version of Axiom that you currently have
installed on your system.

\start
Date: Thu, 05 Jan 2006 09:40:15 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [InstallingMathAction] 

     cp /home/AxiomW/latexwiki/LatexWiki/useproto.h .

5a) Install swig (www.swig.org). Fortunately there was a Debian 
    package::

    apt-get install swig

5b) Run the commands you find in texbreaker.mak. (I had the change
    the include file in the gcc command::

\start
Date: Thu, 05 Jan 2006 09:49:37 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#247 editing pamphlet does not update png image of first page] image caching

This is caused by the fact that the server configuration on axiom-developer
(MathAction) aggressively tries to cache all images for reasons of efficiency.
It is supposed to be possible to configure the Apache web server to notice a
change in the image file and send a 'cache invalid' message to the front-end
web cache (maybe it is a Squid server somewhere in the ISP RoseHosting
network but I am not sure), however I have not been able to get this to
work. Caching of images can even occur at the level of the browser itself.

As a work-a-round, always remember to click 'page reload' after editing the
pamphlet file.

\start
Date: Thu, 5 Jan 2006 18:07:13 +0100
From: Hans Peter Wuermli
To: list
Subject: Re: Local MathAction

Dear Ralph

It's a long time I had installed AxiomWiki on my computer. In the mean time I
don't use it anymore, because I would have had to find some way to automatise
the set-up, because updates on the software used to overwrite the changed
files.

Anyway: I doubt that you can use AxiomWiki locally without having Zope
installed (and Plone is built on top of Zope, but I didn't understand what
you referred to). From where you got to, you need to restart Zope. Create a
new Zope document and choose "AxiomWiki" as its format. Within that document
you can do the \begin{axiom} ...\end{axiom}.

I haven't followed some of the threads, so I might have missed something. If
you want the existing MathAction locally, the admin of the Axiom wiki will
have to export a Zope object for you (as far as I remember, because Zope uses
a local object store; I don't think that users can initiate the export).

With best regards

H.P.

On Thursday 05 January 2006 12.26, Ralf Hemmecke wrote:
> Last night, I followed the steps at
>
> http://wiki.axiom-developer.org/InstallingMathAction
>
> with some modifications. After
>
>       cp /home/AxiomW/latexwiki/LatexWiki/texbreaker* .
>
> I had to add
>
>       cp /home/AxiomW/latexwiki/LatexWiki/useproto.h .
>
> because that file was missing for the compilation.
> I also have no Reduce, so I commented out the Reduce related things
> (only the line numbers were a bit different).
>
> In /usr/lib/zope/lib/python/Products/axiomWrapper.py I've changed
>
>      cmdLine = 'export AXIOM=/usr/local/axiom/mnt/linux; export
> PATH=$AXIOM/bin:$PATH; export ALDORROOT=/usr/local/aldor/linux/1.0.2;
> export PATH=$ALDORROOT/bin:$PATH; export HOME=/var/lib/plone2/main;
> AXIOMsys < %s' %(axiomFileName)
>
> to
>
>      cmdLine = 'export AXIOM=/home/hemmecke/software/Axiom/mnt/linux;
> export ALDORROOT=/home/hemmecke/software/Aldor/aldor/linux/1.0.2;
> PATH=$ALDORROOT/bin:$AXIOM/bin:$PATH; AXIOMsys < %s' %(axiomFileName)
>
> (everything on just one line)
>
> I had no idea what to do with HOME since there is no /var/lib/plone2 on
> my system.
>
> texbreaker.mak is ...
>
> swig -python texbreaker.i
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
> ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so
>
> I had to install swig (www.swig.org). Fortunately there was a Debian
> package.
>
> I also had to
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.2
> instead of
> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
>
> Everything worked fine up to here. But which URL should I write into
> firefox in order to now browse MathAction locally? I somehow fear that
> the webpages are not yet on my computer. Where is the MathAction FrontPage?
>
> Any hints?
>
> Another question... I have the Axiom sources from
> http://axiom-developer.org/archive/axiom. Would that be the same as
> "darcs get http://page.axiom-developer.org/repository/axiom"?

\start
Date: 05 Jan 2006 13:23:19 -0500
From: Camm Maguire
To: Gordon Novak
Subject: Re: GCL and Ubuntu
Cc: Robert Boyer, David Kotz, Warren Hunt, Matt Kaufmann, Wilfred Legato

Greetings!  Am happy to announce that I've restored xgcl-2 in stable
release candidate version 2.6.8pre (in cvs) (and soon in cvs head):

export CVSROOT=:pserver:anonymous@cvs.sv.gnu.org:/sources/gcl
cvs -z9 -q co -d gcl-2.6.8pre -r Version_2_6_8pre gcl
cd gcl-2.6.8pre && ./configure && make && make xgcl

or 

cd gcl-2.6.8pre && ./configure && make && cd xgcl-2 && make

I've checked the demos, and they look good.  I would like to integrate
this as an autoloadable module built by default in the next release if
possible.  There remains a bit of work, the hardest part of which is
deciding exactly how to do this :-).

A few issues:

1) X10.h is no longer supported by X.  I've managed to find an old
   version, and have inlined the header into general-c.c, but it would
   be perhaps more proper to replace the obsolete X10 interface with
   an X11 equivalent.  This is beyond my immediate expertise.

2) It still remains to get the build working against the ansi image.
   I suggest here that we abandon the older :system-p based
   compilation system in favor of the equivalent but more portable
   'compiler::link interface.  This will free us from any direct
   reference to a particular saved image (either traditional or ansi),
   and need only be run (on most architectures) on the explicitly
   compiled C files, leaving the remaining .lsp files compilable,
   loadable, and dumpable without the :system-p flag.  Actually, the C
   files themselves could be included via (clines "....") into
   compilable and loadable lisp.  This needs more thought --
   suggestions are most welcome.

3) There is a very large set of imports in xgcl-2/gcl_imports.lsp.  If
   this does not bother one for generic use, one approach would be to
   select a few of these, such as 'draw, 'pcalc, 'menu, and perhaps a
   few others, which would autoload the xgcl "module" together with
   the imports file, and output a simple help text to the screen.  Bob
   Boyer has previously expressed his opinion that autoloading is
   problematic and non-portable.  If this is the consensus, then we
   should pre-load the compiled files into all images, and perhaps
   only autoload the imports file, or perhaps rather export the
   symbols from 'xlib instead and instruct the user to (use-package
   'xlib).  I hesitate to pollute the default user package namespace
   with so many specific symbols.

4) Documentation -- I suppose the dwdoc.tex should be converted to
   info format and included in or along side of gcl-si.texi.  Perhaps
   also the Xakcl-paper, though this is clearly more work.

More later,

Gordon Novak writes:

> I tested the existing versions of xgcl and gcl under ubuntu
> and they seem to work.  Therefore, I think we can migrate to
> ubuntu without losing the ability to use gcl.
> 
> Of course, ultimately we need to be able to compile.
> BTW, I still can't get xgcl to compile any more.
> It may be something fairly simple.
> /stage/public/share/src/gcl-2.6.7/xgcl-2/make.script shows where
> it messed up.

\start
Date: Thu, 5 Jan 2006 12:52:52 -0600
From: Gordon Novak
To: Camm Maguire
Subject: Re: GCL and Ubuntu
Cc: Robert Boyer, David Kotz, Warren Hunt, Kay Nettle, Matt Kaufmann, Wilfred Legato

Camm,

>Am happy to announce that I've restored xgcl-2

That's very good news!  Thank you very much for your help on this.

I don't mind at all if one has to deliberately load something
to get xgcl.  It makes sense to load something rather than autoload,
especially if it causes portability problems.  Likewise, I agree
that we should not pollute the name space with many symbols.
If use-package does what is needed, that would be fine.

If you could send me the X10.h and the X11 equivalent, I could look
at bringing things up to X11.

I have a program to convert LaTeX to html, so I could easily convert
dwdoc.tex to html if that would help.

\start
Date: Thu, 5 Jan 2006 18:30:21 -0500
From: Bill Page
To: list
Subject: RE: Local MathAction
Cc: Bob McElrath

On Thursday, January 05, 2006 12:07 PM Peter W=FCrmli wrote:
>
> It's a long time I had installed AxiomWiki on my computer.
> In the mean time I don't use it anymore, because I would
> have had to find some way to automatise the set-up, because
> updates on the software used to overwrite the changed files.

The proper way for me (us?) to do this would be to re-write
the MathAction extensions of LatexWiki in a portable way so
that it is self-configuring and/or easily configurable.
Since MathAction was originally just an experiment - not
intended as "releasable" software - I did not bother to do
this.

In the mean time, Bob McElrath also decided that he no longer
wanted to maintain the LatexWiki extension of ZWiki. He and
I have discussed the possibility of actually merging the
MathAction extensions with LatexWiki and maybe even doing a
fork of ZWiki specifically for this purpose. Then there would
only be one Zope product to install that would include
everything (except Axiom itself). But neither Bob nor I seem
to have found enough time or motivation to do this yet.

The recent interest expressed on this list in a local version
of MathAction by Ralf Hemmecke and possibly Cliff Yapp and
Martin Rubey, plus the possible use of the MathAction ideas on
the Doyen CD (Alfredo Portes), suggests that maybe we should
examine this possibility again. From the point of view of Axiom
we might consider this as just another type of user interface.
I would be very happy if someone else wanted to take responsibility
for such a project. I am willing to help anyone in as much detail
as necessary, but I am very reluctant to take the lead.

>
> Anyway: I doubt that you can use AxiomWiki locally without
> having Zope installed

That is correct (plus a lot more ;).

> (and Plone is built on top of Zope, but I didn't understand
> what you referred to).

Plone is not required in order to run the Axiom Wiki. I don't
think the Plone portal software is of much interest for stand
alone use.

> From where you got to, you need to restart Zope. Create a
> new Zope document and choose "AxiomWiki" as its format.
> Within that document you can do the
> \begin{axiom} ...\end{axiom}.
>

Right now, I think the best way to get to this point is
one-step-at-a-time. I will try my best to describe this below.
If someone besides me can get this to work, I will eventually
update the instructions on the Axiom Wiki appropriately.

Your first goal should be to get a running version of ZWiki.

http://zwiki.org

See http://zwiki.org/Installing

for details.  Current Zwiki requires Zope version 2.7 or 2.8.

In all open source software such as this I recommend going for
the newest version of everything possible even though this
sometimes will cause some headaches later concerning compatibility
of other components. Since most open source software is "released
early and released often", in most cases this strategy will result
in the most stable and best performing system. In particular this
would mean using the newest version of Zope (2.8) and Python (2.4).

All of this is made quite easy on Debian (use Debian version
Sarge/testing to get the newest versions):

See: http://zwiki.org/InstallingOnDebian

Using apt-get, e.g.

   $ apt-get install zope2.8
   $ mkzope2.8instance
      Directory: zope1 (for example)
      Username: (an initial manager username
      Password:  and password)
   edit /var/lib/zope2.8/instance/zope1/etc/zope.conf
      uncomment debug-mode and set it off, for better performance
      make note of the http port number (9673) or change it
   $ /var/lib/zope2.8/instance/zope1/bin/zopectl start

At this point you should be able to use a web browser to locally
access the Zope Management Interface (ZMI):

http://localhost:9673/manage

(enter manager username and password).

Refer to the Zope documentation:

http://www.zope.org

for more information about using ZMI.

Now get the newest version of ZWiki:

   $ apt-get install darcs
   $ cd /var/lib/zope2.8/instance/zope1/Products
   $ darcs get http://zwiki.org/repos/ZWiki
   $ zopectl restart

In ZMI you should be able to add a plain ZWiki web site:

1) choose "ZWiki" in the select list (upper left corner of page)
   and click "Add",
2) choose and Id and Title (e.g. plainwiki),
3) click "Create Wiki"

This should allow you to create and edit vanilla wiki pages.

http://localhost:9673/plainwiki

Verify that this works!
------

Now it gets a little harder. :)

The second goal should be to add the LatexWiki extensions. This
is described quite well at Bob McElrath's web site:

http://mcelrath.org/Notes/LatexWiki

See

http://mcelrath.org/Notes/INSTALL

Notice especially the requirements for the installation of
related packages. Again Debian makes this quite easy:

  apt-get install tetex-base tetex-bin tetex-extra gs zope \
    python2.4-imaging

To install LatexWiki itself try this:

     cd /home/LatexW
     darcs get http://bob.mcelrath.org/darcs/latexwiki
     cd /var/lib/zope2.8/instance/zope1/Products
     cp -r /home/LatexW/latexwiki/LatexWiki .
     cp -r /home/LatexW/latexwiki/ZWiki .

Since Bob is no longer maintaining an LatexWiki in sync with the
latest version of ZWiki, you might experience some problems getting
LatexWiki to work properly with the current version of ZWiki. If
you get to this stage, I am willing to try to help and if we get
stuck again then we can probably bug Bob McElrath for more help.

At this point you should be able to add a ZWiki of Type:

  (*) LatexWiki

1) choose "ZWiki" in the select list (upper left corner of page)
   and click "Add",
2) choose and Id and Title (e.g. latexwiki)
3) click the Type (*) latexwiki, and then
4) click "Create Wiki"

It should be capable of displaying LaTeX symbols and equations.

http://localhost:9673/latexwiki

Verify that this works!
------

Finally, the hardest part. Te-read the instructions at:

http://wiki.axiom-developer.org/InstallingMathAction

Keep in mind that these instructions are a little out of date.
You have already done Step 1 above.

For the newest version of ZWiki I suggest the following variation
on Step 2:

     cd /home/AxiomW
     darcs get http://page.axiom-developer.org/repository/latexwiki

     cd /var/lib/zope2.8/instance/zope1/Products/ZWiki

     cp /home/AxiomW/latexwiki/LatexWiki/ReplaceInline* .
     cp /home/AxiomW/latexwiki/LatexWiki/*Wrapper.py .
     cp /home/AxiomW/latexwiki/LatexWiki/texbreaker* .
     cp /home/AxiomW/latexwiki/LatexWiki/useproto.h .

Be sure to make the specified edits as appropriate to your
configuration.

Then finally you should be able to

1) restart Zope.
2) In ZMI add another ZWiki object
   with Id and Title (e.g. axiomwiki)
   click the Type (*) latexwiki, and then
   click "Create Wiki".
3) Acess it at http://localhost:9673/axiomwiki
   (Or just use the 'latexwiki' from your previous test.)
4) Create a new wiki page or edit an existing one and choose
   page type "Pamphlet".
5) Within that page you should be able to do pamphlets

   \documentclass ... \end{document}

   and all of the usual LatexWiki "structured text + latex"
   things plus the axiom/spad/aldor/boot/lisp commands:

   \begin{axiom} ... \end{axiom}

Verify that this works!
------

> I haven't followed some of the threads, so I might have
> missed something. If you want the existing MathAction
> locally, the admin of the Axiom wiki will have to export a
> Zope object for you (as far as I remember, because Zope uses
> a local object store; I don't think that users can initiate
> the export).
>

It is possible for me to export the current contents of the
Axiom Wiki site in a way that would allow it to be imported
into a local version of mathaction. The contents however is
already quite large (about 200 Mbytes or so) and nearly 500
pages. Maybe it would be better to move only a few selected
pages at first. This can be done by the same export and import
procedure (by wiki manager) or by simple cut-and-paste from
the edit page of Axiom Wiki to the edit page on the local wiki
(by any user).

Concerning export and import, there is a small complication of
the generated png image files that represent the LaTeX output.
These are not actually stored in the Zope object store (data
base) but rather in a special directory in the file system. If
we wanted to make a complete copy of the current contents of
Axiom Wiki, we must also include these files. However given the
data exported from the database it is possible to regenerate
the image files locally by running the upgradeall command. If
the desire is to re-create the entire contents of Axiom Wiki,
this could take a long time since the local system would have
to run Axiom and LaTeX on every page.

\start
Date: Fri, 6 Jan 2006 07:55:49 -0500
From: Bill Page
To: Bob McElrath
Subject: RE: Local MathAction

Bob,

I guess it's time to ask you for some help... :)

As you can see below, I am trying to use the zope-2.8, python-2.4,
and the "darcs" versions of both ZWiki and LatexWiki.

I have been testing my LatexWiki installation procedure on
Debian as outlined below. All goes well (with modifications
of recipe inserted below) but when I get to the point of
wanting to create my first ZWiki of Type: (*) latexwiki, I
find that I do not have this option in the ZWiki Add form.

In spite of that, I do have the ...+Latex pagetypes when
I try to edit a page. It seems as if something in the product
initialization has failed, but I do not see any error messages
when I have 'debug-mode on' and use 'runzope'.

Can you give me some ideas about what to try?

On Thursday, January 05, 2006 6:30 PM I wrote:
> ...
> All of this is made quite easy on Debian (use Debian version
> Sarge/testing to get the newest versions):
>
> See: http://zwiki.org/InstallingOnDebian
>
> Using apt-get, e.g.
>

I needed to make a few additions to the script below.

>    $ apt-get install zope2.8

     $ cd /usr/lib/zope2.8/bin

>    $ mkzope2.8instance

        Directory: /var/lib/zope2.8/instance/zope1 (for example)

>       Username: (an initial manager username
>       Password:  and password)

>    edit /var/lib/zope2.8/instance/zope1/etc/zope.conf
>       uncomment debug-mode and set it off, for better performance
>       make note of the http port number (9673) or change it

        I think this edit step is no longer needed.

>    $ /var/lib/zope2.8/instance/zope1/bin/zopectl start
>
> At this point you should be able to use a web browser to locally
> access the Zope Management Interface (ZMI):
>
> http://localhost:9673/manage
>
> (enter manager username and password).
>
> Refer to the Zope documentation:
>
> http://www.zope.org
>
> for more information about using ZMI.
>
> Now get the newest version of ZWiki:
>
>    $ apt-get install darcs
>    $ cd /var/lib/zope2.8/instance/zope1/Products
>    $ darcs get http://zwiki.org/repos/ZWiki

     $ ../bin/zopectl restart

>
> In ZMI you should be able to add a plain ZWiki web site:
>
> 1) choose "ZWiki" in the select list (upper left corner of page)
>    and click "Add",
> 2) choose and Id and Title (e.g. plainwiki),
> 3) click "Create Wiki"
>
> This should allow you to create and edit vanilla wiki pages.
>
> http://localhost:9673/plainwiki
>
> Verify that this works!
> ------

Yes this works fine.

>
> Now it gets a little harder. :)
>
> The second goal should be to add the LatexWiki extensions. This
> is described quite well at Bob McElrath's web site:
>
> http://mcelrath.org/Notes/LatexWiki
>
> See
>
> http://mcelrath.org/Notes/INSTALL
>
> Notice especially the requirements for the installation of
> related packages. Again Debian makes this quite easy:
>

    apt-get install tetex-base tetex-bin tetex-extra gs \
      python2.4-imaging

    cd /var/lib/zope2.8/instance/zope1/bin
    edit runzope and zopectl to use python2.4

>
> To install LatexWiki itself try this:
>
>      cd /home/LatexW
>      darcs get http://bob.mcelrath.org/darcs/latexwiki
>      cd /var/lib/zope2.8/instance/zope1/Products
>      cp -r /home/LatexW/latexwiki/LatexWiki .
>      cp -r /home/LatexW/latexwiki/ZWiki .

       We also need to install the LocalFS product:

       wget
http://www.easyleading.org/Downloads/LocalFS-1.7rc1-andreas.tar.gz
       tar xzvf LocalFS-1.7rc1-andreas.tar.gz

       ../bin/zopectl restart

>
> Since Bob is no longer maintaining an LatexWiki in sync with the
> latest version of ZWiki, you might experience some problems getting
> LatexWiki to work properly with the current version of ZWiki. If
> you get to this stage, I am willing to try to help and if we get
> stuck again then we can probably bug Bob McElrath for more help.
>
> At this point you should be able to add a ZWiki of Type:
>
>   (*) LatexWiki
>
> 1) choose "ZWiki" in the select list (upper left corner of page)
>    and click "Add",
> 2) choose and Id and Title (e.g. latexwiki)
> 3) click the Type (*) latexwiki, and then
> 4) click "Create Wiki"


This is where the procedure fails since I do not have the
option to check Type: (*) latexwiki.

>
> It should be capable of displaying LaTeX symbols and equations.
>
> http://localhost:9673/latexwiki
>
> Verify that this works!
> ------
>
> ...

\start
Date: Fri, 6 Jan 2006 10:27:50 -0800
From: Bob McElrath
To: Bill Page
Subject: Re: Local MathAction

Unfortunately I'm extremely busy right now but I'll try here...

Page, Bill [Bill Page] wrote:
> Bob,
> 
> I guess it's time to ask you for some help... :)
> 
> As you can see below, I am trying to use the zope-2.8, python-2.4,
> and the "darcs" versions of both ZWiki and LatexWiki.
> 
> I have been testing my LatexWiki installation procedure on
> Debian as outlined below. All goes well (with modifications
> of recipe inserted below) but when I get to the point of
> wanting to create my first ZWiki of Type: (*) latexwiki, I
> find that I do not have this option in the ZWiki Add form.

The files necessary for this latexwiki installation option are in
ZWiki/content/latexwiki.  Depending on how you installed ZWiki, you may
need to link this directory from the latexwiki installation.  The
LatexWiki darcs repository has both a LatexWiki and ZWiki directory,
both of which should go in Products/.  (The ZWiki directory adds the
ZWiki/content/latexwiki stuff)

Let me know if that works.

I'm sorry if I've missed emails on this, all my axiom email ends up in
an axiom folder that I've been too busy to read lately... :(  (send a
private email if you really want to get my attention)

I think it would be a good idea to set up a separate ZWiki+LatexWiki
distribution, rather than pulling and patching from my darcs repository.
Undoubtedly that route is difficult right now due to changes in ZWiki.

\start
Date: Sat, 7 Jan 2006 23:03:09 -0500
From: Bill Page
To: Alfredo Portes
Subject: re: Doyen

Jose,

I am sorry that it has taken me a little while to get back to you.

On January 5, 2006 1:04 PM you wrote:

> Dear Mr. Page,

Enough formality. Please just call me Bill. :)

> Thank you for the help. The fix that you gave me solved the error,
> together with moving axiom to the /usr/local directory. However,
> I am facing two new problems. The first one is that when I add a
> pamphlet file nothing appears. The page is created but it is blank.

Hmmm.... It is hard to for me to know what to suggest for this one.
I need more information.

What do you mean exactly by "blank"? Are the expected headers there?
Like 'pdf' 'dvi' .. 'log' ? (The 'log' link should display the log
output from LaTeX if LaTeX actually gets run.)

One thing you can do is take a look in your

  $ZopeInstance/var/LatexWiki

directory. This is where you will find the png images files generated
by LaTeX/ghostscript and also the .tex file (output of noweave) and
other related files. These should be generated when you click 'Save'.
Please let me know what you find there.


> The other one is that when I try to do axiom commands I get this
> error:
>
> Traceback (innermost last): 
> ...
> Module Products.LatexWiki.ReplaceInlineAxiom , line 65, in linebreak
> Module Products.LatexWiki.texbreaker, line 5, in ? 
> ImportError
>

Actually this is encouraging because it means that Axiom has run
and internally produced some LaTeX output. Now MathAction is trying
to run the program that splits long long math output into multiple
lines.

> Axiom used to work in my previous version. Do not know if I changed
> something or if the two issues are related.

This is a new issue. Line 5 of 'texbreaker.py' is:

  import _texbreaker

The Python error message is telling you that it can't find the
line breaking library '_texbreaker.so' which is normally built by
the script 'texbreaker.mak'. See step 5b) in
http://wiki.axiom-developer.org/InstallingMathAction

Perhaps you forget this step?

\start
Date: Sun, 8 Jan 2006 22:32:17 +0100 (CET)
From: Waldek Hebisch
To: list
Subject: Re: Axiom' integrator

Martin Rubey wrote:
> > If, we can finish the implementation of this algorithm in Axiom,
> > then would your re-worded statement above be correct?
>
> is no. Furthermore, Axiom only returns "failed" if the Risch procedure didn't
> succeed, which constitutes hardly a proof...
>
> Still, it would be great if we could complete the implementation of the Risch
> "algorithm". (Or find out that it is completely implemented anyway.)

AFAIU the claim is that Axiom integrator will do one of the following:

1) give elementary integral
2) prove that elementary integral does not exist
3) give error message about unimplemented branch of the Risch algorithm
4) run out of resources

This claim is both in detailed Axiom documentation and in Bronstein post
to sci.math.symbolic. 

Risch algorithm in Axiom do have unimplemented branches, the following
is an example:

integrate(D(exp(-a*sqrt(1 - b*cos(theta)))/(a+b+theta), [theta], [1]), theta)

result:

   >> Error detected within library code:
   Function not supported by Risch d.e.

I doubt that just finishing the implementation will give much improvement.
Namely, the unimplemented cases have huge resource requirements, so 
implementing them is likely to lead to case 4 above.

I think that one can gain more by implementing a bunch of shortcuts
(like the reduction I show in my answer to Bob McElrath) to handle
common "textbook" cases.

\start
Date: Mon, 09 Jan 2006 12:56:39 -0600
From: MathAction (unknown)
To: MathAction
Subject: [mirrors] Small error in book2.pdf?

Some of the bookmarks are not linked to the correct chapters,
e.g. "Axiom System Commands" points to "An Overview of Axiom".

\start
Date: 09 Jan 2006 15:49:51 -0500
From: Camm Maguire
To: Matijs van Zuijlen
Subject: Re: Bug#347199: axiom-doc: Book is all-monospace after page 1019

forwarded 347199 list
thanks

Greetings!  OK, this is set to be fixed with the next upload.  Thanks!

Matijs van Zuijlen writes:

> Package: axiom-doc
> Version: 20050901-4
> Severity: normal
> 
> At page 1019 of the Axiom book (the 1036th page of the pdf file), the text
> becomes all-monospace. I believe this is due to a typo in the file
> book.pamphlet, line 62236, where it says:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the \tt n-th
> 
> Instead, the final \tt should have some braces, probably like so:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the {\tt n}-th
> 
> -- System Information:
> Debian Release: testing/unstable
>   APT prefers unstable
>   APT policy: (500, 'unstable')
> Architecture: powerpc (ppc)
> Shell:  /bin/sh linked to /bin/bash
> Kernel: Linux 2.6.14-2-powerpc
> Locale: LANG=en_US.UTF-8, LC_CTYPE=en_US.UTF-8 (charmap=UTF-8)
> 
> -- no debconf information

\start
Date: Mon, 09 Jan 2006 15:39:53 -0600
From: MathAction (Page, Bill)
To: MathAction
Subject: [#248 Bug#347199: axiom-doc: Book is all-monospaceafter page 1019] 

-----Original Message-----

Greetings!  OK, this is set to be fixed with the next upload.  Thanks!

Matijs van Zuijlen writes:

> Package: axiom-doc
> Version: 20050901-4
> Severity: normal
> 
> At page 1019 of the Axiom book (the 1036th page of the pdf file), the
text
> becomes all-monospace. I believe this is due to a typo in the file
> book.pamphlet, line 62236, where it says:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the \tt n-th
> 
> Instead, the final \tt should have some braces, probably like so:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the {\tt
n}-th
> 
> -- System Information:
> Debian Release: testing/unstable
>   APT prefers unstable
>   APT policy: (500, 'unstable')
> Architecture: powerpc (ppc)
> Shell:  /bin/sh linked to /bin/bash
> Kernel: Linux 2.6.14-2-powerpc
> Locale: LANG=en_US.UTF-8, LC_CTYPE=en_US.UTF-8 (charmap=UTF-8)
> 
> -- no debconf information

\start
Date: Tue, 10 Jan 2006 17:00:44 +0100
From: Ralf Hemmecke
To: Bill Page
Subject: Re: Local MathAction

Hi Bill,

>> texbreaker.mak is ...
>>
>> swig -python texbreaker.i
>> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
>> ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so
>>
>> I had to install swig (www.swig.org). Fortunately there was a Debian 
>> package.
> 
> Do you use
> 
>   apt-get install swig
> 
> ?

I think that should work. I usually use 'dselect'. I found 'swig' there.

>> I also had to
>> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.2
>> instead of
>> gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
>>
>> Everything worked fine up to here.

Can't you simply change texbreaker.mak? Or does it work for some good
reason with python2.3 on your machine?

> Great! You are about half-way there ... :)

Well, it would be easier if one does not have to modify files like
ReplaceInlineLatex.py or axiomWrapper.py.

Wouln't it also be an option to provide a dummy "reduce" script which
accepts some (Reduce) input and always outputs a string in Reduce
format, saying that Reduce is not installed. Could you provide such a
shell script?

>> But which URL should I write into firefox in order to now browse
>> MathAction locally? I somehow fear that the webpages are not yet on
>> my computer. Where is the MathAction FrontPage?
>>
>> Any hints?

> Well, this is a quesition of a different sort... :) What you
> appear to be asking is how to run the wiki software.

Ehm, maybe I don't understand MathAction correctly. What I actually want 
is a snapshot of the MathAction pages. And if I could have all the 
functionality of running Axiom through a local webserver (without 
actually being connected to the internet then all the better. The 
SnapShot that Bill Page provided as an archive of HTML pages is not 
completely satisfactory.

 > I presume
> that you did previously install Zope, right? So to start Zope
> need to do
> 
>   $INSTANCE_HOME/bin/zopectl start
> 
> This starts the server process and is the way you should normally
> start the server. But it might be better to start with
> 
>   $INSTANCE_HOME/bin/runzope
> 
> which runs zope as a process in your current session and gives
> some useful console output. You should see some warning messages
> but no error messages.

I followed the steps at http://wiki.axiom-developer.org/InstallingMathAction
where it finally says:
6) Restart zope: /etc/init.d/zope restart

Of course, I have installed zope before. 'apt-get install zope' should 
do for debian sarge.

/etc/init.d/zope restart

has to be called as 'root'. And did not give me any return message.

> You should now be able to access the Zope management interface
> from a web browser on your system via the url
> 
>   http://localhost:8080
> 
> (port 8080 is the default port for Zope)

Does not work. I see a page in FireFox:
Unable to connect
Firefox can't establish a connection to the server at localhost:8080.

> If all is well, then you will need to use this interface to add
> new "Zwiki" object called 'mathaction' with the (*) latexwiki
> option checked off.

Hmm, this sounds as if I get MathAction without the same content I see 
at http://wiki.axiom-developer.org/FrontPage. Where is this content? And 
where could I download it from for offline use?

\start
Date: Tue, 10 Jan 2006 12:48:53 -0500
From: Bill Page
To: Alfredo Portes
Subject: re: Doyen

On Tuesday, January 10, 2006 9:19 AM you wrote:

> Sorry Bill that I did not answer your email before, having
> multiple exams this week.

No problem.

> I was thinking I did all the steps, but probably I missed
> something. I will try them again.

I have to admit that it's pretty complicated to get everything
just right. One thing I need to do is provide more useful error
and debugging output.

I updated the MathAction repository with some improvements to
'ReplacePamphlet.py' and 'pamphletWrapper.py' so that the
generate proper error messages.

You should use

  cd <your repository>
  darcs pull

to get these updates.

> When I said a blank page, I meant the the pamphlet information
> is not displayed. No initial image, no src, no pdf, etc. I will
> check the logs and directories like you indicated me.

With these new patches, you should be able to get a useful
error message in your browser. Let me know what you get.

\start
Date: Tue, 10 Jan 2006 13:23:48 -0500
From: Bill Page
To: Ralf Hemmecke
Subject: RE: Local MathAction

Ralf,

On Tuesday, January 10, 2006 11:01 AM you wrote:
> ...
> Can't you simply change texbreaker.mak? Or does it work
> for some good reason with python2.3 on your machine?

Python 2.2 is rather old. We have been using python2.3
for almost 2 years on MathAction. The current version is
Python 2.4 and I hope to upgrade MathAction to this new
version real-soon-now. The newer versions of Zope require
at least Python 2.3 and run better/faster with 2.4. You
can find Python 2.4 and newer versions of Zope on
Debian/testing. But if all you want to get is a basic
running system, then following the old recipe should be
ok.

>
> > Great! You are about half-way there ... :)
>
> Well, it would be easier if one does not have to modify
> files like ReplaceInlineLatex.py or axiomWrapper.py.

Agreed.

>
> Wouln't it also be an option to provide a dummy "reduce"
> script which accepts some (Reduce) input and always
> outputs a string in Reduce format, saying that Reduce is
> not installed. Could you provide such a shell script?

It should not be necessary to have Reduce installed
provided that you do not try to run any \begin{reduce} ...
commands. Perhaps the current code does not check, but
it should not even try unless it sees \begin{reduce}.
If it does, then please let me know the error message
and I will try to make corrections to the code.

> ...
> Ehm, maybe I don't understand MathAction correctly.

MathAction is an interactive web site. The content is
created by the users over the web. It is stored in a
database on the server and presented to the user as
ordinary web pages (with the option to edit and comment).
When MathAction is run locally, your computer acts as
both the server and the workstation. Since MathAction can
interact with Axiom (and other systems), this means that
you can use a locally running MathAction system as a user
interface to Axiom. This user interface allows you to
save "Axiom worksheets" as web pages in a manner similar
to the way you can save worksheets in Mathematical and
Maple.

> What I actually want is a snapshot of the MathAction pages.
> And if I could have all the functionality of running Axiom
> through a local webserver (without actually being connected
> to the internet then all the better. The SnapShot that Bill
> Page provided as an archive of HTML pages is not completely
> satisfactory.

In what way is it not satisfactory? Do you mean because it is
not "live"? Of course it consists of only a "snapshot" of
what tha pages on MathAction were like on the day that the
snapshot was taken. It is only pure, dead HTML. No interaction
is possible - only navigation from one page to another.

>
> > I presume that you did previously install Zope, right? So
> > to start Zope need to do
> >
> >   $INSTANCE_HOME/bin/zopectl start
> >
> > This starts the server process and is the way you should
> > normally start the server. But it might be better to start
> > with
> >
> >   $INSTANCE_HOME/bin/runzope
> >
> > which runs zope as a process in your current session and
> > gives some useful console output. You should see some
> > warning messages but no error messages.
>

The commands above are for a "newer" version of Zope - the
version 2.7 of Zope that we are using on MathAction.

> I followed the steps at
> http://wiki.axiom-developer.org/InstallingMathAction
> where it finally says:
> 6) Restart zope: /etc/init.d/zope restart
>

This is for an older version of Zope. But it should work
anyway.

> Of course, I have installed zope before.
> 'apt-get install zope' should do for debian sarge.
>
> /etc/init.d/zope restart
>
> has to be called as 'root'. And did not give me any return
> message.

Yes, this should be ok. But you should check the zope
configuration file (look in a directory for a file name
something like ...zope/etc/zope.conf. If you can't find
it easily then just examine

  cat /etc/init.d/zope

There should be an environment variable that points to the
configuration file. Or in older versions of Zope this was
just passed as an internal parameter in the above script.

>
> > You should now be able to access the Zope management
> > interface from a web browser on your system via the url
> >
> >   http://localhost:8080
> >
> > (port 8080 is the default port for Zope)
>
> Does not work. I see a page in FireFox:
> Unable to connect Firefox can't establish a connection to
> the server at localhost:8080.

If zope is running you should be able to see 'python' in the

  ps -A

or 'top' process list. If there is one or more active 'python'
processes, then the problem is likely that you have the wrong
port number. Please check the configuration file for the exact
port number.

If you want (or might be necessary on some systems if the
default port is already used for some other purpose), then
you can edit the configuration file and change the default
port to what you want. Usually a 4 digit number close to 8080
should be ok and only accessible locally if you have even a
simple firewall. If you have an aggressive firewall on your
workstation you might have to configure your firewall to
allow the use of the port that you choose. On a default
Debian Sarge installation this should be no problem.

It would be a very good idea for you to get the command:

  http://localhost:<portnumber>

to work before you add the LatexWiki and Axiom Wiki components.

>
> > If all is well, then you will need to use this interface
> > to add new "Zwiki" object called 'mathaction' with the
> > (*) latexwiki option checked off.
>
> Hmm, this sounds as if I get MathAction without the same
> content I see http://wiki.axiom-developer.org/FrontPage.

That is correct. You would start with an empty wiki with
a default FrontPage that does not look much at all like
MathAction. But if all goes well, it should have the same
*functionality" as MathAction.

> Where is this content?

The content of the wiki is stored in the Zope database.

> And where could I download it from for offline use?
>

Once you have your own local MathAction running on your
workstation, you can use the "import" function in the
Zope Management Interface (ZMI) to load content that has
been "exported" from axiom-developer.org MathAction site.

You can also use "cut-and-paste" from one edit widows
(axiom-developer.org) to another edit window (localhost).

I hope this is clear. But if not please continue to ask
about this.

\start
Date: Wed, 11 Jan 2006 09:15:38 -0800 (PST)
From: Cliff Yapp
To: list
Subject: Aldor?

Hey all - been a bit quiet lately :-).  I was wondering, has anybody
heard anything new on the status of Aldor?

\start
Date: Wed, 11 Jan 2006 13:26:38 -0500
From: Bill Page
To: Ralf Hemmecke
Subject: RE: Local MathAction

Ralf,

On January 11, 2006 8:32 AM you wrote:
> ... 
> As for the export/import of the "official" MathAction content...
> Would it be possible to download the 200M database once, put it 
> into my local MathAction and later use rsync to synchronize with
> the "official" database so that I run a mirror of the official
> content (perhaps with minor local sandboxes).
> 

Yes! It is possible for you to do this. In fact I think it would
be really great to have more such "mirrors". So far only Bob
McElrath has done this, with my encouragement, as a means to
backup the contents of the MathAction website. He did it initially
about 6 months ago (September 2005) and I think he has done irregular
updates of his local copy of the MathAction zope database a few times
since then.

You can use rsync to maintain a strict mirror of the MathAction
site, but re-sync'ing local content with the "official" database
is not quite so simple because of the need to merge potentially
conflicting changes, but there is a specific Zope product called
Zsyncer which is supposed to make this possible:

http://www.zope.org/Members/slinkp/zsyncer_0-7-0
http://sourceforge.net/projects/zsyncer

So far, Bob McElrath and I have only done some initial experiments
with this. If/when you get your local copy of MathAction working,
I would be glad to continue research this possibility.


On January 11, 2006 11:28 AM you wrote:
> 
> you can forget about my previous attachment. I found out that 
> the server runs as the user 'zope' and did not have read access
> to the INSTANCE directory since that belonged to 'root'.

Well, that's progress! :)

> 
> I have updated the steps (see attachment).

Thanks.

I am a little worried about the complications regarding the
location of the Zope products and the access permissions to
the Zope instance that you created. I have always installed all
Zope products into the 'instance' directory, which in your case
would be

  /var/lib/zope2.7/instance/zope1/Products

although older versions of Zope did do this differently.

I recommend that you leave the access permissions the same as
when the instance was created, but instead make sure that the
directory, subdirectories and files are owned by the same user
that runs Zope, e.g. check

  ls -l -d /var/lib/zope2.7/instance

then change the owner and group to match the above

  chown -R zope:zope /var/lib/zope2.7/instance/*

I have never used the Debian zope-zwiki package

  apt-get install zope-zwiki

Apparently it installs Zwiki-0.37 but in an odd location. I note
that Simon Michael (the Zwiki developer) says:

http://zwiki.org/InstallingOnDebian#msg438FB34E.808@joyful.com

zope-zwiki_0.37.0 compatibility --Simon Michael, Thu, 01 Dec 2005
18:36:36 -0800 reply Hi.. I don't recommend you use the zope-zwiki
package in debian - as you can see from it's last modified date,
and http://zwiki.org , it's way out of date. Download from zwiki.org
instead. Do please bug the debian package maintainer about this.
-------

ZWiki-0.37 is about 1 year old (the current version is 0.48. See

http://zwiki.org/repos/ZWiki/releases

But on the other hand, the last stable version of LatexWiki is 0.35
and it is known to work with at least the corresponding version
number of Zwiki-0.35

http://mcelrath.org/Notes/LatexWiki

Since Bob has stopped actively maintaining LatexWiki, it might be
easiest (at least to get the first running a system) to work with
these known versions:

http://zwiki.org/repos/ZWiki/releases/ZWiki-0.35.0.tgz

http://mcelrath.org/LatexWiki-0.35.tar.gz

I suggest that you remove zope-zwiki

  /var/lib/zope2.7/instance/zope1/bin/zopectl stop
  apt-get remove zope-zwiki

and then untar Zwiki-0.35 directly into the Products directory

  cd /var/lib/zope2.7/instance/zope1/Products
  wget http://zwiki.org/repos/ZWiki/releases/ZWiki-0.35.0.tgz
  tar xzvf ZWiki-0.35.0.tgz
  chown -R zope:zope *
  /var/lib/zope2.7/instance/zope1/bin/zopectl start

Test that you can create a plainwiki in ZMI

  http://localhost:9673/manage

Now install LatexWiki in the same place

  /var/lib/zope2.7/instance/zope1/bin/zopectl stop
  cd /var/lib/zope2.7/instance/zope1/Products
  wget http://mcelrath.org/LatexWiki-0.35.tar.gz
  tar xzvf LatexWiki-0.35.tar.gz
  mv latexwiki/*
  rm latexwiki
  chown -R zope:zope *
  /var/lib/zope2.7/instance/zope1/bin/zopectl start

The mv and rm are necessary because the contents of the sub-
directory ZWiki in the LatexWiki tarball is intended to be
merged into the existing ZWiki directory. And the LatexWiki
sub-directory is really the LatexWiki product itself.

> Unfortunately, although I now see the latexwiki type on a
> 
> Add a ZWiki web
> 
> entering an id and title and clicking "create wiki" leads to 
> the error below. Have you any idea?

With the new installation procedure above, I am quite sure this
will work.

> 
> Site Error
> 
> An error was encountered while publishing this resource.
> 
> RuntimeError
> Sorry, a site error occurred.
> 
> Traceback (innermost last):
> 
> * Module ZPublisher.Publish, line 175, in publish_module_standard
> * Module ZPublisher.Publish, line 132, in publish
> * Module Zope.App.startup, line 204, in zpublisher_exception_hook
> * Module ZPublisher.Publish, line 101, in publish
> * Module ZPublisher.mapply, line 88, in mapply
> * Module ZPublisher.Publish, line 39, in call_object
> * Module Products.ExternalMethod.ExternalMethod, line 
>        206, in __call__
> 
> RuntimeError
> 
> Troubleshooting Suggestions
> 
>  * The URL may be incorrect.
>  * The parameters passed to this resource may be incorrect.
>  * A resource that this resource relies on may be 
> encountering an error.
> 
> For more detailed information about the error, please refer 
> to error log.
> 

Unfortunately this does not give any very useful information. The
problem in ExternalMethod might have something to do with the none
standard zope-zwiki installation and/or access permissions.

To check the error log go to ZMI

  http://localhost:9673/manage

and click on 'error_log'. Then click on the link under Exception.
You can send me the contents of what you see when you click
'Display traceback as text'. It should be a little more complete
than the traceback that you sent above.

On the other hand, if re-installing as I suggest above works,
this is probably unnecessary.

\start
Date: Wed, 11 Jan 2006 16:00:10 -0500
From: Bill Page
To: Cliff Yapp
Subject: RE: Aldor?

Clifford,

On January 11, 2006 12:16 PM you wrote:
> 
> Hey all - been a bit quiet lately :-).  I was wondering, has
> anybody heard anything new on the status of Aldor?
>

No... and it is quite discouraging.

Please write to Steven Watt at

   Stephen Watt

and ask him. There must be some way to get a response. See my
most recent email to Steven below. This follows several other
emails and phone calls, but still nothing.

Regards,
Bill Page.


> -----Original Message-----

> Dear Stephen Watt,
> 
> It's been more than two months since your email concerning the
> possible open source license for Aldor. I have not heard any
> news of any sort about Aldor since then.
> 
> When you have a few moments to spare, could you please let me
> know the status of the Aldor source license? I am anxious to
> resolve this issue since I think it would be of great benefit
> to both the Aldor project and the open source Axiom project.
> 
> I am hoping to hear from you soon.
> 
> Sincerely,
> Bill Page.
> 
> > -----Original Message-----
> > From: Stephen Watt [mailto:Stephen Watt] 
> > Sent: October 20, 2005 11:07 PM
> > To: Bill Page
> > Subject: Re: compiling Aldor from source for x86-64
> > 
> > 
> > Dear Bill,
> > 
> > This is to let you know that I got your message.  I've taken 
> > a bit longer to respond than planned because we are now
> > contemplating adopting a complete open source license for
> > everyone.  This might take a bit of time, however, so it
> > might make sense to go ahead on an individual basis with
> > you beforehand.

\start
Date: Thu, 12 Jan 2006 10:39:00 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Bill Page writes:
...
>> Hey all - been a bit quiet lately :-).  I was wondering, has
>> anybody heard anything new on the status of Aldor?
>>
>
> No... and it is quite discouraging.
>
> Please write to Steven Watt at
>
>    Stephen Watt
>
> and ask him.

Would it help to have more people write?

>> > From: Stephen Watt [mailto:Stephen Watt]
>> > Sent: October 20, 2005 11:07 PM
>> > To: Bill Page
>> > Subject: Re: compiling Aldor from source for x86-64
>> >
>> >
>> > Dear Bill,
>> >
>> > This is to let you know that I got your message.  I've taken
>> > a bit longer to respond than planned because we are now
>> > contemplating adopting a complete open source license for
>> > everyone.  This might take a bit of time, however, so it
>> > might make sense to go ahead on an individual basis with
>> > you beforehand.

I don't understand this.  If it isn't open source for everyone, it
isn't open source.  (I'm guessing open source will also mean free.)
So what would the individual basis be?

\start
Date: Thu, 12 Jan 2006 13:57:37 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

On January 12, 2006 11:39 AM Jay Belanger wrote:
> 
> Bill Page writes:
> ...
> >
> > Please write to Steven Watt at
> >
> >    Stephen Watt
> >
> > and ask him.
> 
> Would it help to have more people write?

Yes! Please write to Steven Watt. I think it would definitely
help if it is clear to Steven that many people would like to
have Aldor open source. Maybe what we need is a kind of
"petition" that people could "sign" and email to him. I fear
that perhaps Steven does not take my claims that this is
desired by many people very seriously.

> 
>> >
>> Dear Bill,
>> 
>> This is to let you know that I got your message.  I've taken
>> a bit longer to respond than planned because we are now
>> contemplating adopting a complete open source license for
>> everyone.  This might take a bit of time, however, so it
>> might make sense to go ahead on an individual basis with
>> you beforehand.
> 
> I don't understand this.  If it isn't open source for everyone,
> it isn't open source.  (I'm guessing open source will also
> mean free.) So what would the individual basis be?
> 

Perhaps a Steven Watt is not entirely clear on the concept of
"open source" (I think a lot of people continue to be confused
about this.) but what I understood by this was that, yes he
is planning to make Aldor available as open source in the way
that most people mean it, e.g. with a GPL, BSD-style or even
IBM's new CPL license. This would make Aldor easily available
to everyone.

But since Steven says he anticipates that it would take some
time to do this (The precise reason for the delay is not clear
since I thought the decision was basically just his to make.),
then he was telling me that he was willing to consider my
earlier request for a individual Aldor developer license to
me personally, as an interim measure. Aldor has been "freely"
available to researches in this manner on the basis of individual
requests since it was release to Steven Watt by Numerical
Algorithms Group in about 2001.

In another email I agreed to the individual license, but still
I have not heard from him about either the open source license
or the individual license.

\start
Date: Thu, 12 Jan 2006 13:49:25 -0600
From: Jay Belanger
To: list
Subject: Re: Aldor?

Bill Page writes:
...
> Yes! Please write to Steven Watt.

Done.

> I think it would definitely help if it is clear to Steven that many
> people would like to have Aldor open source. Maybe what we need is a
> kind of "petition" that people could "sign" and email to him. I fear
> that perhaps Steven does not take my claims that this is desired by
> many people very seriously.

How is such a petition made?  Web-based, or an email that many people
agree to have their names on?  If the former, there are several online
petition hosting sites (such as www.petitiononline.com and
www.thepetitionsite.com) but it might be better to have something
easily signable on the Axiom website; if the latter, put my name on it
(and I could write something if you want).

\start
Date: Thu, 12 Jan 2006 12:00:05 -0800 (PST)
From: Cliff Yapp
To: Bill Page, Jay Belanger
Subject: RE: Aldor?

--- Bill Page wrote:

> > > Please write to Steven Watt at
> > >
> > >    Stephen Watt
> > >
> > > and ask him.

Well, I sent him an email (I think - tried the address on his
university website for variety).
 
> > Would it help to have more people write?
> 
> Yes! Please write to Steven Watt. I think it would definitely
> help if it is clear to Steven that many people would like to
> have Aldor open source. Maybe what we need is a kind of
> "petition" that people could "sign" and email to him. I fear
> that perhaps Steven does not take my claims that this is
> desired by many people very seriously.

Hmm.  What about the other option, to go "back to the source" so to
speak - NAG?  Or does Stephen now have full rights to all Aldor code
now?

Of course, there is the third option of doing Aldor ourselves starting
with the existing SPAD work.  Perhaps we will have to consider that,
even if it is a lot of work :-(.  It would be better than all serious
work being stalled waiting on a language decision.

\start
Date: Thu, 12 Jan 2006 13:19:06 -0800
From: Karl Hegbloom
To: list
Subject: RE: Aldor?

On Thu, 2006-01-12 at 13:57 -0500, Bill Page wrote:
> Yes! Please write to Steven Watt. I think it would definitely
> help if it is clear to Steven that many people would like to
> have Aldor open source. Maybe what we need is a kind of
> "petition" that people could "sign" and email to him. I fear
> that perhaps Steven does not take my claims that this is
> desired by many people very seriously.

(petition signed) Karl Hegbloom

> In another email I agreed to the individual license, but still
> I have not heard from him about either the open source license
> or the individual license.

What are the restrictions of that license, I wonder?  Are you allowed to
re-license it, or modify and share source?  What kind of restrictions
does it make wrt reverse-engineering, for something like a clean-room
reimplementation of it?  After having viewed it's source, are you
restricted from working on such a thing?  Is a rewrite a good idea, or
not?

\start
Date: Thu, 12 Jan 2006 17:22:08 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

On January 12, 2006 2:49 PM Jay Belanger wrote:

> ...
> Bill Page writes:
> > I think it would definitely help if it is clear to Steven that many
> > people would like to have Aldor open source. Maybe what we need is a
> > kind of "petition" that people could "sign" and email to him. I fear
> > that perhaps Steven does not take my claims that this is desired by
> > many people very seriously.
> 
> How is such a petition made?  Web-based, or an email that many people
> agree to have their names on?  If the former, there are several online
> petition hosting sites (such as www.petitiononline.com and
> www.thepetitionsite.com) but it might be better to have something
> easily signable on the Axiom website; if the latter, put my name on
> it (and I could write something if you want).
> 

I would be very glad if you could write something.

I am not sure whether a formal petition is really necessary (although
I have it very interesting to learn that websites devoted to the
purpose actually exist ... :)

The Axiom website is a wiki (user editable), so it would be very
easy to add a page consisting of the petition to Free Aldor. We
could freeze the text and then readers could "sign" it by simply
adding a comment.

\start
Date: Thu, 12 Jan 2006 17:32:14 -0500
From: Bill Page
To: Karl Hegbloom
Subject: RE: Aldor?

On > Sent: January 12, 2006 4:19 PM Karl Hegbloom wrote:
> 
> On Thu, 2006-01-12 at 13:57 -0500, Bill Page wrote:
> > ... Maybe what we need is a kind of "petition" that people
> > could "sign" and email to him. I fear that perhaps Steven
> > does not take my claims that this is desired by many people
> > very seriously.
> 
> (petition signed) Karl Hegbloom

Thanks!

> 
> > In another email I agreed to the individual license, but still
> > I have not heard from him about either the open source license
> > or the individual license.
> 
> What are the restrictions of that license, I wonder?  Are you 
> allowed to re-license it, or modify and share source?

Having never actually seen the "source license" for Aldor, I can
not answer this question directly, but the rational for the binary
license for Aldor

http://www.aldor.org/license-rationale.html

"The fourth clause is present for two reasons:

    * Parts of the existing code base in the software package that
this license is applied to require Aldor.org to make any updates
available to the initial contributors. The clause is there to give
Aldor.org the right to do this.
    * It reserves for major contributors, through Aldor.org, greater
flexibility to create and exploit potential future software based on
this work, and protects them where they have existing non-open software
that is related to or shares some code with this work. 

> What kind of restrictions does it make wrt reverse-engineering, for
> something like a clean-room reimplementation of it?  After having
> viewed it's source, are you restricted from working on such a thing?

No, I don't think that is the intention. The binary license, at least,
is not a non-disclosure agreement.

> Is a rewrite a good idea, or not?
> 

I believe that rewriting is way beyond the scope of what is currently
possible with the resource currently available to the open source
Axiom project.

\start
Date: Thu, 12 Jan 2006 18:30:55 -0500
From: Doug Stewart
To: Bill Page
Subject: Re: Aldor?

I live in London near the uwo. Is there any point in me going to see him?

If I did set up an appointment what would you want me to say to him?

Doug Stewart P.Eng.

UWO Graduate

\start
Date: Fri, 13 Jan 2006 00:41:24 +0100
From: Frederic Lehobey
To: list
Subject: Re: Aldor?

On Thu, Jan 12, 2006 at 01:57:37PM -0500, Bill Page wrote:
> On January 12, 2006 11:39 AM Jay Belanger wrote:
> > 
> > Bill Page writes:
> > ...
> > >
> > > Please write to Steven Watt at
> > >
> > >    Stephen Watt
> > >
> > > and ask him.
> > 
> > Would it help to have more people write?
> 
> Yes! Please write to Steven Watt. I think it would definitely
> help if it is clear to Steven that many people would like to
> have Aldor open source. Maybe what we need is a kind of
> "petition" that people could "sign" and email to him. I fear
> that perhaps Steven does not take my claims that this is
> desired by many people very seriously.

I would never do such a thing.  I consider it harassment and very
childish.

I have the greatest respect (and recognition) for people contributing
to free software by putting the software they have rights on under any
free software license.  If Steven Watt belongs to such people is his
own choice (if even he has such a choice) and I respect everybody's
choice whatever is this choice.

I am very sad for people from the Axiom community to give such a
message as `we have such a good free software that we are willing to
drop it for an other replacement, please open source this possible
substitute'.

Thanks Tim and other contributors for the impressive work already
achieved.  Keep up the good work and happy new year.

Best regards,
Frederic
(Sorry if it sounds too harsh, I am not a native English speaker.)

\start
Date: Thu, 12 Jan 2006 16:07:02 -0800 (PST)
From: Cliff Yapp
To: Frederic Lehobey
Subject: Re: Aldor?

--- Frederic Lehobey wrote:

> I am very sad for people from the Axiom community to give 
> such a message as `we have such a good free software that 
> we are willing to drop it for an other replacement, please
> open source this possible substitute'.

Aldor is a conceptual heir of SPAD, and fixes some known problems with
the SPAD language.  Since part of Axiom's philosophy is to do things
RIGHT, it makes sense to want to use the most advanced form of the
language available, if in fact it IS available.  We can and will work
with SPAD if we need to, but if a better alternative exists it is
logical to pursue it until it is clear that that option is not
available.  Either case is acceptable, but there is a hesitancy about
doing major work on the math part of Axiom until it is clear which
language we will be using.  I tend to think of Axiom in the same way I
think of TeX - it is attempting to become EXTREMELY high quality
software, in every way.  Aldor would presumably aid us in that goal. 
But, at least for my part, if I am going to learn a new language I
would like to know which one to focus on from the get-go.

\start
Date: Thu, 12 Jan 2006 21:38:49 -0500
From: Bill Page
To: Frederic Lehobey
Subject: RE: Aldor?

On January 12, 2006 6:41 PM Frederic Lehobey wrote:
> > Bill Page writes:
> ...
> > 
> > Yes! Please write to Steven Watt. I think it would definitely
> > help if it is clear to Steven that many people would like to
> > have Aldor open source. Maybe what we need is a kind of
> > "petition" that people could "sign" and email to him. I fear
> > that perhaps Steven does not take my claims that this is
> > desired by many people very seriously.
> 
> I would never do such a thing.  I consider it harassment and
> very childish.

How odd that you think this way! How is someone like Steven Watt
to know that there are many people who are anxious to use his
work if we do not tell him? I do not consider it harrassment
that I have sent emails asking about the state of the plans
to make Aldor open source at the rate of about one 1 email/phone
call per month since September.

> 
> I have the greatest respect (and recognition) for people
> contributing to free software by putting the software they have
> rights on under any free software license.  If Steven Watt belongs
> to such people is his own choice (if even he has such a choice)
> and I respect everybody's choice whatever is this choice.

Of course I agree 100% with you. I also have the greatest respect
for Steven Watt and the other developers of Aldor. I do respect
his choice. Already the binary version of Aldor is freely available.
This arrangement for Aldor was made more than 5 years ago at a
time before the concept of open source was well defined. I am quite
sure that that is the only reason why Aldor is not already open
source. I think what is left is only to over come the inertia of
making the necessary arrangements. No doubt this coupled with a
busy research schedule has not yet allowed anyone to given
priority to making the status of the Aldor source code clear.

> 
> I am very sad for people from the Axiom community to give such a
> message as `we have such a good free software that we are willing
> to drop it for an other replacement, please open source this
> possible substitute'.

I think you do not understand. Aldor *is* (at least was) a part
of Axiom. It was designed as "version 2" of the Axiom library
compiler during the latter stages of Axiom research at IBM.
Steven Watt was one of the primary developers. When Axiom was
a commercial product sold by NAG, Aldor was included in the
package.

When NAG discontinued the sale of Axiom, Aldor was the first part
of the system that was made publically available (in binary form)
through "aldor.org" which as I understand it, was the initiative
of Steven Watt. At the time apparently no one wanted to take on
the responsibility for making the rest of Axiom available. It was
a few years later when Tim Daly made the necessary arrangements
to open source the rest of Axiom, but the previous arrangments for
the Aldor part were already in force.

So what we are really talking about is finding a way to re-unite
the two part of Axiom as a single open source project (or at least
two closely related open source projects).

> 
> Thanks Tim and other contributors for the impressive work
> already achieved.  Keep up the good work and happy new year.
> 
> Best regards,
> Frederic
> (Sorry if it sounds too harsh, I am not a native English speaker.)
> 

Frederic, thank you for your comments. No, I do not think that
it sounds harsh. I am happy that you have expressed your opinions.

\start
Date: Thu, 12 Jan 2006 21:40:35 -0500
From: Bill Page
To: Doug Stewart
Subject: RE: Aldor?

On January 12, 2006 6:31 PM Doug Stewart wrote:
> 
> I live in London near the uwo. Is there any point in me going 
> to see him?

Sure, why not? I expect you would find such a meeting very
interesting.

> 
> If I did set up an appointment what would you want me to say
> to him?

Hmmm, maybe: "When will Aldor be available as open source?" :)

\start
Date: Fri, 13 Jan 2006 09:00:02 -0600
From: Jay Belanger
To: Frederic Lehobey
Subject: Re: Aldor?

Frederic Lehobey writes:
...
>> Yes! Please write to Steven Watt. I think it would definitely
>> help if it is clear to Steven that many people would like to
>> have Aldor open source. Maybe what we need is a kind of
>> "petition" that people could "sign" and email to him. I fear
>> that perhaps Steven does not take my claims that this is
>> desired by many people very seriously.
>
> I would never do such a thing.  I consider it harassment and very
> childish.

I think there's a misunderstanding here.
There is a big difference between one person waiting and a community
of people waiting for something.  Letting Steven Watt know that there
is a community waiting for a potential relicensing of Aldor is
not only a reasonable thing to do, it could be argued that not letting
him know would be a disservice to Axiom.  I think it goes without
saying that anything sent to him would be friendly and cordial.

> I have the greatest respect (and recognition) for people
> contributing to free software by putting the software they have
> rights on under any free software license.  If Steven Watt belongs
> to such people is his own choice (if even he has such a choice) and
> I respect everybody's choice whatever is this choice.

Nobody is suggesting it isn't his choice.  That doesn't mean we can't
respectfully ask that he make a particular choice.

> I am very sad for people from the Axiom community to give such a
> message as `we have such a good free software that we are willing to
> drop it for an other replacement, please open source this possible
> substitute'.

This is an improvement, not a replacement, for Axiom.  I think
the only message being sent is that we want to improve Axiom as much
as possible.

> Thanks Tim and other contributors for the impressive work already
> achieved.  Keep up the good work and happy new year.

\start
Date: Fri, 13 Jan 2006 11:05:42 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Bill Page writes:
...
> I would be very glad if you could write something.

So that any potential signers could get a quick grasp of the
situation, a little history might be useful.  What about
something like:

   Axiom is a sophisticated computer algebra system originally
   developed by the the Numerical Algorithms Group (NAG).  After NAG
   discontinued work on Axiom, they generously released the source
   code under a free license.  Axiom is now very usable and is
   currently being actively developed by an enthusiastic community.
   It is expected to be useful in research and education for quite
   some time.

   The language used for writing Axiom programs is called SPAD (short
   for Scratchpad, the original name of Axiom).  While Axiom was still
   being developed by NAG, an improved extension language called Aldor
   was created. While the Aldor compiler was originally part of the
   Axiom system, it soon became a separate project and was not part of
   Axiom when the Axiom sources were relicensed.

   Binaries for Aldor have been made freely available and the sources
   are available under a generous license.  However, the license does
   not qualify as a free or open source license.  While Axiom can
   still be built using Aldor, the lack of a free license for Aldor
   prohibits it from being a standard part of Axiom, and so nothing in
   the base Axiom system can assume that Aldor is included.

   A free license for Aldor would allow it to become a standard part
   of Axiom, which would improve Axiom and make Aldor a more
   widespread language.  A free license available as soon as possible
   would allow current development on Axiom to use Aldor.

   We, the undersigned, respectfully request that the Aldor compiler
   be released under a free license at the earliest opportunity.

   Sincerely,

> I am not sure whether a formal petition is really necessary (although
> I have it very interesting to learn that websites devoted to the
> purpose actually exist ... :)

Quite a few, too.
A formal petition probably isn't necessary, but something to let
Steven Watt know that a lot of people are interested would be 
useful.

> The Axiom website is a wiki (user editable), so it would be very
> easy to add a page consisting of the petition to Free Aldor. We
> could freeze the text and then readers could "sign" it by simply
> adding a comment.

That might not be a bad idea.  We would have to get Steven Watt to
look at it, of course.
>From the letter from Steven Watt that you quoted, it sounds like he's
willing to free Aldor when he gets the chance.  If he's like me, he
just needs a reminder now and then.  Whatever we can do to provide a
nudge would be useful. 

\start
Date: Fri, 13 Jan 2006 13:22:46 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

On January 13, 2006 12:06 PM Jay Belanger wrote:
> ... 
> So that any potential signers could get a quick grasp of the
> situation, a little history might be useful.  What about
> something like:

Thanks for the draft. I think it is very good. I have inserted
a few explanations below. I will leave it up to you exactly
how to modify the text.

> 
>    Axiom is a sophisticated computer algebra system originally
>    developed by the Numerical Algorithms Group (NAG).

Axiom was actually developed as an IBM research project. It
was sold to NAG with the intention that NAG would market it
commercially, which they did for a few years. NAG also made
some improvements and developed and marketed a PC version. (The
PC versions depended on software called texplorer which
was separately licensed and not available to at the time
Axiom became open source.)

>    After NAG discontinued work on Axiom, they generously
>    released

After NAG discontinued Axiom as a commercial product ...

>    the source code under a free license.

... part of the Axiom source code (excluding the Aldor compiler) ...

>    Axiom is now very usable and is currently being actively
>    developed by an enthusiastic community. It is expected to be
>    useful in research and education for quite some time.
> 
>    The language used for writing Axiom programs is called SPAD
>    (short for Scratchpad, the original name of Axiom).  While Axiom
>    was still being developed by NAG, an improved extension language
>    called Aldor was created.

Aldor was written while Axiom was still an IBM research project.
SPAD and Aldor are only used to write Axiom library code - not
Axiom per se. Axiom and the SPAD compiler are written in Lisp.
Aldor is written in C.

>    While the Aldor compiler was originally part of the Axiom system,
>    it soon became a separate project and was not part of Axiom when
>    the Axiom sources were relicensed.

As I understand it, Aldor did not exist as a separate project until
after NAG discontinued the sale of Axiom as a commercial product.

> 
>    Binaries for Aldor have been made freely available and the sources
>    are available under a generous license.  However, the license does
>    not qualify as a free or open source license.  While Axiom can
>    still be built using Aldor, the lack of a free license for Aldor
>    prohibits it from being a standard part of Axiom, and so nothing
>    in the base Axiom system can assume that Aldor is included.
> 
>    A free license for Aldor would allow it to become a standard part
>    of Axiom, which would improve Axiom and make Aldor a more
>    widespread language.  A free license available as soon as possible
>    would allow current development on Axiom to use Aldor.
> 
>    We, the undersigned, respectfully request that the Aldor compiler
>    be released under a free license at the earliest opportunity.
> 
>    Sincerely,

I think the rest of the proposed letter is fine.

> ... 
> > The Axiom website is a wiki (user editable), so it would be very
> > easy to add a page consisting of the petition to Free Aldor. We
> > could freeze the text and then readers could "sign" it by simply
> > adding a comment.
> 
> That might not be a bad idea.  We would have to get Steven Watt to
> look at it, of course.

Ok, unless someone has serious objections, I think we can post a
revision of a letter such as you wrote above on the Axiom wiki.

> > From the letter from Steven Watt that you quoted, it sounds like
> > he's willing to free Aldor when he gets the chance.  If he's like
> > me, he just needs a reminder now and then.  Whatever we can do to
> > provide a nudge would be useful. 
> 

Yes, I think that is exactly the case.

\start
Date: Fri, 13 Jan 2006 20:51:56 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Bill Page writes:

> On January 13, 2006 12:06 PM Jay Belanger wrote:
>> ...
>> So that any potential signers could get a quick grasp of the
>> situation, a little history might be useful.  What about
>> something like:
>
> Thanks for the draft. I think it is very good. I have inserted
> a few explanations below. I will leave it up to you exactly
> how to modify the text.

Thanks for the additional information.  I've fixed the inaccuracies,
and below is another draft.  (Feel free to change it yourself if you
want, of course.)

Jay

   Axiom is a sophisticated computer algebra system originally
   developed as an IBM research project.  IBM sold Axiom to the
   Numerical Algorithms Group (NAG) who marketed it and continued its
   development.  After NAG discontinued Axiom as a commercial product
   they generously released part of the Axiom source code under a free
   license.  Axiom is now very usable and is currently being actively
   developed by an enthusiastic community. It is expected to be useful
   in research and education for quite some time.

   The language used for writing Axiom libraries is called SPAD (short
   for Scratchpad, the original name of Axiom).  While Axiom was still
   being developed by IBM, an improved language, Aldor, was created
   for writing Axiom libraries.  While the Aldor compiler was
   originally part of the Axiom system, it was became a separate
   project when NAG discontinued the sale of Axiom as a commercial
   product.  The Aldor compiler was not part of Axiom when the Axiom
   sources were relicensed, and so is not currently included with Axiom.

   Binaries for Aldor have been made freely available and the sources
   are available under a generous license.  However, the license does
   not qualify as a free or open source license.  While Axiom can
   still be built using Aldor, the lack of a free license for Aldor
   prohibits it from being a standard part of Axiom, and so nothing in
   the base Axiom system can assume that Aldor is included.

   A free license for Aldor would allow it to become a standard part
   of Axiom, which would improve Axiom and make Aldor a more
   widespread language.  A free license available as soon as possible
   would allow current development on Axiom to use Aldor.

   We, the undersigned, respectfully request that the Aldor compiler
   be released under a free license at the earliest opportunity.

\start
Date: Sat, 14 Jan 2006 20:50:17 -0800
From: Karl Hegbloom
To: list
Subject: RE: Aldor?

I went on-line trying to locate information about Aldor, and came across
this, via Google:

  http://www.cs.kent.ac.uk/pubs/1999/894/

www.algor.org is not responding.  Does anyone know why?

\start
Date: Fri, 13 Jan 2006 14:57:24 +0100
From: Kai Kaminski
To: Tim Daly
Subject: Patches for book--main--1

--=-=-=

Hi everyone!

Over the christmas holidays I added a few things to the developer
documentation (bookvol4). Mostly about the HyperDoc. The new table of
contents looks like this (stars mark the sections that I added/modified):

{1}Getting Axiom}
  {1.1}The savannah website
  {1.2}The axiom-developer website
{2}Building Axiom
  {2.1}Makefiles
  {2.2}Noweb
  {2.3}Directory Structure(*)
    I added a list of almost all directories not including those which
    are created at build time.

  {2.4}Packages in zip
  {2.5}Lisp
  {2.6}Boot Compiler
  {2.7}Interpreter
  {2.8}Share
  {2.9}Algebra
  {2.10}Etc
  {2.11}Clef
  {2.12}Doc
  {2.13}Graph
  {2.14}Sman
  {2.15}Input
  {3}Modifying Axiom
  {4}Becoming a Developer
  {4.1}Using Arch(*)
   {4.1.1}Other branches(*)
     A list of all existing branches.

   {4.1.2}Committing changes(*)
  {4.2}Contributing Patches(*)
  {4.3}Coding Guidelines(*)
   {4.3.1}General(*)
   {4.3.2}Lisp(*)
  {4.4}Workflow(*)
    A description of (a part of) Tim's workflow.

{5}Architecture and Implementation(*)
  {5.1}Processes(*)
  {5.2}Languages(*)
   {5.2.1}BOOT(*)
   {5.2.2}Lisp(*)
   {5.2.3}SPAD(*)
   {5.2.4}Aldor(*)
   {5.2.5}HyperTex(*)
   {5.2.6}C(*)
   {5.2.7}Other languages(*)
  {5.3}The BOOT{} Language(*)
  {5.4}The HyperDoc(*)
  {5.5}The Markup Language for HyperDoc Pages(*)
   {5.5.1}The Patch/Paste Mechanism(*)
   {5.5.2}Databases(*)
     The HyperDoc Database Format(*)
  {6}THINGS TO BE INTEGRATED(*)

Kai


--=-=-=

--- book--main--1--patch-6/bookvol4.pamphlet	2006-01-13 14:21:47.000000000 +0100
+++ Projekte/axiom/book--main--1--patch-6/bookvol4.pamphlet	2006-01-13 13:17:20.000000000 +0100
@@ -103,6 +103,22 @@
 \newcommand\UpBitmap{{\setlength{\unitlength}{0.01in}\begin{picture}(50,16)(0,0)\special{psfile=ps/up.ps}\end{picture}}}
 \newcommand{\tpd}[5]{{\setlength{\unitlength}{0.01in}\begin{picture}(#1,#2)(#3,#4)\special{psfile=#5}\end{picture}}}
 
+\newcommand{\hyperdoc}{HyperDoc}
+\newcommand{\spad}{SPAD}
+\newcommand{\aldor}{Aldor}
+\newcommand{\axiom}{Axiom}
+\newcommand{\ansicl}{ANSI Common Lisp}
+\newcommand{\boot}{BOOT}
+\newcommand{\hypertex}{HyperTex}
+\newcommand{\foam}{FOAM}
+
+\newcommand{\manual}{user manual}
+\newcommand{\hypercmd}[1]{{\tt \\#1}}
+\newcommand{\axiomprog}[1]{{\tt #1}}
+
+\newcommand{\bs}{\textbackslash} % Should produce a backslash in an itemize
+                   % environment
+
 \begin{document}
 \begin{titlepage}
 \center{\includegraphics{ps/axiomFront.ps}}
@@ -230,2414 +246,3493 @@
 \section{Makefiles}
 \section{Noweb}
 \section{Directory Structure}
-\section{Packages in zip}
-\section{Lisp}
-\section{Boot Compiler}
-\section{Interpreter}
-\section{Share}
-\section{Algebra}
-\section{Etc}
-\section{Clef}
-\section{Doc}
-\section{Graph}
-\section{Sman}
-\section{Input}
-\chapter{Modifying Axiom}
-\chapter{Becoming a Developer}
-\section{Using Arch}
-\chapter{THINGS TO BE INTEGRATED}
-\section{email 2}
-\begin{verbatim}
-There is something called the "add-chain formed by domain
-extensions" which is described in the Glossary of the Axiom
-book:
+\begin{itemize}
+\item {\tt \$AXIOM/license}
 
-  "add-chain
+  License information.
 
-  a hierarchy formed by domain extensions. If domain A extends
-  domain B and domain B extends domain C, then A has add-chain
-  B-C."
+\item {\tt \$AXIOM/lsp}
 
-and
+  Contains a makefile for building GNU Common Lisp. The build process
+  itself happens in this directory, too.
 
-  "domain extension
+\item {\tt \$AXIOM/src}
 
-  a domain constructor A is said to extend a domain constructor B
-  if A's definition has the form A == Badd.... This intuitively
-  means "functions not defined by A are assumed to come from B."
-  Successive domain extensions form add-chains affecting the
-  search order for functions not implemented directly by the
-  domain during dynamic lookup.
+  Contains all Axiom source code.
 
-  "dynamic lookup
+\item {\tt \$AXIOM/src/algebra}
 
-  In Axiom, a domain may or may not explicitly provide function
-  definitions for all its exported operations. These definitions
-  may instead come from domains in the add-chain or from default
-  packages. When a function call is made for an operation in the
-  domain, up to five steps are carried out.
-  1. If the domain itself implements a function for the operation,
-     that function is returned.
-  2. Each of the domains in the add-chain are searched; if one
-     of these domains implements the function, that function is
-     returned.
-  3. Each of the default packages for the domain are searched in
-     order of the lineage. If any of the default packages implements
-     the function, the first one found is returned.
-  4. Each of the default packages for each of the domains in the
-     add-chain are searched in the order of their lineage. If any
-     of the default packages implements the function, the first
-     one found is returned.
-  5. If all of the above steps fail, an error message is reported.
+  The mathematical libraries written in \spad.
 
----------
+\item {\tt \$AXIOM/src/booklets}
 
-\end{verbatim}
-\section{email 2}
-\begin{verbatim}
-> 
-> > The list of prerequisites for running axiom is huge, and
-> > getting worse it seems!
-> ... 
-> > So in the interest of having something people can download
-> > that is functional with a minimum of effort, I think axiom
-> > (and any help system or hyperdoc) should be decoupled from
-> > zope and zwiki.  A download (think windoze users here) which
-> > included zope, zwiki, latex, ghostscript, python, PIL, gcl,
-> > gcc, *and* axiom, is too much, methinks.
-> 
-> Heh - even I agree there.  Perhaps it would be best to
-> acknowledge the reality that if one wants to take advantage
-> of all the vast possibilities of open source software, that's
-> going to be at odds with having the full power of the system
-> available on all platforms, particularly Windows, as a single
-> package.  Surely power users who are willing and able to use
-> the full web-like setup, instead of just a TeXmacs or Mathematica
-> like document interface, would be willing to set it up or at
-> the very least boot a live Linux CD loaded with the full set
-> of Axiom tools and dependencies. 
-> 
+  Articles on specific areas of Axiom.
 
-Personally, although I have tried knoppix and some variants on
-several occasions I have always been a little disappointed
-and frustrated. The problem is that I live in linux about 1/2
-the time and windows the other 1/2 and when I boot one of these
-"live" things I feel like I am in neither. It's fun to play for
-an hour or so but then it goes in the desk draw with all the
-other things that once fascinated me but I haven't looked at
-for so long that they are now collecting dust. So I am quite
-sceptical about the utility of a "live" Axiom/Doyen CD except
-as a kind of conference "promotional gimmick".
+\item {\tt \$AXIOM/src/boot}
 
-Let's put the list in the following order and fill it in a
-few more:
+  The BOOT compiler.
 
-             gcc
-         /    |    \
-      gcl   latex   python
-      /       |      |    \
-     /    noweb      |    zope
-    /  /      |      |     /
- axiom   ghostscript PIL  zwiki
-      \      \       |   /
-       \       LatexWiki
-        \        /
-        MathAction
+\item {\tt \$AXIOM/src/clef}
 
-Add your favourite text editor and browser and set it all up
-in Linux/Unix or Windows.
+  Axiom's readline equivalent.
 
-There. Now that doesn't seem so large and complex does it?
-(: At least not if you compare it to the list of capabilities
-that this remarkable combination of entirely open source
-software provides... :) I am quite sure that this would all
-easily fit on one-side of a Cdrom, including documentation.
-And of course we can add as many more optional add-on packages
-as we want, such as Reduce, Aldor, Maxima, ... eventually all
-integrated with a common web interface.
+\item {\tt \$AXIOM/src/doc}
 
-What this gives you a fully web-integrated, collaborative
-mathematical research and development, hyper-linked publishing
-environment right on your desktop, or even in your pocket (I run
-almost all of this on a Zaurus 5600). This is all easily doable
-right now for free. I would have given my left arm for something
-like this back when I was a student!
+  Additional developer documentation.
+  % TODO kai: Should this be reorganized and integrated with this
+  % document?)
 
-\end{verbatim}
-\section{email 4}
-\begin{verbatim}
-> > Next we see the transition to compiling the non-BOOTSTRAP algebra.
-> > This is done in the interpsys image. It is also done in an image 
-> > that has access to only the BOOTSTRAP algebra code. Thus the 
-> > new compiler might not have all of the algebra-defined replacements
-> > available at compile time. Notice the autoload files that contain
-> > the optimizations.
-> >
-> 
-> What do you mean by "algebra-defined replacements". Where are
-> these replacements defined? How are they different than the
-> "optimizations" contained in the autoload files?
+\item {\tt \$AXIOM/src/doc/french}
 
-The BOOTSTRAP files contain lsp and spad code. The build steps
-for the initial BOOTSTRAP layer use "depsys" to compile the lisp
-code. So, in this case, we see VECTOR.lsp being compiled in the
-depsys image. VECTOR.lsp is the last algebra file that contains
-BOOTSTRAP code. So in this phase we see:
+  Additional documentation in French. 
+  % TODO kai: This seems to contain non-developer documentation as
+  % well, which should probably go somewhere else.
 
-VECTOR.lsp (BOOTSTRAP) -> VECTOR.o
+\item {\tt \$AXIOM/src/doc/msgs}
 
-Once we leave the phase (shown in the printout) we start using
-an "interpsys" image to compile spad code. Much later in the console
-VECTOR.spad will be compiled and replaces the lisp. However the
-"interpsys" environment in VECTOR.spad differs significantly from
-the "depsys" environment that compiles VECTOR.lsp BOOSTRAP code. 
-So we see
+\item {\tt \$AXIOM/src/doc/ps}
 
-VECTOR.spad + SINT.NRLIB -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+\item {\tt \$AXIOM/src/etc}
 
-Suppose VECTOR.spad used something from SINT.spad. When the
-VECTOR.lsp BOOTSTRAP file is compiled by depsys it contains
-(+ ... ...) and generates untyped and unoptimized code.
+\item {\tt \$AXIOM/src/graph}
 
-Later when VECTOR.spad is compiled and SINT.o is available 
-then the spad compiler will use the optimization information
-to generate (QSADD1 ... ...)
+  The graph viewer.
 
-> What do you mean by "expose". Why does this cause interpsys to
-> be re-built? That is necessary if code is going to be generated
-> based on new optimizations isn't it?
+\item {\tt \$AXIOM/src/graph/Gdraws}
 
-expose == make available
-Due to my lack of foresight in choosing the VECTOR.lsp BOOTSTRAP
-code I did not use the most highly optimized version. But in the
-algebra recompile of VECTOR.spad later in the build this gets
-corrected because the operations are made available (exposed) by
-previously compiled .spad code. So:
+\item {\tt \$AXIOM/src/graph/include}
 
-VECTOR.lsp (BOOTSTRAP) uses SINT.o
+\item {\tt \$AXIOM/src/graph/include/bitmaps}
 
-But the VECTOR.lsp has (+ ... ...) instead of (QSADD1 ... ...)
-because the rewriting of "+" to "QSADD1" is done by the spad
-compiler, not the GCL compiler and we are not yet in a position
-to use the spad compiler.
+\item {\tt \$AXIOM/src/graph/include/purty}
 
-Later when 
+\item {\tt \$AXIOM/src/graph/view2D}
 
-VECTOR.spad -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+\item {\tt \$AXIOM/src/graph/view3D}
 
-the spad compiler was invoked and it gets a chance to change
-"+" to "QSADD1". 
+\item {\tt \$AXIOM/src/graph/viewAlone}
 
-Because I grabbed the wrong version of .lsp file for BOOTSTRAP
-code you are able to see this difference. The work you and steve
-are doing is to find stable versions of the .lsp files.
+\item {\tt \$AXIOM/src/graph/viewman}
 
-> > Since these are only optimizations the final results should not
-> > be affected.
-> >
-> 
-> But it could have an impact on overall performance, right?
+\item {\tt \$AXIOM/src/hyper}
 
-Oh, clearly. (QSADD1 ... ...) is faster than (+ ... ...)
+  The \hyperdoc{} browser.
 
-Furthermore, there is another optimization step we could take
-during the build but we do not (yet). When the GCL compiler
-compiles VECTOR.lsp it generates VECTOR.fn. If you look in these
-.fn files you'll find exact type information for each function call.
+\item {\tt \$AXIOM/src/hyper/bitmaps}
 
-VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
+  Bitmaps for buttons and logos used by the \hyperdoc{} browser.
 
-If this exact type information was available at compile time then
-the GCL compiler can lay down faster code. However there is a 
-bootstrap problem here also since the GCL compiler has to compile
-the code one time in order to generate the .fn file.
+\item {\tt \$AXIOM/src/hyper/pages}
 
-VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
+  The \hyperdoc{} pages.
 
-So the full, proper procedure, which I have yet to do, would actually
-call the GCL compile once to generate the .fn file with exact type
-information for function calls, load the .fn file, and the recompile
-the lisp file. Since the second compile has exact type information 
-the generated code will be (potentially much) shorter.
+\item {\tt \$AXIOM/src/hyper/viewports}
 
-For each lisp file do
-(
-  VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
-  VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
-)
+  Images that are used on \hyperdoc{} pages.
 
+\item {\tt \$AXIOM/src/include}
 
-> Still after reading the interp and algebra Makefiles again,
-> I do not see why interpsys is being rebuilt after I delete
-> all the *.NRLIB's and repeat the 'make'. I am still missing
-> something somewhere. Is there some "missing link" that still
-> connects the algebra/Makefile back to the inter/Makefile?
+  Header files for the C source code in Axiom.
 
-I have to think about this (I'm getting ready for work so I'll
-give it some "drive-time cycles") but I believe that the issue
-is related to using fresh databases. The databases are used 
-during the algebra compiles to resolve algebra calls. However
-recompiling the algebra generates NRLIBs and, from these NRLIBs 
-a fresh database is built thus:
+\item {\tt \$AXIOM/src/input}
 
-DATABASES -> NRLIBs -> FRESH DATABASES
+\item {\tt \$AXIOM/src/interp}
 
-This is yet a third bootstrap issue. There are more but not with
-the algebra files.
+  The \spad{} interpreter and miscellaneous code, e.g. socket code.
 
+\item {\tt \$AXIOM/src/lib}
 
+\item {\tt \$AXIOM/src/scripts}
 
-\end{verbatim}
-\section{email 4}
-\begin{verbatim}
-Yet one other opportunity for speed optimization is available at 
-build time....
+\item {\tt \$AXIOM/src/scripts/tex}
 
-Remember that every lisp file generates a .fn file:
+\item {\tt \$AXIOM/src/share}
 
-foo.lsp -> foo.o + foo.fn
+\item {\tt \$AXIOM/src/share/algebra}
 
-and that a second compile with the .fn file loaded is faster:
+\item {\tt \$AXIOM/src/share/doc}
 
-foo.lsp + foo.fn -> faster foo.o
+\item {\tt \$AXIOM/src/share/doc/hypertex}
 
-However if we look at the type information in the foo.fn file
-we find that it only contains type information for functions
-defined in foo.lsp. But suppose there are two lisp files with
-functions from one using functions from the other. The sub-optimal
-sequence is:
+\item {\tt \$AXIOM/src/share/doc/hypertex/pages}
 
-foo.lsp -> foo.o + foo.fn
-foo.lsp + foo.fn -> faster foo.o
+\item {\tt \$AXIOM/src/share/doc/msgs}
 
-bar.lsp -> bar.o + bar.fn
-bar.lsp + bar.fn -> faster bar.o
+\item {\tt \$AXIOM/src/sman}
 
-The optimal sequence is:
+  The sman process, which starts and supervises the other \axiom{}
+  processes. See \ref{sec:Processes} for details.
 
-foo.lsp -> foo.o + foo.fn
-bar.lsp -> bar.o + bar.fn
+\item {\tt \$AXIOM/zips}
 
-foo.lsp + (foo.fn + bar.fn) -> even faster foo.o
-bar.lsp + (foo.fn + bar.fn) -> even faster bar.o
+  Software packages that are needed to build Axiom, e.g. GNU Common
+  Lisp and noweb.
+\end{itemize}
 
-So, really what we should do is cache ALL of the .fn files from all of
-the compiles, batch them into a big file, and the completely rebuild
-the system with the batched .fn files loaded.
-
-I've started this process but have not yet completed it. 
-See the file src/boot/boot-proclaims.lisp
-
-So there is a faster Axiom coming in the future but the build 
-complexity will be even greater. And Camm, I believe, is doing
-even more with type propagation which will improve things more.
+\section{Packages in zip}
+\section{Lisp}
+\section{Boot Compiler}
+\section{Interpreter}
+\section{Share}
+\section{Algebra}
+\section{Etc}
+\section{Clef}
+\section{Doc}
+\section{Graph}
+\section{Sman}
+\section{Input}
+\chapter{Modifying Axiom}
+\chapter{Becoming a Developer}
+\section{Using Arch}
 
+The \axiom{} project uses GNU Arch for version control, which is
+available at {\tt gnuarch.org}. There one can also find installation
+instructions, tutorials and various tools. Once Arch is installed
+follow these steps:
+\begin{itemize}
+\item Tell Arch who you are:
+\begin{verbatim}
+$ tla my-id "Firstname Lastname <addy@host.com>"
+\end{verbatim}
 
+\item Register the \axiom{} archive:
+\begin{verbatim}
+$ tla register-archive arch@axiom-developer.org--axiom \
+  http://axiom-developer.org/archive/axiom
 \end{verbatim}
-\section{email 5}
+
+\item Setup the default archive:
 \begin{verbatim}
-How I Built Axiom on Windows
+$ tla my-default-archive arch@axiom-developer.org--axiom
+\end{verbatim}
 
-  I installed a completely new MinGW/MSYS configuration from the
-'current' file list at:
+\item Check out the latest \axiom{} sources:
+\begin{verbatim}
+$ tla get axiom--main--1
+\end{verbatim}
+\end{itemize}
 
-http://www.mingw.org/download.shtml#hdr2
+Arch can be intimidating at first and is somewhat complicated to
+use. On {\tt gnuarch.org} there are many tools to help the user,
+e.g. xtla for Emacs.
 
-In the following order:
+\subsection{Other branches}
+\label{sec:OtherBranches}
 
-1   MinGW-3.1.0-1.exe
+There are other branches than {\tt axiom--main--1} for code that is
+not yet stable enough to be merged with the main branch. Currently
+there are the following branches:
+\begin{itemize}
+\item {\tt axiom--main--1}
 
-    http://prdownloads.sf.net/mingw/MinGW-3.1.0-1.exe?download
+  The main development branch. This branch will be mirrored to the CVS
+  on Savannah when it is stable and tested. Currently in step 4 of
+  development.
 
-2   MSYS-1.0.10.exe
+\item {\tt axiom--hyperdoc--1}
 
-    http://prdownloads.sf.net/mingw/MSYS-1.0.10.exe?download
+  This branch has been merged and is now dead.
 
-3   msysDTK-1.0.1.exe
+\item {\tt axiom--BSD--1}
 
-    http://prdownloads.sf.net/mingw/msysDTK-1.0.1.exe?download
+  Port to BSD work with Mark Murray. Currently in
+  step 1 of development.
 
-4   Then untarred the following:
- 
-    cd /mingw; tar xzvf /home/bpage/... 
+\item {\tt axiom--MACOSX--1}
 
-    gcc-core-3.4.2-20040916-1.tar.gz
- 
-    http://prdownloads.sf.net/mingw/gcc-core-3.4.2-20040916-1.tar.gz?download
+  Port to MacOS X work with Chuck Miller <cfm at ms.unimelb.edu.au>.
+  Currently in step 1 of development.
 
-5   binutils-2.15.91-20040904-1.tar.gz
- 
-    http://prdownloads.sf.net/mingw/binutils-2.15.91-20040904-1.tar.gz?download
+\item {\tt book--main--1}
 
-6   w32api-3.1.tar.gz
+  Axiom book work with community to clean up the book for printing.
+  Currently in step 1 of development.
+  %TODO kai: I can't see how the 'step' scheme applies to this branch.
 
-    http://prdownloads.sf.net/mingw/w32api-3.1.tar.gz?download
+\item {\tt axiom--solaris--1}
 
-7   mingw-runtime-3.5.tar.gz
+  Port to Solaris work with Kostas Oikonomou <ko at research.att.com>.
+  Currently in step 1 of development.
 
-    http://prdownloads.sf.net/mingw/mingw-runtime-3.5.tar.gz?download
+\item {\tt axiom--graphics--1}
 
-8   You will also need tla for windows from
+  This branch has been merged and is now dead.
 
-    http://download.sipsolutions.de/tla-setup.exe
+\item {\tt axiom--windows--1}
 
-9   and the windows LaTeX packaged called MikTex
+  Port to Windows work with Mike Thomas <mike.thomas at
+  brisbane.paradigmgeo.com>. Currently in step 1 of development.
 
-    http://www.miktex.org/setup.html
+\item {\tt axiom--language--1}
 
-    The "Small MiKTeX" package is sufficient if your windows box is
-    connected to the Internet. Or if you want you can install the
-    complete system.
+  Explore Axiom language modifications work with Stephen Wilson
+  <wilsons at multiboard.com>. Currently in step 1 of development.
 
-10  download the axiom--windows--1 branch
+\item {\tt axiom--sbcl--1}
 
-    See deteails instructions at ArchUsage
+  Port Axiom to Steel Bank Common Lisp work with Tim Daly Jr. <tim at
+  tenkan.org> and Nate Daly <nate@tenkan.org>. Currently in step 1
+  of development.
 
-    1  tla my-id "First Last <address@bogus.example.com>"
+\item {\tt zlc--main--1}
 
-    2  tla register-archive address@bogus.example.com 
-http://axiom-developer.org/archive/axiom
+  Add a zero learning curve interface to Axiom work with Jinzhong Niu
+  Jinzhong Niu and Xaiowei Xu <xuxw@yahoo.com>. Currently
+  in step 1 of development.
 
-    3  tla my-default-archive address@bogus.example.com
+\item {\tt axiom--algebra--1}
 
-    4  tla get axiom--windows--1 axiom--windows--1
+  Prototype algebra code. Currently in step 1 of development.
 
-    Or see ArchUsage to use 'sftp://' protocol if you intend to submit changes.
+\item {\tt axiom--GUI--1}
 
-11  configure and make
+  Portable GUI interface work with Kai Kaminski <kai.kaminski at
+  gmail.com>. Currently in step 1 of development.
+\end{itemize}
 
-    cd axiom--windows--1
 
-    ./configure  -- Cut-and-paste environmnet variables to avoid typing errors
+\subsection{Committing changes}
+\label{sec:CommittingChanges}
 
-    make         -- the build takes between 3 to 6 hours on 2.4 GHz Windows XP
+If you need write access to the archive you need to follow these steps: 
+\begin{itemize}
+\item Create a key by typing: 
+\begin{verbatim}
+$ ssh-keygen -t dsa
+\end{verbatim}
+  This will create a file called {\tt .ssh/id\_dsa.pub}. You need to send the
+  contents of this file to Tim Daly so your
+  interactions can be enabled.
 
+\item Next you need to register an archive:
+\begin{verbatim}
+$ tla register-archive arch@axiom-developer.org--axiom sftp://arch@axiom-developer.org/home/arch/archive/axiom
+\end{verbatim}
 
+\item Then set up a default archive:
+\begin{verbatim}
+$ tla my-default-archive arch@axiom-developer.org--axiom
 \end{verbatim}
-\section{email 6}
+
+\item In order to get the latest source for the Axiom main line type: 
 \begin{verbatim}
-What is MinGW?
+$ tla get axiom--main--1
+\end{verbatim}
 
-  MinGW ("Minimalistic GNU for Windows") refers to a set of runtime headers, 
-used in building a compiler system based on the GNU GCC and binutils projects. 
-It compiles and links code to be run on Win32 platforms... providing C, C++ and 
-Fortran compilers plus other related tools. If you see references to "mingw32" 
-instead of "MinGW", they are referring to the same compiler system. The 
-project's name changed from mingw32 to MinGW is to prevent the implication that 
-MinGW will only works on 32 bit systems (as 64 and higher bit machines become 
-more common, MinGW will evolve to work with them). MinGW uses the Microsoft 
-runtime libraries, distributed with the Windows operating system. Unlike other 
-ports of GCC to Windows, the runtime libraries are not distributed using Gnu's 
-General Public License (GPL). You, therefore, do not have to distribute your 
-source code with your programs unless, of course, you use a GPL library in your 
-programs.
+\item Now you can change the sources. In order to commit the changes
+  you need to create a log file that summarizes the changes. You can
+  create and edit the log file using:
+\begin{verbatim}
+$ emacs `tla make-log`
+\end{verbatim}
 
-What is MSYS?
+\item Finally you commit the changes with: 
+\begin{verbatim}
+$ tla commit
+\end{verbatim}
+\end{itemize}
 
-  MSYS or Minimal SYStem is a POSIX and Bourne shell environment use with 
-MinGW. It provides a hand picked set of tools to allow a typical configuration 
-script with Bourne syntax to execute. This allows most of the GNU packages to 
-create a Makefile just from executing the typical configure script which can 
-then be used to build the package using the native MinGW version of GCC.
 
-The POSIX layer used by MSYS is a fork of the 1.3.3 version of Cygwin . Cygwin 
-is a full POSIX layer and UNIX-like environment for Win32 providing both server 
-and client utilites.
+\section{Contributing Patches}
+\label{sec:ContributingPatches}
 
-\end{verbatim}
-\section{email 7}
+To create a patch for the file or directory {\tt foo} use the command
 \begin{verbatim}
-The build sequence should be:
+diff -Naur foo foo.new >foo.patch
+\end{verbatim}
+and send {\tt foo.patch} to Tim Daly and the
+axiom-developer mailing list. Please observe the Coding Guidelines
+(see \ref{sec:CodingGuidelines}).
 
-obj/linux/bin/lisp      ...  contains the socket extensions
-obj/linux/bin/bootsys   ...  contains the boot -> lisp compiler
-                             used to compile the interp/*.boot files
-obj/linux/bin/depsys    ...  contains macros used by axiom
-                             used for compiling the intermediate lisp files
-obj/linux/bin/interpsys ...  contains the final image
-                             used to compile the algebra
-obj/linux/bin/AXIOMsys       contains the final image
-                             a clean copy for the end user
+\section{Coding Guidelines}
+\label{sec:CodingGuidelines}
 
+Code in Axiom tries to follow certain guidelines, which aim to improve
+readability and the documentation of the implementation.
 
-I've attached the interesting part of a console log. At this point
-the Axiom build is making the transition from building the BOOTSTRAP
-algebra to building the non-BOOTSTRAP algebra.
+Unfortunately many of these guidelines have only been applied since
+Axiom became available under an open source license on September 3,
+2002. Hence many parts of Axiom do not follow these guidelines at all
+or only superficially\footnote{For example, all source files have been
+  converted to pamphlet files. In general, though, they are not
+  documented or structured in any useful way, yet. They simply contain
+  one big chunk of code.}. If you gained understanding of an as-yet
+undocumented part of Axiom, please document and edit it according to
+these guidelines and submit a patch to the maintainers of Axiom (see
+\ref{sec:ContributingPatches}).
 
-Notice that the BOOTSTRAP algebra is just lisp code. This code is 
-compiled in a DEPSYS image so that macros are properly expanded.
-However it is clear that the BOOTSTRAP lisp code was not compiled by
-the "new" compiler.
+\subsection{General}
+\label{sec:CodingGuidelinesGeneral}
 
-Next we see the transition to compiling the non-BOOTSTRAP algebra.
-This is done in the interpsys image. It is also done in an image 
-that has access to only the BOOTSTRAP algebra code. Thus the 
-new compiler might not have all of the algebra-defined replacements
-available at compile time. Notice the autoload files that contain
-the optimizations.
 
-A second or third round of compiles will expose the algebra-based
-optimizations and these will be compiled into the code. Since these
-are only optimizations the final results should not be affected.
+\begin{quotation}
+  Thus, programs must be written for people to read, and only
+  incidentally for machines to execute.
 
-Also note that the BOOTSTRAP algebra is recompiled as the last step
-of building the algebra from scratch so that it can use the circular
-definitions.
+  -- {\it Structure and Interpretation of Computer Programs}
+\end{quotation}
 
-==========================================================================
-====  running DEPSYS image ===============================================
-==========================================================================
+\subsection{Lisp}
+\label{sec:CodingGuideLinesLisp}
 
-BOOT>0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.lsp from 
-/home/arch/axiom--hyperdoc--1--base-0/src/algebra/vector.spad.pamphlet
-0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.o from 
-/home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.lsp
+Stick to \ansicl{} and modern Lisp style, i.e. do not write in all-caps
+and make use of all data structures available, if appropriate. Also
+provide documentation strings for all functions, global variables,
+constants, classes etc.
 
->
-Compiling VECTOR.lsp.
-End of Pass 1.  
-End of Pass 2.  
-OPTIMIZE levels: Safety=0 (No runtime error checking), Space=0, Speed=3
-Finished compiling VECTOR.o.
-#p"VECTOR.o"
 
-BOOT>0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad from 
-/home/arch/axiom--hyperdoc--1--base-0/src/algebra/trigcat.spad.pamphlet
+\section{Workflow}
+\label{sec:Workflow}
 
-==========================================================================
-====  running AXIOMSYS image =============================================
-==========================================================================
+Naturally the workflow varies between developers, but usually there
+are some common elements. In this section we describe a somewhat
+rudimentary workflow for developing Axiom\footnote{The rest of this
+  section is mostly an edited version of an email by Tim Daly, in
+  which he describes how he develops \axiom{}. His workflow is rudimentary in the
+  sense that he uses almost none of Emacs' advanced features.}.
 
+The most important thing in programming is the "OODA" loop (it means
+"orient-observe-decide-act") which, in programming, refers to the
+issue of how long it takes to fix a bug.
 
-0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.NRLIB from 
-/home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad
-                        AXIOM Computer Algebra System 
-              Version of Friday November 19, 2004 at 16:36:16 
------------------------------------------------------------------------------
-   Issue )copyright to view copyright notices.
-   Issue )summary for a summary of useful system commands.
-   Issue )quit to leave AXIOM and return to shell.
------------------------------------------------------------------------------
- 
-   Using local database 
-/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/compress.daase..   
-Using local database 
-/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/interp.daase..
-   Using local database 
-/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/operation.daase..
-   Using local database 
-/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/category.daase..
-   Using local database 
-/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/browse.daase..
-(1) ->    Loading 
-/home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/apply.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/c-doc.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/c-util.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/profile.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/category.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/compiler.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/define.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/functor.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/info.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/iterator.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/modemap.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/nruncomp.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/package.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/htcheck.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/xruncomp.
-   Compiling AXIOM source code from file 
-      /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad using
-      old system compiler.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/parsing.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bootlex.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/def.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/fnewmeta.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/metalex.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/metameta.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/parse.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/postpar.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/postprop.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/preparse.
-   AHYP abbreviates category ArcHyperbolicFunctionCategory 
-------------------------------------------------------------------------
-   initializing NRLIB AHYP for ArcHyperbolicFunctionCategory 
-   compiling into NRLIB AHYP 
+Suppose you are running a program (in any language) and it hits a bug
+(say, a syntax error or something trivial) and fails. How long does it
+take to find the bug behavior, figure out what might cause it, decide
+where it is and fix it so that you're back to the point of the bug?
 
-;;;     ***       |ArcHyperbolicFunctionCategory| REDEFINED
-Time: 0 SEC.
+All really productive programmers strive to minimize their OODA
+loop. One approach to achieve this goal is the following.
 
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-matrix.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-misc.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-solve.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-util.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/ht-util.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/htsetvar.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/ht-root.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-con.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-data.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/showimp.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-op1.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-op2.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-search.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-util.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/topics.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-prof.
-   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-saturn.
-   finalizing NRLIB AHYP 
-   Processing ArcHyperbolicFunctionCategory for Browser database:
---------(acosh ($ $))---------
---------(acoth ($ $))---------
---------(acsch ($ $))---------
---------(asech ($ $))---------
---------(asinh ($ $))---------
---------(atanh ($ $))---------
---------constructor---------
-Compiling /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.NRLIB/code.lsp.
+Suppose you have a file {\tt foo.pamphlet} and the corresponding
+makefile {\tt Makefile.foo}, which is also contained in the {\tt
+  @<<*>>} chunk of {\tt foo.pamphlet}.
 
-                          
+Split your Emacs frame vertically {\tt C-x 2}, with foo.pamphlet in
+one window and a shell buffer in the other.
 
+Now edit {\tt foo.pamphlet} to your hearts content. Once you are ready
+to test your changes, execute a keyboard macro ({\tt C-x e}) that
+\begin{enumerate}
+\item saves the current buffer, i.e. foo.pamphlet ({\tt C-x C-s})
+\item switches to the shell buffer ({\tt C-x o})
+\item goes to the bottom of the shell buffer ({\tt M->})
+\item executes {\tt make -f Makefile.foo}, which extracts code and
+  documentation from the pamphlet, runs latex on the latter and
+  executes the test cases
+\item switches back to the other buffer, i.e. {\tt foo.pamphlet} ({\tt
+    C-x o})
+\end{enumerate}
 
+To record such a keyboard macro, make sure that the cursor is in the
+{\tt foo.pamphlet} buffer and press the following keys: {\tt C-x (},
+{\tt C-x C-s}, {\tt C-x o}, {\tt M->}, {\tt make -f Makefile.foo},
+{\tt C-x o}, {\tt C-x )}. You could also give this keyboard macro a
+name and even save it. Read the Emacs manual for further details.
 
-\end{verbatim}
-\section{email 8}
+% TODO kai: Write an Elisp function that works with any pamphlet.
+The following (untested) Elisp function should do the same and more.
 \begin{verbatim}
-MiKTeX is an up-to-date TeX implementation for the Windows operating system.
+(defun make-pamphlet ()
+  "Saves the current buffer, which is assumed to be visiting
+  a pamphlet file, and calls 'make -f Makefile.foo', where 'foo'
+  is the name of the pamphlet without the '.pamphlet' suffix.
 
-TeX is a typesetting system written by Donald E. Knuth, who says that it is
-"intended for the creation of beautiful books - and especially for books that
-contain a lot of mathematics".
+  The prefix arg is passed on to save-buffer."
+  (interactive)
+  (let* ((file-name (buffer-file-name (current-buffer)))
+	 (is-pamphlet (and file-name
+			   (string-match "\\(.*?\\)\\([^/]+\\)\.pamphlet" file-name)
+			   t)))
+    (if (not is-pamphlet)
+	(message "This doesn't seem to be a pamphlet file.")
+	(let ((pamphlet-name (match-string 2 file-name))
+	      (pamphlet-path (match-string 1 file-name)))
+	  (call-interactively 'save-buffer)
+	  (shell-command (format "(cd %s; make -f Makefile.%s)" pamphlet-path pamphlet-name))))))
+\end{verbatim}
 
-MiKTeX offers a complete set of utilities, macro packages and fonts, e.g.,
-LaTeX, pdfTeX, ConTeXt, just to name a few.
+Figure \ref{fig:ExamplePamphlet} shows an almost minimal example
+pamphlet.
 
-http://www.miktex.org\end{verbatim}
-\section{email 9}
+\begin{figure}
+  \centering
 \begin{verbatim}
-> > Next we see the transition to compiling the non-BOOTSTRAP algebra.
-> > This is done in the interpsys image. It is also done in an image 
-> > that has access to only the BOOTSTRAP algebra code. Thus the 
-> > new compiler might not have all of the algebra-defined replacements
-> > available at compile time. Notice the autoload files that contain
-> > the optimizations.
-> >
-> 
-> What do you mean by "algebra-defined replacements". Where are
-> these replacements defined? How are they different than the
-> "optimizations" contained in the autoload files?
+\documentclass{article}
+\usepackage{axiom}
+\begin{document}
+\title{Foo considered harmful}
+\author{John Doe}
+\maketitle
+\begin{abstract}
+\end{abstract}
+\eject
+\tableofcontents
+\eject
 
-The BOOTSTRAP files contain lsp and spad code. The build steps
-for the initial BOOTSTRAP layer use "depsys" to compile the lisp
-code. So, in this case, we see VECTOR.lsp being compiled in the
-depsys image. VECTOR.lsp is the last algebra file that contains
-BOOTSTRAP code. So in this phase we see:
+@<<foo.lisp>>=
+(defun foo ()
+  'foo)
 
-VECTOR.lsp (BOOTSTRAP) -> VECTOR.o
+(defun test-foo ()
+  (unless (eq 'foo (foo))
+    (write-string "test-foo failed!")))
 
-Once we leave the phase (shown in the printout) we start using
-an "interpsys" image to compile spad code. Much later in the console
-VECTOR.spad will be compiled and replaces the lisp. However the
-"interpsys" environment in VECTOR.spad differs significantly from
-the "depsys" environment that compiles VECTOR.lsp BOOSTRAP code. 
-So we see
+(test-foo)
+@@
 
-VECTOR.spad + SINT.NRLIB -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+\section{Makefile}
+@<<*>>=
+TANGLE=/usr/local/bin/NOTANGLE
+WEAVE=/usr/local/bin/NOWEAVE
+LATEX=/usr/bin/latex
+LISP=/sei/lisp
 
-Suppose VECTOR.spad used something from SINT.spad. When the
-VECTOR.lsp BOOTSTRAP file is compiled by depsys it contains
-(+ ... ...) and generates untyped and unoptimized code.
+all: doc code run
 
-Later when VECTOR.spad is compiled and SINT.o is available 
-then the spad compiler will use the optimization information
-to generate (QSADD1 ... ...)
+doc:
+	${WEAVE} -t8 -delay foo.pamphlet >foo.tex
+	${LATEX} foo.tex 2>/dev/null 1>/dev/null
+	${LATEX} foo.tex 2>/dev/null 1>/dev/null
 
-> What do you mean by "expose". Why does this cause interpsys to
-> be re-built? That is necessary if code is going to be generated
-> based on new optimizations isn't it?
+code: foo.pamphlet
+	${TANGLE} -Rfoo.lisp foo.pamphlet >foo.lisp
 
-expose == make available
-Due to my lack of foresight in choosing the VECTOR.lsp BOOTSTRAP
-code I did not use the most highly optimized version. But in the
-algebra recompile of VECTOR.spad later in the build this gets
-corrected because the operations are made available (exposed) by
-previously compiled .spad code. So:
+run:
+	cat foo.lisp | ${LISP}
 
-VECTOR.lsp (BOOTSTRAP) uses SINT.o
+remake:
+	${TANGLE} -t8 foo.pamphlet >Makefile.foo
 
-But the VECTOR.lsp has (+ ... ...) instead of (QSADD1 ... ...)
-because the rewriting of "+" to "QSADD1" is done by the spad
-compiler, not the GCL compiler and we are not yet in a position
-to use the spad compiler.
+@@
+\eject
+\begin{thebibliography}{99}
+\bibitem{1} nothing
+\end{thebibliography}
+\end{document}
+\end{verbatim}
+  \caption{Example pamphlet}
+  \label{fig:ExamplePamphlet}
+\end{figure}
 
-Later when 
+\chapter{Architecture and Implementation}
+\label{chap:ArchitectureAndImlementation}
 
-VECTOR.spad -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+This chapter describes the overall architecture of Axiom and its
+components and contains some comments on the implementation. More
+detailed information on the implementation of a function or component
+can usually be found in the corresponding pamphlet. If not, please
+consider writing documentation for that part of Axiom and submit a
+patch to the Axiom maintainers (see \ref{sec:ContributingPatches}).
 
-the spad compiler was invoked and it gets a chance to change
-"+" to "QSADD1". 
+\section{Processes}
+\label{sec:Processes}
 
-Because I grabbed the wrong version of .lsp file for BOOTSTRAP
-code you are able to see this difference. The work you and steve
-are doing is to find stable versions of the .lsp files.
+A running \axiom{} consists of several different processes, depending on
+the user's actions. \axiom{} is usually started using the {\tt
+  \$AXIOM/src/etc/axiom} shellscript, which does some option
+processing and then starts {\tt sman}.
 
-> > Since these are only optimizations the final results should not
-> > be affected.
-> >
-> 
-> But it could have an impact on overall performance, right?
+% TODO: Detail the processes
 
-Oh, clearly. (QSADD1 ... ...) is faster than (+ ... ...)
 
-Furthermore, there is another optimization step we could take
-during the build but we do not (yet). When the GCL compiler
-compiles VECTOR.lsp it generates VECTOR.fn. If you look in these
-.fn files you'll find exact type information for each function call.
+\section{Languages}
+\label{sec:Languages}
 
-VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
+%TODO kai: How do we integrate
+%http://wiki.axiom-developer.org/AxiomDevelopment?
 
-If this exact type information was available at compile time then
-the GCL compiler can lay down faster code. However there is a 
-bootstrap problem here also since the GCL compiler has to compile
-the code one time in order to generate the .fn file.
+Axiom is built using several different (programming) languages, some
+of which are undocumented. This section gives a short description of
+each language as well as its uses. More detailed information on these
+languages can usually be found in other chapters of this book.
 
-VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
 
-So the full, proper procedure, which I have yet to do, would actually
-call the GCL compile once to generate the .fn file with exact type
-information for function calls, load the .fn file, and the recompile
-the lisp file. Since the second compile has exact type information 
-the generated code will be (potentially much) shorter.
+\subsection{BOOT}
+\label{sec:BOOT}
 
-For each lisp file do
-(
-  VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
-  VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
-)
+\boot{} is what most of the \spad{} interpreter/compiler is written
+in. It is implemented in Lisp and \boot{} itself, which introduces
+some bootstrap issues. \boot{} programs are compiled to Lisp and then
+compiled and executed by the Lisp system. The source code to the
+\boot{} compiler can be found in {\tt \$AXIOM/src/boot}.
 
 
-> Still after reading the interp and algebra Makefiles again,
-> I do not see why interpsys is being rebuilt after I delete
-> all the *.NRLIB's and repeat the 'make'. I am still missing
-> something somewhere. Is there some "missing link" that still
-> connects the algebra/Makefile back to the inter/Makefile?
 
-I have to think about this (I'm getting ready for work so I'll
-give it some "drive-time cycles") but I believe that the issue
-is related to using fresh databases. The databases are used 
-during the algebra compiles to resolve algebra calls. However
-recompiling the algebra generates NRLIBs and, from these NRLIBs 
-a fresh database is built thus:
+\subsection{Lisp}
+\label{sec:Lisp}
 
-DATABASES -> NRLIBs -> FRESH DATABASES
+The use of Lisp in \axiom{} is pervasive but somewhat peculiar. This
+stems mostly from two facts. First of all, during its lifetime \axiom{} has been ported to
+many different Lisps. Furthermore Lisp is mostly used as a low-level
+language and only very rudimentary Lisp features are used.
 
-This is yet a third bootstrap issue. There are more but not with
-the algebra files.
+Currently \axiom{} runs on GNU Common Lisp in CLtL1 mode. There is an
+effort to port it to GCL's ANSI mode and other standard-compliant
+Lisps, like SBCL and CMUCL.
 
-\end{verbatim}
-\section{email 9}
-\begin{verbatim}
-Yet one other opportunity for speed optimization is available at 
-build time....
+The Lisp code in Axiom is distributed over several packages, which are
+defined in {\tt \$AXIOM/src/interp/sys-pkg.lisp.pamphlet}.
+% TODO kai: There are several dead Lisp packages in the list
+% below. Why do we keep them around?
 
-Remember that every lisp file generates a .fn file:
+\begin{itemize}
+\item {\tt SCRATCHPAD\_COMPILER}
 
-foo.lsp -> foo.o + foo.fn
+  The \spad{} compiler package (probably dead, all symbols have been
+  moved to the {\tt BOOT} package).
 
-and that a second compile with the .fn file loaded is faster:
+\item {\tt SPECFNSF}
 
-foo.lsp + foo.fn -> faster foo.o
+  The special functions package (dead). There was originally Lisp
+  code to support hardcoded knowledge of special functions like {\tt
+    gamma}. The functions in this package have been lifted to the
+  algebra level.
 
-However if we look at the type information in the foo.fn file
-we find that it only contains type information for functions
-defined in foo.lsp. But suppose there are two lisp files with
-functions from one using functions from the other. The sub-optimal
-sequence is:
+\item {\tt VMLISP}
 
-foo.lsp -> foo.o + foo.fn
-foo.lsp + foo.fn -> faster foo.o
+  This package originally contained the VMLisp macros but in fact
+  contains macros to support several other Lisps. It is essentially
+  the place where most of the macros to support idioms from prior
+  ports are, e.g. {\tt RDEFIOSTREAM} and {\tt FILEACTQ}. In the long
+  term this package should probably go away, since \axiom{} is being
+  moved to \ansicl.
 
-bar.lsp -> bar.o + bar.fn
-bar.lsp + bar.fn -> faster bar.o
+\item {\tt BOOTTRAN}
 
-The optimal sequence is:
+  This is the \boot{} to Lisp compiler package used by the files in {\tt
+    \$AXIOM/src/boot}. It is the \boot{} translator package.
 
-foo.lsp -> foo.o + foo.fn
-bar.lsp -> bar.o + bar.fn
+\item {\tt BOOT}
 
-foo.lsp + (foo.fn + bar.fn) -> even faster foo.o
-bar.lsp + (foo.fn + bar.fn) -> even faster bar.o
+  Everything in Axiom that the user references eventually shows up
+  here. The interpreter and the algebra are run after switching to the
+  boot package {\tt (in-package "BOOT")}. Hence any symbol that the
+  interpreter or algebra uses has to appear here.
 
-So, really what we should do is cache ALL of the .fn files from all of
-the compiles, batch them into a big file, and the completely rebuild
-the system with the batched .fn files loaded.
+\item {\tt FOAM}
 
-I've started this process but have not yet completed it. 
-See the file src/boot/boot-proclaims.lisp
+  \foam{} is the intermediate language for the \aldor{} compiler. \foam{}
+  means ``First Order Abstract Machine'' and functions similar to RTL
+  for the GCC compiler. It is a "machine" that is used as the target
+  for meta-assembler level statements. These are eventually expanded
+  for the real target machine or interpreted directly.
 
-So there is a faster Axiom coming in the future but the build 
-complexity will be even greater. And Camm, I believe, is doing
-even more with type propagation which will improve things more.
+\item {\tt FOAM-USER}
 
+  {\tt foam-user} is the package containing foam statements and macros
+  that get inserted into user code versus the foam package which
+  provides support for compiler code.
+\end{itemize}
 
-\end{verbatim}
-\section{email 10}
-\begin{verbatim}
-I am no longer baffled. The explanation for the generic arith
-vs. fixnum arith is in macros.lisp. In the following code from
--REPEAT, X is bound to a form such as '((STEP |i| 3 1)):
 
-  (COND ((AND (EQ (CAAR X) 'STEP)
-                  (|member| (CADDAR X) '(2 1 0 (|One|) (|Zero|)))
-                  (|member| (CADR (CDDAR X)) '(1 (|One|))))
-             (SETQ X (CONS (CONS 'ISTEP (CDAR X)) (CDR X))) ))
-                        ; A hack to increase the likelihood of small integers
+\subsection{\spad}
+\label{sec:SPAD}
 
-So, one `rule' is, if you iterate with a sequence with lower bound
-0,1, or 2, with an increment of 1, you get fixnum arith. Otherwise you
-get generic arithmetic.
+\spad{} is the programming language for mathematics. All the code in
+{\tt \$AXIOM/src/algebra} is written in \spad. It is a user-level
+language. More detailed information on \spad{} can be found in the
+\manual{}.
 
-However, this is not a hard and fast rule, since the compiler can say
-'(ISTEP |i| 5 23) [say] during code generation and force fixnum arith. 
 
+\subsection{\aldor}
+\label{sec:Aldor}
 
-This leads to a question. Tim, in interp/wi2.boot we have a
-redefinition of compIterator (default implementation is in
-iterator.boot). This new definition makes an attempt at deciding when
-fixnum stepping code should be generated. Do you have an explanation
-as to why is this not the default definition? The original version of
-the code in iterator.boot is what gets called.
+\aldor{} is the successor of \spad. There are still remnants of \aldor
+support in the current codebase, but the only working implementation
+of \aldor{} is written in C and available at http://www.aldor.org/,
+unfortunately not under an open source license. There is some support
+for using that \aldor{} implementation with \axiom{} and it is planned to
+move all of \axiom{} to \aldor.
 
-I'm wondering if it is possible that during the fixedPoint build if
-some of the new definitions (particularly those in wi2.boot,
-xruncomp.boot) are being autoloaded during compilation. The changes
-which I have already noted in the generated lisp seem to support this
-(fixnum arith vs. generic arith, inlining of trivial coercions,
-etc). All the changes make sense if they are the result of calling one
-of the `improved' functions which these files redefine. 
+\subsection{\hypertex}
+\label{sec:Hypertex}
 
-Sincerely,
-Steve
+\hypertex{} is similar in appearance to \TeX/\LaTeX and is used by the
+\hyperdoc{} as a markup language. More information can be found in the
+chapter on \hyperdoc{} (see \ref{sec:TheHyperDoc}) and in \manual.
 
+\subsection{C}
+\label{sec:C}
 
 
-On Mon, Jan 17, 2005 at 01:39:45PM -0500, Stephen Wilson wrote:
-> 
-> Tim, 
-> 
-> I compleatly fine with the fixnum declaration. We just need to make
-> sure it is a rule programmers can rely on. Consider:
-> 
-> )abbrev package ITER Iter
-> Iter(): E == I where
->   E == with
->     iter: () -> Void
->   I == add
->     iter(): Void == 
->       for i in 2.. repeat
->          print(i::OutputForm)
-> 
-> 
-> The relavent lisp decalres we are using fixnums:
-> 
->       (LETT |i| (QSADD1 |i|) |ITER;iter;V;1|)
-> 
-> 
-> Now compile the above with a lower bound of 3:
-> 
->       for i in 3.. repeat
->          print(i::OutputForm)
-> 
-> 
-> We get generic arithmetic:
-> 
->       (LETT |i| (+ |i| 1) |ITER;iter;V;1|)
-> 
-> 
-> Baffled,
-> Steve
-> 
-> 
-> On Mon, Jan 17, 2005 at 12:23:36PM -0500, root wrote:
-> > Steve,
-> > 
-> > I don't know if there is an actual statement to the effect that
-> > the upper bound on a loop would be a register-sized number (32
-> > or 64 bits) but at 6Mhz it seemed impossible that one could 
-> > run a loop of any consequence for greater than 2^32 or 2^64
-> > iterations. If you wanted to do that you'd have to do the
-> > looping using some other construct. In general it is safe to
-> > assume that the upper bound of the register size cannot be
-> > exceeded. There is a practical performance difference to
-> > be gained by using (declare (fixnum  as the compiler can,
-> > in the best case, assign a register to the loop variable.
-> > 
-> > t
+\subsection{Other languages}
+\label{sec:OtherLanguages}
 
+There are also Meta and CHARYBDIS.
 
+\section{The \boot{} Language}
+\label{sec:TheBootLanguage}
 
-\end{verbatim}
-\section{email 11}
-\begin{verbatim}
-I installed "Aldor version 1.0.2 for LINUX(glibc2.3)" on
-axiom-developer.org several months ago. The date on the
-aldor tarball in /home/page is May 19  2004. Aldor should
-be accessible to you when you log in at axiom-developer.
-Just add
 
-  export ALDORROOT=/usr/local/aldor/linux/1.0.2
-  export PATH=$ALDORROOT/bin:$PATH
 
-to your .bashrc, do
+\section{The HyperDoc}
+\label{sec:TheHyperDoc}
 
-  . .bashrc
+The HyperDoc is the pre-web hypertext documentation system for
+Axiom. It supports not only (limited) text markup and hyperlinks, but
+also dynamically generated pages and interactive examples.
 
-and your should be able to type
 
-  aldor ...
+\section{The Markup Language for HyperDoc Pages}
+\label{sec:TheMarkupLanguageForHyperDocPages}
 
-You should find the libaries in the standard locations.
+% Comment: This section might be useful to end-users and thus fit better
+% into Volume 2. On the other hand, \hyperdoc{} will not survive in its
+% current form and part of the problem is the language described in this
+% section.
 
-There is apparently a fairly up to date windows binary
-version as well, but I haven't had much time to play
-with this yet.
+The syntax for \hyperdoc{} pages follows the syntax of \TeX/\LaTeX\ in the
+sense that after defining a few \hyperdoc{} specific commands through
+{\tt \\newcommand} and adding a document header the \hyperdoc{} pages are
+valid LaTeX documents.
 
-At the time I was planning to implement a MathAction-
-Aldor web interface that would look something like this
+\hyperdoc{} files usually have an {\tt .ht} or {\tt .pht} suffix,
+depending on wether they contain pages or patches and pastes (see
+\ref{sec:ThePatchPasteMechanism}). A single file can contain several
+\hyperdoc{} pages\footnote{From now on we do not mention patches or
+  pastes. Their syntax is almost the same, though.}. The content of a
+page is contained in a \hypercmd{page} environment, which takes two
+parameters: the page name and the page title. The former is the
+internal identifier and has to be a single word ({\tt
+  [a-zA-Z][a-zA-Z0-9]*}), the latter is shown to the user and can be
+arbitrary text containing abbreviations defined through
+\hypercmd{newcommand} in the same file. A typical example for a page
+is {\tt AlgebraPage}, which is contained in {\tt algebra.ht} (see
+\ref{fig:AlgebraPageSource}).
 
-\begin{aldor}
-... aldor code ...
-\end{aldor}
+\begin{figure}
+  \centering
+\begin{verbatim}
+\begin{page}{AlgebraPage}{Abstract Algebra}
+  \beginscroll
+  \Language{} provides various facilities for treating topics in abstract
+  algebra.
+  \beginmenu
+  \menulink{Number Theory}{NumberTheoryPage} \newline
+  Topics in algebraic number theory.
+  % \menulink{Algebraic Geometry}{AlgebraicGeometryPage} \newline
+  % Computational algebraic geometry: Groebner bases, integral bases,
+  % divisors on curves.
+  \menulink{Group Theory}{GroupTheoryPage} \newline
+  Permutation groups; representation theory.
+  \endmenu
+  \endscroll
+  \autobuttons
+\end{page}
+\end{verbatim}
 
-and which could be intermixed with Axiom code on the
-MathAction website. I got distracted by other things
-and so have not yet completed the integration with
-MathAction but there is not a lot more to do. Recent
-discussions here about getting Axiom and Aldor working
-together again suggest that it might be time for me
-to raise the priority to make this possible.
+  \caption{The source of {\tt AlgebraPage} from {\tt algebra.ht}}
+  \label{fig:AlgebraPageSource}
+\end{figure}
 
-Ralf Hemmecke wrote:
-> 
-> If you mean cvs.aldor.org, then it might be that May 16 2004
-> is a bit late. The libraries have changed since then.
-> 
-> You could however download the latest precompiled version
-> 1.0.2 from
-> 
-> http://www.aldor.org/downl.html
->
- 
-> If you really want to compile the libraries yourself, ask
-> me again. I think the newest cvs-version should compile,
-> but if they  don't ... There has been some work on the
-> Makefiles since May 16.
-> 
-> Ralf
-> 
-> root wrote:
-> > Martin, Peter,
-> > 
-> > I tried to build aldor last night. I succeeded in building 
-> > the compiler but not the libraries. I have a CVS checkout
-> > from May 16.
-> > 
-> > I've been reading the Makefiles but they all seem to dissolve
-> > into home-grown tools (makeon, docc, etc) which undermines my
-> > ability to figure out what is happening. It's been years since
-> > I built aldor.
-> > 
-> > Peter, could you provide the required steps to build a working
-> > compiler? e.g.
-> > 
-> > edit Makefile.globals to change.... make aldorcompiler
-> > ....
-> > 
+The aforementioned figure already shows a few common commands that can
+be used inside a page. It also shows that sometimes LaTeX-like
+environments, i.e. {\tt \bs begin{foo} ... \bs end{foo}}, are used, and
+sometimes TeX-like constructs, i.e. {\tt \bs beginmenu ... \bs endmenu}.
 
+The list of \LaTeX-like environments is reasonably short.
 
+\begin{itemize}
+\item {\tt items}
 
-\end{verbatim}
-\section{email 12}
-\begin{verbatim}
-Oops, sorry that I have not read the documentation of Any.
-I had a look at Any now. Well, from that I just got the feeling that a programmer should never use Any if there are better types around (and often there are). Any seems to be connected to the interpreter. Since everything must have a type and the interpreter cannot figure out something reasonable, it falls back to Any.
+  Similar to the {\tt itemize} environment of \LaTeX. Entries are
+  started with {\tt item}.
 
-I'd rather be happy if the interpreter is clearly separated from the compiler.
+\item {\tt page}
 
-The interpreter is for working with Axiom, so it could help the (lazy) user and find/guesss appropriate types for him/her. However there should be NO guessing when it comes to writing new library code.
+  Defines a new page (see above).
 
-Looking at the code of Any reminds me much of the things I have suggested here
+\item {\tt paste}
 
-address@bogus.example.com">http://page.axiom-developer.org/zope/mathaction/address@bogus.example.com
-The code is in cvs.aldor.org/aldor/aldorug/samples/object*.as.
+  Defines a new paste (see \ref{sec:ThePatchPasteMechanism}).
 
+\item {\tt patch}
 
-The problem I still have with any is that it says
+  Defines a new patch (see \ref{sec:ThePatchPasteMechanism}).
 
+\item {\tt scroll}
 
-     Rep := Record(dm: SExpression, ob: None)
-     dom x      == x.dm
+  Marks the scrollable part of the page. See also {\tt beginscroll}.
 
+\item {\tt spadsrc}
 
-which looks very near to some LISP thing.
-So I can ask for the domain a: Any by calling dom(a). Then I will get an SExpression which makes me feel lost.
+  Contains SPAD source code, similar to the {\tt verbatim} environment.
 
-Unfortunately, I have no runnig Axiom at the moment :-(
-And I cannot compile axim--main--1 (bfd.h is missing and I have no idea what to install).
+\item {\tt verbatim}
 
-So I tested on
+  As in \TeX/\LaTeX.
+\end{itemize}
 
+The list of TeX-like environments:
 
-http://page.axiom-developer.org/zope/mathaction/AxiomInterface
+\begin{itemize}
+\item {\tt Important}
+\item {\tt items}
+\item {\tt menu}
 
+  This is similar to the {\tt itemize} environment of \LaTeX. Each
+  entry is prepended by one of {\tt menulink}, {\tt menudownlink},
+  {\tt menumemolink}, {\tt menuwindowlink}, {\tt
+    menulispcommand}, {\tt menulispdownlink}, {\tt
+    menulispmemolink}, {\tt menulispwindowlink} and {\tt
+    menuunixcmd}.
 
-i: Integer := 1
-  Type: Integer
+\item {\tt scroll}
 
+  Defines the scrolling portion of the \hyperdoc{} page. There can be
+  only one such construct per page.
 
-a: Any := i::Any
-  Type: Integer  <----- very interesting!!!
+\end{itemize}
+Finally we present an alphabetical list of (almost) all commands
+understood in \hyperdoc{} pages. While some of these commands are
+hard-wired into \hyperdoc, many of them are defined in {\tt
+  \$AXIOM/src/hyper/pages/util.ht}.
 
 
-dom a
-   Type: SExpression
-obj a
-  Type: None
+\begin{itemize}
 
+\item {\tt Browse}
 
-j: Integer := a :: Integer
-  Type: Integer
+  Produces the string {\tt Browse}.
 
+\item {\tt Clef}
 
-It seems the interpreter is quite smart.
+  Produces the string {\tt Clef}.
 
+\item {\tt Gallery}
 
+  Produces the string {\tt \{AXIOM Images\}}.
 
+\item {\tt HDexptypeindex}
 
+  See {\tt HDindex}.
 
-s: String := "I am a string"
-  Type: String
+\item {\tt HDindex}
 
+  Hidden behind special comment markers ('\%-\%') and used for
+  indexing with TeX.
 
-b: Any := s::Any
-  Type: String
+\item {\tt HDsyscmdindex}
 
+  See {\tt HDindex}.
 
-dom b
-  Type: SExpression?
+\item {\tt HyperName}
 
+  Produces the string HyperDoc.
 
-obj b
-  Type: None
+\item {\tt Language}
 
+  Produces the string {\tt AXIOM}.
 
-k: Integer := b :: Integer
-   Cannot convert from type Any to Integer for value
-   "I am a string"
+\item {\tt Lisp}
 
+  Produces the string {\tt Common LISP}.
 
+\item {\tt MenuDotBitmap}
 
-This Error is OK. And I think for manually working with Axiom, one just needs to type dom(...) and then coerce to the now known type.
-But how to use Any in a program is totally unclear to me. I have no idea to get the domain back from the SExpression.
-\end{verbatim}
-\section{email 13}
-\begin{verbatim}
-> ...
-> I am, however, very much against the Any type. It is like 
-> building a strongly typed language and than trying to forget
-> about types.
->
+  Displays a little bitmap showing a dot. Used by many menu commands
+  and defined in {\tt \$AXIOM/src/hyper/pages/util.ht}.
 
-Well that is more or less what I naively thought as well but
-from the ANY.spad file I read that:
+\item {\tt ReturnButton}
+\item {\tt TeX}
 
-)abbrev domain ANY Any
-++ Author: Robert S. Sutor
-++ Basic Functions: any, domainOf, objectOf, dom, obj,
-++   showTypeInOutput
-++ Related Constructors: AnyFunctions1
-++ Description:
-++   \spadtype{Any} implements a type that packages up objects and
-++   their types in objects of \spadtype{Any}. Roughly speaking
-++   that means that if \spad{s : S} then when converted to
-++   \spadtype{Any}, the new object will include both the original
-++   object and its type. This is a way of converting arbitrary
-++   objects into a single type **without losing any** of the
-++   original information. Any object can be converted to one of
-++   \spadtype{Any}.
+  As in \TeX/\LaTeX.
 
-and in the related file ANY1.spad
+\item {\tt UpBitmap}
+\item {\tt UpButton}
+\item {\tt aliascon}
+\item {\tt allowbreak}
+\item {\tt argDef}
+\item {\tt autobutt}
 
-)abbrev package ANY1 AnyFunctions1
-++ Basic Functions:  coerce, retractIfCan, retractable?, retract
-++ Description:
-++   \spadtype{AnyFunctions1} implements several utility functions
-++   for working with \spadtype{Any}. These functions are used to
-++   go back and forth between objects of \spadtype{Any} and objects
-++   of other types.
+  An alias for {\tt helppage}.
 
-So the situation is not quiet so simple. Apparently Any does not
-mean Any in the sense of throwing away essential information.
+\item {\tt autobuttons}
 
-\end{verbatim}
-\section{email 14}
-\begin{verbatim}
-Ralf Hemmecke wrote:
-> 
-> Hi Bill,
-> 
-> >>Foo: with { g: (n: PositiveInteger, k: PositiveInteger) ->
-> >>PrimeField(n) } == add {
-> >>g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
-> >> k::Integer::PrimeField(n) }
-> 
-> > Ok, I will work with this example. Yes, it is better.
-> 
-> Well, I haven't checked whether it should really work, but
-> shouldn't be
-> 
-> Foo: with {
->    g: (n: PositiveInteger, k: PositiveInteger) ->
->       (P: PrimeFieldCategory, x: P)
-> } == add {
->    g(n: PositiveInteger, k: PositiveInteger ):
->     (P: PrimeFieldCategory, x:P) == {
->     (PrimeField(n), k::Integer::PrimeField(n)
->    }
-> }
-> 
-> be even better? 
+  Does nothing at all.
 
-In fact you just pointed a way to solve the problem! Notice that you are in
-effect constructing a domain! So first create this domain (call this anything
-else you like):
+\item {\tt axiom}
+\item {\tt axiomFun}
+\item {\tt axiomFunFrom}
+\item {\tt axiomFunX}
+\item {\tt axiomOp}
+\item {\tt axiomOpFrom}
+\item {\tt axiomSig}
+\item {\tt axiomSyntax}
+\item {\tt axiomType}
+\item {\tt axiomcommand}
+\item {\tt axiomxl}
+\item {\tt beep}
+\item {\tt blankline}
+\item {\tt bound}
+\item {\tt boxvalue}
+\item {\tt caption}
+\item {\tt cdots}
+\item {\tt center}
+\item {\tt centerline}
+\item {\tt cite}
+\item {\tt def}
+\item {\tt displaystyle}
+\item {\tt downlink}
+\item {\tt end}
+\item {\tt endImportant}
+\item {\tt enditems}
+\item {\tt endmenu}
+\item {\tt endscroll}
+\item {\tt env}
+\item {\tt epsffile}
+\item {\tt eth}
+\item {\tt example}
+\item {\tt examplenumber}
+\item {\tt expr}
+\item {\tt fakeAxiomFun}
+\item {\tt fbox}
+\item {\tt footnote}
+\item {\tt free}
+\item {\tt frenchspacing}
+\item {\tt funArgs}
+\item {\tt funSyntax}
+\item {\tt graphpaste}
+\item {\tt head}
+\item {\tt helpbit}
+\item {\tt helppage}
+\item {\tt hfill}
+\item {\tt horizontalline}
+\item {\tt hspace}
+\item {\tt htbitmap}
+\item {\tt httex}
 
---%PointedPrimeField
-)abbrev domain PPF PointedPrimeField
-PointedPrimeField(n:PositiveInteger):Cat==Dog where
-  Cat == FiniteFieldCategory with
-    foo:PositiveInteger->PrimeField(n)
-  Dog == PrimeField(n) add
-    foo(k)==k::Integer::PrimeField(n)
+  Takes two parameters and ignores the second. Usually the second
+  parameter is a \TeX/\LaTeX version of the first. By redefining this
+  command one can produce a more beautiful version of the page using
+  \TeX/\LaTeX. See also {\tt texht}.
 
-After compiling, define in the interpreter
+\item {\tt ifcond}
+\item {\tt indent}
 
-g(n,k)==foo(k)$PPF(n)
+  Sets the indentation level to n spaces, where n is the first
+  parameter.
 
-and it works (in Axiom)! (Do not declare the types for g because n is not
-defined).
+\item {\tt indentrel}
 
-But I have trouble with path in windows:
-   Processing PointedPrimeField for Browser database:
---->-->PointedPrimeField((foo ((PrimeField n) (PositiveInteger)))): Not document
-ed!!!!
---->-->PointedPrimeField(constructor): Not documented!!!!
---->-->PointedPrimeField(): Missing Description
-h:/dostools/rm.exe: j:/program: No such file or directory
-h:/dostools/rm.exe: j:/progra~1/axiom/mnt/windows/lib/files/axiom/mnt/windows/li
-b/ppf.nrlib: No such file or directory
+  Adds the first parameter to the current indentation level. Negative
+  values are allowed.
 
-   >> System error:
-   Cannot rename the file #P"j:/Program Files/axiom/mnt/windows/lib/PPF.erlib" t
-o #P"j:/Program Files/axiom/mnt/windows/lib/PPF.NRLIB".
+\item {\tt index}
+\item {\tt input}
+\item {\tt inputbitmap}
+\item {\tt inputbox}
+\item {\tt inputimage}
+\item {\tt inputstring}
+\item {\tt item}
 
-protected-symbol-warn called with (NIL)
+  Starts a new entry in an {\tt items} or {\tt menu} environment.
 
-But that is just because "Program Files" need be in quotes?
+\item {\tt label}
+\item {\tt labelSpace}
+\item {\tt lanb}
+\item {\tt lispcommand}
+\item {\tt lispdownlink}
+\item {\tt lispmemolink}
+\item {\tt lispwindowlink}
+\item {\tt ll}
+\item {\tt localinfo}
 
-\end{verbatim}
-\section{email 15}
-\begin{verbatim}
-Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> PrimeField(n) } == add {
-g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
-k::Integer::PrimeField(n) }
-Ok, I will work with this example. Yes, it is better.
+  Hook for including a local menu item on the rootpage.
 
+\item {\tt mapsto}
+\item {\tt mathOrSpad}
+\item {\tt memolink}
+\item {\tt menudownlink}
+\item {\tt menuitemstyle}
+\item {\tt menulink}
 
-Well, I haven't checked whether it should really work, but
-shouldn't be
+  An alias for {\tt menudownlink}, both of which are frequently used.
 
+\item {\tt menulispcommand}
+\item {\tt menulispdownlink}
+\item {\tt menulispmemolink}
+\item {\tt menulispwindowlink}
+\item {\tt menumemolink}
+\item {\tt menuunixcommand}
+\item {\tt menuunixlink}
+\item {\tt menuunixwindow}
+\item {\tt menuwindowlink}
+\item {\tt menuxmpref}
+\item {\tt naglib}
 
-Foo: with {
-  g: (n: PositiveInteger, k: PositiveInteger) ->
-     (P: PrimeFieldCategory, x: P)
-} == add {
-  g(n: PositiveInteger, k: PositiveInteger ):
-   (P: PrimeFieldCategory, x:P) == {
-   (PrimeField(n), k::Integer::PrimeField(n)
-  }
-}
+  Produces the string {\tt NAG Foundation Library}.
 
+\item {\tt newcommand}
 
-be even better? The above code will not compile in Aldor, since it does not have PositiveInteger. And maybe it will even not compile with appropriate substitutions since the compiler cannot handle such a construction. I am, however, very much against the Any type. It is like building a strongly typed language and than trying to forget about types. For the interpreter it maybe OK, but not for the compiler.
+  Defines new commands as in \TeX/\LaTeX.
 
-Programming in Axiom should mean writing programs for the compiler. I would say that programming in the interpreter is just writing short scripts but not real programs.
+\item {\tt newline}
 
-See also
-http://www.aldor.org/docs/HTML/chap23.html#10\end{verbatim}
-\section{email 16}
-\begin{verbatim}
-On Wednesday, January 12, 2005 8:30 AM you wrote:
-> Bill Page wrote:
-> > 
-> > I don't really understand when the use of parameterized 
-> > return types on functions would be useful. What information
-> > is being returned as part of the type of the result that is
-> > not already known because of it's value?
-> 
-> The above is an example. Perhaps, more convincing:
-> 
-> Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> 
-> PrimeField(n) } == add {
-> g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
->  k::Integer::PrimeField(n) }              
->
+  Inserts a linebreak.
 
-Ok, I will work with this example. Yes, it is better.
-  
-> Another example is Marcus Better's problem, more examples
-> are in expr2ups.spad, where Any is used a lot.
+\item {\tt newpage}
 
-Ok.
+  Does nothing but is used in the \TeX part of {\tt texht} and
+  probably needed to make the parser happy.
 
-> The type tells you in what domain to interpret the value.
-> But sometimes, the type will have to depend on a parameter
-> of the function, as above.
+\item {\tt noOutputXtc}
 
-That is still now clear to me, at least when it is possible
-to use a Union.
+  Alias for {\tt xtc}.
 
-> 
-> > As I see it the concept does considerable damage to the 
-> > notion of the 'domain' of a function. How should we
-> > interpret the expressioin `PrimeField(n)' when n is
-> > unknown? Does it represent the Union over all values n?
-> > We can no longer write the signature of a function in
-> > the simple form:
-> > 
-> >   f: PositiveInteger -> PrimeField
-> 
-> Yes you can: Aldor does it. The signature is
-> 
->  f: (n: PositiveInteger) -> PrimeField n
->
+\item {\tt noindent}
+\item {\tt nonLibAxiomType}
+\item {\tt nullXtc}
 
-That does not look like a *signature* to me. What is the
-value of n? If you can't tell me, then how can I interpret
-`PrimeField n'? A signature should specify the domains of
-the function, but `PrimeField n' is not a domain until `n'
-is replaced with some PositiveInteger. The only interpretation
-of `PrimeField n' as a domain that I can think of would be
-to claim that it represents some kind of Union over the
-primes.
+  Alias for {\tt xtc}.
 
-  Union(PrimeField n for n=1.. | prime? n)
+\item {\tt optArg}
+\item {\tt outdent}
+\item {\tt pageref}
+\item {\tt pastebutton}
+\item {\tt pp}
 
-But of course we can't write it quite this nicely right now
-in Axiom...
+  Produces a {\tt newline}. To be used instead of {\tt par}. Only used
+  in {\tt \$AXIOM/src/hyper/pages/rootpage.ht} and {\tt
+    \$AXIOM/src/hyper/pages/util.ht}. Otherwise not used or commented
+  out.
 
-This is similar to Axiom's insistence that
+\item {\tt pred}
+\item {\tt psXtc}
 
-  A:Integer
+  Takes three parameters, ignores the third and feeds the first two to
+  {\tt xtc}.
 
-can not be used in the expression
+\item {\tt pspadfun}
+\item {\tt pspadtype}
+\item {\tt quad}
+\item {\tt radiobox}
+\item {\tt radioboxes}
+\item {\tt ref}
+\item {\tt returnbutton}
+\item {\tt rm}
+\item {\tt searchwindow}
+\item {\tt sf}
+\item {\tt showBlurb}
+\item {\tt small}
+\item {\tt smath}
+\item {\tt space}
+\item {\tt spad}
+\item {\tt spadFileExt}
+\item {\tt spadSyntax}
+\item {\tt spadatt}
+\item {\tt spadcmd}
+\item {\tt spadcommand}
+\item {\tt spadfun}
+\item {\tt spadfunFrom}
+\item {\tt spadfunFromX}
+\item {\tt spadfunX}
+\item {\tt spadglos}
+\item {\tt spadgloss}
+\item {\tt spadglossSee}
+\item {\tt spadignore}
+\item {\tt spadkey}
+\item {\tt spadop}
+\item {\tt spadopFrom}
+\item {\tt spadpaste}
+\item {\tt spadsig}
+\item {\tt spadsys}
+\item {\tt spadtype}
+\item {\tt special}
+\item {\tt stringvalue}
+\item {\tt subscriptIt}
+\item {\tt subscriptText}
+\item {\tt syscmdindex}
+\item {\tt tab}
+\item {\tt table}
+\item {\tt texht}
 
-  A+1
+  The same as {\tt httex} but with the meaning of the parameters
+  swapped.
 
-until A is assigned a value. I this case I think it should
-be ok to say that if A has no assigned value then it
-represents the domain
+\item {\tt threedim}
 
-  {+/-n for n=0..}
- 
-> > Can you explain again why you don't find the usual
-> > Axiom solution to this situation acceptible? I.e. the
-> > use of the `Any' domain:
-> > 
-> >  f:PositiveInteger->Any
-> >  f(n) == n::PrimeField(n)
-> 
-> Because you cannot use it in compiled code and because you 
-> are using all of the type information, which is the main
-> point of Axiom.
+  Abbreviation for {\tt three-dimensional}.
 
-But as you said, `Any' is used extensively in expr2ups.spad.
+\item {\tt twodim}
 
-> Of course, the example you just gave doesn't
-> make any sense, the result is always zero, but given the
-> function
-> 
-> Bar: with { h: (n: PositiveInteger, k: PositiveInteger) -> Any } 
->    == add { g(n: PositiveInteger, k: PositiveInteger ): Any ==     
->               k::Any }
-> 
-> you cannot use this function in compiled code anymore. The 
-> interpreter can deal with it, not the compiler.
+    Abbreviation for {\tt two-dimensional}.
 
-I would write it something like this:
+\item {\tt unixcommand}
+\item {\tt unixlink}
+\item {\tt upbutton}
+\item {\tt userfun}
+\item {\tt vertline}
+\item {\tt void}
 
-(2) -> h:(PositiveInteger,PositiveInteger)->Union( _
-PrimeField(2),PrimeField(3),PrimeField(5),PrimeField(7))
-                                                 Type: Void
-(3) -> h(n,k)==k::PrimeField(n)
-                                                 Type: Void
-(4) -> x:=h(7,2)
+  Abbreviation for {\tt the unique value of \bs spadtype{Void}}.
 
-   (4)  2
-                                  Type: Union(PrimeField 7,...)
-(5) -> trace x
+\item {\tt vspace}
+\item {\tt windowid}
+\item {\tt windowlink}
+\item {\tt xdefault}
+\item {\tt xtc}
 
-   (5)  2
-                                             Type: PrimeField 7
-> 
-> Look at Marcus code for a really convincing example: He wants 
-> to construct recursively an algebraic extension of a ring,
-> adding elements one at the time. At the end of the process
-> he wants to return an element of the final ring. It is tricky
-> to do this in Axiom currently.
+  Is defined through
+\begin{verbatim}
+\newcommand{\xtc}[2]{#1 #2}
+\end{verbatim}
+  which means that it takes two parameters appends them. Looks silly
+  and probably is.
 
-I will take a closer look at the emails from Marcus.
+\end{itemize}
 
-> 
-> Note, for example, if you have a signature
-> 
->   f: Integer -> Any
-> 
-> but really, f returns a SimpleAlgebraicExtension of some 
-> ring, you cannot do any calculations with the result in
-> compiled code anymore, unless you know *exactly* the defining
-> polynomial of the ring.
+\subsection{The Patch/Paste Mechanism}
+\label{sec:ThePatchPasteMechanism}
 
-I agree that Any throws away too much information, except
-in the interpreter where it tries to do a better job. But
-I think even there Any is (usually) not a good choice for
-the domain.
-
-> 
-> So one way out -- in this specific case -- would be to
-> return a record containing the result of type Any and
-> the defining polynomial. I hope you admit that this is
-> ugly.
 
-I agree that that is ugly. Using an explicit "streaming Union"
-(iterator) domain would be my (future) choice. Unfortunately
-for now:
+\subsection{Databases}
+\label{sec:HyperDocDatabases}
 
-(6) -> Union(PrimeField(i) for i in 1..10)
-   Local variable or parameter used in type
-   We will attempt to interpret the code.
+Axiom keeps one or several database files around to speed up finding a
+page (or a patch/paste). To add a file to the database one can use
+\axiomprog{htadd}.
 
-   Category, domain or package constructor COLLECT is not available.
-(6) -> Union(PrimeField(i) for i in 1..)
-   Loading C:/Program Files/axiom/mnt/windows/algebra/UNISEG.o for
-      domain UniversalSegment
-   Loading C:/Program Files/axiom/mnt/windows/algebra/INCRMAPS.o for
-      package IncrementingMaps
-   Loading C:/Program Files/axiom/mnt/windows/algebra/ITUPLE.o for
-      domain InfiniteTuple
-   Loading C:/Program Files/axiom/mnt/windows/algebra/STREAM.o for
-      domain Stream
-   Local variable or parameter used in type
-   We will attempt to interpret the code.
 
-   Interpret-Code mode is not supported for stream bodies.
-(6) ->
+\subsubsection{The HyperDoc Database Format}
+\label{sec:TheHyperDocDatabaseFormat}
 
-\end{verbatim}
-\section{email 17}
+The \hyperdoc{} database file(s) consist of several sections, each of
+which is started by a line like the following:
 \begin{verbatim}
- > > #include "axiom"
- > > 
- > > Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
- > >    == add { f(n: PositiveInteger): PrimeField(n) == 
- > >               10::Integer::PrimeField(n) }              
- > > 
- > > Note that such a construction -- the resulting domain depending on the
- > > function parameter -- is currently illegal in Axiom. In Aldor it is fine.
- > 
- > I don't really understand when the use of parameterized return types on
- > functions would be useful. What information is being returned as part of the
- > type of the result that is not already known because of it's value?
+	BBTREE.ht 1104291828
+\end{verbatim}
+It starts with a tab character and contains a filename and a
+timestamp, which is taken from the {\tt st\_mtime} field of the {\tt
+  struct stat} returned by {\tt stat}. This timestamp is used to check
+wether the database is current or not. % TODO kai: How does this work
+                                % precisely? Who's checking and when?
 
-The above is an example. Perhaps, more convincing:
+The following lines are the records for the current file and consist
+of the following fields separated by spaces: type, name, offset of the
+definition in characters and the linenumber where the definition
+starts.
 
-Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> PrimeField(n) } 
-   == add { g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==     
-              k::Integer::PrimeField(n) }              
- 
-Another example is Marcus Better's problem, more examples are in
-expr2ups.spad, where Any is used a lot. The type tells you in what domain to
-interpret the value. But sometimes, the type will have to depend on a parameter
-of the function, as above.
+The type field is always one of {\tt \\newcommand}, {\tt \\page} and {\tt
+  \\patch}. 
 
- > As I see it the concept does considerable damage to the notion of the
- > 'domain' of a function. How should we interpret the expressioin
- > `PrimeField(n)' when n is unknown? Does it represent the Union over all
- > values n? We can no longer write the signature of a function in the simple
- > form:
- > 
- >   f: PositiveInteger -> PrimeField
+\begin{verbatim}
+\newcommand BalancedBinaryTreeXmpTitle 140 3
+\newcommand BalancedBinaryTreeXmpNumber 201 4
+\page BalancedBinaryTreeXmpPage 322 7
+\end{verbatim}
 
-Yes you can: Aldor does it. The signature is
 
-   f: (n: PositiveInteger) -> PrimeField n
+\chapter{THINGS TO BE INTEGRATED}
 
- > Can you explain again why you don't find the usual Axiom solution to this
- > situation acceptible? I.e. the use of the `Any' domain:
- > 
- >  f:PositiveInteger->Any
- >  f(n) == n::PrimeField(n)
 
-Because you cannot use it in compiled code and because you are using all of the
-type information, which is the main point of Axiom. Of course, the example you
-just gave doesn't make any sense, the result is always zero, but given the
-function
+\section{Building/Internals}
 
-Bar: with { h: (n: PositiveInteger, k: PositiveInteger) -> Any } 
-   == add { g(n: PositiveInteger, k: PositiveInteger ): Any ==     
-              k::Any }
+\subsection{email 5}
+\begin{verbatim}
+How I Built Axiom on Windows
 
-you cannot use this function in compiled code anymore. The interpreter can deal
-with it, not the compiler.
+  I installed a completely new MinGW/MSYS configuration from the
+'current' file list at:
 
-Look at Marcus code for a really convincing example: He wants to construct
-recursively an algebraic extension of a ring, adding elements one at the
-time. At the end of the process he wants to return an element of the final
-ring. It is tricky to do this in Axiom currently.
+http://www.mingw.org/download.shtml#hdr2
 
-Note, for example, if you have a signature
+In the following order:
 
-  f: Integer -> Any
+1   MinGW-3.1.0-1.exe
 
-but really, f returns a SimpleAlgebraicExtension of some ring, you cannot do
-any calculations with the result in compiled code anymore, unless you know
-*exactly* the defining polynomial of the ring.
+    http://prdownloads.sf.net/mingw/MinGW-3.1.0-1.exe?download
 
-So one way out -- in this specific case -- would be to return a record
-containing the result of type Any and the defining polynomial. I hope you admit
-that this is ugly.\end{verbatim}
-\section{email 18}
-\begin{verbatim}
-I have been thinking about your example code.
+2   MSYS-1.0.10.exe
 
-On Tuesday, January 11, 2005 9:44 AM you wrote:
-> ... 
-> I just tried another example, which is in fact the reason
-> why I would love to have Aldor working. I did not expect
-> it to work, and it does not, but it works *almost*. The
-> code is as follows:
-> 
-> #include "axiom"
-> 
-> Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
->    == add { f(n: PositiveInteger): PrimeField(n) == 
->               10::Integer::PrimeField(n) }
-> 
-> Note that such a construction -- the resulting domain 
-> depending on the function parameter -- is currently
-> illegal in Axiom. In Aldor it is fine.
+    http://prdownloads.sf.net/mingw/MSYS-1.0.10.exe?download
 
-I don't really understand when the use of parameterized
-return types on functions would be useful. What information
-is being returned as part of the type of the result that
-is not already known because of it's value?
+3   msysDTK-1.0.1.exe
 
-As I see it the concept does considerable damage to the
-notion of the 'domain' of a function. How should we interpret
-the expressioin `PrimeField(n)' when n is unknown? Does it
-represent the Union over all values n? We can no longer
-write the signature of a function in the simple form:
+    http://prdownloads.sf.net/mingw/msysDTK-1.0.1.exe?download
 
-  f: PositiveInteger -> PrimeField
+4   Then untarred the following:
+ 
+    cd /mingw; tar xzvf /home/bpage/... 
 
-Can you explain again why you don't find the usual Axiom
-solution to this situation acceptible? I.e. the use of
-the `Any' domain:
+    gcc-core-3.4.2-20040916-1.tar.gz
+ 
+    http://prdownloads.sf.net/mingw/gcc-core-3.4.2-20040916-1.tar.gz?download
 
- f:PositiveInteger->Any
- f(n) == n::PrimeField(n)
+5   binutils-2.15.91-20040904-1.tar.gz
+ 
+    http://prdownloads.sf.net/mingw/binutils-2.15.91-20040904-1.tar.gz?download
 
-Perhaps in some cases the use of a Union might even be
-better:
+6   w32api-3.1.tar.gz
 
- f:PositiveInteger->Union(PrimeField(2),PrimeField(3),
-   PrimeField(5), ...)
- f(n) == n::PrimeField(n)
+    http://prdownloads.sf.net/mingw/w32api-3.1.tar.gz?download
 
-The union allows a 'case' construction like this:
+7   mingw-runtime-3.5.tar.gz
 
-  f(3) case PrimeField(3)
+    http://prdownloads.sf.net/mingw/mingw-runtime-3.5.tar.gz?download
 
-In fact this sort of thing works in Axiom:
+8   You will also need tla for windows from
 
-(1) -> f:PositiveInteger->Union(PrimeField(2),PrimeField(3), _
-  PrimeField(5),PrimeField(7),"Failed")
-  f(n) ==  ( prime? n and n<=7 => n::PrimeField(n); "Failed")
+    http://download.sipsolutions.de/tla-setup.exe
 
-   Function declaration f : PositiveInteger -> Union(PrimeField 2,
-      PrimeField 3,PrimeField 5,PrimeField 7,Failed) has been added to
-      workspace.
-                                                      Type: Void
-(2) -> f(2)
-   Cannot compile conversion for types involving local variables. In
-      particular, could not compile the expression involving ::
-      PrimeField #1
-   AXIOM will attempt to step through and interpret the code.
-   Compiling function f with type PositiveInteger -> Union(PrimeField 2
-      ,PrimeField 3,PrimeField 5,PrimeField 7,Failed)
+9   and the windows LaTeX packaged called MikTex
 
-   (2)  0
-                                    Type: Union(PrimeField 2,...)
-(3) -> f(3)
+    http://www.miktex.org/setup.html
 
-   (3)  0
-                                     Type: Union(PrimeField 3,...)
-(4) -> f(4)
+    The "Small MiKTeX" package is sufficient if your windows box is
+    connected to the Internet. Or if you want you can install the
+    complete system.
 
-   (4)  Failed
-                                           Type: Union(Failed,...)
-(5) -> f(5)
+10  download the axiom--windows--1 branch
 
-   (5)  0
-                                     Type: Union(PrimeField 5,...)
+    See deteails instructions at ArchUsage
 
-(6) -> x:=f(5)
+    1  tla my-id "First Last <address@bogus.example.com>"
 
-   (6)  0
-                                     Type: Union(PrimeField 5,...)
+    2  tla register-archive address@bogus.example.com 
+http://axiom-developer.org/archive/axiom
 
-(7) -> x case PrimeField(5)
+    3  tla my-default-archive address@bogus.example.com
 
-   (7)  true
-                                                    Type: Boolean
-(8) -> x case PrimeField(3)
+    4  tla get axiom--windows--1 axiom--windows--1
 
-   (8)  false
-                                                    Type: Boolean
-etc.\end{verbatim}
-\section{email 19}
-\begin{verbatim}
-Peter Broadbery writes:
- > On Tue, 2005-01-11 at 14:30 +0100, Martin Rubey wrote:
- > > Dear Peter,
- > > 
- > > this is just great stuff -- nearly... I had to try it out right away, but I
- > > experienced two problems.
- > > 
- > > the minor one is, that )co inside axiom still does not work:
- > > 
- > > (1) -> 
- > > (1) -> )co test.as
- > >    Compiling AXIOM source code from file 
- > >       /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
- > >       options 
- > > -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y 
- > > $AXIOM/algebra
- > >       Use the system command )set compiler args to change these 
- > >       options.
- > >  
- > >    >> System error:
- > >    NIL is not of type STRING.
- > 
- > 
- > ln -s $ALDORROOT $AXIOM/compiler may help here.  fixing i-syscmd.boot to
- > produce a nice error would be nice, I guess.
+    Or see ArchUsage to use 'sftp://' protocol if you intend to submit changes.
 
-I tried that, but it won't work. Tim, is there a way to trace what's happening?
+11  configure and make
 
-Note that both $ALDORROOT and $AXIOM were set correctly. In other words, the
-link above produced a directory "compiler" in "axiom/mnt/linux", containing the
-following directories of Aldor: bin/ doc/ include/ lib/ src/ tests/
+    cd axiom--windows--1
 
- > The .as file isn't in CVS (the file is compiled - don't be fooled by the
- > readable coding style)
+    ./configure  -- Cut-and-paste environmnet variables to avoid typing errors
 
-Sorry, my mistake. Only lsp files. By the way, there i *lots* of stuff in the
-directories under /lsp/ccl/src, some look like they could be really useful...
+    make         -- the build takes between 3 to 6 hours on 2.4 GHz Windows XP
 
-Tim: could you rename them to .pamphlet and correct the \usepackage line in
-each one of them? Thanks!
-
- > > (1) -> fact(5)$Test
- > > 
- > >    (1)  120
- > >                                                         Type: 
- > > PositiveInteger
- > > (2) -> fact(4)$Test
- > >  
- > >    >> System error:
- > >    #<vector 08cf4150> is not of type LIST.
- > > 
- > 
- > Fixed by the patch I send earlier (I hope)...
-
-Yes indeed! (I found that there was only one line you had to comment out?)
-
- > The significant bit is removing an unbound variable from as.boot, the
- > rest is to fix the )co command (obviously not bullet proof), and the .ap
- > file generation.  
- > 
- > In terms of aldor internal knowledge, you don't need that much, the hard
- > work is on the axiom side. The trick is to load all the aldor runtime
- > env interpreted and see what breaks (this includes daase.lisp, as.clisp
- > & interop.clisp, plus the aldor .lsp files).  This stuff used to vaguely
- > work, so putting it back in shape can't be too bad.  
-
-In another mail, you wrote:
-
- > As long as you don't use the sig. from the interpreter, you will be ok
- > (which misses the point,, I know).  As far as fixing the error, not really,
- > I don't know the axiom interpreter that well. Finding how & where the type
- > is substituted would be a good start [There must be someone who does...]
-
-Who could this be? It would be just wonderful to get this working!
-
-Thanks a million times,
 
 \end{verbatim}
-\section{email 20}
+\subsection{email 6}
 \begin{verbatim}
-On Tue, 2005-01-11 at 14:30 +0100, Martin Rubey wrote:
-> Dear Peter,
-> 
-> this is just great stuff -- nearly... I had to try it out right away, but I
-> experienced two problems.
-> 
-> the minor one is, that )co inside axiom still does not work:
-> 
-> (1) -> 
-> (1) -> )co test.as
->    Compiling AXIOM source code from file 
->       /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
->       options 
-> -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
->       Use the system command )set compiler args to change these 
->       options.
->  
->    >> System error:
->    NIL is not of type STRING.
-
-
-ln -s $ALDORROOT $AXIOM/compiler may help here.  fixing i-syscmd.boot to
-produce a nice error would be nice, I guess.
+What is MinGW?
 
+  MinGW ("Minimalistic GNU for Windows") refers to a set of runtime headers, 
+used in building a compiler system based on the GNU GCC and binutils projects. 
+It compiles and links code to be run on Win32 platforms... providing C, C++ and 
+Fortran compilers plus other related tools. If you see references to "mingw32" 
+instead of "MinGW", they are referring to the same compiler system. The 
+project's name changed from mingw32 to MinGW is to prevent the implication that 
+MinGW will only works on 32 bit systems (as 64 and higher bit machines become 
+more common, MinGW will evolve to work with them). MinGW uses the Microsoft 
+runtime libraries, distributed with the Windows operating system. Unlike other 
+ports of GCC to Windows, the runtime libraries are not distributed using Gnu's 
+General Public License (GPL). You, therefore, do not have to distribute your 
+source code with your programs unless, of course, you use a GPL library in your 
+programs.
 
-> (1) -> 
-> 
-> Never mind.
-> 
-> Unfortunately, there is a more severe issue. I put the following simple domain
-> in a file "test.as" and compiled it using 
-> 
-> aldor -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom test.as
-> 
-> without any problem. There is only the warning
-> 
-> #1 (Warning) Deprecated message prefix: use `ALDOR_' instead of `_AXL'
-> 
-> but I suspect that this is of no importance.
+What is MSYS?
 
-Yep.
+  MSYS or Minimal SYStem is a POSIX and Bourne shell environment use with 
+MinGW. It provides a hand picked set of tools to allow a typical configuration 
+script with Bourne syntax to execute. This allows most of the GNU packages to 
+create a Makefile just from executing the typical configure script which can 
+then be used to build the package using the native MinGW version of GCC.
 
+The POSIX layer used by MSYS is a fork of the 1.3.3 version of Cygwin . Cygwin 
+is a full POSIX layer and UNIX-like environment for Win32 providing both server 
+and client utilites.
 
+\end{verbatim}
+\subsection{email 7}
+\begin{verbatim}
+The build sequence should be:
 
-> 
-> 
-> -------------------------------------------------------------------------------
-> #include "axiom.as"
-> 
-> Test: with { fact: PositiveInteger -> PositiveInteger }
->    == add  { fact(n: PositiveInteger): PositiveInteger == 
->               { n <= 1 => 1;
->                 res: PositiveInteger := 1;
->                 while n > 1 repeat {
->                   res := res * n;
->                   n := n-1; }
->                 res } }
-> -------------------------------------------------------------------------------
-> 
-> After this I start axiom and load runtime and axextend. By the way axextend
-> *is* in the distribution, it's only a little hidden... There is even more
-> obscure stuff in theis directory, maybe it's of use to you!
-> 
+obj/linux/bin/lisp      ...  contains the socket extensions
+obj/linux/bin/bootsys   ...  contains the boot -> lisp compiler
+                             used to compile the interp/*.boot files
+obj/linux/bin/depsys    ...  contains macros used by axiom
+                             used for compiling the intermediate lisp files
+obj/linux/bin/interpsys ...  contains the final image
+                             used to compile the algebra
+obj/linux/bin/AXIOMsys       contains the final image
+                             a clean copy for the end user
 
-The .as file isn't in CVS (the file is compiled - don't be fooled by the
-readable coding style)
 
-> (1) -> )sh Test
->  Test  is a domain constructor
->  Abbreviation for Test is TEST 
->  This constructor is exposed in this frame.
->  Issue )edit test.as to see algebra source code for TEST 
-> 
-> ------------------------------- Operations --------------------------------
->  fact : PositiveInteger -> PositiveInteger
-> 
-> (1) -> fact(5)$Test
-> 
->    (1)  120
->                                                         Type: PositiveInteger
-> (2) -> fact(4)$Test
->  
->    >> System error:
->    #<vector 08cf4150> is not of type LIST.
-> 
+I've attached the interesting part of a console log. At this point
+the Axiom build is making the transition from building the BOOTSTRAP
+algebra to building the non-BOOTSTRAP algebra.
 
-Fixed by the patch I send earlier (I hope)...
+Notice that the BOOTSTRAP algebra is just lisp code. This code is 
+compiled in a DEPSYS image so that macros are properly expanded.
+However it is clear that the BOOTSTRAP lisp code was not compiled by
+the "new" compiler.
 
+Next we see the transition to compiling the non-BOOTSTRAP algebra.
+This is done in the interpsys image. It is also done in an image 
+that has access to only the BOOTSTRAP algebra code. Thus the 
+new compiler might not have all of the algebra-defined replacements
+available at compile time. Notice the autoload files that contain
+the optimizations.
 
-> By the way, could you explain what your patches are doing? It's just a mystery
-> to me! I suspect that one needs some knowledge of Aldor internals?
+A second or third round of compiles will expose the algebra-based
+optimizations and these will be compiled into the code. Since these
+are only optimizations the final results should not be affected.
 
-The significant bit is removing an unbound variable from as.boot, the
-rest is to fix the )co command (obviously not bullet proof), and the .ap
-file generation.  
+Also note that the BOOTSTRAP algebra is recompiled as the last step
+of building the algebra from scratch so that it can use the circular
+definitions.
 
-In terms of aldor internal knowledge, you don't need that much, the hard
-work is on the axiom side. The trick is to load all the aldor runtime
-env interpreted and see what breaks (this includes daase.lisp, as.clisp
-& interop.clisp, plus the aldor .lsp files).  This stuff used to vaguely
-work, so putting it back in shape can't be too bad.  \end{verbatim}
-\section{email 21}
-\begin{verbatim}
-I just tried another example, which is in fact the reason why I would love to
-have Aldor working. I did not expect it to work, and it does not, but it works
-*almost*. The code is as follows:
+==========================================================================
+====  running DEPSYS image ===============================================
+==========================================================================
 
-#include "axiom"
+BOOT>0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.lsp from 
+/home/arch/axiom--hyperdoc--1--base-0/src/algebra/vector.spad.pamphlet
+0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.o from 
+/home/arch/axiom--hyperdoc--1--base-0/int/algebra/VECTOR.lsp
 
-Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
-   == add { f(n: PositiveInteger): PrimeField(n) == 
-              10::Integer::PrimeField(n) }
+>
+Compiling VECTOR.lsp.
+End of Pass 1.  
+End of Pass 2.  
+OPTIMIZE levels: Safety=0 (No runtime error checking), Space=0, Speed=3
+Finished compiling VECTOR.o.
+#p"VECTOR.o"
 
-Note that such a construction -- the resulting domain depending on the function
-parameter -- is currently illegal in Axiom. In Aldor it is fine.
+BOOT>0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad from 
+/home/arch/axiom--hyperdoc--1--base-0/src/algebra/trigcat.spad.pamphlet
 
-I compiled it with Aldor as usual, and then loaded it into Axiom. As signature
-I got the slightly unusual
+==========================================================================
+====  running AXIOMSYS image =============================================
+==========================================================================
 
-(1) -> )di op f
 
-There is one unexposed function called f :
-   [1] PositiveInteger -> PrimeField n from Test
+0 making /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.NRLIB from 
+/home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad
+                        AXIOM Computer Algebra System 
+              Version of Friday November 19, 2004 at 16:36:16 
+-----------------------------------------------------------------------------
+   Issue )copyright to view copyright notices.
+   Issue )summary for a summary of useful system commands.
+   Issue )quit to leave AXIOM and return to shell.
+-----------------------------------------------------------------------------
+ 
+   Using local database 
+/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/compress.daase..   
+Using local database 
+/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/interp.daase..
+   Using local database 
+/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/operation.daase..
+   Using local database 
+/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/category.daase..
+   Using local database 
+/home/arch/axiom--hyperdoc--1--base-0/src/share/algebra/browse.daase..
+(1) ->    Loading 
+/home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/apply.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/c-doc.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/c-util.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/profile.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/category.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/compiler.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/define.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/functor.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/info.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/iterator.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/modemap.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/nruncomp.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/package.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/htcheck.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/xruncomp.
+   Compiling AXIOM source code from file 
+      /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.spad using
+      old system compiler.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/parsing.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bootlex.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/def.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/fnewmeta.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/metalex.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/metameta.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/parse.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/postpar.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/postprop.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/preparse.
+   AHYP abbreviates category ArcHyperbolicFunctionCategory 
+------------------------------------------------------------------------
+   initializing NRLIB AHYP for ArcHyperbolicFunctionCategory 
+   compiling into NRLIB AHYP 
 
-and trying it out I obtained
+;;;     ***       |ArcHyperbolicFunctionCategory| REDEFINED
+Time: 0 SEC.
 
-(1) -> f(5)$Test
-   Loading /home/rubey/axiom/mnt/linux/algebra/PF.o for domain 
-      PrimeField 
-   Loading /home/rubey/axiom/mnt/linux/algebra/IPF.o for domain 
-      InnerPrimeField 
-   Loading /home/rubey/axiom/mnt/linux/algebra/TABLE.o for domain Table
-      
-   Loading /home/rubey/axiom/mnt/linux/algebra/HASHTBL.o for domain 
-      HashTable 
-   Loading /home/rubey/axiom/mnt/linux/algebra/INTABL.o for domain 
-      InnerTable 
-   Loading /home/rubey/axiom/mnt/linux/algebra/ZMOD.o for domain 
-      IntegerMod 
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-matrix.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-misc.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-solve.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/bc-util.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/ht-util.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/htsetvar.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/ht-root.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-con.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-data.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/showimp.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-op1.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-op2.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-search.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-util.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/topics.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-prof.
+   Loading /home/arch/axiom--hyperdoc--1--base-0/mnt/linux/autoload/br-saturn.
+   finalizing NRLIB AHYP 
+   Processing ArcHyperbolicFunctionCategory for Browser database:
+--------(acosh ($ $))---------
+--------(acoth ($ $))---------
+--------(acsch ($ $))---------
+--------(asech ($ $))---------
+--------(asinh ($ $))---------
+--------(atanh ($ $))---------
+--------constructor---------
+Compiling /home/arch/axiom--hyperdoc--1--base-0/int/algebra/AHYP.NRLIB/code.lsp.
 
- 
-   >> System error:
-   |n| is not of type NUMBER.
+                          
 
-protected-symbol-warn called with (NIL)
 
-which is roughly what I expected. However, to my great surprise, if you turn on
-the debugger (beforehand. You always have to start a fresh axiom because of the
-error I told you about in my previous message) with
 
-)lisp (setq |$monitorNewWorld| t)
+\end{verbatim}
 
-and thus trace
+\subsection{email 2}
+\begin{verbatim}
+> 
+> > The list of prerequisites for running axiom is huge, and
+> > getting worse it seems!
+> ... 
+> > So in the interest of having something people can download
+> > that is functional with a minimum of effort, I think axiom
+> > (and any help system or hyperdoc) should be decoupled from
+> > zope and zwiki.  A download (think windoze users here) which
+> > included zope, zwiki, latex, ghostscript, python, PIL, gcl,
+> > gcc, *and* axiom, is too much, methinks.
+> 
+> Heh - even I agree there.  Perhaps it would be best to
+> acknowledge the reality that if one wants to take advantage
+> of all the vast possibilities of open source software, that's
+> going to be at odds with having the full power of the system
+> available on all platforms, particularly Windows, as a single
+> package.  Surely power users who are willing and able to use
+> the full web-like setup, instead of just a TeXmacs or Mathematica
+> like document interface, would be willing to set it up or at
+> the very least boot a live Linux CD loaded with the full set
+> of Axiom tools and dependencies. 
+> 
 
-(1) -> f(1783)$Test
+Personally, although I have tried knoppix and some variants on
+several occasions I have always been a little disappointed
+and frustrated. The problem is that I live in linux about 1/2
+the time and windows the other 1/2 and when I boot one of these
+"live" things I feel like I am in neither. It's fun to play for
+an hour or so but then it goes in the desk draw with all the
+other things that once fascinated me but I haven't looked at
+for so long that they are now collecting dust. So I am quite
+sceptical about the utility of a "live" Axiom/Doyen CD except
+as a kind of conference "promotional gimmick".
 
-the final bit reads
+Let's put the list in the following order and fill it in a
+few more:
 
-protected-symbol-warn called with (NIL)..IntegerMod 1783 wants
-   positiveRemainder : (%,%) -> % from  Integer
----->Integer----> searching op table for:
-   positiveRemainder : (%,%) -> % from  Integer
-<----#<compiled-function |INT;positiveRemainder;3$;28|> Integer
-goget stuffing slot 47 of IntegerMod 1783
-<------#<compiled-function |INT;positiveRemainder;3$;28|> Integer
+             gcc
+         /    |    \
+      gcl   latex   python
+      /       |      |    \
+     /    noweb      |    zope
+    /  /      |      |     /
+ axiom   ghostscript PIL  zwiki
+      \      \       |   /
+       \       LatexWiki
+        \        /
+        MathAction
 
-PrimeField n activating lazy slot 8: Integer
-PrimeField n activating lazy slot 9: IntegerPrimesPackage Integer
+Add your favourite text editor and browser and set it all up
+in Linux/Unix or Windows.
 
-..PrimeField n wants
-   prime? : Integer -> Boolean from  IntegerPrimesPackage Integer
----->IntegerPrimesPackage Integer----> searching op table for:
-   prime? : Integer -> Boolean from  IntegerPrimesPackage Integer
-<----#<compiled-function |PRIMES;prime?;IB;4|>(IntegerPrimesPackage,Integer)
-goget stuffing slot 10 of PrimeField n
-<------#<compiled-function |PRIMES;prime?;IB;4|>(IntegerPrimesPackage,Integer)
- 
+There. Now that doesn't seem so large and complex does it?
+(: At least not if you compare it to the list of capabilities
+that this remarkable combination of entirely open source
+software provides... :) I am quite sure that this would all
+easily fit on one-side of a Cdrom, including documentation.
+And of course we can add as many more optional add-on packages
+as we want, such as Reduce, Aldor, Maxima, ... eventually all
+integrated with a common web interface.
 
-which clearly tells you, that the calculation is done alright, only the
-signature interferes with success.
+What this gives you a fully web-integrated, collaborative
+mathematical research and development, hyper-linked publishing
+environment right on your desktop, or even in your pocket (I run
+almost all of this on a Zaurus 5600). This is all easily doable
+right now for free. I would have given my left arm for something
+like this back when I was a student!
 
-Any ideas?\end{verbatim}
-\section{email 22}
+\end{verbatim}
+
+\subsection{email 4}
 \begin{verbatim}
-this is just great stuff -- nearly... I had to try it out right away, but I
-experienced two problems.
+> > Next we see the transition to compiling the non-BOOTSTRAP algebra.
+> > This is done in the interpsys image. It is also done in an image 
+> > that has access to only the BOOTSTRAP algebra code. Thus the 
+> > new compiler might not have all of the algebra-defined replacements
+> > available at compile time. Notice the autoload files that contain
+> > the optimizations.
+> >
+> 
+> What do you mean by "algebra-defined replacements". Where are
+> these replacements defined? How are they different than the
+> "optimizations" contained in the autoload files?
 
-the minor one is, that )co inside axiom still does not work:
+The BOOTSTRAP files contain lsp and spad code. The build steps
+for the initial BOOTSTRAP layer use "depsys" to compile the lisp
+code. So, in this case, we see VECTOR.lsp being compiled in the
+depsys image. VECTOR.lsp is the last algebra file that contains
+BOOTSTRAP code. So in this phase we see:
 
-                        AXIOM Computer Algebra System 
-                   Version: Axiom 3.0 Beta (February 2005)
-              Timestamp: Tuesday January 11, 2005 at 14:02:04 
------------------------------------------------------------------------------
-   Issue )copyright to view copyright notices.
-   Issue )summary for a summary of useful system commands.
-   Issue )quit to leave AXIOM and return to shell.
------------------------------------------------------------------------------
- 
-   Re-reading compress.daase   Re-reading interp.daase
-   Re-reading operation.daase
-   Re-reading category.daase
-   Re-reading browse.daase
-(1) -> 
-(1) -> )co test.as
-   Compiling AXIOM source code from file 
-      /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
-      options 
--O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
-      Use the system command )set compiler args to change these 
-      options.
- 
-   >> System error:
-   NIL is not of type STRING.
+VECTOR.lsp (BOOTSTRAP) -> VECTOR.o
 
-protected-symbol-warn called with (NIL)
-(1) -> )co test
-   Compiling AXIOM source code from file 
-      /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
-      options 
--O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
-      Use the system command )set compiler args to change these 
-      options.
- 
-   >> System error:
-   NIL is not of type STRING.
+Once we leave the phase (shown in the printout) we start using
+an "interpsys" image to compile spad code. Much later in the console
+VECTOR.spad will be compiled and replaces the lisp. However the
+"interpsys" environment in VECTOR.spad differs significantly from
+the "depsys" environment that compiles VECTOR.lsp BOOSTRAP code. 
+So we see
 
-protected-symbol-warn called with (NIL)
-(1) -> 
+VECTOR.spad + SINT.NRLIB -> VECTOR.lsp -> VECTOR.o (replaced previous version)
 
-Never mind.
+Suppose VECTOR.spad used something from SINT.spad. When the
+VECTOR.lsp BOOTSTRAP file is compiled by depsys it contains
+(+ ... ...) and generates untyped and unoptimized code.
 
-Unfortunately, there is a more severe issue. I put the following simple domain
-in a file "test.as" and compiled it using 
+Later when VECTOR.spad is compiled and SINT.o is available 
+then the spad compiler will use the optimization information
+to generate (QSADD1 ... ...)
 
-aldor -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom test.as
+> What do you mean by "expose". Why does this cause interpsys to
+> be re-built? That is necessary if code is going to be generated
+> based on new optimizations isn't it?
 
-without any problem. There is only the warning
+expose == make available
+Due to my lack of foresight in choosing the VECTOR.lsp BOOTSTRAP
+code I did not use the most highly optimized version. But in the
+algebra recompile of VECTOR.spad later in the build this gets
+corrected because the operations are made available (exposed) by
+previously compiled .spad code. So:
 
-#1 (Warning) Deprecated message prefix: use `ALDOR_' instead of `_AXL'
+VECTOR.lsp (BOOTSTRAP) uses SINT.o
 
-but I suspect that this is of no importance.
+But the VECTOR.lsp has (+ ... ...) instead of (QSADD1 ... ...)
+because the rewriting of "+" to "QSADD1" is done by the spad
+compiler, not the GCL compiler and we are not yet in a position
+to use the spad compiler.
 
+Later when 
 
--------------------------------------------------------------------------------
-#include "axiom.as"
+VECTOR.spad -> VECTOR.lsp -> VECTOR.o (replaced previous version)
 
-Test: with { fact: PositiveInteger -> PositiveInteger }
-   == add  { fact(n: PositiveInteger): PositiveInteger == 
-              { n <= 1 => 1;
-                res: PositiveInteger := 1;
-                while n > 1 repeat {
-                  res := res * n;
-                  n := n-1; }
-                res } }
--------------------------------------------------------------------------------
+the spad compiler was invoked and it gets a chance to change
+"+" to "QSADD1". 
 
-After this I start axiom and load runtime and axextend. By the way axextend
-*is* in the distribution, it's only a little hidden... There is even more
-obscure stuff in theis directory, maybe it's of use to you!
+Because I grabbed the wrong version of .lsp file for BOOTSTRAP
+code you are able to see this difference. The work you and steve
+are doing is to find stable versions of the .lsp files.
 
-                        AXIOM Computer Algebra System 
-                   Version: Axiom 3.0 Beta (February 2005)
-              Timestamp: Tuesday January 11, 2005 at 14:02:04 
------------------------------------------------------------------------------
-   Issue )copyright to view copyright notices.
-   Issue )summary for a summary of useful system commands.
-   Issue )quit to leave AXIOM and return to shell.
------------------------------------------------------------------------------
- 
-   Re-reading compress.daase   Re-reading interp.daase
-   Re-reading operation.daase
-   Re-reading category.daase
-   Re-reading browse.daase
-(1) -> 
-(1) -> )lisp (load "/home/rubey/aldor/linux/1.0.2/lib/runtime.lsp")
+> > Since these are only optimizations the final results should not
+> > be affected.
+> >
+> 
+> But it could have an impact on overall performance, right?
 
-Value = T
-(1) -> )lisp (load 
-"/home/rubey/axiom--main--1--patch-24/lsp/ccl/src/axbase/compiler/lib/axextend.lsp")
+Oh, clearly. (QSADD1 ... ...) is faster than (+ ... ...)
 
-Value = T
-(1) -> )lib test
-   Reading /home/rubey/martin/Axiom/test.asy
-   Loading /home/rubey/axiom/mnt/linux/autoload/bc-matrix.
-   Loading /home/rubey/axiom/mnt/linux/autoload/bc-misc.
-   Loading /home/rubey/axiom/mnt/linux/autoload/bc-solve.
-   Loading /home/rubey/axiom/mnt/linux/autoload/bc-util.
-   Loading /home/rubey/axiom/mnt/linux/autoload/ht-util.
-   Loading /home/rubey/axiom/mnt/linux/autoload/htsetvar.
-   Loading /home/rubey/axiom/mnt/linux/autoload/ht-root.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-con.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-data.
-   Loading /home/rubey/axiom/mnt/linux/autoload/showimp.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-op1.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-op2.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-search.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-util.
-   Loading /home/rubey/axiom/mnt/linux/autoload/topics.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-prof.
-   Loading /home/rubey/axiom/mnt/linux/autoload/br-saturn.
-   Test is now explicitly exposed in frame frame0 
-   Test will be automatically loaded when needed from 
-      /home/rubey/martin/Axiom/test
-(1) -> )sh Test
- Test  is a domain constructor
- Abbreviation for Test is TEST 
- This constructor is exposed in this frame.
- Issue )edit test.as to see algebra source code for TEST 
+Furthermore, there is another optimization step we could take
+during the build but we do not (yet). When the GCL compiler
+compiles VECTOR.lsp it generates VECTOR.fn. If you look in these
+.fn files you'll find exact type information for each function call.
 
-------------------------------- Operations --------------------------------
- fact : PositiveInteger -> PositiveInteger
+VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
 
-(1) -> fact(5)$Test
+If this exact type information was available at compile time then
+the GCL compiler can lay down faster code. However there is a 
+bootstrap problem here also since the GCL compiler has to compile
+the code one time in order to generate the .fn file.
 
-   (1)  120
-                                                        Type: PositiveInteger
-(2) -> fact(4)$Test
- 
-   >> System error:
-   #<vector 08cf4150> is not of type LIST.
+VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
 
-protected-symbol-warn called with (NIL)
+So the full, proper procedure, which I have yet to do, would actually
+call the GCL compile once to generate the .fn file with exact type
+information for function calls, load the .fn file, and the recompile
+the lisp file. Since the second compile has exact type information 
+the generated code will be (potentially much) shorter.
 
+For each lisp file do
+(
+  VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
+  VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
+)
 
-:-(
 
-I am already very very happy, but another patch and/or explanation would
-greatly improve this...
+> Still after reading the interp and algebra Makefiles again,
+> I do not see why interpsys is being rebuilt after I delete
+> all the *.NRLIB's and repeat the 'make'. I am still missing
+> something somewhere. Is there some "missing link" that still
+> connects the algebra/Makefile back to the inter/Makefile?
 
-By the way, could you explain what your patches are doing? It's just a mystery
-to me! I suspect that one needs some knowledge of Aldor internals?
+I have to think about this (I'm getting ready for work so I'll
+give it some "drive-time cycles") but I believe that the issue
+is related to using fresh databases. The databases are used 
+during the algebra compiles to resolve algebra calls. However
+recompiling the algebra generates NRLIBs and, from these NRLIBs 
+a fresh database is built thus:
 
-\end{verbatim}
-\section{email 23}
-\begin{verbatim}
-I've been playing with the aldor/axiom stuff a little, and the following
-patch may help get things going(I used to work on it, and thought it'd
-be fun to get it going again).
+DATABASES -> NRLIBs -> FRESH DATABASES
+
+This is yet a third bootstrap issue. There are more but not with
+the algebra files.
 
-There are further problems:
-- aldor "extend" does not work - it ought to, I think
-- The algebra defined in libaxiom.al is not current, and for it to be
-rebuilt various .as files need to be available to the build process
-(axextend.as and friends) - any reason why they're left out of the
-distribution?
-- exported attributes from aldor domains are explicitly killed off by
-this patch (it's probably easy to fix, just no time atm).
-- Only tested the most trivial domains I could find.  
 
-Peter.
 
 \end{verbatim}
-\section{email 24}
-\begin{verbatim}
-? Makefile
-? Makefile.dvi
-Index: as.boot.pamphlet
-===================================================================
-RCS file: /cvsroot/axiom/axiom/src/interp/as.boot.pamphlet,v
-retrieving revision 1.3
-diff -u -r1.3 as.boot.pamphlet
---- as.boot.pamphlet	24 May 2004 22:53:49 -0000	1.3
-+++ as.boot.pamphlet	8 Jan 2005 19:01:23 -0000
-@@ -389,7 +389,8 @@
-     HPUT(ht,id,[entry,:HGET(ht,id)])
-   opalist := [ [op,:REMDUP HGET(ht,op)] for op in HKEYS ht]
-   --HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
--  HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
-+  --HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
-+  HPUT($opHash,con,[ancestorAlist,nil,:opalist])
- 
- hackToRemoveAnd p ==
- ---remove this as soon as .asy files do not contain forms (And pred) forms
-Index: ax.boot.pamphlet
-===================================================================
-RCS file: /cvsroot/axiom/axiom/src/interp/ax.boot.pamphlet,v
-retrieving revision 1.3
-diff -u -r1.3 ax.boot.pamphlet
---- ax.boot.pamphlet	24 May 2004 22:53:49 -0000	1.3
-+++ ax.boot.pamphlet	8 Jan 2005 19:01:26 -0000
-@@ -80,11 +80,29 @@
-      axForms :=
-         [ ['Foreign, ['Declare, 'dummyDefault, 'Exit], 'Lisp], :axForms]
-   axForms := APPEND(axDoLiterals(), axForms)
--  axForm := ['Sequence, ['Import, [], 'AxiomLib], :axForms]
-+  axForm := ['Sequence, ['Import, [], 'AxiomLib], ['Import, [], 'Boolean], :axForms]
-   st := MAKE_-OUTSTREAM(filename)
-   PPRINT(axForm,st)
-   CLOSE st
- 
-+makeAxExportForm(filename, constructors) ==
-+  $defaultFlag : local := false
-+  $literals := []
-+  axForms :=
-+     [modemapToAx(modemap) for cname in constructors |
-+            (modemap:=GETDATABASE(cname,'CONSTRUCTORMODEMAP)) and
-+              (not cname in '(Tuple Exit Type)) and
-+                not isDefaultPackageName cname]
-+  if $baseForms then
-+     axForms := [:$baseForms, :axForms]
-+  if $defaultFlag then
-+     axForms :=
-+        [ ['Foreign, ['Declare, 'dummyDefault, 'Exit], 'Lisp], :axForms]
-+  axForms := APPEND(axDoLiterals(), axForms)
-+  axForm := ['Sequence, ['Import, [], 'AxiomLib], ['Import, [], 'Boolean], :axForms]
-+  axForm
-+
-+
- stripType type ==
-   $stripTypes =>
-      categoryForm? type => 'Type
-Index: i-syscmd.boot.pamphlet
-===================================================================
-RCS file: /cvsroot/axiom/axiom/src/interp/i-syscmd.boot.pamphlet,v
-retrieving revision 1.4
-diff -u -r1.4 i-syscmd.boot.pamphlet
---- i-syscmd.boot.pamphlet	28 Dec 2004 07:42:45 -0000	1.4
-+++ i-syscmd.boot.pamphlet	8 Jan 2005 19:01:36 -0000
-@@ -642,7 +642,7 @@
-     if ^beQuiet then sayKeyedMsg("S2IZ0038A",[namestring args, asharpArgs])
- 
-     command :=
--     STRCONC(TRUENAME(STRCONC(GETENV('"AXIOM"),'"/compiler/bin/")),"axiomxl ", asharpArgs, '" ", namestring args)
-+     STRCONC(STRCONC(GETENV('"AXIOM"),'"/compiler/bin/"),"axiomxl ", asharpArgs, '" ", namestring args)
-     rc := OBEY command
- 
-     if (rc = 0) and doCompileLisp then
-\end{verbatim}
-\section{email 25}
+\subsection{email 4}
 \begin{verbatim}
-> It is not so clear to me why the build appears to succeed
-> even though these definitions are missing. In other languages
-> I would presume that this situation would be easily caught
-> as a missing file during `linking'. But here we have this
-> "domain vector" thing. Is there not some why that the
-> compilation could be made more robust by verifying the
-> domain vector at compile time?
+Yet one other opportunity for speed optimization is available at 
+build time....
 
-Bill, there is no "linking" step in any sense of the word.
-This needs to be documented somewhere.
+Remember that every lisp file generates a .fn file:
 
-If we look at one of the random BOOTSTRAP files, say, CHAR we see:
+foo.lsp -> foo.o + foo.fn
 
-Character: OrderedFinite() with
-        ord: % -> Integer
-            ++ ord(c) provides an integral code corresponding to the
-            ++ character c.  It is always true that \spad{char ord c = c}.
-        char: Integer  -> %
-            ++ char(i) provides a character corresponding to the integer
-            ++ code i.  It is always true that \spad{ord char i = i}.
-        char: String   -> %
-            ++ char(s) provides a character from a string s of length one.
-        space:  () -> %
-            ++ space() provides the blank character.
-        quote:  () -> %
-            ++ quote() provides the string quote character, \spad{"}.
-        escape: () -> %
-            ++ escape() provides the escape character, \spad{_}, which
-            ++ is used to allow quotes and other characters {\em within}
-            ++ strings.
-        upperCase: % -> %
-            ++ upperCase(c) converts a lower case letter to the corresponding
-            ++ upper case letter.  If c is not a lower case letter, then
-            ++ it is returned unchanged.
-        lowerCase: % -> %
-            ++ lowerCase(c) converts an upper case letter to the corresponding
-            ++ lower case letter.  If c is not an upper case letter, then
-            ++ it is returned unchanged.
-        digit?: % -> Boolean
-            ++ digit?(c) tests if c is a digit character,
-            ++ i.e. one of 0..9.
-        hexDigit?: % -> Boolean
-            ++ hexDigit?(c) tests if c is a hexadecimal numeral,
-            ++ i.e. one of 0..9, a..f or A..F.
-        alphabetic?: % -> Boolean
-            ++ alphabetic?(c) tests if c is a letter,
-            ++ i.e. one of a..z or A..Z.
-        upperCase?: % -> Boolean
-            ++ upperCase?(c) tests if c is an upper case letter,
-            ++ i.e. one of A..Z.
-        lowerCase?: % -> Boolean
-            ++ lowerCase?(c) tests if c is an lower case letter,
-            ++ i.e. one of a..z.
-        alphanumeric?: % -> Boolean
-            ++ alphanumeric?(c) tests if c is either a letter or number,
-            ++ i.e. one of 0..9, a..z or A..Z.
+and that a second compile with the .fn file loaded is faster:
 
-    == add
-        Rep := SingleInteger      -- 0..255
+foo.lsp + foo.fn -> faster foo.o
 
-        CC ==> CharacterClass()
-        import CC
+However if we look at the type information in the foo.fn file
+we find that it only contains type information for functions
+defined in foo.lsp. But suppose there are two lisp files with
+functions from one using functions from the other. The sub-optimal
+sequence is:
 
-        --cl: Record(dig:CC,hex:CC,upp:CC,low:CC,alpha:CC,alnum:CC) :=
-        --    [ digit(), hexDigit(),
-        --      upperCase(), lowerCase(), alphabetic(), alphanumeric() ]
+foo.lsp -> foo.o + foo.fn
+foo.lsp + foo.fn -> faster foo.o
+
+bar.lsp -> bar.o + bar.fn
+bar.lsp + bar.fn -> faster bar.o
+
+The optimal sequence is:
+
+foo.lsp -> foo.o + foo.fn
+bar.lsp -> bar.o + bar.fn
+
+foo.lsp + (foo.fn + bar.fn) -> even faster foo.o
+bar.lsp + (foo.fn + bar.fn) -> even faster bar.o
+
+So, really what we should do is cache ALL of the .fn files from all of
+the compiles, batch them into a big file, and the completely rebuild
+the system with the batched .fn files loaded.
+
+I've started this process but have not yet completed it. 
+See the file src/boot/boot-proclaims.lisp
+
+So there is a faster Axiom coming in the future but the build 
+complexity will be even greater. And Camm, I believe, is doing
+even more with type propagation which will improve things more.
+
+
+\end{verbatim}
+
+\subsection{email 8}
+\begin{verbatim}
+MiKTeX is an up-to-date TeX implementation for the Windows operating system.
+
+TeX is a typesetting system written by Donald E. Knuth, who says that it is
+"intended for the creation of beautiful books - and especially for books that
+contain a lot of mathematics".
+
+MiKTeX offers a complete set of utilities, macro packages and fonts, e.g.,
+LaTeX, pdfTeX, ConTeXt, just to name a few.
+
+http://www.miktex.org
+\end{verbatim}
+\subsection{email 9}
+\begin{verbatim}
+> > Next we see the transition to compiling the non-BOOTSTRAP algebra.
+> > This is done in the interpsys image. It is also done in an image 
+> > that has access to only the BOOTSTRAP algebra code. Thus the 
+> > new compiler might not have all of the algebra-defined replacements
+> > available at compile time. Notice the autoload files that contain
+> > the optimizations.
+> >
+> 
+> What do you mean by "algebra-defined replacements". Where are
+> these replacements defined? How are they different than the
+> "optimizations" contained in the autoload files?
+
+The BOOTSTRAP files contain lsp and spad code. The build steps
+for the initial BOOTSTRAP layer use "depsys" to compile the lisp
+code. So, in this case, we see VECTOR.lsp being compiled in the
+depsys image. VECTOR.lsp is the last algebra file that contains
+BOOTSTRAP code. So in this phase we see:
+
+VECTOR.lsp (BOOTSTRAP) -> VECTOR.o
+
+Once we leave the phase (shown in the printout) we start using
+an "interpsys" image to compile spad code. Much later in the console
+VECTOR.spad will be compiled and replaces the lisp. However the
+"interpsys" environment in VECTOR.spad differs significantly from
+the "depsys" environment that compiles VECTOR.lsp BOOSTRAP code. 
+So we see
+
+VECTOR.spad + SINT.NRLIB -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+
+Suppose VECTOR.spad used something from SINT.spad. When the
+VECTOR.lsp BOOTSTRAP file is compiled by depsys it contains
+(+ ... ...) and generates untyped and unoptimized code.
+
+Later when VECTOR.spad is compiled and SINT.o is available 
+then the spad compiler will use the optimization information
+to generate (QSADD1 ... ...)
+
+> What do you mean by "expose". Why does this cause interpsys to
+> be re-built? That is necessary if code is going to be generated
+> based on new optimizations isn't it?
+
+expose == make available
+Due to my lack of foresight in choosing the VECTOR.lsp BOOTSTRAP
+code I did not use the most highly optimized version. But in the
+algebra recompile of VECTOR.spad later in the build this gets
+corrected because the operations are made available (exposed) by
+previously compiled .spad code. So:
+
+VECTOR.lsp (BOOTSTRAP) uses SINT.o
+
+But the VECTOR.lsp has (+ ... ...) instead of (QSADD1 ... ...)
+because the rewriting of "+" to "QSADD1" is done by the spad
+compiler, not the GCL compiler and we are not yet in a position
+to use the spad compiler.
+
+Later when 
+
+VECTOR.spad -> VECTOR.lsp -> VECTOR.o (replaced previous version)
+
+the spad compiler was invoked and it gets a chance to change
+"+" to "QSADD1". 
+
+Because I grabbed the wrong version of .lsp file for BOOTSTRAP
+code you are able to see this difference. The work you and steve
+are doing is to find stable versions of the .lsp files.
+
+> > Since these are only optimizations the final results should not
+> > be affected.
+> >
+> 
+> But it could have an impact on overall performance, right?
+
+Oh, clearly. (QSADD1 ... ...) is faster than (+ ... ...)
+
+Furthermore, there is another optimization step we could take
+during the build but we do not (yet). When the GCL compiler
+compiles VECTOR.lsp it generates VECTOR.fn. If you look in these
+.fn files you'll find exact type information for each function call.
+
+VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
+
+If this exact type information was available at compile time then
+the GCL compiler can lay down faster code. However there is a 
+bootstrap problem here also since the GCL compiler has to compile
+the code one time in order to generate the .fn file.
+
+VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
+
+So the full, proper procedure, which I have yet to do, would actually
+call the GCL compile once to generate the .fn file with exact type
+information for function calls, load the .fn file, and the recompile
+the lisp file. Since the second compile has exact type information 
+the generated code will be (potentially much) shorter.
+
+For each lisp file do
+(
+  VECTOR.lsp -> VECTOR.o + VECTOR.fn (unoptimized, but type generated)
+  VECTOR.lsp + VECTOR.fn -> VECTOR.o (type optimized)
+)
+
+
+> Still after reading the interp and algebra Makefiles again,
+> I do not see why interpsys is being rebuilt after I delete
+> all the *.NRLIB's and repeat the 'make'. I am still missing
+> something somewhere. Is there some "missing link" that still
+> connects the algebra/Makefile back to the inter/Makefile?
+
+I have to think about this (I'm getting ready for work so I'll
+give it some "drive-time cycles") but I believe that the issue
+is related to using fresh databases. The databases are used 
+during the algebra compiles to resolve algebra calls. However
+recompiling the algebra generates NRLIBs and, from these NRLIBs 
+a fresh database is built thus:
+
+DATABASES -> NRLIBs -> FRESH DATABASES
+
+This is yet a third bootstrap issue. There are more but not with
+the algebra files.
+
+\end{verbatim}
+\subsection{email 9}
+\begin{verbatim}
+Yet one other opportunity for speed optimization is available at 
+build time....
+
+Remember that every lisp file generates a .fn file:
+
+foo.lsp -> foo.o + foo.fn
+
+and that a second compile with the .fn file loaded is faster:
+
+foo.lsp + foo.fn -> faster foo.o
+
+However if we look at the type information in the foo.fn file
+we find that it only contains type information for functions
+defined in foo.lsp. But suppose there are two lisp files with
+functions from one using functions from the other. The sub-optimal
+sequence is:
+
+foo.lsp -> foo.o + foo.fn
+foo.lsp + foo.fn -> faster foo.o
+
+bar.lsp -> bar.o + bar.fn
+bar.lsp + bar.fn -> faster bar.o
+
+The optimal sequence is:
+
+foo.lsp -> foo.o + foo.fn
+bar.lsp -> bar.o + bar.fn
+
+foo.lsp + (foo.fn + bar.fn) -> even faster foo.o
+bar.lsp + (foo.fn + bar.fn) -> even faster bar.o
+
+So, really what we should do is cache ALL of the .fn files from all of
+the compiles, batch them into a big file, and the completely rebuild
+the system with the batched .fn files loaded.
+
+I've started this process but have not yet completed it. 
+See the file src/boot/boot-proclaims.lisp
+
+So there is a faster Axiom coming in the future but the build 
+complexity will be even greater. And Camm, I believe, is doing
+even more with type propagation which will improve things more.
+
+
+\end{verbatim}
+\subsection{email 10}
+\begin{verbatim}
+I am no longer baffled. The explanation for the generic arith
+vs. fixnum arith is in macros.lisp. In the following code from
+-REPEAT, X is bound to a form such as '((STEP |i| 3 1)):
+
+  (COND ((AND (EQ (CAAR X) 'STEP)
+                  (|member| (CADDAR X) '(2 1 0 (|One|) (|Zero|)))
+                  (|member| (CADR (CDDAR X)) '(1 (|One|))))
+             (SETQ X (CONS (CONS 'ISTEP (CDAR X)) (CDR X))) ))
+                        ; A hack to increase the likelihood of small integers
+
+So, one `rule' is, if you iterate with a sequence with lower bound
+0,1, or 2, with an increment of 1, you get fixnum arith. Otherwise you
+get generic arithmetic.
+
+However, this is not a hard and fast rule, since the compiler can say
+'(ISTEP |i| 5 23) [say] during code generation and force fixnum arith. 
+
+
+This leads to a question. Tim, in interp/wi2.boot we have a
+redefinition of compIterator (default implementation is in
+iterator.boot). This new definition makes an attempt at deciding when
+fixnum stepping code should be generated. Do you have an explanation
+as to why is this not the default definition? The original version of
+the code in iterator.boot is what gets called.
+
+I'm wondering if it is possible that during the fixedPoint build if
+some of the new definitions (particularly those in wi2.boot,
+xruncomp.boot) are being autoloaded during compilation. The changes
+which I have already noted in the generated lisp seem to support this
+(fixnum arith vs. generic arith, inlining of trivial coercions,
+etc). All the changes make sense if they are the result of calling one
+of the `improved' functions which these files redefine. 
+
+Sincerely,
+Steve
+
+
+
+On Mon, Jan 17, 2005 at 01:39:45PM -0500, Stephen Wilson wrote:
+> 
+> Tim, 
+> 
+> I compleatly fine with the fixnum declaration. We just need to make
+> sure it is a rule programmers can rely on. Consider:
+> 
+> )abbrev package ITER Iter
+> Iter(): E == I where
+>   E == with
+>     iter: () -> Void
+>   I == add
+>     iter(): Void == 
+>       for i in 2.. repeat
+>          print(i::OutputForm)
+> 
+> 
+> The relavent lisp decalres we are using fixnums:
+> 
+>       (LETT |i| (QSADD1 |i|) |ITER;iter;V;1|)
+> 
+> 
+> Now compile the above with a lower bound of 3:
+> 
+>       for i in 3.. repeat
+>          print(i::OutputForm)
+> 
+> 
+> We get generic arithmetic:
+> 
+>       (LETT |i| (+ |i| 1) |ITER;iter;V;1|)
+> 
+> 
+> Baffled,
+> Steve
+> 
+> 
+> On Mon, Jan 17, 2005 at 12:23:36PM -0500, root wrote:
+> > Steve,
+> > 
+> > I don't know if there is an actual statement to the effect that
+> > the upper bound on a loop would be a register-sized number (32
+> > or 64 bits) but at 6Mhz it seemed impossible that one could 
+> > run a loop of any consequence for greater than 2^32 or 2^64
+> > iterations. If you wanted to do that you'd have to do the
+> > looping using some other construct. In general it is safe to
+> > assume that the upper bound of the register size cannot be
+> > exceeded. There is a practical performance difference to
+> > be gained by using (declare (fixnum  as the compiler can,
+> > in the best case, assign a register to the loop variable.
+> > 
+> > t
+
+
+
+\end{verbatim}
+
+\subsection{email 24}
+\begin{verbatim}
+? Makefile
+? Makefile.dvi
+Index: as.boot.pamphlet
+===================================================================
+RCS file: /cvsroot/axiom/axiom/src/interp/as.boot.pamphlet,v
+retrieving revision 1.3
+diff -u -r1.3 as.boot.pamphlet
+--- as.boot.pamphlet	24 May 2004 22:53:49 -0000	1.3
++++ as.boot.pamphlet	8 Jan 2005 19:01:23 -0000
+@@ -389,7 +389,8 @@
+     HPUT(ht,id,[entry,:HGET(ht,id)])
+   opalist := [ [op,:REMDUP HGET(ht,op)] for op in HKEYS ht]
+   --HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
+-  HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
++  --HPUT($opHash,con,[ancestorAlist,attributeAlist,:opalist])
++  HPUT($opHash,con,[ancestorAlist,nil,:opalist])
+ 
+ hackToRemoveAnd p ==
+ ---remove this as soon as .asy files do not contain forms (And pred) forms
+Index: ax.boot.pamphlet
+===================================================================
+RCS file: /cvsroot/axiom/axiom/src/interp/ax.boot.pamphlet,v
+retrieving revision 1.3
+diff -u -r1.3 ax.boot.pamphlet
+--- ax.boot.pamphlet	24 May 2004 22:53:49 -0000	1.3
++++ ax.boot.pamphlet	8 Jan 2005 19:01:26 -0000
+@@ -80,11 +80,29 @@
+      axForms :=
+         [ ['Foreign, ['Declare, 'dummyDefault, 'Exit], 'Lisp], :axForms]
+   axForms := APPEND(axDoLiterals(), axForms)
+-  axForm := ['Sequence, ['Import, [], 'AxiomLib], :axForms]
++  axForm := ['Sequence, ['Import, [], 'AxiomLib], ['Import, [], 'Boolean], :axForms]
+   st := MAKE_-OUTSTREAM(filename)
+   PPRINT(axForm,st)
+   CLOSE st
+ 
++makeAxExportForm(filename, constructors) ==
++  $defaultFlag : local := false
++  $literals := []
++  axForms :=
++     [modemapToAx(modemap) for cname in constructors |
++            (modemap:=GETDATABASE(cname,'CONSTRUCTORMODEMAP)) and
++              (not cname in '(Tuple Exit Type)) and
++                not isDefaultPackageName cname]
++  if $baseForms then
++     axForms := [:$baseForms, :axForms]
++  if $defaultFlag then
++     axForms :=
++        [ ['Foreign, ['Declare, 'dummyDefault, 'Exit], 'Lisp], :axForms]
++  axForms := APPEND(axDoLiterals(), axForms)
++  axForm := ['Sequence, ['Import, [], 'AxiomLib], ['Import, [], 'Boolean], :axForms]
++  axForm
++
++
+ stripType type ==
+   $stripTypes =>
+      categoryForm? type => 'Type
+Index: i-syscmd.boot.pamphlet
+===================================================================
+RCS file: /cvsroot/axiom/axiom/src/interp/i-syscmd.boot.pamphlet,v
+retrieving revision 1.4
+diff -u -r1.4 i-syscmd.boot.pamphlet
+--- i-syscmd.boot.pamphlet	28 Dec 2004 07:42:45 -0000	1.4
++++ i-syscmd.boot.pamphlet	8 Jan 2005 19:01:36 -0000
+@@ -642,7 +642,7 @@
+     if ^beQuiet then sayKeyedMsg("S2IZ0038A",[namestring args, asharpArgs])
+ 
+     command :=
+-     STRCONC(TRUENAME(STRCONC(GETENV('"AXIOM"),'"/compiler/bin/")),"axiomxl ", asharpArgs, '" ", namestring args)
++     STRCONC(STRCONC(GETENV('"AXIOM"),'"/compiler/bin/"),"axiomxl ", asharpArgs, '" ", namestring args)
+     rc := OBEY command
+ 
+     if (rc = 0) and doCompileLisp then
+\end{verbatim}
+
+\subsection{email 25}
+\begin{verbatim}
+> It is not so clear to me why the build appears to succeed
+> even though these definitions are missing. In other languages
+> I would presume that this situation would be easily caught
+> as a missing file during `linking'. But here we have this
+> "domain vector" thing. Is there not some why that the
+> compilation could be made more robust by verifying the
+> domain vector at compile time?
+
+Bill, there is no "linking" step in any sense of the word.
+This needs to be documented somewhere.
+
+If we look at one of the random BOOTSTRAP files, say, CHAR we see:
+
+Character: OrderedFinite() with
+        ord: % -> Integer
+            ++ ord(c) provides an integral code corresponding to the
+            ++ character c.  It is always true that \spad{char ord c = c}.
+        char: Integer  -> %
+            ++ char(i) provides a character corresponding to the integer
+            ++ code i.  It is always true that \spad{ord char i = i}.
+        char: String   -> %
+            ++ char(s) provides a character from a string s of length one.
+        space:  () -> %
+            ++ space() provides the blank character.
+        quote:  () -> %
+            ++ quote() provides the string quote character, \spad{"}.
+        escape: () -> %
+            ++ escape() provides the escape character, \spad{_}, which
+            ++ is used to allow quotes and other characters {\em within}
+            ++ strings.
+        upperCase: % -> %
+            ++ upperCase(c) converts a lower case letter to the corresponding
+            ++ upper case letter.  If c is not a lower case letter, then
+            ++ it is returned unchanged.
+        lowerCase: % -> %
+            ++ lowerCase(c) converts an upper case letter to the corresponding
+            ++ lower case letter.  If c is not an upper case letter, then
+            ++ it is returned unchanged.
+        digit?: % -> Boolean
+            ++ digit?(c) tests if c is a digit character,
+            ++ i.e. one of 0..9.
+        hexDigit?: % -> Boolean
+            ++ hexDigit?(c) tests if c is a hexadecimal numeral,
+            ++ i.e. one of 0..9, a..f or A..F.
+        alphabetic?: % -> Boolean
+            ++ alphabetic?(c) tests if c is a letter,
+            ++ i.e. one of a..z or A..Z.
+        upperCase?: % -> Boolean
+            ++ upperCase?(c) tests if c is an upper case letter,
+            ++ i.e. one of A..Z.
+        lowerCase?: % -> Boolean
+            ++ lowerCase?(c) tests if c is an lower case letter,
+            ++ i.e. one of a..z.
+        alphanumeric?: % -> Boolean
+            ++ alphanumeric?(c) tests if c is either a letter or number,
+            ++ i.e. one of 0..9, a..z or A..Z.
+
+    == add
+        Rep := SingleInteger      -- 0..255
+
+        CC ==> CharacterClass()
+        import CC
+
+        --cl: Record(dig:CC,hex:CC,upp:CC,low:CC,alpha:CC,alnum:CC) :=
+        --    [ digit(), hexDigit(),
+        --      upperCase(), lowerCase(), alphabetic(), alphanumeric() ]
+
+        OutChars:PrimitiveArray(OutputForm) :=
+           construct [NUM2CHAR(i)$Lisp for i in 0..255]
+
+        minChar := minIndex OutChars
+
+        a = b                  == a =$Rep b
+        a < b                  == a <$Rep b
+        size()                 == 256
+        index n                == char((n - 1)::Integer)
+        lookup c               == (1 + ord c)::PositiveInteger
+        char(n:Integer)        == n::%
+        ord c                  == convert(c)$Rep
+        random()               == char(random()$Integer rem size())
+        space                  == QENUM("   ", 0$Lisp)$Lisp
+        quote                  == QENUM("_" ", 0$Lisp)$Lisp
+        escape                 == QENUM("__ ", 0$Lisp)$Lisp
+        coerce(c:%):OutputForm == OutChars(minChar + ord c)
+        digit? c               == member?(c pretend Character, digit())
+        hexDigit? c            == member?(c pretend Character, hexDigit())
+        upperCase? c           == member?(c pretend Character, upperCase())
+        lowerCase? c           == member?(c pretend Character, lowerCase())
+        alphabetic? c          == member?(c pretend Character, alphabetic())
+        alphanumeric? c        == member?(c pretend Character, alphanumeric())
+
+        latex c ==
+            concat("\mbox{`", concat(new(1,c pretend Character)$String, 
+"'}")$String)$String
+
+        char(s:String) ==
+--        one?(#s) => s(minIndex s) pretend %
+          (#s) = 1 => s(minIndex s) pretend %
+          error "String is not a single character"
+
+        upperCase c ==
+          QENUM(PNAME(UPCASE(NUM2CHAR(ord c)$Lisp)$Lisp)$Lisp,
+                0$Lisp)$Lisp
+
+        lowerCase c ==
+          QENUM(PNAME(DOWNCASE(NUM2CHAR(ord c)$Lisp)$Lisp)$Lisp,
+                0$Lisp)$Lisp
+
+
+
+The BOOTSTRAP code, annotated, looks like:
+
+
+=====================================================================
+The VERSIONCHECK variable came about when we were writing the Aldor
+compiler. We had completely reimplemented the algebra so that it was
+incompatible with previous versions. This is checked on loading.
+
+(|/VERSIONCHECK| 2) 
+
+=====================================================================
+This implements the 
+        a = b                  == a =$Rep b
+function. Note that the function name |CHAR;=;2$B;1| is constructed
+from the domain abbreviation; the function name; the number of arguments
+and their types; and a unique number
+
+Also note that the compiler claims that it knows that the '='
+function can be replaced with lisp 'EQL' in compiled code so
+this function is never run. It uses a property list marker
+'|SPADreplace|' on the function symbol to implement the replacement
+during compiles.
+
+(PUT (QUOTE |CHAR;=;2$B;1|) (QUOTE |SPADreplace|) (QUOTE EQL)) 
+
+(DEFUN |CHAR;=;2$B;1| (|a| |b| |$|) (EQL |a| |b|)) 
+
+=====================================================================
+This implements the 
+        a < b                  == a <$Rep b
+function. Again note that the compiler knows that calls to this 
+function can be replaced by the lisp QSLESSP function. The 'QS' 
+prefix is a VMLisp idiom. 'Q' == quick (no type check) 'S'=singleinteger
+which, at least in VMLisp turns into a single instruction. QSLESSP
+(uppercased here because spad is case-sensitive and lisp is not)
+is defined in src/interp/vmlisp.lisp.pamphlet as a macro with
+embedded type information.
+
+(PUT (QUOTE |CHAR;<;2$B;2|) (QUOTE |SPADreplace|) (QUOTE QSLESSP)) 
+
+(DEFUN |CHAR;<;2$B;2| (|a| |b| |$|) (QSLESSP |a| |b|)) 
+
+=====================================================================
+This implements 
+        size()                 == 256
+and just returns a "boxed integer" (XLAM is a marker for boxing).
+
+(PUT (QUOTE |CHAR;size;Nni;3|) (QUOTE |SPADreplace|) (QUOTE (XLAM NIL 256))) 
+
+(DEFUN |CHAR;size;Nni;3| (|$|) 256) 
+
+=====================================================================
+This implements the
+        index n                == char((n - 1)::Integer)
+function. Notice that this does a 'QREFELT'. This is another VMLisp
+idiom 'Q' is quick, 'REFELT' is a vector lookup function. This is
+also implmented as a macro in src/interp/vmlisp.lisp.pamphlet where
+it does a 'svref', simple vector reference into the current domain
+(that's what '|$|' means) and calls the 18th element from this domain.
+
+The domain is represented by a vector (the domain vector) which you'll
+find at the bottom of this file. The domain vector for a domain is
+kept on the property list of the domain name symbol, in this case it
+is "Character". So we see the code:
+
+(MAKEPROP (QUOTE |Character|) (QUOTE |infovec|) (LIST (QUOTE #(NIL NIL ...
+
+The |infovec|, the information vector, contains a lot of domain specific
+information which is looked up at runtime. In this case we are doing a
+(QVREFELT |$| 18). If you count 18 elements into the |infovec| you'll
+find |CHAR;char;I$;6|. If you examine the symbol name carefully you
+can decode that it is a function from the domain "CHAR" (this domain)
+called "char" that takes one argument of type "I" (integer), and is
+the 6th function in this domain, which happens to be 
+        char(n:Integer)        == n::%
+
+So this function does what it says, it subtracts 1 from its argument,
+treats it as an integer and returns the integer. The reason this works
+is that "Characters" have a representation of SingleInteger:
+        Rep := SingleInteger      -- 0..255
+
+(DEFUN |CHAR;index;Pi$;4| (|n| |$|) (SPADCALL (|-| |n| 1) (QREFELT |$| 18))) 
+
+.....[snip]....
+
+=====================================================================
+This is the function that gets executed when "Character" gets instantiated.
+This function has the effect, if memory serves, of putting the function
+"Character;" into the |$ConstructorCache|. The |$ConstructorCache| is a
+hash table used for fast lookup and function dispatch. The call to 
+|Character| will call |Character;| (see below).
+
+(DEFUN |Character| NIL 
+  (PROG NIL 
+    (RETURN 
+      (PROG (#1=#:G90941) 
+        (RETURN 
+          (COND 
+            ((LETT #1# (HGET |$ConstructorCache| (QUOTE |Character|)) 
+                 |Character|)
+               (|CDRwithIncrement| (CDAR #1#)))
+            ((QUOTE T) 
+              (|UNWIND-PROTECT| 
+                (PROG1 
+                  (CDDAR 
+                    (HPUT |$ConstructorCache| 
+                      (QUOTE |Character|) 
+                      (LIST 
+                        (CONS NIL (CONS 1 (|Character;|))))))
+                  (LETT #1# T |Character|)) 
+                (COND 
+                  ((NOT #1#) 
+                    (HREM |$ConstructorCache| (QUOTE |Character|)))))))))))) 
+
+=====================================================================
+This function initializes the |infovec| data structure. Notice the calls
+to QSETREFV, another VMLisp-ism, which does a "(setf (svref ...", that
+is, it sets an element of a simple vector (|infovec|). Notice the call
+to |SingleInteger|. This will cause the domain SingleInteger to be loaded,
+initialized, and put in the constructor cache. This domain needs the
+SingleInteger domain for its representation.
+
+(DEFUN |Character;| NIL 
+  (PROG (|dv$| |$| |pv$| #1=#:G90939 |i|) 
+    (RETURN 
+      (SEQ 
+        (PROGN 
+          (LETT |dv$| (QUOTE (|Character|)) . #2=(|Character|)) 
+          (LETT |$| (GETREFV 53) . #2#) 
+          (QSETREFV |$| 0 |dv$|) 
+          (QSETREFV |$| 3 (LETT |pv$| (|buildPredVector| 0 0 NIL) . #2#)) 
+          (|haddProp| |$ConstructorCache| (QUOTE |Character|) NIL (CONS 1 |$|))
+          (|stuffDomainSlots| |$|) 
+          (QSETREFV |$| 6 (|SingleInteger|)) 
+          (QSETREFV |$| 10 
+           (SPADCALL 
+             (PROGN 
+               (LETT #1# NIL . #2#) 
+               (SEQ 
+                 (LETT |i| 0 . #2#) 
+                 G190 
+                 (COND 
+                   ((QSGREATERP |i| 255) (GO G191))) 
+                 (SEQ 
+                   (EXIT 
+                     (LETT #1# (CONS (NUM2CHAR |i|) #1#) . #2#))) 
+                 (LETT |i| (QSADD1 |i|) . #2#) 
+                 (GO G190) 
+                 G191 
+                 (EXIT (NREVERSE0 #1#))))
+             (QREFELT |$| 9)))
+          (QSETREFV |$| 11 0) |$|))))) 
+
+=====================================================================
+This is the actual representation of the Character domain. The main
+point of the compiler is to construct the |infovec|. I'm not up to
+explaining the details of this at this moment.
+
+(MAKEPROP 
+ (QUOTE |Character|) 
+ (QUOTE |infovec|) 
+ (LIST 
+  (QUOTE 
+   #(NIL NIL NIL NIL NIL NIL (QUOTE |Rep|) (|List| 28) (|PrimitiveArray| 28) 
+     (0 . |construct|) (QUOTE |OutChars|) (QUOTE |minChar|) (|Boolean|)
+     |CHAR;=;2$B;1| |CHAR;<;2$B;2| (|NonNegativeInteger|) |CHAR;size;Nni;3| 
+     (|Integer|) |CHAR;char;I$;6| (|PositiveInteger|) |CHAR;index;Pi$;4| 
+     |CHAR;ord;$I;7| |CHAR;lookup;$Pi;5| (5 . |coerce|) |CHAR;random;$;8| 
+     |CHAR;space;$;9| |CHAR;quote;$;10| |CHAR;escape;$;11| (|OutputForm|) 
+     |CHAR;coerce;$Of;12| (|CharacterClass|) (10 . |digit|) (|Character|) 
+     (14 . |member?|) |CHAR;digit?;$B;13| (20 . |hexDigit|) 
+     |CHAR;hexDigit?;$B;14| (24 . |upperCase|) |CHAR;upperCase?;$B;15| 
+     (28 . |lowerCase|) |CHAR;lowerCase?;$B;16| (32 . |alphabetic|) 
+     |CHAR;alphabetic?;$B;17| (36 . |alphanumeric|) |CHAR;alphanumeric?;$B;18|
+     (|String|) |CHAR;latex;$S;19| (40 . |minIndex|) (45 . |elt|) 
+     |CHAR;char;S$;20| |CHAR;upperCase;2$;21| |CHAR;lowerCase;2$;22| 
+     (|SingleInteger|))) (QUOTE #(|~=| 51 |upperCase?| 57 |upperCase| 62 
+     |space| 67 |size| 71 |random| 75 |quote| 79 |ord| 83 |min| 88 |max| 94 
+     |lowerCase?| 100 |lowerCase| 105 |lookup| 110 |latex| 115 |index| 120 
+     |hexDigit?| 125 |hash| 130 |escape| 135 |digit?| 139 |coerce| 144 |char| 
+     149 |alphanumeric?| 159 |alphabetic?| 164 |>=| 169 |>| 175 |=| 181 |<=| 
+     187 |<| 193)) (QUOTE NIL) 
+     (CONS (|makeByteWordVec2| 1 
+       (QUOTE (0 0 0 0 0 0))) 
+       (CONS 
+         (QUOTE #(NIL |OrderedSet&| NIL |SetCategory&| |BasicType&| NIL))
+         (CONS 
+           (QUOTE #((|OrderedFinite|) (|OrderedSet|) (|Finite|) 
+                    (|SetCategory|) (|BasicType|) (|CoercibleTo| 28)))
+           (|makeByteWordVec2| 52 
+             (QUOTE 
+               (1 8 0 7 9 1 6 0 17 23 0 30 0 31 2 30 12 32 0 33 0 30 0 35 0 
+                30 0 37 0 30 0 39 0 30 0 41 0 30 0 43 1 45 17 0 47 2 45 32 0 
+                17 48 2 0 12 0 0 1 1 0 12 0 38 1 0 0 0 50 0 0 0 25 0 0 15 16 
+                0 0 0 24 0 0 0 26 1 0 17 0 21 2 0 0 0 0 1 2 0 0 0 0 1 1 0 12 
+                0 40 1 0 0 0 51 1 0 19 0 22 1 0 45 0 46 1 0 0 19 20 1 0 12 0 
+                36 1 0 52 0 1 0 0 0 27 1 0 12 0 34 1 0 28 0 29 1 0 0 45 49 1 
+                0 0 17 18 1 0 12 0 44 1 0 12 0 42 2 0 12 0 0 1 2 0 12 0 0 1 2 
+                0 12 0 0 13 2 0 12 0 0 1 2 0 12 0 0 14))))))
+     (QUOTE |lookupComplete|))) 
+
+(MAKEPROP (QUOTE |Character|) (QUOTE NILADIC) T) 
+
+
+
+
+
+\end{verbatim}
+\subsection{email 26}
+\begin{verbatim}
+=====================================================================
+This is the function that gets executed when "Character" gets instantiated.
+This function has the effect, if memory serves, of PUTTING THE FUNCTION
+                                                   ^^^^^^^^^^^^^^^^^^^^
+                                                   wrong, wrong, wrong
+
+"Character;" into the |$ConstructorCache|. The |$ConstructorCache| is a
+hash table used for fast lookup and function dispatch. The call to 
+|Character| will call |Character;| (see below).
+
+(DEFUN |Character| NIL 
+=====================================================================
+
+
+
+is slightly wrong. It does NOT put the function |Character;| in the
+|$ConstructorCache|, it puts the RESULT of calling (|Character;|)
+in the cache, which is a fully initialized |infovec| object. 
+
+
+You'll also find the function call
+
+          (|stuffDomainSlots| |$|) 
+
+in |Character;| interesting. The function is actually defined in
+src/interp/nrunopt.boot.pamphlet. From that function you can
+reverse-engineer the contents of the initial slots (which are just
+  #(NIL NIL NIL NIL NIL NIL ....
+at compile time.
+
+Clearly documenting stuffDomainSlots would help as would documenting
+all of the rest of it.
+
+Also, for your amusement, try the following:
+
+axiom
+(1)-> )lisp (setq $DALYMODE t)
+(1)-> )set message autoload on
+(1)-> (maphash #'(lambda (key val) (format t "key=~a val=~a~%~%" key val)) 
+|$ConstructorCache|)
+(1)-> 1
+(1)-> (maphash #'(lambda (key val) (format t "key=~a val=~a~%~%" key val)) 
+|$ConstructorCache|)
+
+The first maphash returns NIL
+
+The second maphash returns the loaded domains. The messages that get
+printed (from loadlib in src/interp/lisplib.boot.pamphlet) turn out 
+to be the same domains you'll see in the constructor cache. Loading
+the domain causes it to be "instantiated" which means that the 
+infovec for the domain gets filled in and stuck in the constructorcache.
+
+If a domain is already in the constructor cache it will not be loaded.
+Thus domain loading occurs on demand and only once.
+
+\end{verbatim}
+\subsection{email 27}
+\begin{verbatim}
+On Mon, Jan 10, 2005 at 09:47:36PM -0500, root wrote:
+> The code was changed. It used to read:
+> 
+>   one?(x) == ONEP(x)$Lisp
+> 
+> It now reads:
+> 
+>   one?(x) == x = 1
+
+
+True, but the bootstrap code does not contain any definition. We have:
+
+(DEFUN |SINT;zero?;$B;38| (|x| $) (QSZEROP |x|)) 
+
+(DEFUN |SINT;max;3$;39| (|x| |y| $) (QSMAX |x| |y|)) 
+
+
+The last number in the function names gives the order of the function
+in definition in the domain. The definition of `one?' follows
+`zero?'. With fresh code we have:
+
+(DEFUN |SINT;zero?;$B;38| (|x| $) (QSZEROP |x|)) 
+
+(DEFUN |SINT;one?;$B;39| (|x| $) (EQL |x| 1)) 
+
+(DEFUN |SINT;max;3$;40| (|x| |y| $) (QSMAX |x| |y|)) 
+
+
+It was precisely this change in sequence that allowed me to spot this
+missing function by looking at the domain vectors. All domains which
+relied of functions defined in SINT with `sequence number' > 38
+shifted by one in the second pass of the fixed-point build.
+
+\end{verbatim}
+
+
+\section{Aldor/Algebra}
+
+\subsection{email 11}
+\begin{verbatim}
+I installed "Aldor version 1.0.2 for LINUX(glibc2.3)" on
+axiom-developer.org several months ago. The date on the
+aldor tarball in /home/page is May 19  2004. Aldor should
+be accessible to you when you log in at axiom-developer.
+Just add
+
+  export ALDORROOT=/usr/local/aldor/linux/1.0.2
+  export PATH=$ALDORROOT/bin:$PATH
+
+to your .bashrc, do
+
+  . .bashrc
+
+and your should be able to type
+
+  aldor ...
+
+You should find the libaries in the standard locations.
+
+There is apparently a fairly up to date windows binary
+version as well, but I haven't had much time to play
+with this yet.
+
+At the time I was planning to implement a MathAction-
+Aldor web interface that would look something like this
+
+\begin{aldor}
+... aldor code ...
+\end{aldor}
+
+and which could be intermixed with Axiom code on the
+MathAction website. I got distracted by other things
+and so have not yet completed the integration with
+MathAction but there is not a lot more to do. Recent
+discussions here about getting Axiom and Aldor working
+together again suggest that it might be time for me
+to raise the priority to make this possible.
+
+Ralf Hemmecke wrote:
+> 
+> If you mean cvs.aldor.org, then it might be that May 16 2004
+> is a bit late. The libraries have changed since then.
+> 
+> You could however download the latest precompiled version
+> 1.0.2 from
+> 
+> http://www.aldor.org/downl.html
+>
+ 
+> If you really want to compile the libraries yourself, ask
+> me again. I think the newest cvs-version should compile,
+> but if they  don't ... There has been some work on the
+> Makefiles since May 16.
+> 
+> Ralf
+> 
+> root wrote:
+> > Martin, Peter,
+> > 
+> > I tried to build aldor last night. I succeeded in building 
+> > the compiler but not the libraries. I have a CVS checkout
+> > from May 16.
+> > 
+> > I've been reading the Makefiles but they all seem to dissolve
+> > into home-grown tools (makeon, docc, etc) which undermines my
+> > ability to figure out what is happening. It's been years since
+> > I built aldor.
+> > 
+> > Peter, could you provide the required steps to build a working
+> > compiler? e.g.
+> > 
+> > edit Makefile.globals to change.... make aldorcompiler
+> > ....
+> > 
+
+
+\end{verbatim}
+
+\subsection{email 2}
+\begin{verbatim}
+There is something called the "add-chain formed by domain
+extensions" which is described in the Glossary of the Axiom
+book:
+
+  "add-chain
+
+  a hierarchy formed by domain extensions. If domain A extends
+  domain B and domain B extends domain C, then A has add-chain
+  B-C."
+
+and
+
+  "domain extension
+
+  a domain constructor A is said to extend a domain constructor B
+  if A's definition has the form A == Badd.... This intuitively
+  means "functions not defined by A are assumed to come from B."
+  Successive domain extensions form add-chains affecting the
+  search order for functions not implemented directly by the
+  domain during dynamic lookup.
+
+  "dynamic lookup
+
+  In Axiom, a domain may or may not explicitly provide function
+  definitions for all its exported operations. These definitions
+  may instead come from domains in the add-chain or from default
+  packages. When a function call is made for an operation in the
+  domain, up to five steps are carried out.
+  1. If the domain itself implements a function for the operation,
+     that function is returned.
+  2. Each of the domains in the add-chain are searched; if one
+     of these domains implements the function, that function is
+     returned.
+  3. Each of the default packages for the domain are searched in
+     order of the lineage. If any of the default packages implements
+     the function, the first one found is returned.
+  4. Each of the default packages for each of the domains in the
+     add-chain are searched in the order of their lineage. If any
+     of the default packages implements the function, the first
+     one found is returned.
+  5. If all of the above steps fail, an error message is reported.
+
+---------
+
+\end{verbatim}
+
+
+\subsection{email 12}
+\begin{verbatim}
+Oops, sorry that I have not read the documentation of Any.
+I had a look at Any now. Well, from that I just got the feeling that a programmer should never use Any if there are better types around (and often there are). Any seems to be connected to the interpreter. Since everything must have a type and the interpreter cannot figure out something reasonable, it falls back to Any.
+
+I'd rather be happy if the interpreter is clearly separated from the compiler.
+
+The interpreter is for working with Axiom, so it could help the (lazy) user and find/guesss appropriate types for him/her. However there should be NO guessing when it comes to writing new library code.
+
+Looking at the code of Any reminds me much of the things I have suggested here
+
+address@bogus.example.com">http://page.axiom-developer.org/zope/mathaction/address@bogus.example.com
+The code is in cvs.aldor.org/aldor/aldorug/samples/object*.as.
+
+
+The problem I still have with any is that it says
+
+
+     Rep := Record(dm: SExpression, ob: None)
+     dom x      == x.dm
+
+
+which looks very near to some LISP thing.
+So I can ask for the domain a: Any by calling dom(a). Then I will get an SExpression which makes me feel lost.
+
+Unfortunately, I have no runnig Axiom at the moment :-(
+And I cannot compile axim--main--1 (bfd.h is missing and I have no idea what to install).
+
+So I tested on
+
+
+http://page.axiom-developer.org/zope/mathaction/AxiomInterface
+
+
+i: Integer := 1
+  Type: Integer
+
+
+a: Any := i::Any
+  Type: Integer  <----- very interesting!!!
+
+
+dom a
+   Type: SExpression
+obj a
+  Type: None
+
+
+j: Integer := a :: Integer
+  Type: Integer
+
+
+It seems the interpreter is quite smart.
+
+
+
+
+
+s: String := "I am a string"
+  Type: String
+
+
+b: Any := s::Any
+  Type: String
+
+
+dom b
+  Type: SExpression?
+
+
+obj b
+  Type: None
+
+
+k: Integer := b :: Integer
+   Cannot convert from type Any to Integer for value
+   "I am a string"
+
+
+
+This Error is OK. And I think for manually working with Axiom, one just needs to type dom(...) and then coerce to the now known type.
+But how to use Any in a program is totally unclear to me. I have no idea to get the domain back from the SExpression.
+\end{verbatim}
+\subsection{email 13}
+\begin{verbatim}
+> ...
+> I am, however, very much against the Any type. It is like 
+> building a strongly typed language and than trying to forget
+> about types.
+>
+
+Well that is more or less what I naively thought as well but
+from the ANY.spad file I read that:
+
+)abbrev domain ANY Any
+++ Author: Robert S. Sutor
+++ Basic Functions: any, domainOf, objectOf, dom, obj,
+++   showTypeInOutput
+++ Related Constructors: AnyFunctions1
+++ Description:
+++   \spadtype{Any} implements a type that packages up objects and
+++   their types in objects of \spadtype{Any}. Roughly speaking
+++   that means that if \spad{s : S} then when converted to
+++   \spadtype{Any}, the new object will include both the original
+++   object and its type. This is a way of converting arbitrary
+++   objects into a single type **without losing any** of the
+++   original information. Any object can be converted to one of
+++   \spadtype{Any}.
+
+and in the related file ANY1.spad
+
+)abbrev package ANY1 AnyFunctions1
+++ Basic Functions:  coerce, retractIfCan, retractable?, retract
+++ Description:
+++   \spadtype{AnyFunctions1} implements several utility functions
+++   for working with \spadtype{Any}. These functions are used to
+++   go back and forth between objects of \spadtype{Any} and objects
+++   of other types.
+
+So the situation is not quiet so simple. Apparently Any does not
+mean Any in the sense of throwing away essential information.
+
+\end{verbatim}
+\subsection{email 14}
+\begin{verbatim}
+Ralf Hemmecke wrote:
+> 
+> Hi Bill,
+> 
+> >>Foo: with { g: (n: PositiveInteger, k: PositiveInteger) ->
+> >>PrimeField(n) } == add {
+> >>g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
+> >> k::Integer::PrimeField(n) }
+> 
+> > Ok, I will work with this example. Yes, it is better.
+> 
+> Well, I haven't checked whether it should really work, but
+> shouldn't be
+> 
+> Foo: with {
+>    g: (n: PositiveInteger, k: PositiveInteger) ->
+>       (P: PrimeFieldCategory, x: P)
+> } == add {
+>    g(n: PositiveInteger, k: PositiveInteger ):
+>     (P: PrimeFieldCategory, x:P) == {
+>     (PrimeField(n), k::Integer::PrimeField(n)
+>    }
+> }
+> 
+> be even better? 
+
+In fact you just pointed a way to solve the problem! Notice that you are in
+effect constructing a domain! So first create this domain (call this anything
+else you like):
+
+--%PointedPrimeField
+)abbrev domain PPF PointedPrimeField
+PointedPrimeField(n:PositiveInteger):Cat==Dog where
+  Cat == FiniteFieldCategory with
+    foo:PositiveInteger->PrimeField(n)
+  Dog == PrimeField(n) add
+    foo(k)==k::Integer::PrimeField(n)
+
+After compiling, define in the interpreter
+
+g(n,k)==foo(k)$PPF(n)
+
+and it works (in Axiom)! (Do not declare the types for g because n is not
+defined).
+
+But I have trouble with path in windows:
+   Processing PointedPrimeField for Browser database:
+--->-->PointedPrimeField((foo ((PrimeField n) (PositiveInteger)))): Not document
+ed!!!!
+--->-->PointedPrimeField(constructor): Not documented!!!!
+--->-->PointedPrimeField(): Missing Description
+h:/dostools/rm.exe: j:/program: No such file or directory
+h:/dostools/rm.exe: j:/progra~1/axiom/mnt/windows/lib/files/axiom/mnt/windows/li
+b/ppf.nrlib: No such file or directory
+
+   >> System error:
+   Cannot rename the file #P"j:/Program Files/axiom/mnt/windows/lib/PPF.erlib" t
+o #P"j:/Program Files/axiom/mnt/windows/lib/PPF.NRLIB".
+
+protected-symbol-warn called with (NIL)
+
+But that is just because "Program Files" need be in quotes?
+
+\end{verbatim}
+\subsection{email 15}
+\begin{verbatim}
+Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> PrimeField(n) } == add {
+g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
+k::Integer::PrimeField(n) }
+Ok, I will work with this example. Yes, it is better.
+
+
+Well, I haven't checked whether it should really work, but
+shouldn't be
+
+
+Foo: with {
+  g: (n: PositiveInteger, k: PositiveInteger) ->
+     (P: PrimeFieldCategory, x: P)
+} == add {
+  g(n: PositiveInteger, k: PositiveInteger ):
+   (P: PrimeFieldCategory, x:P) == {
+   (PrimeField(n), k::Integer::PrimeField(n)
+  }
+}
+
+
+be even better? The above code will not compile in Aldor, since it does not have PositiveInteger. And maybe it will even not compile with appropriate substitutions since the compiler cannot handle such a construction. I am, however, very much against the Any type. It is like building a strongly typed language and than trying to forget about types. For the interpreter it maybe OK, but not for the compiler.
+
+Programming in Axiom should mean writing programs for the compiler. I would say that programming in the interpreter is just writing short scripts but not real programs.
+
+See also
+http://www.aldor.org/docs/HTML/chap23.html#10\end{verbatim}
+\subsection{email 16}
+\begin{verbatim}
+On Wednesday, January 12, 2005 8:30 AM you wrote:
+> Bill Page wrote:
+> > 
+> > I don't really understand when the use of parameterized 
+> > return types on functions would be useful. What information
+> > is being returned as part of the type of the result that is
+> > not already known because of it's value?
+> 
+> The above is an example. Perhaps, more convincing:
+> 
+> Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> 
+> PrimeField(n) } == add {
+> g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==
+>  k::Integer::PrimeField(n) }              
+>
+
+Ok, I will work with this example. Yes, it is better.
+  
+> Another example is Marcus Better's problem, more examples
+> are in expr2ups.spad, where Any is used a lot.
+
+Ok.
+
+> The type tells you in what domain to interpret the value.
+> But sometimes, the type will have to depend on a parameter
+> of the function, as above.
+
+That is still now clear to me, at least when it is possible
+to use a Union.
+
+> 
+> > As I see it the concept does considerable damage to the 
+> > notion of the 'domain' of a function. How should we
+> > interpret the expressioin `PrimeField(n)' when n is
+> > unknown? Does it represent the Union over all values n?
+> > We can no longer write the signature of a function in
+> > the simple form:
+> > 
+> >   f: PositiveInteger -> PrimeField
+> 
+> Yes you can: Aldor does it. The signature is
+> 
+>  f: (n: PositiveInteger) -> PrimeField n
+>
+
+That does not look like a *signature* to me. What is the
+value of n? If you can't tell me, then how can I interpret
+`PrimeField n'? A signature should specify the domains of
+the function, but `PrimeField n' is not a domain until `n'
+is replaced with some PositiveInteger. The only interpretation
+of `PrimeField n' as a domain that I can think of would be
+to claim that it represents some kind of Union over the
+primes.
+
+  Union(PrimeField n for n=1.. | prime? n)
+
+But of course we can't write it quite this nicely right now
+in Axiom...
+
+This is similar to Axiom's insistence that
+
+  A:Integer
+
+can not be used in the expression
+
+  A+1
+
+until A is assigned a value. I this case I think it should
+be ok to say that if A has no assigned value then it
+represents the domain
+
+  {+/-n for n=0..}
+ 
+> > Can you explain again why you don't find the usual
+> > Axiom solution to this situation acceptible? I.e. the
+> > use of the `Any' domain:
+> > 
+> >  f:PositiveInteger->Any
+> >  f(n) == n::PrimeField(n)
+> 
+> Because you cannot use it in compiled code and because you 
+> are using all of the type information, which is the main
+> point of Axiom.
+
+But as you said, `Any' is used extensively in expr2ups.spad.
+
+> Of course, the example you just gave doesn't
+> make any sense, the result is always zero, but given the
+> function
+> 
+> Bar: with { h: (n: PositiveInteger, k: PositiveInteger) -> Any } 
+>    == add { g(n: PositiveInteger, k: PositiveInteger ): Any ==     
+>               k::Any }
+> 
+> you cannot use this function in compiled code anymore. The 
+> interpreter can deal with it, not the compiler.
+
+I would write it something like this:
+
+(2) -> h:(PositiveInteger,PositiveInteger)->Union( _
+PrimeField(2),PrimeField(3),PrimeField(5),PrimeField(7))
+                                                 Type: Void
+(3) -> h(n,k)==k::PrimeField(n)
+                                                 Type: Void
+(4) -> x:=h(7,2)
+
+   (4)  2
+                                  Type: Union(PrimeField 7,...)
+(5) -> trace x
+
+   (5)  2
+                                             Type: PrimeField 7
+> 
+> Look at Marcus code for a really convincing example: He wants 
+> to construct recursively an algebraic extension of a ring,
+> adding elements one at the time. At the end of the process
+> he wants to return an element of the final ring. It is tricky
+> to do this in Axiom currently.
+
+I will take a closer look at the emails from Marcus.
+
+> 
+> Note, for example, if you have a signature
+> 
+>   f: Integer -> Any
+> 
+> but really, f returns a SimpleAlgebraicExtension of some 
+> ring, you cannot do any calculations with the result in
+> compiled code anymore, unless you know *exactly* the defining
+> polynomial of the ring.
+
+I agree that Any throws away too much information, except
+in the interpreter where it tries to do a better job. But
+I think even there Any is (usually) not a good choice for
+the domain.
+
+> 
+> So one way out -- in this specific case -- would be to
+> return a record containing the result of type Any and
+> the defining polynomial. I hope you admit that this is
+> ugly.
+
+I agree that that is ugly. Using an explicit "streaming Union"
+(iterator) domain would be my (future) choice. Unfortunately
+for now:
+
+(6) -> Union(PrimeField(i) for i in 1..10)
+   Local variable or parameter used in type
+   We will attempt to interpret the code.
+
+   Category, domain or package constructor COLLECT is not available.
+(6) -> Union(PrimeField(i) for i in 1..)
+   Loading C:/Program Files/axiom/mnt/windows/algebra/UNISEG.o for
+      domain UniversalSegment
+   Loading C:/Program Files/axiom/mnt/windows/algebra/INCRMAPS.o for
+      package IncrementingMaps
+   Loading C:/Program Files/axiom/mnt/windows/algebra/ITUPLE.o for
+      domain InfiniteTuple
+   Loading C:/Program Files/axiom/mnt/windows/algebra/STREAM.o for
+      domain Stream
+   Local variable or parameter used in type
+   We will attempt to interpret the code.
+
+   Interpret-Code mode is not supported for stream bodies.
+(6) ->
+
+\end{verbatim}
+\subsection{email 17}
+\begin{verbatim}
+ > > #include "axiom"
+ > > 
+ > > Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
+ > >    == add { f(n: PositiveInteger): PrimeField(n) == 
+ > >               10::Integer::PrimeField(n) }              
+ > > 
+ > > Note that such a construction -- the resulting domain depending on the
+ > > function parameter -- is currently illegal in Axiom. In Aldor it is fine.
+ > 
+ > I don't really understand when the use of parameterized return types on
+ > functions would be useful. What information is being returned as part of the
+ > type of the result that is not already known because of it's value?
+
+The above is an example. Perhaps, more convincing:
+
+Foo: with { g: (n: PositiveInteger, k: PositiveInteger) -> PrimeField(n) } 
+   == add { g(n: PositiveInteger, k: PositiveInteger ): PrimeField(n) ==     
+              k::Integer::PrimeField(n) }              
+ 
+Another example is Marcus Better's problem, more examples are in
+expr2ups.spad, where Any is used a lot. The type tells you in what domain to
+interpret the value. But sometimes, the type will have to depend on a parameter
+of the function, as above.
+
+ > As I see it the concept does considerable damage to the notion of the
+ > 'domain' of a function. How should we interpret the expressioin
+ > `PrimeField(n)' when n is unknown? Does it represent the Union over all
+ > values n? We can no longer write the signature of a function in the simple
+ > form:
+ > 
+ >   f: PositiveInteger -> PrimeField
+
+Yes you can: Aldor does it. The signature is
 
-        OutChars:PrimitiveArray(OutputForm) :=
-           construct [NUM2CHAR(i)$Lisp for i in 0..255]
+   f: (n: PositiveInteger) -> PrimeField n
 
-        minChar := minIndex OutChars
+ > Can you explain again why you don't find the usual Axiom solution to this
+ > situation acceptible? I.e. the use of the `Any' domain:
+ > 
+ >  f:PositiveInteger->Any
+ >  f(n) == n::PrimeField(n)
 
-        a = b                  == a =$Rep b
-        a < b                  == a <$Rep b
-        size()                 == 256
-        index n                == char((n - 1)::Integer)
-        lookup c               == (1 + ord c)::PositiveInteger
-        char(n:Integer)        == n::%
-        ord c                  == convert(c)$Rep
-        random()               == char(random()$Integer rem size())
-        space                  == QENUM("   ", 0$Lisp)$Lisp
-        quote                  == QENUM("_" ", 0$Lisp)$Lisp
-        escape                 == QENUM("__ ", 0$Lisp)$Lisp
-        coerce(c:%):OutputForm == OutChars(minChar + ord c)
-        digit? c               == member?(c pretend Character, digit())
-        hexDigit? c            == member?(c pretend Character, hexDigit())
-        upperCase? c           == member?(c pretend Character, upperCase())
-        lowerCase? c           == member?(c pretend Character, lowerCase())
-        alphabetic? c          == member?(c pretend Character, alphabetic())
-        alphanumeric? c        == member?(c pretend Character, alphanumeric())
+Because you cannot use it in compiled code and because you are using all of the
+type information, which is the main point of Axiom. Of course, the example you
+just gave doesn't make any sense, the result is always zero, but given the
+function
 
-        latex c ==
-            concat("\mbox{`", concat(new(1,c pretend Character)$String, 
-"'}")$String)$String
+Bar: with { h: (n: PositiveInteger, k: PositiveInteger) -> Any } 
+   == add { g(n: PositiveInteger, k: PositiveInteger ): Any ==     
+              k::Any }
 
-        char(s:String) ==
---        one?(#s) => s(minIndex s) pretend %
-          (#s) = 1 => s(minIndex s) pretend %
-          error "String is not a single character"
+you cannot use this function in compiled code anymore. The interpreter can deal
+with it, not the compiler.
 
-        upperCase c ==
-          QENUM(PNAME(UPCASE(NUM2CHAR(ord c)$Lisp)$Lisp)$Lisp,
-                0$Lisp)$Lisp
+Look at Marcus code for a really convincing example: He wants to construct
+recursively an algebraic extension of a ring, adding elements one at the
+time. At the end of the process he wants to return an element of the final
+ring. It is tricky to do this in Axiom currently.
 
-        lowerCase c ==
-          QENUM(PNAME(DOWNCASE(NUM2CHAR(ord c)$Lisp)$Lisp)$Lisp,
-                0$Lisp)$Lisp
+Note, for example, if you have a signature
 
+  f: Integer -> Any
 
+but really, f returns a SimpleAlgebraicExtension of some ring, you cannot do
+any calculations with the result in compiled code anymore, unless you know
+*exactly* the defining polynomial of the ring.
 
-The BOOTSTRAP code, annotated, looks like:
+So one way out -- in this specific case -- would be to return a record
+containing the result of type Any and the defining polynomial. I hope you admit
+that this is ugly.\end{verbatim}
+\subsection{email 18}
+\begin{verbatim}
+I have been thinking about your example code.
 
+On Tuesday, January 11, 2005 9:44 AM you wrote:
+> ... 
+> I just tried another example, which is in fact the reason
+> why I would love to have Aldor working. I did not expect
+> it to work, and it does not, but it works *almost*. The
+> code is as follows:
+> 
+> #include "axiom"
+> 
+> Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
+>    == add { f(n: PositiveInteger): PrimeField(n) == 
+>               10::Integer::PrimeField(n) }
+> 
+> Note that such a construction -- the resulting domain 
+> depending on the function parameter -- is currently
+> illegal in Axiom. In Aldor it is fine.
 
-=====================================================================
-The VERSIONCHECK variable came about when we were writing the Aldor
-compiler. We had completely reimplemented the algebra so that it was
-incompatible with previous versions. This is checked on loading.
+I don't really understand when the use of parameterized
+return types on functions would be useful. What information
+is being returned as part of the type of the result that
+is not already known because of it's value?
 
-(|/VERSIONCHECK| 2) 
+As I see it the concept does considerable damage to the
+notion of the 'domain' of a function. How should we interpret
+the expressioin `PrimeField(n)' when n is unknown? Does it
+represent the Union over all values n? We can no longer
+write the signature of a function in the simple form:
 
-=====================================================================
-This implements the 
-        a = b                  == a =$Rep b
-function. Note that the function name |CHAR;=;2$B;1| is constructed
-from the domain abbreviation; the function name; the number of arguments
-and their types; and a unique number
+  f: PositiveInteger -> PrimeField
+
+Can you explain again why you don't find the usual Axiom
+solution to this situation acceptible? I.e. the use of
+the `Any' domain:
+
+ f:PositiveInteger->Any
+ f(n) == n::PrimeField(n)
+
+Perhaps in some cases the use of a Union might even be
+better:
+
+ f:PositiveInteger->Union(PrimeField(2),PrimeField(3),
+   PrimeField(5), ...)
+ f(n) == n::PrimeField(n)
+
+The union allows a 'case' construction like this:
+
+  f(3) case PrimeField(3)
+
+In fact this sort of thing works in Axiom:
+
+(1) -> f:PositiveInteger->Union(PrimeField(2),PrimeField(3), _
+  PrimeField(5),PrimeField(7),"Failed")
+  f(n) ==  ( prime? n and n<=7 => n::PrimeField(n); "Failed")
+
+   Function declaration f : PositiveInteger -> Union(PrimeField 2,
+      PrimeField 3,PrimeField 5,PrimeField 7,Failed) has been added to
+      workspace.
+                                                      Type: Void
+(2) -> f(2)
+   Cannot compile conversion for types involving local variables. In
+      particular, could not compile the expression involving ::
+      PrimeField #1
+   AXIOM will attempt to step through and interpret the code.
+   Compiling function f with type PositiveInteger -> Union(PrimeField 2
+      ,PrimeField 3,PrimeField 5,PrimeField 7,Failed)
+
+   (2)  0
+                                    Type: Union(PrimeField 2,...)
+(3) -> f(3)
+
+   (3)  0
+                                     Type: Union(PrimeField 3,...)
+(4) -> f(4)
+
+   (4)  Failed
+                                           Type: Union(Failed,...)
+(5) -> f(5)
+
+   (5)  0
+                                     Type: Union(PrimeField 5,...)
+
+(6) -> x:=f(5)
+
+   (6)  0
+                                     Type: Union(PrimeField 5,...)
+
+(7) -> x case PrimeField(5)
+
+   (7)  true
+                                                    Type: Boolean
+(8) -> x case PrimeField(3)
+
+   (8)  false
+                                                    Type: Boolean
+etc.\end{verbatim}
+\subsection{email 19}
+\begin{verbatim}
+Peter Broadbery writes:
+ > On Tue, 2005-01-11 at 14:30 +0100, Martin Rubey wrote:
+ > > Dear Peter,
+ > > 
+ > > this is just great stuff -- nearly... I had to try it out right away, but I
+ > > experienced two problems.
+ > > 
+ > > the minor one is, that )co inside axiom still does not work:
+ > > 
+ > > (1) -> 
+ > > (1) -> )co test.as
+ > >    Compiling AXIOM source code from file 
+ > >       /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
+ > >       options 
+ > > -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y 
+ > > $AXIOM/algebra
+ > >       Use the system command )set compiler args to change these 
+ > >       options.
+ > >  
+ > >    >> System error:
+ > >    NIL is not of type STRING.
+ > 
+ > 
+ > ln -s $ALDORROOT $AXIOM/compiler may help here.  fixing i-syscmd.boot to
+ > produce a nice error would be nice, I guess.
+
+I tried that, but it won't work. Tim, is there a way to trace what's happening?
+
+Note that both $ALDORROOT and $AXIOM were set correctly. In other words, the
+link above produced a directory "compiler" in "axiom/mnt/linux", containing the
+following directories of Aldor: bin/ doc/ include/ lib/ src/ tests/
+
+ > The .as file isn't in CVS (the file is compiled - don't be fooled by the
+ > readable coding style)
+
+Sorry, my mistake. Only lsp files. By the way, there i *lots* of stuff in the
+directories under /lsp/ccl/src, some look like they could be really useful...
+
+Tim: could you rename them to .pamphlet and correct the \usepackage line in
+each one of them? Thanks!
+
+ > > (1) -> fact(5)$Test
+ > > 
+ > >    (1)  120
+ > >                                                         Type: 
+ > > PositiveInteger
+ > > (2) -> fact(4)$Test
+ > >  
+ > >    >> System error:
+ > >    #<vector 08cf4150> is not of type LIST.
+ > > 
+ > 
+ > Fixed by the patch I send earlier (I hope)...
+
+Yes indeed! (I found that there was only one line you had to comment out?)
+
+ > The significant bit is removing an unbound variable from as.boot, the
+ > rest is to fix the )co command (obviously not bullet proof), and the .ap
+ > file generation.  
+ > 
+ > In terms of aldor internal knowledge, you don't need that much, the hard
+ > work is on the axiom side. The trick is to load all the aldor runtime
+ > env interpreted and see what breaks (this includes daase.lisp, as.clisp
+ > & interop.clisp, plus the aldor .lsp files).  This stuff used to vaguely
+ > work, so putting it back in shape can't be too bad.  
+
+In another mail, you wrote:
+
+ > As long as you don't use the sig. from the interpreter, you will be ok
+ > (which misses the point,, I know).  As far as fixing the error, not really,
+ > I don't know the axiom interpreter that well. Finding how & where the type
+ > is substituted would be a good start [There must be someone who does...]
+
+Who could this be? It would be just wonderful to get this working!
+
+Thanks a million times,
+
+\end{verbatim}
+\subsection{email 20}
+\begin{verbatim}
+On Tue, 2005-01-11 at 14:30 +0100, Martin Rubey wrote:
+> Dear Peter,
+> 
+> this is just great stuff -- nearly... I had to try it out right away, but I
+> experienced two problems.
+> 
+> the minor one is, that )co inside axiom still does not work:
+> 
+> (1) -> 
+> (1) -> )co test.as
+>    Compiling AXIOM source code from file 
+>       /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
+>       options 
+> -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
+>       Use the system command )set compiler args to change these 
+>       options.
+>  
+>    >> System error:
+>    NIL is not of type STRING.
 
-Also note that the compiler claims that it knows that the '='
-function can be replaced with lisp 'EQL' in compiled code so
-this function is never run. It uses a property list marker
-'|SPADreplace|' on the function symbol to implement the replacement
-during compiles.
 
-(PUT (QUOTE |CHAR;=;2$B;1|) (QUOTE |SPADreplace|) (QUOTE EQL)) 
+ln -s $ALDORROOT $AXIOM/compiler may help here.  fixing i-syscmd.boot to
+produce a nice error would be nice, I guess.
 
-(DEFUN |CHAR;=;2$B;1| (|a| |b| |$|) (EQL |a| |b|)) 
 
-=====================================================================
-This implements the 
-        a < b                  == a <$Rep b
-function. Again note that the compiler knows that calls to this 
-function can be replaced by the lisp QSLESSP function. The 'QS' 
-prefix is a VMLisp idiom. 'Q' == quick (no type check) 'S'=singleinteger
-which, at least in VMLisp turns into a single instruction. QSLESSP
-(uppercased here because spad is case-sensitive and lisp is not)
-is defined in src/interp/vmlisp.lisp.pamphlet as a macro with
-embedded type information.
+> (1) -> 
+> 
+> Never mind.
+> 
+> Unfortunately, there is a more severe issue. I put the following simple domain
+> in a file "test.as" and compiled it using 
+> 
+> aldor -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom test.as
+> 
+> without any problem. There is only the warning
+> 
+> #1 (Warning) Deprecated message prefix: use `ALDOR_' instead of `_AXL'
+> 
+> but I suspect that this is of no importance.
 
-(PUT (QUOTE |CHAR;<;2$B;2|) (QUOTE |SPADreplace|) (QUOTE QSLESSP)) 
+Yep.
 
-(DEFUN |CHAR;<;2$B;2| (|a| |b| |$|) (QSLESSP |a| |b|)) 
 
-=====================================================================
-This implements 
-        size()                 == 256
-and just returns a "boxed integer" (XLAM is a marker for boxing).
 
-(PUT (QUOTE |CHAR;size;Nni;3|) (QUOTE |SPADreplace|) (QUOTE (XLAM NIL 256))) 
+> 
+> 
+> -------------------------------------------------------------------------------
+> #include "axiom.as"
+> 
+> Test: with { fact: PositiveInteger -> PositiveInteger }
+>    == add  { fact(n: PositiveInteger): PositiveInteger == 
+>               { n <= 1 => 1;
+>                 res: PositiveInteger := 1;
+>                 while n > 1 repeat {
+>                   res := res * n;
+>                   n := n-1; }
+>                 res } }
+> -------------------------------------------------------------------------------
+> 
+> After this I start axiom and load runtime and axextend. By the way axextend
+> *is* in the distribution, it's only a little hidden... There is even more
+> obscure stuff in theis directory, maybe it's of use to you!
+> 
 
-(DEFUN |CHAR;size;Nni;3| (|$|) 256) 
+The .as file isn't in CVS (the file is compiled - don't be fooled by the
+readable coding style)
 
-=====================================================================
-This implements the
-        index n                == char((n - 1)::Integer)
-function. Notice that this does a 'QREFELT'. This is another VMLisp
-idiom 'Q' is quick, 'REFELT' is a vector lookup function. This is
-also implmented as a macro in src/interp/vmlisp.lisp.pamphlet where
-it does a 'svref', simple vector reference into the current domain
-(that's what '|$|' means) and calls the 18th element from this domain.
+> (1) -> )sh Test
+>  Test  is a domain constructor
+>  Abbreviation for Test is TEST 
+>  This constructor is exposed in this frame.
+>  Issue )edit test.as to see algebra source code for TEST 
+> 
+> ------------------------------- Operations --------------------------------
+>  fact : PositiveInteger -> PositiveInteger
+> 
+> (1) -> fact(5)$Test
+> 
+>    (1)  120
+>                                                         Type: PositiveInteger
+> (2) -> fact(4)$Test
+>  
+>    >> System error:
+>    #<vector 08cf4150> is not of type LIST.
+> 
 
-The domain is represented by a vector (the domain vector) which you'll
-find at the bottom of this file. The domain vector for a domain is
-kept on the property list of the domain name symbol, in this case it
-is "Character". So we see the code:
+Fixed by the patch I send earlier (I hope)...
 
-(MAKEPROP (QUOTE |Character|) (QUOTE |infovec|) (LIST (QUOTE #(NIL NIL ...
 
-The |infovec|, the information vector, contains a lot of domain specific
-information which is looked up at runtime. In this case we are doing a
-(QVREFELT |$| 18). If you count 18 elements into the |infovec| you'll
-find |CHAR;char;I$;6|. If you examine the symbol name carefully you
-can decode that it is a function from the domain "CHAR" (this domain)
-called "char" that takes one argument of type "I" (integer), and is
-the 6th function in this domain, which happens to be 
-        char(n:Integer)        == n::%
+> By the way, could you explain what your patches are doing? It's just a mystery
+> to me! I suspect that one needs some knowledge of Aldor internals?
 
-So this function does what it says, it subtracts 1 from its argument,
-treats it as an integer and returns the integer. The reason this works
-is that "Characters" have a representation of SingleInteger:
-        Rep := SingleInteger      -- 0..255
+The significant bit is removing an unbound variable from as.boot, the
+rest is to fix the )co command (obviously not bullet proof), and the .ap
+file generation.  
 
-(DEFUN |CHAR;index;Pi$;4| (|n| |$|) (SPADCALL (|-| |n| 1) (QREFELT |$| 18))) 
+In terms of aldor internal knowledge, you don't need that much, the hard
+work is on the axiom side. The trick is to load all the aldor runtime
+env interpreted and see what breaks (this includes daase.lisp, as.clisp
+& interop.clisp, plus the aldor .lsp files).  This stuff used to vaguely
+work, so putting it back in shape can't be too bad.  \end{verbatim}
+\subsection{email 21}
+\begin{verbatim}
+I just tried another example, which is in fact the reason why I would love to
+have Aldor working. I did not expect it to work, and it does not, but it works
+*almost*. The code is as follows:
 
-.....[snip]....
+#include "axiom"
 
-=====================================================================
-This is the function that gets executed when "Character" gets instantiated.
-This function has the effect, if memory serves, of putting the function
-"Character;" into the |$ConstructorCache|. The |$ConstructorCache| is a
-hash table used for fast lookup and function dispatch. The call to 
-|Character| will call |Character;| (see below).
+Test: with { f: (n: PositiveInteger) -> PrimeField(n) } 
+   == add { f(n: PositiveInteger): PrimeField(n) == 
+              10::Integer::PrimeField(n) }
 
-(DEFUN |Character| NIL 
-  (PROG NIL 
-    (RETURN 
-      (PROG (#1=#:G90941) 
-        (RETURN 
-          (COND 
-            ((LETT #1# (HGET |$ConstructorCache| (QUOTE |Character|)) 
-                 |Character|)
-               (|CDRwithIncrement| (CDAR #1#)))
-            ((QUOTE T) 
-              (|UNWIND-PROTECT| 
-                (PROG1 
-                  (CDDAR 
-                    (HPUT |$ConstructorCache| 
-                      (QUOTE |Character|) 
-                      (LIST 
-                        (CONS NIL (CONS 1 (|Character;|))))))
-                  (LETT #1# T |Character|)) 
-                (COND 
-                  ((NOT #1#) 
-                    (HREM |$ConstructorCache| (QUOTE |Character|)))))))))))) 
+Note that such a construction -- the resulting domain depending on the function
+parameter -- is currently illegal in Axiom. In Aldor it is fine.
 
-=====================================================================
-This function initializes the |infovec| data structure. Notice the calls
-to QSETREFV, another VMLisp-ism, which does a "(setf (svref ...", that
-is, it sets an element of a simple vector (|infovec|). Notice the call
-to |SingleInteger|. This will cause the domain SingleInteger to be loaded,
-initialized, and put in the constructor cache. This domain needs the
-SingleInteger domain for its representation.
+I compiled it with Aldor as usual, and then loaded it into Axiom. As signature
+I got the slightly unusual
 
-(DEFUN |Character;| NIL 
-  (PROG (|dv$| |$| |pv$| #1=#:G90939 |i|) 
-    (RETURN 
-      (SEQ 
-        (PROGN 
-          (LETT |dv$| (QUOTE (|Character|)) . #2=(|Character|)) 
-          (LETT |$| (GETREFV 53) . #2#) 
-          (QSETREFV |$| 0 |dv$|) 
-          (QSETREFV |$| 3 (LETT |pv$| (|buildPredVector| 0 0 NIL) . #2#)) 
-          (|haddProp| |$ConstructorCache| (QUOTE |Character|) NIL (CONS 1 |$|))
-          (|stuffDomainSlots| |$|) 
-          (QSETREFV |$| 6 (|SingleInteger|)) 
-          (QSETREFV |$| 10 
-           (SPADCALL 
-             (PROGN 
-               (LETT #1# NIL . #2#) 
-               (SEQ 
-                 (LETT |i| 0 . #2#) 
-                 G190 
-                 (COND 
-                   ((QSGREATERP |i| 255) (GO G191))) 
-                 (SEQ 
-                   (EXIT 
-                     (LETT #1# (CONS (NUM2CHAR |i|) #1#) . #2#))) 
-                 (LETT |i| (QSADD1 |i|) . #2#) 
-                 (GO G190) 
-                 G191 
-                 (EXIT (NREVERSE0 #1#))))
-             (QREFELT |$| 9)))
-          (QSETREFV |$| 11 0) |$|))))) 
+(1) -> )di op f
 
-=====================================================================
-This is the actual representation of the Character domain. The main
-point of the compiler is to construct the |infovec|. I'm not up to
-explaining the details of this at this moment.
+There is one unexposed function called f :
+   [1] PositiveInteger -> PrimeField n from Test
 
-(MAKEPROP 
- (QUOTE |Character|) 
- (QUOTE |infovec|) 
- (LIST 
-  (QUOTE 
-   #(NIL NIL NIL NIL NIL NIL (QUOTE |Rep|) (|List| 28) (|PrimitiveArray| 28) 
-     (0 . |construct|) (QUOTE |OutChars|) (QUOTE |minChar|) (|Boolean|)
-     |CHAR;=;2$B;1| |CHAR;<;2$B;2| (|NonNegativeInteger|) |CHAR;size;Nni;3| 
-     (|Integer|) |CHAR;char;I$;6| (|PositiveInteger|) |CHAR;index;Pi$;4| 
-     |CHAR;ord;$I;7| |CHAR;lookup;$Pi;5| (5 . |coerce|) |CHAR;random;$;8| 
-     |CHAR;space;$;9| |CHAR;quote;$;10| |CHAR;escape;$;11| (|OutputForm|) 
-     |CHAR;coerce;$Of;12| (|CharacterClass|) (10 . |digit|) (|Character|) 
-     (14 . |member?|) |CHAR;digit?;$B;13| (20 . |hexDigit|) 
-     |CHAR;hexDigit?;$B;14| (24 . |upperCase|) |CHAR;upperCase?;$B;15| 
-     (28 . |lowerCase|) |CHAR;lowerCase?;$B;16| (32 . |alphabetic|) 
-     |CHAR;alphabetic?;$B;17| (36 . |alphanumeric|) |CHAR;alphanumeric?;$B;18|
-     (|String|) |CHAR;latex;$S;19| (40 . |minIndex|) (45 . |elt|) 
-     |CHAR;char;S$;20| |CHAR;upperCase;2$;21| |CHAR;lowerCase;2$;22| 
-     (|SingleInteger|))) (QUOTE #(|~=| 51 |upperCase?| 57 |upperCase| 62 
-     |space| 67 |size| 71 |random| 75 |quote| 79 |ord| 83 |min| 88 |max| 94 
-     |lowerCase?| 100 |lowerCase| 105 |lookup| 110 |latex| 115 |index| 120 
-     |hexDigit?| 125 |hash| 130 |escape| 135 |digit?| 139 |coerce| 144 |char| 
-     149 |alphanumeric?| 159 |alphabetic?| 164 |>=| 169 |>| 175 |=| 181 |<=| 
-     187 |<| 193)) (QUOTE NIL) 
-     (CONS (|makeByteWordVec2| 1 
-       (QUOTE (0 0 0 0 0 0))) 
-       (CONS 
-         (QUOTE #(NIL |OrderedSet&| NIL |SetCategory&| |BasicType&| NIL))
-         (CONS 
-           (QUOTE #((|OrderedFinite|) (|OrderedSet|) (|Finite|) 
-                    (|SetCategory|) (|BasicType|) (|CoercibleTo| 28)))
-           (|makeByteWordVec2| 52 
-             (QUOTE 
-               (1 8 0 7 9 1 6 0 17 23 0 30 0 31 2 30 12 32 0 33 0 30 0 35 0 
-                30 0 37 0 30 0 39 0 30 0 41 0 30 0 43 1 45 17 0 47 2 45 32 0 
-                17 48 2 0 12 0 0 1 1 0 12 0 38 1 0 0 0 50 0 0 0 25 0 0 15 16 
-                0 0 0 24 0 0 0 26 1 0 17 0 21 2 0 0 0 0 1 2 0 0 0 0 1 1 0 12 
-                0 40 1 0 0 0 51 1 0 19 0 22 1 0 45 0 46 1 0 0 19 20 1 0 12 0 
-                36 1 0 52 0 1 0 0 0 27 1 0 12 0 34 1 0 28 0 29 1 0 0 45 49 1 
-                0 0 17 18 1 0 12 0 44 1 0 12 0 42 2 0 12 0 0 1 2 0 12 0 0 1 2 
-                0 12 0 0 13 2 0 12 0 0 1 2 0 12 0 0 14))))))
-     (QUOTE |lookupComplete|))) 
+and trying it out I obtained
 
-(MAKEPROP (QUOTE |Character|) (QUOTE NILADIC) T) 
+(1) -> f(5)$Test
+   Loading /home/rubey/axiom/mnt/linux/algebra/PF.o for domain 
+      PrimeField 
+   Loading /home/rubey/axiom/mnt/linux/algebra/IPF.o for domain 
+      InnerPrimeField 
+   Loading /home/rubey/axiom/mnt/linux/algebra/TABLE.o for domain Table
+      
+   Loading /home/rubey/axiom/mnt/linux/algebra/HASHTBL.o for domain 
+      HashTable 
+   Loading /home/rubey/axiom/mnt/linux/algebra/INTABL.o for domain 
+      InnerTable 
+   Loading /home/rubey/axiom/mnt/linux/algebra/ZMOD.o for domain 
+      IntegerMod 
+
+ 
+   >> System error:
+   |n| is not of type NUMBER.
+
+protected-symbol-warn called with (NIL)
+
+which is roughly what I expected. However, to my great surprise, if you turn on
+the debugger (beforehand. You always have to start a fresh axiom because of the
+error I told you about in my previous message) with
 
+)lisp (setq |$monitorNewWorld| t)
 
+and thus trace
 
+(1) -> f(1783)$Test
 
+the final bit reads
 
-\end{verbatim}
-\section{email 26}
+protected-symbol-warn called with (NIL)..IntegerMod 1783 wants
+   positiveRemainder : (%,%) -> % from  Integer
+---->Integer----> searching op table for:
+   positiveRemainder : (%,%) -> % from  Integer
+<----#<compiled-function |INT;positiveRemainder;3$;28|> Integer
+goget stuffing slot 47 of IntegerMod 1783
+<------#<compiled-function |INT;positiveRemainder;3$;28|> Integer
+
+PrimeField n activating lazy slot 8: Integer
+PrimeField n activating lazy slot 9: IntegerPrimesPackage Integer
+
+..PrimeField n wants
+   prime? : Integer -> Boolean from  IntegerPrimesPackage Integer
+---->IntegerPrimesPackage Integer----> searching op table for:
+   prime? : Integer -> Boolean from  IntegerPrimesPackage Integer
+<----#<compiled-function |PRIMES;prime?;IB;4|>(IntegerPrimesPackage,Integer)
+goget stuffing slot 10 of PrimeField n
+<------#<compiled-function |PRIMES;prime?;IB;4|>(IntegerPrimesPackage,Integer)
+ 
+
+which clearly tells you, that the calculation is done alright, only the
+signature interferes with success.
+
+Any ideas?\end{verbatim}
+\subsection{email 22}
 \begin{verbatim}
-=====================================================================
-This is the function that gets executed when "Character" gets instantiated.
-This function has the effect, if memory serves, of PUTTING THE FUNCTION
-                                                   ^^^^^^^^^^^^^^^^^^^^
-                                                   wrong, wrong, wrong
+this is just great stuff -- nearly... I had to try it out right away, but I
+experienced two problems.
 
-"Character;" into the |$ConstructorCache|. The |$ConstructorCache| is a
-hash table used for fast lookup and function dispatch. The call to 
-|Character| will call |Character;| (see below).
+the minor one is, that )co inside axiom still does not work:
 
-(DEFUN |Character| NIL 
-=====================================================================
+                        AXIOM Computer Algebra System 
+                   Version: Axiom 3.0 Beta (February 2005)
+              Timestamp: Tuesday January 11, 2005 at 14:02:04 
+-----------------------------------------------------------------------------
+   Issue )copyright to view copyright notices.
+   Issue )summary for a summary of useful system commands.
+   Issue )quit to leave AXIOM and return to shell.
+-----------------------------------------------------------------------------
+ 
+   Re-reading compress.daase   Re-reading interp.daase
+   Re-reading operation.daase
+   Re-reading category.daase
+   Re-reading browse.daase
+(1) -> 
+(1) -> )co test.as
+   Compiling AXIOM source code from file 
+      /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
+      options 
+-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
+      Use the system command )set compiler args to change these 
+      options.
+ 
+   >> System error:
+   NIL is not of type STRING.
 
+protected-symbol-warn called with (NIL)
+(1) -> )co test
+   Compiling AXIOM source code from file 
+      /home/rubey/martin/Axiom/test.as using AXIOM-XL compiler and 
+      options 
+-O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom -Y $AXIOM/algebra
+      Use the system command )set compiler args to change these 
+      options.
+ 
+   >> System error:
+   NIL is not of type STRING.
 
+protected-symbol-warn called with (NIL)
+(1) -> 
 
-is slightly wrong. It does NOT put the function |Character;| in the
-|$ConstructorCache|, it puts the RESULT of calling (|Character;|)
-in the cache, which is a fully initialized |infovec| object. 
+Never mind.
 
+Unfortunately, there is a more severe issue. I put the following simple domain
+in a file "test.as" and compiled it using 
 
-You'll also find the function call
+aldor -O -Fasy -Fao -Flsp -laxiom -Mno-AXL_W_WillObsolete -DAxiom test.as
 
-          (|stuffDomainSlots| |$|) 
+without any problem. There is only the warning
 
-in |Character;| interesting. The function is actually defined in
-src/interp/nrunopt.boot.pamphlet. From that function you can
-reverse-engineer the contents of the initial slots (which are just
-  #(NIL NIL NIL NIL NIL NIL ....
-at compile time.
+#1 (Warning) Deprecated message prefix: use `ALDOR_' instead of `_AXL'
 
-Clearly documenting stuffDomainSlots would help as would documenting
-all of the rest of it.
+but I suspect that this is of no importance.
 
-Also, for your amusement, try the following:
 
-axiom
-(1)-> )lisp (setq $DALYMODE t)
-(1)-> )set message autoload on
-(1)-> (maphash #'(lambda (key val) (format t "key=~a val=~a~%~%" key val)) 
-|$ConstructorCache|)
-(1)-> 1
-(1)-> (maphash #'(lambda (key val) (format t "key=~a val=~a~%~%" key val)) 
-|$ConstructorCache|)
+-------------------------------------------------------------------------------
+#include "axiom.as"
 
-The first maphash returns NIL
+Test: with { fact: PositiveInteger -> PositiveInteger }
+   == add  { fact(n: PositiveInteger): PositiveInteger == 
+              { n <= 1 => 1;
+                res: PositiveInteger := 1;
+                while n > 1 repeat {
+                  res := res * n;
+                  n := n-1; }
+                res } }
+-------------------------------------------------------------------------------
 
-The second maphash returns the loaded domains. The messages that get
-printed (from loadlib in src/interp/lisplib.boot.pamphlet) turn out 
-to be the same domains you'll see in the constructor cache. Loading
-the domain causes it to be "instantiated" which means that the 
-infovec for the domain gets filled in and stuck in the constructorcache.
+After this I start axiom and load runtime and axextend. By the way axextend
+*is* in the distribution, it's only a little hidden... There is even more
+obscure stuff in theis directory, maybe it's of use to you!
 
-If a domain is already in the constructor cache it will not be loaded.
-Thus domain loading occurs on demand and only once.
+                        AXIOM Computer Algebra System 
+                   Version: Axiom 3.0 Beta (February 2005)
+              Timestamp: Tuesday January 11, 2005 at 14:02:04 
+-----------------------------------------------------------------------------
+   Issue )copyright to view copyright notices.
+   Issue )summary for a summary of useful system commands.
+   Issue )quit to leave AXIOM and return to shell.
+-----------------------------------------------------------------------------
+ 
+   Re-reading compress.daase   Re-reading interp.daase
+   Re-reading operation.daase
+   Re-reading category.daase
+   Re-reading browse.daase
+(1) -> 
+(1) -> )lisp (load "/home/rubey/aldor/linux/1.0.2/lib/runtime.lsp")
 
-\end{verbatim}
-\section{email 27}
-\begin{verbatim}
-On Mon, Jan 10, 2005 at 09:47:36PM -0500, root wrote:
-> The code was changed. It used to read:
-> 
->   one?(x) == ONEP(x)$Lisp
-> 
-> It now reads:
-> 
->   one?(x) == x = 1
+Value = T
+(1) -> )lisp (load 
+"/home/rubey/axiom--main--1--patch-24/lsp/ccl/src/axbase/compiler/lib/axextend.lsp")
+
+Value = T
+(1) -> )lib test
+   Reading /home/rubey/martin/Axiom/test.asy
+   Loading /home/rubey/axiom/mnt/linux/autoload/bc-matrix.
+   Loading /home/rubey/axiom/mnt/linux/autoload/bc-misc.
+   Loading /home/rubey/axiom/mnt/linux/autoload/bc-solve.
+   Loading /home/rubey/axiom/mnt/linux/autoload/bc-util.
+   Loading /home/rubey/axiom/mnt/linux/autoload/ht-util.
+   Loading /home/rubey/axiom/mnt/linux/autoload/htsetvar.
+   Loading /home/rubey/axiom/mnt/linux/autoload/ht-root.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-con.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-data.
+   Loading /home/rubey/axiom/mnt/linux/autoload/showimp.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-op1.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-op2.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-search.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-util.
+   Loading /home/rubey/axiom/mnt/linux/autoload/topics.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-prof.
+   Loading /home/rubey/axiom/mnt/linux/autoload/br-saturn.
+   Test is now explicitly exposed in frame frame0 
+   Test will be automatically loaded when needed from 
+      /home/rubey/martin/Axiom/test
+(1) -> )sh Test
+ Test  is a domain constructor
+ Abbreviation for Test is TEST 
+ This constructor is exposed in this frame.
+ Issue )edit test.as to see algebra source code for TEST 
 
+------------------------------- Operations --------------------------------
+ fact : PositiveInteger -> PositiveInteger
 
-True, but the bootstrap code does not contain any definition. We have:
+(1) -> fact(5)$Test
 
-(DEFUN |SINT;zero?;$B;38| (|x| $) (QSZEROP |x|)) 
+   (1)  120
+                                                        Type: PositiveInteger
+(2) -> fact(4)$Test
+ 
+   >> System error:
+   #<vector 08cf4150> is not of type LIST.
 
-(DEFUN |SINT;max;3$;39| (|x| |y| $) (QSMAX |x| |y|)) 
+protected-symbol-warn called with (NIL)
 
 
-The last number in the function names gives the order of the function
-in definition in the domain. The definition of `one?' follows
-`zero?'. With fresh code we have:
+:-(
 
-(DEFUN |SINT;zero?;$B;38| (|x| $) (QSZEROP |x|)) 
+I am already very very happy, but another patch and/or explanation would
+greatly improve this...
 
-(DEFUN |SINT;one?;$B;39| (|x| $) (EQL |x| 1)) 
+By the way, could you explain what your patches are doing? It's just a mystery
+to me! I suspect that one needs some knowledge of Aldor internals?
 
-(DEFUN |SINT;max;3$;40| (|x| |y| $) (QSMAX |x| |y|)) 
+\end{verbatim}
+\subsection{email 23}
+\begin{verbatim}
+I've been playing with the aldor/axiom stuff a little, and the following
+patch may help get things going(I used to work on it, and thought it'd
+be fun to get it going again).
 
+There are further problems:
+- aldor "extend" does not work - it ought to, I think
+- The algebra defined in libaxiom.al is not current, and for it to be
+rebuilt various .as files need to be available to the build process
+(axextend.as and friends) - any reason why they're left out of the
+distribution?
+- exported attributes from aldor domains are explicitly killed off by
+this patch (it's probably easy to fix, just no time atm).
+- Only tested the most trivial domains I could find.  
 
-It was precisely this change in sequence that allowed me to spot this
-missing function by looking at the domain vectors. All domains which
-relied of functions defined in SINT with `sequence number' > 38
-shifted by one in the second pass of the fixed-point build.
+Peter.
 
 \end{verbatim}
-\section{email 28}
+
+\subsection{email 28}
 \begin{verbatim}
 It is possible to use the Aldor compiler to compile functions which you then 
 can use in Axiom. Unfortunately, I could not get Domains and Packages to work. 
@@ -2701,7 +3796,7 @@
   )lib fact
 
   fact(5)\end{verbatim}
-\section{email 29}
+\subsection{email 29}
 \begin{verbatim}
 root writes:
  > I'm sorry but your note suffers from "context depravation", that is,
@@ -2734,7 +3829,4 @@
 
 do not work. They should, but they don't. I would be *VERY* grateful, if you
 could give me pointers.\end{verbatim}
-\section{email 30}
-\begin{verbatim}
-\end{verbatim}
 \end{document}

\start
Date: Sun, 15 Jan 2006 19:38:06 -0500
From: Tim Daly
To: Ralf Hemmecke
Subject: Re: findSpadFiles problem

Ralf,

re: sort | uniq

good point. added in the next release.

\start
Date: Mon, 16 Jan 2006 20:43:08 +0100
From: Francois Maltey
To: list
Subject: I can't compile the last axiom on a debian.

Hello,

Last month I try the axiom compiler.
Then my laptop was repaired under warranty, and now I get it back.

I use the debian testing etch distribution, but I prefer to recompile
axiom from cvs because i make big mistakes with the unstable debian
version and then I must reinstall all the system.

So I get axiom from cvs and I type

./confugure
export AXIOM=/home/fmy/Fabrique/axiom/mnt/linux
export PATH=$AXIOM/bin:$PATH
make

The first error seems to be :
    ./configure: line 2412: syntax error near unexpected token `('
and the last ones are at the end of the make log.

Thanks a lot if you can help me.

........................
host=i686-pc-linux-gnu
enable_machine=
use=386-linux
checking for gcc... gcc
checking whether the C compiler (gcc    ) works... yes
checking whether the C compiler (gcc    ) is a cross-compiler... no
checking whether we are using GNU C... yes
checking whether gcc accepts -g... yes
checking how to run the C preprocessor... gcc -E
checking for gawk... gawk
checking system version (for dynamic loading)... checking for makeinfo...=

   makeinfo
./configure: line 2412: syntax error near unexpected token `('
./configure: line 2412: `    case "`(uname -sr) 2>/dev/null`" in'
make[3]: entrant dans le r=E9pertoire =AB /home/fmy/Fabrique/axiom/lsp/gc=
l-2.6.7 =BB
rm -f bin/gcl xbin/gcl
MGCLDIR=`echo /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7 | sed -e 'sX^\([a-=
z]\):X/\1Xg'` ; \
        GCLDIR=`echo /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7` ; \
        make install-command "INSTALL_LIB_DIR=$GCLDIR" "prefix=$GCLDI=
R" "BINDIR=$MGCLDIR/unixport"
make[4]: entrant dans le r=E9pertoire =AB /home/fmy/Fabrique/axiom/lsp/gc=
l-2.6.7 =BB
rm -f /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gcl
(echo '#!/bin/sh' ; \
        echo exec /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/unixport/ \\ ; \
        echo '   -dir' /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/unixport/ \=
\ ; \
        echo '   -libdir' /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/ \\ ; \
        echo '   -eval '\''(setq si::*allow-gzipped-file* t)'\' \\ ;\
        ! [ -d "" ] || echo '   -eval '\''(setq si::*tk-library* '\"\"')'=
\' \\;\        echo '     '\"\$@\" ) > /home/fmy/Fabrique/axiom/lsp/gcl-2=
.6.7/bin/gcl;
echo '#' other options: -load "/tmp/foo.o" -load "jo.lsp" -eval '"(joe 3)=
"' >> /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gcl
chmod a+x /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gcl
rm -f /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gclm.bat
if gcc --version | grep mingw >/dev/null 2>&1 ; then (echo '@SET cd='; =
\
         echo '@SET promp%prompt%'; \
         echo '@PROMPT SET cd'; \
         echo '@CALL>%temp%.\setdir.bat'; \
         echo '@'; \
         echo '% do not delete this line %'; \
         echo '@ECHO off'; \
         echo 'PROMPT %promp'; \
         echo 'FOR %%c IN (CALL DEL) DO %%c %temp%.\setdir.bat'; \
         echo 'set cwd=%cd%'; \
         echo 'set libdir=%cd%\..\lib\gcl-`cat majvers`.`cat minvers`';=
 \
         echo 'set unixportdir=%libdir%\unixport'; \
         echo 'path %cd%\..\mingw\bin;%PATH%'; \
         echo "start %unixportdir%\.exe -dir %unixportdir% -libdir %libdi=
r% -eval \"(setq si::*allow-gzipped-file* t)\" %1 %2 %3 %4 %5 %6 %7 %8 %9=
" ) > /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gclm.bat ; fi
rm -f /home/fmy/Fabrique/axiom/lsp/gcl-2.6.7/bin/gclfinal.bat
if gcc --version | grep -i mingw >/dev/null 2>&1 ; then (echo 'ECHO path =
%1\mingw\bin;%PATH% > gcli.bat'; \
         echo "ECHO start %1\lib\gcl-`cat majvers`.`cat minvers`\unixport=
\.exe -dir %1\lib\gcl-`cat majvers`.`cat minvers`\unixport -libdir %1\lib=
\gcl-`cat majvers`.`cat minvers` -eval \"(setq si::*allow-gzipped-file* t=
)\" %1 %2 %3 %4 %5 %6 %7 %8 %9 >> gcli.bat" ) > /home/fmy/Fabrique/axiom/=
lsp/gcl-2.6.7/bin/gclfinal.bat ; fi
make[4]: quittant le r=E9pertoire =AB /home/fmy/Fabrique/axiom/lsp/gcl-2.=
6.7 =BB
(cd xbin ; cp ../bin/gcl .)
cd cmpnew && make gcl_collectfn.o
make[4]: entrant dans le r=E9pertoire =AB /home/fmy/Fabrique/axiom/lsp/gc=
l-2.6.7/cmpnew =BB
../unixport/saved_pre_gcl ../unixport/ -compile gcl_collectfn.lsp
make[4]: ../unixport/saved_pre_gcl : commande introuvable
make[4]: *** [gcl_collectfn.o] Erreur 127
make[4]: quittant le r=E9pertoire =AB /home/fmy/Fabrique/axiom/lsp/gcl-2.=
6.7/cmpnew =BB

\start
Date: Mon, 16 Jan 2006 18:42:22 -0500
From: Tim Daly
To: Camm Maguire
Subject: re: Bug#347199: axiom-doc: Book is all-monospace
Cc: Matijs van Zuijlen

> At page 1019 of the Axiom book (the 1036th page of the pdf file), the text
> becomes all-monospace. I believe this is due to a typo in the file
> book.pamphlet, line 62236, where it says:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the \tt n-th
> 
> Instead, the final \tt should have some braces, probably like so:
> 
>   {\tt n}. If {\tt n} is a negative number, it refers to the {\tt n}-th

fixed in next release.

\start
Date: Mon, 16 Jan 2006 18:51:02 -0500
From: Tim Daly
To: Alfredo Portes
Subject: Re: Status

> Hi Tim,
> 
> I wanted to know if you were able to submit the work for the conference. I
> am still working on some issues with the new pamphlet support in mathaction=
> .
> I am working with Mr. Page to solve this. However, the instructions posted
> on the axiom-developer wiki should work. I will try to upload and iso so yo=
> u
> can try it.
> 
> Let me know if you need anything,
> 
> Regards,
> 
> Jose Alfredo Perez

jose,

i just got back from vacation and have 768 emails so i'm a little lagged...

yeah, i'm hoping to have the doyen CD be the basis for the next issac
conference cd which should be built in may. i usually only get a week
to do the build so we have to make sure that all the axiom-related and
wiki-related stuff "just works" by that time.

let me know when the iso is available (and where). be sure to copy the
list mailing list so others can try it also.

\start
Date: Mon, 16 Jan 2006 22:52:15 -0500
From: William Sit
To: Daniel Listas
Subject: Re: [Axiom-math] Re: About "%%"

Daniel wrote:
> 
> > The a = %%A0 is the real root of the denominator, which then factors as:
> 
> > 2*s**3 - 3*s + 4 = (s - a)(2*s**2 + 2*a*s + 2*a**2 -3)
> 
> I didn't know that %%A0 was the real root of the denominator. When I
> execute inverseLaplace, it only show the packages loading but not what
> %%A0 is. Ought I to configurate something in order that Axiom
> automatically shows the roots values?

I think it is a bug in Axiom not reporting what the temporary symbol %%A0 is. I
figured that out by constructing the differential equation satisfied 
by f(t).

> > The coefficients of t in the exponential functions are the roots of
> > the quadratic factor based on the quadratic formula. Axiom should have
> > said what %%A0 is.
> 
> This Axiom's solution doesn't seem equal to the solution that I
> obtained by partial fraction decomposition using the approximate
> root value of -1.647426657:
> 
> f(t) = -1.088456053*exp(-1.647426657*t) + exp(0.823713328*t) *
>         * [ 1.588456054*cos(0.731786132*t - 20.77542511*sin(0.731786132*t) ]
> 
> In fact, if we replace the approximate root value, the radicands turn
> into negative value :-S

Axiom is correct. When the root is substituted into Axiom's solution, I got:
   (14)
                                  +-----------------------+
           3.5487528461 274440233\|- 2.1420437737 48171979
         +
           0.7942280262 445812132
    *
               +-----------------------+
         0.5 t\|- 2.1420437737 48171979  + 0.8237133286 6012776746 t
       %e
   +
                               - 1.6474266573 202555349 t
     - 1.0884560524 89162426 %e
   +
                                  +-----------------------+
         - 3.5487528461 274440233\|- 2.1420437737 48171979
       +
         0.7942280262 445812132
    *
                 +-----------------------+
         - 0.5 t\|- 2.1420437737 48171979  + 0.8237133286 6012776746 t
       %e

This has the form: 

   c1 * %e**((a+b*%i)*t) + c2 * %e**((a - b*%i)*t) + c3 * %e**(c*t)

where c is the real root of the denominator. If you apply the Euler identity

   %e**((a+b*%i)*t) = %e**(a*t)(cos(b*t) + %i*sin(b*t))

   %e**((a-b*%i)*t) = %e**(a*t)(cos(b*t) - %i*sin(b*t))

you can rewrite the inverse Laplace transform into the form you have.  Here is
the answer from Mathematica (simplified after removing near-zero imaginary
components in the coefficients):

e^(0.8237133286601279 t)(1.5884560524891629 cos(0.73178613230714 t) 
- (10.387712479126234 sin(0.73178613230714t))
- (1.0884560524891655) e^(-1.6474266573202556 t) 

So I believe the coefficient of the sine term in your solution is not correct
and should be half its value or -10.387712479126234. The value of f(0) = 0.5.

> I think that my solution is correct because f(t) is continuous in t = 0
> and f(0) ---the exercise request to find f(0)--- can be verified by the
> initial value theorem. I saw the resolution of cathedra's director and
> she solved the exercise _only_ using the initial value theorem but I
> think that it's wrong because it's only true if f(t) is continuous :-|

\start
Date: Tue, 17 Jan 2006 04:30:38 -0500
From: Bill Page
To: list
Subject: Re: I can't compile the last axiom on a debian.

-----Original Message-----

Tim,

See patch committed to Axiom Savannah cvs below.

Francois Maltey said:

> Hello,
>
> Last month I try the axiom compiler.
> Then my laptop was repaired under warranty, and now I get it back.
>
> I use the debian testing etch distribution, but I prefer to recompile
> axiom from cvs because i make big mistakes with the unstable debian
> version and then I must reinstall all the system.
>

Of course the most reliable method to install Axiom on Debian
is just:

  apt-get install axiom

But if you really do want to build Axiom from the cvs sources,
there are a couple of other things you will need to do.

> So I get axiom from cvs and I type
>
> ./confugure
> export AXIOM=/home/fmy/Fabrique/axiom/mnt/linux
> export PATH=$AXIOM/bin:$PATH
> make
>
> The first error seems to be :
>     ./configure: line 2412: syntax error near unexpected token `('
> and the last ones are at the end of the make log.
>
> Thanks a lot if you can help me.
>

Francois, you have found a bug in the configure script of the
version of gcl (2.6.7) that is built by Axiom. The bug and a patch
from Vadim V. Zhytnikov to correct the problem is described here:

http://lists.gnu.org/archive/html/gcl-devel/2006-01/msg00014.html

I have just committed this patch to the cvs as savannah, so to
get the updated Axiom source you should do this:

  cd /home/fmy/Fabrique/axiom
  cvs update

This corrects the problem above, but on Debian you will also
run into another problem concerning the GCLOPTS that Axiom
uses by default. On Debian you must use the 'locbfd' option.
To do this edit 'Makefile.pamphlet'

  vi Makefile.pamphlet

and look for 'makefile.linux' then change '<<GCLOPTS>>' to
'<<GCLOPTS-LOCBFD>>'.

Now you can try the build again:

  ./configure
  (set variables)
  make clean
  make

---------

I have just tried this procedure on my Debian sarge/testing
system and it appears to work. Pleae let me know if you have
any problems.

\start
Date: Tue, 17 Jan 2006 10:01:40 -0500
From: Tim Daly
To: Bill Page
Subject: Re: I can't compile the last axiom on a debian.

Bill,

I've applied the quote-mark patch and will include it in the next
release (which will happen shortly).

\start
Date: Tue, 17 Jan 2006 18:12:27 -0500
From: Bill Page
To: Alfredo Portes
Subject: re: Doyen

On Tuesday, January 17, 2006 4:41 PM Alfredo Portes wrote:

> I have a few questions regarding the way ZWiki handles new
> pages. I would like to integrate the little app we have for
> drag and drop in the CD to the Latex Wiki. Is it possible to
> create pages in the Wiki without doing this manually?

Yes, although of course some HTML <form action="..."> has
to be trigger somehow (usually via a "submit") in order that
ZWiki can begin to process the input.

> if it is, does it have to be a python script?

The processing on the server-side will have to be at
least initiated by some Python code that is associated
with the type of Zope objects you will be creating. See
for example how I handle the "tangle" operation now in
the pamphlet files on MathAction. In that case the Python
code calls 'notangle' internally.

But the triggering of the "submit" action would normally
be handled by something like JavaScript in the browser or
by some other HTTP-aware "helper" application.

> I will like for the person using the CD to have this
> tool, they would drag the pamphlet to this application,
> not to the Wiki and then the application would take care
> of adding it to the Wiki.

This sounds quite possible but it perhaps might involve
more coding then alternatives. If you do it this way,
the local "helper" application could be written in any
programming language, but presumably you would want to
choose carefully in order to minimize the effort of
porting to/from at least Windows and Linux.

> I do not know if this sounds too complicated, or if
> it would be better to write this kind of script inside
> ZWiki. Sorry if I didn't explain my point clear enough.

I think your idea is clear enough. But it will not be
possible to write everything that you need inside ZWiki -
only part of it. The major alternative as I see it is to
write JavaScript for a browser like FireFox. This has
the great benefit of being highly portable and provides
an otherwise very familiar interface for the user.

JavaScript locally in a browser does have some limitations
but I think for what you want to do, it might be the most
simple solution.

How does you current test drag-and-drop application work?
Can it be easily used as the front-end to what you want
to do on LatexWiki?

\start
Date: Tue, 17 Jan 2006 18:20:53 -0500
From: Bill Page
To: list
Subject: Re: Local MathAction

-----Original Message-----

Ralf,

On Tuesday, January 17, 2006 11:11 AM you wrote:
>
> >   /var/lib/plone2/main/zeo/var/Data.fs
>
> I've linked things as you suggested.

I am worried that you are trying to use the

/var/lib/plone2/main/zeo/var/Data.fs

file.

This database will *first* require that you have a
working set of software, Zope+ZWiki+LatexWiki+MathAction
changes to LatexWiki. It should be possible for you to
*first* enter Axiom commands and see the output at graphics
in your browser. Only *then*, after it is working, should
you try to link the new

 /var/lib/plone2/main/zeo/var/Data.fs

file. If the software is not correctly configured, then
this file will certainly fail to display pages. You
should however be able to use ZMI

http://localhost:9673/manage

provided you have a valid user id.

Even after you link the new Data.fs, you will not be
able to see any of the graphic output until you have
run the command

http://localhost:9673/mathaction/FrontPage/clearCache

(do this for each page, or do

http://localhost:9673/mathaction/FrontPage/upgradeAll

for all pages. /upgradeAll is likely to take a long time! )

This will cause Axiom and latex and ghostscript etc. to be
run again to create the .png files in the ../var/LatexWiki
directory.

>
> Now http://localhost:9673/manage tells me to enter my name
> and password.
> Well, it doesn't let me enter. :-) It seems that the password
> is stored in Data.fs.
>

Yes, I think that is correct. The administrator user id and
password is stored in the Data.fs.

I can add your user id and password to the Zope database on
axiom-developer.org, so then when you copy it, you will be
able to use that user id. Please let me know what you would
like it to be.

\start
Date: Tue, 17 Jan 2006 18:21:29 -0500
From: Bill Page
To: list
Subject: Re: Local MathAction

-----Original Message-----

Ralf,

On Tuesday, January 17, 2006 6:04 AM you wrote:
>
> The .png files get created. However, my zope1 instance did
> not have read access for all. So I added
>
> chmod a+r /var/lib/zope2.7/instance/zope1

This directory (and all the sub-directories and files) only
needs to be readable by the 'zope' user.

chown -R zope:zope /var/lib/zope2.7/instance
chown -R a+r /var/lib/zope2.7/instance

This should be the case by default. These files are not
accessed directly by the browser, but only through Zope as
"Zope objects", so user 'zope' needs to be able to read
from the sub-directory. I will try to explain this in more
detail below.

>
> runzope shows nothing when I view a latexwiki page. It's
> probable because the generated html is not too wrong.

Yes, that is a good sign. Also it is a very good sign that
you can find the .png files. That means almost everything
is working. Just for some reason your browser cannot access
the image files.

> The only thing I wonder is why it says "images" in src=.
>
> <a name="eq1"><table width="100%"><tr><td align="center"
> width="95%"><img alt="
> \label{eq1}
>   \int{x^2 + y_3}{dx}
> " class="equation" src="images/1936239154-18px.png"
> width="93" height="39"/>
>
> I have no idea where this directory should be.

This is not a directory, it is a **folder object** inside the
Zope database. You should be able to see it if you go to ZMI

  http://localhost:9673/manage

If you click on 'mathaction' (the name of your local
latexwiki) and then on 'images' you should see the contents
of the .../var/LatexWiki directory.

If you click on the tab 'properties' you should be able to
see that the basepath which points to

/var/lib/zope2.7/instance/zope1/var/LatexWiki

> It is not under
>
> /var/lib/zope2.7/instance/zope1/var/LatexWiki
>
> and the .png files (and .tex files) get generated into
> that directory.

In fact both 'images' (the Zope folder) and '.../var/LatexWiki'
(the directory) are the same thing. The purpose of 'LocalFS'
product that you asked about earlier is to make something that
is really stored in the file system look like a virtual Zope
object. It is like an "alias" that allows the Zope webserver
to access the contents of a directory

'images' ==> /var/lib/zope2.7/instance/zope1/var/LatexWiki

So a url like:

 http://localhost:9673/mathaction/images/1936239154-18px.png

(replace 'mathaction' with the name of your local text latexwiki)

should display the contents of the file

ls /var/lib/zope2.7/instance/zope1/var/LatexWiki/1936239154-18px.png

in your browser.

You should actually see the graphic for the equation in your
browser. Does this work? Or do you get an error message?

This is exactly the same as what the HTML img attribute

 ... src="images/1936239154-18px.png"

is trying to do.

>
> I've tried to create
> /var/lib/zope2.7/instance/zope1/var/LatexWiki/images
> and copied all the .png files there, but still no picture
> is shown.

No, that is not the correct thing to do. 'images' is
already (or at least should be) directly associated with
/var/lib/zope2.7/instance/zope1/var/LatexWiki

>
> Do you know why?
>
> > apt-get install tetex-base tetex-bin tetex-extra gs
> python2.3-imaging
> >
> > which is correct, but you say that python2.3 had been previously
> > installed on your system. There is a possibility that perhaps
> > the python2.3-imaging package is not correctly associated with
> > your python interpreter. To check try
> >
> >   % python
> >   import PIL
> >   ^D
>
> python2.3-imaging was not installed, only python itself (I
> cannot even
> easily deinstall it -- I think KDE uses it).
>
> The "import PIL" gives no error.
>

Yes, this all must be working because you actually have .png
files in the .../var/LatexWiki directory. That is good.

It sounds to me like there must be a problem with the LocalFS
folder object 'images'. Perhaps it was not created when you
created the Type: latexwiki ZWiki object (it should have been).
Or perhaps

/var/lib/zope2.7/instance/zope1/var/LatexWiki

is not accessible to user 'zope'? (It should have at least
read access.).

Please let me know the results of the commands above.

\start
Date: Tue, 17 Jan 2006 18:22:16 -0500
From: Bill Page
To: list
Subject: FW: Local MathAction

-----Original Message-----

Ralf,

On Tuesday, January 17, 2006 5:27 AM you wrote:
>
> I can already successfully run
>
> ssh hemmecke@axiom-developer.org

Great.

The Zope database on axiom-developer.org is:

  /var/lib/plone2/main/zeo/var/Data.fs

This file is updated dynamically so an rsync of this one
may not be in an entirely consistent state.

A backup copy this database is re-created every Sunday
night in:

  /var/lib/plone2/main/zeo/var/Data.fs.old

This one is guaranteed to be consistent but it is only
updated once per week.

I would recommend using rsync to keep your local copy of

  /var/lib/plone2/main/zeo/var/Data.fs.old

up to date.

This database file contains "hard links", i.e. file names
with full paths, so it is necessary for you to recreate
exactly this directory structure

  /var/lib/plone2/main/zeo/var

on you system.

Of course, I suggest that you do not try this until after
you are sure that your local copy of the MathAction software
is working properly.

The first time you try this, make sure you keep a copy of
your local Zope database (Data.fs file):

cp /var/lib/zope2.7/instance/zope1/var/Data.fs \
   /var/lib/zope2.7/instance/zope1/var/Data.fs.backup

This things fail, then you may have to restore the Data.fs
file from the backup copy.

Then you can provide a symbolic link from your version of
Zope to the copy of the MathAction database file, something
like this:

/var/lib/zope2.7/instance/zope1/bin/zopectl stop

mv /var/lib/zope2.7/instance/zope1/var/Data.fs \
  /var/lib/zope2.7/instance/zope1/var/Data.fs.old

ln -s /var/lib/plone2/main/zeo/var/Data.fs.old  \
      /var/lib/zope2.7/instance/zope1/var/Data.fs

/var/lib/zope2.7/instance/zope1/bin/zopectl start

After restarting Zope, I think you should use your browser
to immediately issue the command in ZMI

http://localhost:9673/manage

Control_Panel/Database Management/Main/30 days/Pack.

This will have the effect of creating a new Data.fs file
with updated hard links.

--------

There may be one complication which I have not yet fully
tested. The Data.fs file on axiom-developer.org contains
data for both the Axiom Wiki and the Axiom Portal (plone).
You may not want to bother with installing plone locally
on your system. I think this should be ok, provided of
course that you do not try to access the 'plone' object
in the copy of the database.

--------

Another small complication is that some of the links on
the web pages on Axiom Wiki point to url like this:

  /public/book2.pdf

Because Zope does not handle very large objects efficiency,
these files are not actually stored in the Zope database
but rather are located in the file system. The Apache
webserver is used as a "front-end" on axiom-developer, these
references are served directly by Apache. Zope is accessed
as a "back-end" server via proxy. But in your case you do
not have Apache so you would have to use ZMI to create a
Zope folder called 'public' and store the files in that
folder. Perhaps it would be better if I create this folder
first in the remote Zope database and duplicate the public
files there.

------

Probably all this sounds quite obscure to you right now,
but if you have patience, I am quite sure that we can set
things up so that a weekly rsync script could operate
transparently to keep you local mirror of axiom-developer
up to date.

Regards,
Bill Page.

>
> Ralf
>
> On 01/16/2006 04:51 PM, Bill Page wrote:
> > Ralf,
> >
> > I expect that it will be necessary for you to have an account
> > on the axiom-developer.org server in order to use rsync. If
> > so, I am sure that Tim Daly would have no objection if I create
> > an account for you.
> >
> > I will try this myself later today and let you know the specific
> > commands.

\start
Date: Tue, 17 Jan 2006 18:36:34 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

Jay,

Were you still planning on posting this "petition" on the
Axiom Wiki website? I think it is fine except for a couple
of typos and a few suggested changes in wording that I
point out below.

Perhaps Tim Daly might like to comment on some of the
specific details in your proposed letter?

If you need help putting this on the Wiki, just ask.
I would be very happy to tell you how to do it.

Regards,
Bill Page.

On Friday, January 13, 2006 9:52 PM you wrote:
>
> Bill Page writes:
>
> > On January 13, 2006 12:06 PM Jay Belanger wrote:
> >> ...
> >> So that any potential signers could get a quick grasp of the
> >> situation, a little history might be useful.  What about
> >> something like:
> >
> > Thanks for the draft. I think it is very good. I have inserted
> > a few explanations below. I will leave it up to you exactly
> > how to modify the text.
>
> Thanks for the additional information.  I've fixed the inaccuracies,
> and below is another draft.  (Feel free to change it yourself if you
> want, of course.)
>
> Jay
>
>    Axiom is a sophisticated computer algebra system originally
>    developed as an IBM research project.  IBM sold Axiom to the
>    Numerical Algorithms Group (NAG) who marketed it and continued its
>    development.  After NAG discontinued Axiom as a commercial product
>    they generously released part of the Axiom source code under a free
>    license.  Axiom is now very usable and is currently being actively
>    developed by an enthusiastic community. It is expected to be useful
>    in research and education for quite some time.
>
>    The language used for writing Axiom libraries is called SPAD (short
>    for Scratchpad, the original name of Axiom).  While Axiom was still
>    being developed by IBM, an improved language, Aldor, was created
>    for writing Axiom libraries.  While the Aldor compiler was

-    originally part of the Axiom system, it was became a separate
+    originally part of the Axiom system, it became a separate

>    project when NAG discontinued the sale of Axiom as a commercial
>    product.  The Aldor compiler was not part of Axiom when the Axiom
>    sources were relicensed, and so is not currently included
>    with Axiom.
>
>    Binaries for Aldor have been made freely available and the sources
>    are available under a generous license.  However, the license does
>    not qualify as a free or open source license.  While Axiom can

-    still be built using Aldor, the lack of a free license for Aldor
+    still make use of Aldor as a library compiler (on those platforms
+    where a suitable binary version is available), the lack of a free
+    license for Aldor

-    prohibits it from being a standard part of Axiom, and so nothing in
+    prohibits it from being a standard part of the Axiom open source
+    distribution, and so nothing in

-    the base Axiom system can assume that Aldor is included.
+    the base Axiom system can depend on Aldor.

>
>    A free license for Aldor would allow it to become a standard part
>    of Axiom, which would improve Axiom and make Aldor a more
>    widespread language.  A free license available as soon as possible
>    would allow current development on Axiom to use Aldor.
>
>    We, the undersigned, respectfully request that the Aldor compiler
>    be released under a free license at the earliest opportunity.

\start
Date: Wed, 18 Jan 2006 06:43:10 -0500
From: Alfredo Portes
To: Bill Page
Subject: re: Doyen

Hi Bill,

I will look into the way you call the notangle inside your scripts. Right
now
we have this application: http://toolbox1.sytes.net/doyen/dragdrop/

If you drag and drop a pamphlet file here, (you must drag the link of
course)
the application will read the pamphlet extract the make file and process th=
e
information in the pamphlet (extract the tex, source, etc).

This application for the front end has a java script that makes sure the
file is
a pamphlet file, and everything else is discarted. Then, the JS calls a PHP
script and passes the location and the name of the file. The PHP script
takes
care of downloading the file and process it locally, then it displays a pdf
file.

So I assume at this point, what I would like to do is to integrate this app=
,
and ZWiki. I would look into the scripts and see the way this works.

Regards,

On 1/17/06, Page, Bill Bill Page wrote:
>
> On Tuesday, January 17, 2006 4:41 PM Alfredo Portes wrote:
>
> > I have a few questions regarding the way ZWiki handles new
> > pages. I would like to integrate the little app we have for
> > drag and drop in the CD to the Latex Wiki. Is it possible to
> > create pages in the Wiki without doing this manually?
>
> Yes, although of course some HTML <form action="..."> has
> to be trigger somehow (usually via a "submit") in order that
> ZWiki can begin to process the input.
>
> > if it is, does it have to be a python script?
>
> The processing on the server-side will have to be at
> least initiated by some Python code that is associated
> with the type of Zope objects you will be creating. See
> for example how I handle the "tangle" operation now in
> the pamphlet files on MathAction. In that case the Python
> code calls 'notangle' internally.
>
> But the triggering of the "submit" action would normally
> be handled by something like JavaScript in the browser or
> by some other HTTP-aware "helper" application.
>
> > I will like for the person using the CD to have this
> > tool, they would drag the pamphlet to this application,
> > not to the Wiki and then the application would take care
> > of adding it to the Wiki.
>
> This sounds quite possible but it perhaps might involve
> more coding then alternatives. If you do it this way,
> the local "helper" application could be written in any
> programming language, but presumably you would want to
> choose carefully in order to minimize the effort of
> porting to/from at least Windows and Linux.
>
> > I do not know if this sounds too complicated, or if
> > it would be better to write this kind of script inside
> > ZWiki. Sorry if I didn't explain my point clear enough.
>
> I think your idea is clear enough. But it will not be
> possible to write everything that you need inside ZWiki -
> only part of it. The major alternative as I see it is to
> write JavaScript for a browser like FireFox. This has
> the great benefit of being highly portable and provides
> an otherwise very familiar interface for the user.
>
> JavaScript locally in a browser does have some limitations
> but I think for what you want to do, it might be the most
> simple solution.
>
> How does you current test drag-and-drop application work?
> Can it be easily used as the front-end to what you want
> to do on LatexWiki?
>
> Regards,
> Bill Page.
>

\start
Date: Wed, 18 Jan 2006 12:09:55 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Bill Page writes:
> Jay,
>
> Were you still planning on posting this "petition" on the
> Axiom Wiki website? I think it is fine except for a couple
> of typos and a few suggested changes in wording that I
> point out below.

Thanks for the fixes; I didn't want to post it without any feedback.

> Perhaps Tim Daly might like to comment on some of the
> specific details in your proposed letter?

That'd be good.

> If you need help putting this on the Wiki, just ask.
> I would be very happy to tell you how to do it.

Tonight I'll either post it (if I can figure it out) or ask you for
help (if I can't).

\start
Date: Thu, 19 Jan 2006 07:40:22 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Jay Belanger writes:
...
> Tonight I'll either post it (if I can figure it out) or ask you for
> help (if I can't).

I couldn't get through to the web site last night; I'll try again
later.

\start
Date: Thu, 19 Jan 2006 10:01:07 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

On January 19, 2006 8:40 AM Jay Belanger wrote:
> 
> Jay Belanger writes:
> ...
> > Tonight I'll either post it (if I can figure it out) or ask
> > you for help (if I can't).
> 

I suggest you first create a link such as [Free Aldor] in a
short into paragraph by editing the following page:

http://wiki.axiom-developer.org/AxiomCommunity

> I couldn't get through to the web site last night; I'll try
> again later.
> 

It seems to be working for me now. What do you mean by
"couldn't get through"? Was it a server error? What message
did you receive?

\start
Date: Thu, 19 Jan 2006 11:46:03 -0500
From: Bill Page
To: list
Subject: RE: [Axiom-math] if-then-else: what is wrong?

On January 19, 2006 5:53 AM  Fabio Stumbo wrote:
> 
> I am having some problem with the if-then-else syntax in the
> .input files.
> 
> Problem 1: I refer to the axiom book which ships with the program 
> (version 2005/09). At page 204 it says that the usual rules 
> for piling are suspended in conditional expressions and it gives
> 5 different ways which should be equivalent,
> ...
> Well, I tried all of them, creating each time a blank r.input 
> file with inside only
> 
> i := 2
> 
> followed by one of the "if...".
> 
> The result is that the first two are ok, where as the other 
> three give some syntax error (different each time).
> 
> So: what is happening? Is the book wrong?!?!

Worse than that: **both** :(

You have found bugs in both the documentation and in the
implementation!

There seems to be a bug in the Axiom interpreter that does not
treat the pile syntax correctly when the if statement is the
outer most block. So for example, if you try the third and
fourth cases shown in the Axiom book, but nest them inside
another block like this:

  for i in 2..2 repeat
    if i > 0 then output("positive")
    else output("nonpositive")

  for i in 2..2 repeat
    if i > 0
    then output("positive")
    else output("nonpositive")

the nested if statements are both parsed and executed properly.

But as you reported both of these

  if i > 0 then output("positive")
  else output("nonpositive")

  if i > 0
  then output("positive")
  else output("nonpositive")

given syntax errors when they are the outer most block. There
should be no difference.

On the other hand the last example given in the book:

  if i > 0
    then output("positive")
    else output("nonpositive")

**is wrong** and it is also (correctly) reported as a syntax
error even if we write it nested inside another block:

  for i in 2..2 repeat
    if i > 0
      then output("positive")
      else output("nonpositive")

Further the statement that the "pile syntax is suspended" in the
book is both wrong and misleading. There are no cases in Axiom
when the pile syntax in suspended. I think the author of that part
of the book was confused.

> 
> Problem 2: again with if then else, in a complex function I
> noticed a wrong result (the function itself was ok... ;-)
> Simplifying, you can produce the same error with something like:
> 
> test: (INT,INT) -> List(INT,INT)
> test(a,b) ==
>   x := 0; y := 0
>   if (a rem b = 0) and b < 0 then
>    x := 1 ; y := 1
>   [x,y]
> 
> Then, test(4,-2) returns correctly [1,1], but test(4,-3) or test(4,2) 
> returns wrongly [0,1].

The problem is that you are mixing the two methods of writing blocks.
The use of the ';' separator in pile syntax might be confusing since
it is expected to be used with ( ) to form a block. Your statement:

   if (a rem b = 0) and b < 0 then
     x := 1 ; y := 1

is interpreted by Axiom as if you had written either:

   if (a rem b = 0) and b < 0 then
      x := 1
   y := 1

or

   if (a rem b = 0) and b < 0 then (x := 1;) y := 1

So you should write:

 test: (INT,INT) -> List(INT)
 test(a,b) ==
   x := 0; y := 0
   if (a rem b = 0) and b < 0 then
     x := 1
     y := 1
   [x,y]

-------

Note: List only takes one argument. In Axiom lists are homogeneous
(all elements of the list must be of the same type).

> The same happens if I write
> 
>   if (a rem b = 0) and b < 0 then  x := 1 ; y := 1
> 
> Why?


The correct alternative way to write this would be:

  if (a rem b = 0) and b < 0 then (x := 1 ; y := 1)

If you are not using the pile syntax, then you must group
statements using parenthesis. In the Axiom interpreter these
parentheses are treated the same way as brackets the { } in
some other languages.

> 
> Another small question. Is there a way to obtain on line the 
> syntax of a command in a more extensive way? I mean, for
> example, that writing
>
> (3) -> )di op extendedEuclidean
> 
> I get
> 
> (3) ->
> There are 2 exposed functions called extendedEuclidean :
>     [1] (D,D,D) -> Union(Record(coef1: D,coef2: D),"failed") from D
>              if D has EUCDOM
>     [2] (D,D) -> Record(coef1: D,coef2: D,generator: D) from 
> D if D has
>              EUCDOM
> 
> which is not too useful. Moreover, how can I just ask about, say,
> the second function extendedEuclidean?
> 
> If I wanted to ask about the syntax of if-then-else, I would 
> like to write
> something like
> )? if
> or
> )ap if
> 
> but nothing gives clues on how to use it.
>

I think you should try Axiom's hyperdoc browser. (Unfortunately it
is only currently available in the linux version of Axiom.) Hyperdoc
provides a lot of useful information of this kind for the new Axiom
user.
 
> 
> Thank you for all your help
> 

\start
Date: Thu, 19 Jan 2006 10:34:15 -0800
From: Bob McElrath
To: Bill Page
Subject: Re: Error in Main Page


Bill Page [Bill Page] wrote:
> 
> On January 4, 2006 8:28 PM Alfredo Portes wrote:
> 
> > I wanted to let you know that the link to LatexWiki in
> > the Related sites section of
> > http://wiki.axiom-developer.org/FrontPage
> > is broken.
> 
> Thanks. Actually, I think the link is ok - it's Bob McElrath's web
> site that is broken :( - a temporary situation, I presume.

What's the problem?  It works fine for me...

    http://mcelrath.org/Notes/LatexWiki

\start
Date: Thu, 19 Jan 2006 14:34:54 -0500
From: Bill Page
To: Bob McElrath
Subject: RE: Error in Main Page

Worked fine for me the next day (Jan 5) and is working fine
now. On Jan 4 there was some Zope error which I did not record.
I presumed that you were just in the middle of some change to
the software.

> -----Original Message-----
> From: Bob McElrath [mailto:Bob McElrath] 
> Sent: January 19, 2006 1:34 PM
> To: Bill Page
> Cc: Alfredo Portes; list
> Subject: Re: Error in Main Page
> 
> 
> Bill Page [Bill Page] wrote:
> > 
> > On January 4, 2006 8:28 PM Alfredo Portes wrote:
> > 
> > > I wanted to let you know that the link to LatexWiki in
> > > the Related sites section of
> > > http://wiki.axiom-developer.org/FrontPage
> > > is broken.
> > 
> > Thanks. Actually, I think the link is ok - it's Bob McElrath's web
> > site that is broken :( - a temporary situation, I presume.
> 
> What's the problem?  It works fine for me...
> 
>     http://mcelrath.org/Notes/LatexWiki

\start
Date: Thu, 19 Jan 2006 14:56:49 -0500
From: Bill Page
To: Fabio Stumbo
Subject: RE: FW: [Axiom-math] if-then-else: what is wrong?

On January 19, 2006 1:30 PM Fabio Stumbo wrote:
> 
> >> So: what is happening? Is the book wrong?!?!
> >
> Bill Page wrote:
> >
> > Worse than that: **both** :(
> >
> > You have found bugs in both the documentation and in the
> > implementation!
> 
> WOW! What a luck ;-)

Seriously, I think you have made a good contribution. Axiom
is now open source software and depends on reports of errors
such as yours. Sooner or later someone else will also help to
correct the problem.

> 
> > On the other hand the last example given in the book:
> >
> >  if i > 0
> >    then output("positive")
> >    else output("nonpositive")
> >
> > **is wrong** and it is also (correctly) reported as a syntax
> > error
> 
> Well, from a naif point of view, I can't see clearly, after the 
> documentation, why this is wrong. It doesn't look that bad...

That syntax in "pile" format would be equivalent to

  if i > 0 ( then output("positive"); else output("nonpositive") )

which would correspond to misplaced brackets { } in some other
languages.

> 
> >
> > The problem is that you are mixing the two methods of 
> > writing blocks. The use of the ';' separator in pile
> > syntax might be confusing since it is expected to be
> > used with ( ) to form a block.
> 
> I suspected that the problem was in the ";"  ...
> I didn't realize, reading the manual, that the two methods are
> incompatible: I just thought that ";" could be used like a
> separator for different commands on the same line, like it
> happens in other languages.

I agree but I would not say that they are "incompatible" -
only that the combination produces some unexpected results.
I think the Axiom implementation should probably be changed
to correspond to modern usages such as in Python and other
languages that use indentation.

> ...
> > 
> > I think you should try Axiom's hyperdoc browser. (Unfortunately
> > it is only currently available in the linux version of Axiom.)
> > Hyperdoc provides a lot of useful information of this kind for
> > the new Axiom user.
> >
> 
> Fortunately, I use only linux!
> Anyway, I must say that I never liked the Hyperdoc (moreover, 
> it crashes quite often).

Again, I agree. I also do not use Hyperdoc very much. My experience
is also that it often crashes, although I am not yet able to
document a specific sequence which causes a crash. If we could
report and reproduce such bugs, then it should not be difficult
to correct the problems. But even then, I do not much care for the
"look" of the user interface. There have been much discussion and
some programming work to replace Hyperdoc with a modern web
browser interface, but so far we do not have a good replacement
for Hyperdoc.

> My preferred type of documentation is of more "synthetic" 
> type. From this point of view, I like very much Mathematica 
> help system.

Could you explain more what you mean by "synthetic". Could you
give some examples?

> But this is only personal taste.

I am glad that you mentioned it.

> 
> I say that "I never liked" because I didn't start this month 
> using axiom: I used it extensively in my PhD thesis to compute
> cohomology of Artin groups 10 years ago. It is true, anyway,
> that since then I stopped to use it because I couldn't afford
> its price (where I got my PhD the university had a license, after
> I should have paid myself!)
> 
> Now that it is free, I am converting back to it and this year 
> I am going to use it in my lectures. So, my question about the 
> documentation was from the point of view of my students... ;-))
> 

Excellent! This is exactly the kind of use of Axiom that I think
we need to encourage. I am sure you can expect to receive a lot of
help from the Axiom user group with any problems that you report
here.

Are you aware that there is new tutorial book by Tim Daly about
Axiom that can be purchased through the university book store
(ISBN 141166597X)

http://www.bookfinder4u.com/IsbnSearch.aspx?isbn=141166597X&mode=direct

or direct from the publisher:

http://www.lulu.com/content/190827

I hope that this will encourage the use of Axiom in teaching.

\start
Date: Thu, 19 Jan 2006 14:08:59 -0600
From: MathAction (belanger)
To: MathAction
Subject: [AxiomCommunity] To add a paragraph about FreeAldor.

Aldor Licensing

  Aldor is a language for writing Axiom libraries which was written
to be an improvement to SPAD.  While the Aldor compiler is generously 
licensed, it is not free or open source and so it cannot be a standard
part of Axiom.  There is a possibility that the Aldor compiler may 
become free software.  To show that there is a community of people
interested in a freely licensed Aldor compiler, consider signing the 
[FreeAldor] petition.

\start
Date: Thu, 19 Jan 2006 14:17:36 -0600
From: MathAction (belanger)
To: MathAction
Subject: [FreeAldor] (new) 

  Axiom is a sophisticated computer algebra system originally developed
as an IBM research project.  IBM sold Axiom to the Numerical
Algorithms Group (NAG) who marketed it and continued its development.
After NAG discontinued Axiom as a commercial product they generously
released part of the Axiom source code under a free license.  Axiom is
now very usable and is currently being actively developed by an
enthusiastic community. It is expected to be useful in research and
education for quite some time.

  The language used for writing Axiom libraries is called SPAD (short
for Scratchpad, the original name of Axiom).  While Axiom was still
being developed by IBM, an improved language, Aldor, was created for
writing Axiom libraries.  While the Aldor compiler was originally part
of the Axiom system, it became a separate project when NAG
discontinued the sale of Axiom as a commercial product.  The Aldor
compiler was not part of Axiom when the Axiom sources were relicensed,
and so is not currently included with Axiom.

  Binaries for Aldor have been made freely available and the sources are
available under a generous license.  However, the license does not
qualify as a free or open source license.  While Axiom can still make
use of Aldor as a library compiler (on those platforms where a
suitable binary version is available), the lack of a free license for
Aldor prohibits it from being a standard part of the Axiom open source
distribution, and so nothing in the base Axiom system can depend on
Aldor.

  A free license for Aldor would allow it to become a standard part of
Axiom, which would improve Axiom and make Aldor a more widespread
language.  A free license available as soon as possible would allow
current development on Axiom to use Aldor.
 
  We, the undersigned, respectfully request that the Aldor compiler be
released under a free license at the earliest opportunity.
 
\start
Date: Thu, 19 Jan 2006 14:22:39 -0600
From: Jay Belanger
To: Bill Page
Subject: Re: Aldor?

Bill Page writes:
...
> I suggest you first create a link such as [Free Aldor] in a
> short into paragraph by editing the following page:
>
> http://wiki.axiom-developer.org/AxiomCommunity

Okay; that's done, and there's a FreeAldor page.
You previously wrote
> The Axiom website is a wiki (user editable), so it would be very
> easy to add a page consisting of the petition to Free Aldor. We
> could freeze the text and then readers could "sign" it by simply
> adding a comment.
I'm not sure how to freeze text; perhaps it needs to be done by an
administrator. 

>> I couldn't get through to the web site last night; I'll try
>> again later.
>>
>
> It seems to be working for me now. What do you mean by
> "couldn't get through"? Was it a server error? What message
> did you receive?

It wasn't a server error and there wasn't an error message.
My browser simply kept trying without success.  (I use Firefox; the
wheel thing in the tab kept spinning, indicating it was trying.)
It's working fine now; it was probably a problem with the local
network here.

\start
Date: Thu, 19 Jan 2006 12:45:13 -0800
From: Bob McElrath
To: Bill Page
Subject: Re: Error in Main Page

Oh yes, I didn't realize that message was old.

I had some trouble with my server over the holidays when I was across
the country and away from a computer... :(  But, all should be fixed
now.

Bill Page [Bill Page] wrote:
> Worked fine for me the next day (Jan 5) and is working fine
> now. On Jan 4 there was some Zope error which I did not record.
> I presumed that you were just in the middle of some change to
> the software.
> 
> > -----Original Message-----
> > From: Bob McElrath [mailto:Bob McElrath] 
> > Sent: January 19, 2006 1:34 PM
> > To: Bill Page
> > Cc: Alfredo Portes; list
> > Subject: Re: Error in Main Page
> > 
> > 
> > Bill Page [Bill Page] wrote:
> > > 
> > > On January 4, 2006 8:28 PM Alfredo Portes wrote:
> > > 
> > > > I wanted to let you know that the link to LatexWiki in
> > > > the Related sites section of
> > > > http://wiki.axiom-developer.org/FrontPage
> > > > is broken.
> > > 
> > > Thanks. Actually, I think the link is ok - it's Bob McElrath's web
> > > site that is broken :( - a temporary situation, I presume.
> > 
> > What's the problem?  It works fine for me...
> > 
> >     http://mcelrath.org/Notes/LatexWiki

\start
Date: Thu, 19 Jan 2006 16:41:18 -0800 (PST)
From: Cliff Yapp
To: Jay Belanger, Bill Page
Subject: Re: Aldor?

--- Jay Belanger wrote:

> Okay; that's done, and there's a FreeAldor page.

Added my name (forgot to sign in though - opps).

> It wasn't a server error and there wasn't an error message.
> My browser simply kept trying without success.  (I use
> Firefox; the wheel thing in the tab kept spinning, indicating
> it was trying.) It's working fine now; it was probably a 
> problem with the local network here.

I had the same issue earlier today, Internet Explorer. (Yeah, yeah -
work computer.  They don't let us use Firefox here.)

P.S. - Thanks Jay for taking the time to do this.

\start
Date: Thu, 19 Jan 2006 19:43:04 -0600
From: MathAction (doyen)
To: MathAction
Subject: [DoyenTest] (new) 

\begin{axiom}
 x:CFLOAT:=1.0
 y:CFLOAT:=3.0
 z:CFLOAT:=x/y
\end{axiom}

\start
Date: Thu, 19 Jan 2006 19:45:11 -0600
From: MathAction (doyen)
To: MathAction
Subject: [DoyenTest] 

\documentclass{article}
\usepackage{axiom}
\usepackage{graphics}
\begin{document}
\title{Doyen Build Instructions}
\author{Tim Daly, Jose Alfredo Perez,  Wilken Rivera}
\maketitle
\begin{abstract}

This document shows the explicit steps necessary to create a Doyen LiveCD from Red Hat's Fedora Core 3 distribution. The Doyen CD is a scientific platform which can be distributed at various science conferences. It enables scientific software to be distributed as literate programs. The Doyen CD has a local wiki and a set of scientific packages which can be scripted from the wiki pages. The scientific packages can be tailor to the specific conference.

\end{abstract}

\section{Prepare a clean Fedora Core 3 System}
\subsection{Overview}

\begin{itemize}

\item Obtain Fedora Core 3 iso images from the Fedora Website. 
\item Disk 1 and Disk 2 should be enough for a basic installation. 
\item Create installation CDs from the iso images downloaded.
\item Boot up you system with the installation disk 1 to begin the Fedora
installation process.

\end{itemize}

In the first screen, you will be presesented with some boot options. Press Enter to continue.

\subsection{CD Media test}

For the option to test the media CD before installation, select skip. Once the welcome screen comes up, proceed to click next.

\subsection{Language Selection}

In the language selection, select your prefered language and click next.

\subsection{Keyboard Configuration}

In the keyboard configuration, select your keyboard configuration.

\subsubsection{Special Case}

At this point depending if your system is not clean, an upgrade examine window will appear. Please select {\em "Install Fedora Core"}.

\subsection{Installation Type}

In the installation type window, select {\em "Custom"}.

\subsection{Disk Partioning Setup}

In the Disk Partioning Setup, select Manually partition with Disk Druid.

\subsection{Disk Setup}

For our base distribution, only three partitions should be created. A boot partition of 100 MB, a swap space generally the double of your amount of RAM, and a root partition which size depends on the programs to be installed in the system.

\subsubsection{Boot Partition}

In the Disk setup, select new. In mount point select /boot. File system type ext3. Size 100 MB. 

\subsubsection{Swap Partition}

Create a swap partition. Select new. Select file system type swap, and size 512 MB.

\subsubsection{Root Partition}

Select new. Select mount point /. Select the file system type to be: ext3. Select "Fill to maximum allowable size" or the size you would like for the root partition. 2GB should be enough. Click Ok. Click Next to finish with the Disk Setup menu.

\subsection{Boot Loader Configuration}

Preserve the default boot loader configuration.

\subsection{Network Configuration}

Preserve the DHCP option for the eth0 by default. For the hostname, select manually and in the text box type doyen.

\subsection{Firewall Configuration}

Select enable firewall and select Remote Login (SSH) and Web Server(HTTP, HTTPS). Also, select disable for SELinux.

\subsection{Additional Language Support}

Select your prefer language.

\subsection{Time Zone Selection}

Select your time zone location.

\subsection{Set Root Password}

Select the desire password for the root account. In Doyen Live CD the default password is doyen@org.

\subsection{Package Group Selection}

\begin{itemize}

\item Select default selections for X Window System section and the Gnome section.

\item In the editors section, select Emacs and Vim-Enhanced.

\item Select Graphical Internet and remove all packages except Firefox.

\item Select and remove all packages in text-based internet.

\item Remove all Office/Productivity packages.

\item In the Sound and video packages remove everything except cdrecord and mkisofs packages.

\item Remove all packages in the Graphics section.

\item Leave all the other sections unchanged and click next.

\end{itemize}

Click next to begin installation. Follow the proper prompts when asked to insert other media CDs. When the installation is complete, remove the CD and reboot your computer.

\subsection{Finishing System Installation}

\subsubsection{Welcome}

At the new Welcome screen, click next.

\subsubsection{License Agreement}

Proceed to accept the license agreement. Click next.

\subsubsection{Date and Time}

Set the proper date and time. Click next.

\subsubsection{Display}

In Display configuration, click configure and select "Generic CRT Display" with 1024x768 resolution and color depth of Millions of colors. Click next.

\subsubsection{System User}

For the System User options, provide this information:

\begin{itemize}

\item Username: doyen.
\item Full name: Doyen user.
\item Password: doyen@org.
\item Confirm Password: doyen@org.

\end{itemize}

\subsubsection{Sound Card}

You can skip the sound card testing and click next.

\subsubsection{Additional CDs}

Leave this section unchanged and click next.

\subsection{Finish Setup}

Click next to complete the installation.

\subsubsection{Login Screen}

Login as root user.

\subsubsection{Services Configuration}

You need to disable unwanted system services from autoloading.

\begin{verbatim}
Click on Applications -->  System Settings --> Server Settings --> Services
\end{verbatim}

Uncheck all except: 

\begin{itemize}
\item acpid
\item anacron 
\item apmd
\item atd
\item autofs
\item crond
\item gpm
\item hadaemon
\item httpd
\item iptables
\item netfs
\item netplugd
\item network
\item pcmcia
\item sshd
\item syslog
\item xinetd
\end{itemize}

Click save and close the window.

\section{Customizing Live CD}
\subsection{Software Installation}

The package installation for the Doyen distribution are done by using Yum and Wget to obtain all the required rpm files from various locations.
[471 more lines...]

\start
Date: Thu, 19 Jan 2006 19:45:59 -0600
From: MathAction (doyen)
To: MathAction
Subject: [DoyenTest] 

\section{theory}
This is the theory of CachedFloats which will do infinite precision
floating point computation with post-facto expansions.

\section{implementation}
\section{examples}
\begin{axiom}
 x:CFLOAT:=1.0
 y:CFLOAT:=3.0
 z:CFLOAT:=x/y
\end{axiom}

\start
Date: Thu, 19 Jan 2006 19:48:13 -0600
From: MathAction (doyen)
To: MathAction
Subject: [DoyenTest] 

++added:
\documentclass{article}
\usepackage{axiom}
\usepackage{graphics}

\title{Doyen Build Instructions}
\author{Tim Daly, Jose Alfredo Perez,  Wilken Rivera}
\maketitle
\begin{abstract}

This document shows the explicit steps necessary to create a Doyen
LiveCD from Red Hat's Fedora Core 3 distribution. The Doyen CD is a
scientific platform which can be distributed at various science
conferences. It enables scientific software to be distributed as
literate programs. The Doyen CD has a local wiki and a set of
scientific packages which can be scripted from the wiki pages. The
scientific packages can be tailor to the specific conference.

\end{abstract}


\section{Prepare a clean Fedora Core 3 System}
\subsection{Overview}

\begin{itemize}

\item Obtain Fedora Core 3 iso images from the Fedora Website. 
\item Disk 1 and Disk 2 should be enough for a basic installation. 
\item Create installation CDs from the iso images downloaded.
\item Boot up you system with the installation disk 1 to begin the Fedora
installation process.

\end{itemize}

In the first screen, you will be presesented with some boot options. Press Enter to continue.

\subsection{CD Media test}

For the option to test the media CD before installation, select skip. Once the welcome screen comes up, proceed to click next.

\subsection{Language Selection}

In the language selection, select your prefered language and click next.

\subsection{Keyboard Configuration}

In the keyboard configuration, select your keyboard configuration.

\subsubsection{Special Case}

At this point depending if your system is not clean, an upgrade examine window will appear. Please select {\em "Install Fedora Core"}.

\subsection{Installation Type}

In the installation type window, select {\em "Custom"}.

\subsection{Disk Partioning Setup}

In the Disk Partioning Setup, select Manually partition with Disk Druid.

\subsection{Disk Setup}

For our base distribution, only three partitions should be created. A boot partition of 100 MB, a swap space generally the double of your amount of RAM, and a root partition which size depends on the programs to be installed in the system.

\subsubsection{Boot Partition}

In the Disk setup, select new. In mount point select /boot. File system type ext3. Size 100 MB. 

\subsubsection{Swap Partition}

Create a swap partition. Select new. Select file system type swap, and size 512 MB.

\subsubsection{Root Partition}

Select new. Select mount point /. Select the file system type to be: ext3. Select "Fill to maximum allowable size" or the size you would like for the root partition. 2GB should be enough. Click Ok. Click Next to finish with the Disk Setup menu.

\subsection{Boot Loader Configuration}

Preserve the default boot loader configuration.

\subsection{Network Configuration}

Preserve the DHCP option for the eth0 by default. For the hostname, select manually and in the text box type doyen.

\subsection{Firewall Configuration}

Select enable firewall and select Remote Login (SSH) and Web Server(HTTP, HTTPS). Also, select disable for SELinux.

\subsection{Additional Language Support}

Select your prefer language.

\subsection{Time Zone Selection}

Select your time zone location.

\subsection{Set Root Password}

Select the desire password for the root account. In Doyen Live CD the default password is doyen@org.

\subsection{Package Group Selection}

\begin{itemize}

\item Select default selections for X Window System section and the Gnome section.

\item In the editors section, select Emacs and Vim-Enhanced.

\item Select Graphical Internet and remove all packages except Firefox.

\item Select and remove all packages in text-based internet.

\item Remove all Office/Productivity packages.

\item In the Sound and video packages remove everything except cdrecord and mkisofs packages.

\item Remove all packages in the Graphics section.

\item Leave all the other sections unchanged and click next.

\end{itemize}

Click next to begin installation. Follow the proper prompts when asked to insert other media CDs. When the installation is complete, remove the CD and reboot your computer.

\subsection{Finishing System Installation}

\subsubsection{Welcome}

At the new Welcome screen, click next.

\subsubsection{License Agreement}

Proceed to accept the license agreement. Click next.

\subsubsection{Date and Time}

Set the proper date and time. Click next.

\subsubsection{Display}

In Display configuration, click configure and select "Generic CRT Display" with 1024x768 resolution and color depth of Millions of colors. Click next.

\subsubsection{System User}

For the System User options, provide this information:

\begin{itemize}

\item Username: doyen.
\item Full name: Doyen user.
\item Password: doyen@org.
\item Confirm Password: doyen@org.

\end{itemize}

\subsubsection{Sound Card}

You can skip the sound card testing and click next.

\subsubsection{Additional CDs}

Leave this section unchanged and click next.

\subsection{Finish Setup}

Click next to complete the installation.

\subsubsection{Login Screen}

Login as root user.

\subsubsection{Services Configuration}

You need to disable unwanted system services from autoloading.

\begin{verbatim}
Click on Applications -->  System Settings --> Server Settings --> Services
\end{verbatim}

Uncheck all except: 

\begin{itemize}
\item acpid
\item anacron 
\item apmd
\item atd
\item autofs
\item crond
\item gpm
\item hadaemon
\item httpd
\item iptables
\item netfs
\item netplugd
\item network
\item pcmcia
\item sshd
\item syslog
\item xinetd
\end{itemize}

Click save and close the window.

\section{Customizing Live CD}
\subsection{Software Installation}

The package installation for the Doyen distribution are done by using Yum and Wget to obtain all the required rpm files from various locations.
The next step configures a file required for yum to search and install packages. Do not skip this step.
Open a terminal window.

<<step>>=

rpm --import /usr/share/rhn/RPM-GPG-KEY-fedora

@

\subsubsection{Latex}

To install the Latex software package you need to use yum and install tetex, tetex-latex, and tetex-xdvi packages.
[457 more lines...]

\start
Date: Thu, 19 Jan 2006 19:51:15 -0600
From: MathAction (doyen)
To: MathAction
Subject: [DoyenTest] 

Changes http://wiki.axiom-developer.org/DoyenTest/diff
--

??changed:
-\documentclass{article}
\documentclass{article}% ===> this file was generated automatically by noweave --- better not edit it

--removed:
-
-\begin{axiom}
- x:CFLOAT:=1.0
- y:CFLOAT:=3.0
- z:CFLOAT:=x/y
-\end{axiom}

??changed:
-<<step>>=
\nwfilename{steps.pamphlet}\nwbegincode{1}\moddef{step}\endmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{2}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{3}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{4}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{5}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{6}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{7}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{8}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{9}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{10}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{11}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{12}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{13}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{14}\nwdocspar

??changed:
-<<edit>>=
\nwenddocs{}\nwbegincode{15}\moddef{edit}\endmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{16}\nwdocspar

??changed:
-<<edit>>=
\nwenddocs{}\nwbegincode{17}\moddef{edit}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{18}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{19}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{20}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{21}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{22}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{23}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{24}\nwdocspar

??changed:
-<<edit>>=
\nwenddocs{}\nwbegincode{25}\moddef{edit}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{26}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{27}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

??changed:
-@
\nwendcode{}\nwbegindocs{28}\nwdocspar

??changed:
-<<step>>=
\nwenddocs{}\nwbegincode{29}\moddef{step}\plusendmoddef\nwstartdeflinemarkup\nwenddeflinemarkup

\start
Date: Thu, 19 Jan 2006 21:20:34 -0500
From: Bill Page
To: Jay Belanger
Subject: RE: Aldor?

On January 19, 2006 3:23 PM Jay Belanger wrote:
> 
> Bill Page previously wrote:
> > The Axiom website is a wiki (user editable), so it would be very
> > easy to add a page consisting of the petition to Free Aldor. We
> > could freeze the text and then readers could "sign" it by simply
> > adding a comment.
> I'm not sure how to freeze text; perhaps it needs to be done by an
> administrator. 
>

Yes. To do this you have to have Zope administrator access. By
default anyone can edit a wiki page, but it is possible to set
security options so that only someone logged in as administrator
can do this. I have changed the page you created so that it is now
protected.
 
> >> I couldn't get through to the web site last night; I'll try
> >> again later.
> >
> > It seems to be working for me now. What do you mean by
> > "couldn't get through"? Was it a server error? What message
> > did you receive?
> 
> It wasn't a server error and there wasn't an error message.
> My browser simply kept trying without success.  (I use Firefox; the
> wheel thing in the tab kept spinning, indicating it was trying.)
> It's working fine now; it was probably a problem with the local
> network here.
> 

I think it may be subtle problem with the Zope software. Ever since
we moved to the new hardware and also changed to using zeo for
database access, occassionally the Zope server seems to go into a
mode where it is using 99.9% of the processor and doing very little
real work. I am not sure of the exact cause, however I know that
if I stop and re-start both the zeo and zope server processes the
problem goes away. Right now I have set both of these servers to
automatically restart at about midnight CST every night so that if
the server is hung for some reason, then at least it should be ok
the next day without my intervention.

There have been some reports of problems like this related to the
older version of Python 2.3 that we are still using for MathAction.
In fact we are now more than a year behind the current versions of
both Python, Zope and ZWiki. I think I must plan seriously to upgrade
the software to the newer versions real soon.

Please let me know if this happens again.

\start
Date: Thu, 19 Jan 2006 19:41:16 -0800 (PST)
From: Cliff Yapp
To: list
Subject: GUI paper worth reading

Anybody know Neil Soiffer?  It looks like he did a degree at UC
Berkeley, and then went on to work for Wolfram.  He is currently (I
think) Senior Scientist Design Science, Inc.  His thesis looks like it
might very well be the perfect starting point for a literate
programming GUI pamphlet (needs a fair bit of updating of course, but
he seems to have covered a good many of the basics we would need.) 
There is a PDF (unfortunately images only) located here:

http://sunsite.berkeley.edu/TechRepPages/CSD-91-626

Apparently he has copyright (how does this work at Berkeley?) so if he
is so inclined he might be able to release it to us.  Of course its
still valuable as a reference either way, but it sure would be easier
building off if it than starting from scratch and referring to it. 
Does anybody know him?

I suppose in once sense it might be better to start from square one -
just as with the Units paper, there is a large amount of territory
which should be covered before we have the knowledge of what the "best"
ideas for a GUI are.  His thesis is 259 pages - I suspect in the end
(particularly with source code) we will be over a thousand in order to
define a really good GUI both as a research project and a functional
interface.  The advantage (particularly if we do it in lisp and design
with an eye for flexibility) is that the same core code could serve a
wide variety of interfaces - for example, running as a server effective
line breaking code could generate (in theory anyway) MathML which was
line broken for display in a browser, given the browser is kind enough
to report its dimensions and resizing events.

The old symbolicnet site has stashed away on it a bibtex file
containing a fairly large collection of computer algebra GUI
references.  It needs some retooling I expect (I assume the various
"portal" sites can provide more fleashed out entries for the individual
references, for example) and unfortunately neither of the original
authors has responded to my requests for licensing status info, but it
will at least be an excellent guide.

http://hpc.cs.tsinghua.edu.cn/symbolicnet/areas/interfaces/bibtex.bib

\start
Date: Fri, 20 Jan 2006 18:19:03 -0500
From: Tim Daly
To: list
Subject: gui/axiom research question

perhaps this is a good "summer of code" problem

Reading Soiffer's PhD thesis (The Design of a User Interface for
Computer Algebra Systems) raises an interesting research question.

assume you're given a standard page size (8 1/2 x 11, A4, display size)
and you have an equation to format in some understandable way 
how can you format the equation to fit on one page.

the underlying "assumption" is that equations longer than one page are
unreadable and useless.

we allow a variety of techniques:

* line breaks when the equation hits the edge

* common subexpression elimination when it can occur
    
    R = (x+y) * (z+(x*y)) ==>

    let M = (x+y)
        R = M * (z+M)

    so that you can "name" common subexpressions and lift them

* function reification

    "name" a subexpression that requires a parameter, 
    lift it out, and substitute a parameterized term.
    in a tree or DAG representation this is node-naming

* term reification
    
    "name" a term, lift it out, and substitute
    in a tree or DAG representation this is node-naming

* term summarization
    
    replacing a (reordered) subset of the terms by a summation

* eliding leading, trailing, or middle terms 


     term + term + ... + term

* linearizing terms

    terms, such as fractions, can be rewritten in linear form to 
    save lines

* constant naming

    long constants replaced by short names:


     R = 3.77612876767 * foo ==>

     let M = 3.77612876767
         R = M * foo

* pattern naming

    turn 2D template structures (powers/ratios/matricies/polys) into
    "named" template structures and substitute

    +-   -+   +-   -+ 
    | 1 2 |   | 5 6 |
    |     | * |     |
    | 3 4 |   | 7 8 |
    +-   -+   +-   -+

    turns into 

    A = Matrix((1 2) (3 4))
    B = Matrix((5 6) (7 8))
    MatrixProduct(A,B)  

* operator names for all template structures and linear versions

* "outer structure" recognition

   is it fundamentally a matrix? a polynomial? an integral?
   the layout techniques could differ based on the outer structure

* "inner structure" eliding

   clip out "heavy" element in a matrix so it does not cause
   wide columns

* *depth*, *width*, *height* maximums as parameters


ultimately i think this boils down to a question of embedding a
tree or a DAG into a planar graph. or perhaps this is an extension
of the TeX layout algorithm with each weights assigned to the boxes?
compute the weight (area?) of a node in the tree or DAG and do some
sort of weight-reduction?

\start
Date: Fri, 20 Jan 2006 18:57:50 -0500
From: Alfredo Portes
To: Bill Page
Subject: Doyen

Hi Bill,

I am having a little problem with the pamphlets and the latex wiki. I get
this error:

noweb: cd '/var/zope/var/LatexWiki/Doyen';
/usr/local/axiom/mnt/linux/bin/lib/noweave -delay 'LatexWiki.pamphlet' > '
LatexWiki.tex'
/usr/local/axiom/mnt/linux/bin/lib/noweave: line 268:
/root/axiom--main--1--patch-30/mnt/fedora3/bin/lib/markup: Permission denie=
d
/usr/local/axiom/mnt/linux/bin/lib/noweave: line 291:
/root/axiom--main--1--patch-30/mnt/fedora3/bin/lib/totex: Permission denied

Looking into the noweave file I see this line:

line 5: LIB=/root/axiom--main--1--patch-30/mnt/fedora3/bin/lib

I guess my axiom installation does not have this. Is that a patch that I am
missing? If it is, is that the full path?

Thank you,

Jose Alfredo Perez

\start
Date: Fri, 20 Jan 2006 19:24:53 -0800 (PST)
From: Cliff Yapp
To: Tim Daly
Subject: Re: gui/axiom research question

--- Tim Daly wrote:

> perhaps this is a good "summer of code" problem
> 
> Reading Soiffer's PhD thesis (The Design of a User Interface 
> for Computer Algebra Systems) raises an interesting research
> question.
> 
> assume you're given a standard page size (8 1/2 x 11, A4, 
> display size) and you have an equation to format in some
> understandable way  how can you format the equation to fit
> on one page.

That's probably the major remaining question for formatting mathematics
:-).
 
> the underlying "assumption" is that equations longer than one\
> page are unreadable and useless.

Not necessarily.  I think we can treat the "vertical" direction as a
series of lines of varying heights, and come up with some reasonable
algorithms to handle most cases.  There are obviously some corner cases
where nothing will make it look good, but in most cases I think
multi-page is probably not as hard as the "line breaking" problem.
 
> we allow a variety of techniques:
> 
> * line breaks when the equation hits the edge

Right - that's the first trigger that any sort of line breaking is
needed.

> * common subexpression elimination when it can occur
>     
>     R = (x+y) * (z+(x*y)) ==>
> 
>     let M = (x+y)
>         R = M * (z+M)
> 
>     so that you can "name" common subexpressions and lift them

Does anyone use this?

> * function reification
> 
>     "name" a subexpression that requires a parameter, 
>     lift it out, and substitute a parameterized term.
>     in a tree or DAG representation this is node-naming
> 
> * term reification
>     
>     "name" a term, lift it out, and substitute
>     in a tree or DAG representation this is node-naming

I think these are less common in practice but I like them as an option
- it can sometimes help reveal "high level structure" in a busy
expression.

> * term summarization
>     
>     replacing a (reordered) subset of the terms by a summation
> 
> * eliding leading, trailing, or middle terms 
> 
>      term + term + ... + term

I'll have to think about these...
 
> * linearizing terms
> 
>     terms, such as fractions, can be rewritten in linear
>     form to save lines

This is of course the ultimate fallback - linearize the equation and
use normal text linebreaking equations.

> * constant naming
> 
>     long constants replaced by short names:
> 
> 
>      R = 3.77612876767 * foo ==>
> 
>      let M = 3.77612876767
>          R = M * foo

Isn't that a special case of term naming?

> * pattern naming
> 
>     turn 2D template structures (powers/ratios/matricies/polys) into
>     "named" template structures and substitute
> 
>     +-   -+   +-   -+ 
>     | 1 2 |   | 5 6 |
>     |     | * |     |
>     | 3 4 |   | 7 8 |
>     +-   -+   +-   -+
> 
>     turns into 
> 
>     A = Matrix((1 2) (3 4))
>     B = Matrix((5 6) (7 8))
>     MatrixProduct(A,B)  

Another case of term naming, although with the twist that * needs to be
identified as MatrixProduct if the terms are no longer "visually"
matricies.

> * operator names for all template structures and linear 
> versions

Sort of a "temporary function" definition?

> * "outer structure" recognition
> 
>    is it fundamentally a matrix? a polynomial? an integral?
>    the layout techniques could differ based on the outer
>    structure

Do you mean "identify the top level mathematical operators?"  An
expression could be a sum and yet have one of the terms be determinent
of a large matrix (large meaning larger than page width, in this case).
 I think reasonable rulesets can be devised, and I hope as I work my
way through this thesis it will help align my thinking :-).

> * "inner structure" eliding
> 
>    clip out "heavy" element in a matrix so it does not cause
>    wide columns

Hmm.  Not sure how that could be handled.
 
> * *depth*, *width*, *height* maximums as parameters

Those are ultimately constrained by the page, with page width being an
absolute limit and page height being infinite but requiring breaking
over pages.  Not sure what depth would refer to.

> ultimately i think this boils down to a question of embedding a
> tree or a DAG into a planar graph. or perhaps this is an
> extension of the TeX layout algorithm with each weights 
> assigned to the boxes?

I tend to regard it as somewhere inbetween - boxes are the virtually
universal metaphor for algorithm description in this situation, but
things like strict super and subscript rules tend to make it a little
more complex than a normal tree or DAG (unless I'm thinking about those
terms incorrectly).

> compute the weight (area?) of a node in the tree or DAG
> and do some sort of weight-reduction?

I think it depends a lot on the situation and the mathematics involved.
 Take, for example, a large nxn matrix larger than both page width and
height (let's say for the sake of argument it contains only integers
from 0-9, or more correctly that each element is already atomic in
size. It could only be displayed in the confines of a page/book
environment by either hiding some part of the matrix, or something like
the following:

Page 1

    1   2   3   4   5 
   -------------------
1 | 1   2   3   4   5  .
2 | 1   2   3   4   5  .
3 | 1   2   3   4   5  .
4 | 1   2   3   4   5  .
5 | 1   2   3   4   5  .
6 | 1   2   3   4   5  .
7 | 1   2   3   4   5  .
    - - - - - - - - - 

Page 2

    6   7   8   9   10  
   -------------------
1 | 1   2   3   4   5  .
2 | 1   2   3   4   5  .
3 | 1   2   3   4   5  .
4 | 1   2   3   4   5  .
5 | 1   2   3   4   5  .
6 | 1   2   3   4   5  .
7 | 1   2   3   4   5  .
  - - - - - - - - - - -

Page 3

     1   2   3   4   5 
     - - - - - - - - - - 
 8 | 1   2   3   4   5  .
 9 | 1   2   3   4   5  .
10 | 1   2   3   4   5  .
11 | 1   2   3   4   5  .
12 | 1   2   3   4   5  .
13 | 1   2   3   4   5  .
14 | 1   2   3   4   5  .
    --------------------

Page 4

     6   7   8   9   10 
     - - - - - - - - - - 
 8 . 1   2   3   4   5  |
 9 . 1   2   3   4   5  |
10 . 1   2   3   4   5  |
11 . 1   2   3   4   5  |
12 . 1   2   3   4   5  |
13 . 1   2   3   4   5  |
14 . 1   2   3   4   5  |
    --------------------

It's arguable whether or not that would be useful, but it would
preserve both information concerning the location of all elements in
the matrix and the complete set of matrix data.  Of course, there are
even more interesting limit cases, such as what happens if one or more
columns or rows is excessively large, there is a situation where a
single column would occupy a page, the column numbers get so large they
widen the column width unreasonably, the row numbers get so large they
require a large fraction of the page area, etc.  I think, in those
situations, the response must be to collapse back to the 1-D ASCII
display, perhaps with some helpful formatting for each element (would
need to think about that one.)

That suggests a general mechanism that had already occurred to me - try
every graphical trick defined to fit a formatted expression onto the
page(s), and if all else fails use the 1-D expression which will always
work.  As more techniques and styles are included the need to fall back
to 1-D will hopefully become rare, but that way the system never hits a
case where it can't produce at least some kind of document.

I don't know if that fits into the DAG/Tree scheme or not - I suppose
it might and I'm just not seeing it.  Fascinating stuff - it's too bad
there's no longer any way to get funding for this kind of work :-). 
Still, even without it a literate pamphlet which systematically
discusses and implements all of this would be a lot of fun.  AFAICT
research on this sort of dried up in the early to mid 1990s, with the
commercial GUIs making polishing and incremental improvements.  (Which
are nice, don't get me wrong...)  Subsequent efforts seem to be focused
on web based technologies and techniques.  I'm afraid I don't quite see
the point of that, since to my mind a web interface is just another
instance of a mathematical interface that happens to be rather
constrained, and its merely a question of what techniques are available
(or maybe technologies in web browsers) to implement general GUI ideas.
 I think that's probably an injustice, since I've never really liked
the idea of web applications in the first place.  Those papers deserve
study, but I think a good LOCAL GUI should come first, with the
interface logic defined in such a way that it is easy to plate on any
given toolkit or graphical environment.  Call it "server side
intelligent formatting", I guess.

Anyway, more reading to do.  I won't plunge into this in a big way for
a while (I've still got a units package to do, after all) and I think
we will find that the first step will be to implement the ideas of TeX
and maybe lout in Lisp (cl-typesetting may be a good platform to use if
we can convince the author to release it under a garden variety
Modified BSD license) and build off of that logic to implement
automated display algorithms for confined 2D formatting.  Knuth knew
about this problem but didn't propose to solve it in TeX, preferring to
leave it to the author to decide how to handle a particular situation. 
We don't have that luxury unfortunately, and although an override
mechanism is a good idea to provide as a "last resort" sort of thing
for the most part we will have to implement the best available
solutions, whatever they may be.

My current thought is to take TeX - the Program and the lout design
documentation, make a coherent design from those and turn
cl-typesetting (if the license is cleared up) into a high powered Lisp
Typesetter.  Possibly we would want to also implement the ability to
render TeX documents, in order to have a UI which uses our Pamphlet
format as it's native file format for notebooks :-).  Then implement
the 2D layout algorithms.  After that, proceed to define other
interface logic and the connections to Axiom.

A lot of work, but as someone said once "nothing worth doing is easy."

\start
Date: Fri, 20 Jan 2006 22:26:18 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Doyen

Alfredo,

On January 20, 2006 6:58 PM you wrote:

> I am having a little problem with the pamphlets and the
> latex wiki. I get this error:
>
> noweb: cd '/var/zope/var/LatexWiki/Doyen';
/usr/local/axiom/mnt/linux/bin/lib/noweave
> -delay 'LatexWiki.pamphlet' > ' LatexWiki.tex'
> /usr/local/axiom/mnt/linux/bin/lib/noweave: line 268:
>  /root/axiom--main--1--patch-30/mnt/fedora3/bin/lib/markup: Permission
denied
> /usr/local/axiom/mnt/linux/bin/lib/noweave: line 291:
>  /root/axiom--main--1--patch-30/mnt/fedora3/bin/lib/totex: Permission
denied 
>
> Looking into the noweave file I see this line:
>
> line 5: LIB=/root/axiom--main--1--patch-30/mnt/fedora3/bin/lib
>
> I guess my axiom installation does not have this.
> Is that a patch that I am missing? If it is, is that the
> full path?

This variable in 'noweave' should be pointing to the location
where noweb was installed as part of the Axiom build. My guess
is that

  /root/axiom--main--1--patch-30

is (or at least was at one time) the root of your Axiom source
directory. I don't think that this is a missing patch. It might
just be that Axiom was at patch-30 when the directory was first
created by the 'tla' command. I presume that your source version
of Axiom has been updated since patch-30 since we are now at
about patch-43, I think.

Probably you moved or copied the Axiom binaries to

  /usr/local/axiom

(Maybe this was done as part of the Axiom 'make install'?)

Or is the version of Axiom you are running obtained from one of
the binary distributions? In that case maybe there is an error in
the noweave LIB variable of that distribution.

In any case, in order to use 'noweave' in it's present location
you will also have to change this variable. My guess is that it
should be:

  LIB=/usr/local/axiom/bin/lib

'noweave' must be able to access the files named 'markup' and
'totex' which would normally be located in the same directory.

\start
Date: Fri, 20 Jan 2006 22:09:11 -0600
From: MathAction (daly)
To: MathAction
Subject: [Summer of Code] add a project

Changes http://wiki.axiom-developer.org/SummerOfCode/diff
--

<p> Mathematica has a free 'reader' program which is designed to
  show their notebooks. The format for the reader is standard ascii.
  We could develop an Axiom output format that would allow us to 
  create notebooks from Axiom taking advantage of the features of
  the Mathematics notebook.

<li>V. RESEARCH PROBLEMS<br>

<p> Reading Soiffer's PhD thesis (The Design of a User Interface for
Computer Algebra Systems) raises an interesting research question.

<p>Assume you're given a standard page size (8 1/2 x 11, A4, display size)
and you have an equation to format in some understandable way 
how can you format the equation to fit on one page.

<p> The underlying "assumption" is that equations longer than one page are
unreadable and useless.

<p>There are a variety of techniques:
<ul>
<li> line breaks when the equation hits the edge
<li>common subexpression elimination when it can occur
<pre>
    
    R = (x+y) * (z+(x*y)) ==>

    let M = (x+y)
        R = M * (z+M)

    so that you can "name" common subexpressions and lift them
</pre>
<li>function reification
<pre>

    "name" a subexpression that requires a parameter, 
    lift it out, and substitute a parameterized term.
    in a tree or DAG representation this is node-naming

</pre>
<li>term reification
<pre>
   
    "name" a term, lift it out, and substitute
    in a tree or DAG representation this is node-naming

</pre>
<li>term summarization
<pre>
    
    replacing a (reordered) subset of the terms by a summation

</pre>
<li>eliding leading, trailing, or middle terms 
<pre>

     term + term + ... + term

</pre>
<li>linearizing terms
<pre>

    terms, such as fractions, can be rewritten in linear form to 
    save lines

</pre>
<li> constant naming
<pre>

     long constants replaced by short names:

     R = 3.77612876767 * foo ==>

     let M = 3.77612876767
         R = M * foo

</pre>
<li>pattern naming
<pre>

    turn 2D template structures (powers/ratios/matricies/polys) into
    "named" template structures and substitute

    +-   -+   +-   -+ 
    | 1 2 |   | 5 6 |
    |     | * |     |
    | 3 4 |   | 7 8 |
    +-   -+   +-   -+

    turns into 

    A = Matrix((1 2) (3 4))
    B = Matrix((5 6) (7 8))
    MatrixProduct(A,B)  

</pre>
<li>operator names for all template structures and linear versions
<li>"outer structure" recognition
<pre>

   is it fundamentally a matrix? a polynomial? an integral?
   the layout techniques could differ based on the outer structure

</pre>
<li> "inner structure" eliding
<pre>

   clip out "heavy" element in a matrix so it does not cause
   wide columns

</pre>
<li>*depth*, *width*, *height* maximums as parameters
</ul>

<p>Ultimately it seems this boils down to a question of embedding a
tree or a DAG into a planar graph. or perhaps this is an extension
of the TeX layout algorithm with each weights assigned to the boxes?
compute the weight (area?) of a node in the tree or DAG and do some
sort of weight-reduction?

\start
Date: 22 Jan 2006 17:50:38 +0100
From: Martin Rubey
To: Fabio Stumbo,
Subject: Documentation and HyperDoc Future

Fabio Stumbo writes:

> >>> I think you should try Axiom's hyperdoc browser. (Unfortunately
> >>> it is only currently available in the linux version of Axiom.)
> >>> Hyperdoc provides a lot of useful information of this kind for
> >>> the new Axiom user.
> >>>
> >>
> >> Fortunately, I use only linux!
> >> Anyway, I must say that I never liked the Hyperdoc (moreover,
> >> it crashes quite often).
> >
> > Again, I agree. I also do not use Hyperdoc very much. My experience
> > is also that it often crashes, although I am not yet able to
> > document a specific sequence which causes a crash. 

That's very strange. I use hyperdoc extensively (really), and I did not see it
crash *once* yet -- provided I did not press the forbidden buttons like
"dependends, "users", "uses" and maybe a few others.

> > If we could report and reproduce such bugs, then it should not be difficult
> > to correct the problems. But even then, I do not much care for the "look"
> > of the user interface. 

Well, I don't *mind* the look of the user interface, but, as you probably know
by now, I've been shouting for a long time: replace HyperDoc, AxiomUI,
MathAction by a single facility.

I must say that I find it a little sad that -- although the above proposal is
certainly doable within a few weeks, maybe months time -- nobody has found time
to help Ralf (whose ALPROSE is certainly the way to go).

> > There have been much discussion and some programming work to replace
> > Hyperdoc with a modern web browser interface, but so far we do not have a
> > good replacement for Hyperdoc.
> 
> I can also add that with modern dvi viewers which allow searching, I prefer
> to look directly into book.dvi. 

But hyperdoc can do A LOT more than that. Did you ever press the button
"Domains"? Far from most of the domains are covered in the Axiom Book!

> In fact, at present, axiom on my machine is
> an alias to "axiom -noht"...

Oh dear. 

> >> My preferred type of documentation is of more "synthetic" type. From this
> >> point of view, I like very much Mathematica help system.

As far as I know Mathematica, it's help browser is not so different from
HyperDoc.

> > From my point of view, it is very useful to have an on line help which
> 1) allows you to look for commands and packages which satisfy a certain pattern;
> 2) gives you the possibility to get on line extensive help (complete syntax,
> maybe some meaningful example, closely related functions, maybe the source
> package) of a command with something natural like
> )? command
> or
> )help command

What you are describing is the basic functionality of HyperDoc browse...

> As I said, from this point of view a good model could be Mathematica, or even
> Mupad: for example, compare the output of
> 
> MuPad		|	Mathematica	|	Axiom
>  		|			|
> -------------------------------------------------------------------
>  		|			|
> ?fibonacci 	|	?Fibonacci 	|	)di op fibonacci
> )if		|	?If		|	)di op if
> 
> and it should be clear what I mean.

But you are comparing different things. ")di op" is not comparable to
"?". Although I do agree that something like this, returning the description
text also provided in HyperDoc should exist.

I sincerely hope that some day my dream of a unified documentation and user
interface format for axiom comes true. If you do have spare time, this would be
just great.

By the way, you mentioned you intend to use Axiom as a teaching tool. Would it
be possible for you to set up a webpage -- or, even better, use mathaction, and
share your .input or .spad files?

Martin

\start
Date: Sun, 22 Jan 2006 14:13:44 -0500
From: Bill Page
To: Tim Daly
Subject: findSpadfiles

Tim,

I am trying to build Axiom on SuSe 9 from the current tla
archive.

There seems to be a typo in src/algreba/Makefile.pamphlet

<<findSpadFiles>==
egrep '@<<(domain|package|category) .*>>=' ...

The @ character here does not make sense.

The error occurs in:

<findBootstrapFiles>>=
egrep '@<<.BOOTSTRAP>>=' ...

\start
Date: Sun, 22 Jan 2006 13:28:43 -0600
From: MathAction (Tim Daly)
To: MathAction
Subject: [FreeAldor] Aldor and Axiom communities need to cooperate

The Aldor and Axiom communities need to cooperate.
The current license restrictions on Aldor make
this cooperation extremely difficult. There is
a limited community of people who use these 
systems and we must make an effort to deliver
our software in a way that makes it effective,
simple, and synergistic. Opening the Aldor sources
will allow people to use and improve the systems
as the need arises.  -- Tim Daly

\start
Date: Sun, 22 Jan 2006 15:15:40 -0500
From: Tim Daly
To: Bill Page
Subject: Re: findSpadfiles

Bill,

I don't recall adding that character.

The character has to be there because that's the "escape" character
used by noweb. If you use the standard noweb (rather than the axiom
patch version) you need to escape the << characters otherwise noweb
will assume you are creating a new chunk.

\start
Date: Sun, 22 Jan 2006 15:52:04 -0500
From: Tim Daly
To: Martin Rubey
Subject: Re: Documentation and HyperDoc Future
Cc: Fabio Stumbo

Martin,

> I sincerely hope that some day my dream of a unified documentation and
> user interface format for axiom comes true. If you do have spare time,
> this would be just great.

i'm working on a javascript/html version of the browser documentation.
when we get the doyen version of the system which has the axiom wiki
software locally available it should be possible to use a standard
web browser to do hyperdoc functionality. i've converted some of the
pages to html with embedded javascript and am learning more about AJAX
and the XMLHttpRequest function. getting this to work thru the sman
interface will require some recoding there also.

one useful contribution would be a set of html-only web pages that
describe axiom better. perhaps taking the newly-published axiom
tutorial latex file, converting it to html, and cleaning it up so
it can be used from the browser would be useful. that way, when the
hyperdoc rewrite completes and the wiki runs locally we'll have a
lot more documentation available.

\start
Date: Sun, 22 Jan 2006 16:06:24 -0500
From: Bill Page
To: Tim Daly
Subject: RE: findSpadfiles

Tim,

On January 22, 2006 3:16 PM you wrote:
> 
> I don't recall adding that character.

Hmmm... me neither. How'd it get there? :)

> 
> The character has to be there because that's the "escape"
> character used by noweb.

That is a pretty good argument however I don't think it
applies in this case. If I leave the @ character there, the
Axiom build fails (at least on my SuSe 9 installation). If I
remove it, then the build works. Strange.

Maybe this is something peculiar to SuSe 9? I have not seen
this problem before on Fedora Core 3 or on Debian although I
have not checked this part of the build code in a the last few
months. I presume that you also did not have any build failures
on your test systems?

If you remove the @ characters, does the build fail on any of
your test systems?

> If you use the standard noweb (rather than the axiom
> patch version) you need to escape the << characters
> otherwise noweb will assume you are creating a new chunk.
> 

I am using the version that is part of the Axiom source in the
current tla archive. I have not attempted to make any changes
to use standard noweb. This is just straight out of the tla box.

The noweb documentation says:

"Code chunks begin with
<<chunk name>>=
on a line by itself.  The double  left  angle  bracket  (<<)
must  be  in the first column."

So I think that noweb will not treat the embedded '<< ... >>='
sequence in the following 

<<findSpadFiles>>==
egrep '<<(domain|package|category) .*>>=' ...

as a new chunk definition. But I agree that it might have
ignored the trailing = and treated it as a reference to a
chunk with a very peculiar name. I don't know why this is not
happening, but I do know that if I keep the @ in

egrep '@<<(domain|package|category) .*>>=' ...

then for some reason notangle (mark) does not remove the @
that way the noweb documentation says it is supposed to.

----------

BTW, here is a reference about editing noweb (pamphlet)
documents that might be of interest to some Axiom developers:

http://scottcollins.net/articles/Kate.html

"Kate Syntax Highlighting for Noweb"

Kate is a popular programming editor especially on KDE.

\start
Date: Sun, 22 Jan 2006 18:34:28 -0500
From: Tim Daly
To: Bill Page
Subject: Re: findSpadfiles

i know that noweb is unhappy with << that occurs in non-column 1
locations because the original problem was due to the C 'shift'
operator causing complaints about non-terminated chunk names.

also, the code given by tla seems to compile fine here.
perhaps you have a different notangle/noweave on your path?

\start
Date: Sun, 22 Jan 2006 19:56:44 -0500
From: Raymond Rogers
To: list
Subject: FC3

Hello,
I am trying to get axiom working on a FC3 system.  Neither the binary or
compile worked.  I have noticed you all are fairly responsive about
these things.
Please describe which package (source or binary) is recommended; and
what information I should supply.

\start
Date: Sun, 22 Jan 2006 19:59:18 -0500
From: Bill Page
To: Martin Rubey
Subject: RE: Documentation and HyperDoc Future

> > Fabio S. writes:
> > > Anyway, I must say that I never liked the Hyperdoc (moreover,
> > > it crashes quite often).
> >
> Bill Page wrote:
> > Again, I agree. I also do not use Hyperdoc very much. My 
> > experience is also that it often crashes, although I am
> > not yet able to document a specific sequence which causes
> > a crash. 
>

On January 22, 2006 11:51 AM Martin Rubey wrote:
> 
> That's very strange. I use hyperdoc extensively (really), and 
> I did not see it crash *once* yet -- provided I did not press
> the forbidden buttons like "dependents, "users", "uses" and
> maybe a few others.

Are you making a joke? What do you mean by "forbidden buttons"?

> 
> > If we could report and reproduce such bugs, then it 
> > should not be difficult to correct the problems.

Can you document some specific sequences that cause Hyperdoc to
crash? If so, I think it would be very useful.

> > But even then, I do not much care for the "look" of the
> > user interface. 
> 
> Well, I don't *mind* the look of the user interface, but,
> as you probably know by now, I've been shouting for a long
> time: replace HyperDoc, AxiomUI, MathAction by a single
> facility.

Usually shouting is not very effective in open source
projects. :)

> 
> I must say that I find it a little sad that -- although the 
> above proposal is certainly doable within a few weeks, maybe
> months time -- nobody has found time to help Ralf (whose
> ALPROSE is certainly the way to go).

Your point of view seems quite unreasonable to me. How much
time have you devoted to this concept (not counting the
shouting ;)? I also would like to see more people working on
Axiom development but I think we have to lead by setting an
example, not just by making suggestions. I personally doubt
that it is "doable within a few weeks", but if you think so
then perhaps you could help by creating a prototype to show
how it might work.

How can ALPROSE be used to do this? What about navigation?
What about access to the Axiom database? What about conversion
of the existing Hyperdoc material?

> 
> > There have been much discussion and some programming work 
> > to replace Hyperdoc with a modern web browser interface,
> > but so far we do not have a good replacement for Hyperdoc.
> 
> > I can also add that with modern dvi viewers which allow 
> > searching, I prefer to look directly into book.dvi. 
> 
> But hyperdoc can do A LOT more than that. Did you ever press 
> the button "Domains"? Far from most of the domains are covered
> in the Axiom Book!
> 

Perhaps that is a criticism more appropriate to the Axiom
Book, then to the choice of user interface?

\start
Date: Sun, 22 Jan 2006 20:57:43 -0500
From: Tim Daly
To: Raymond Rogers
Subject: Re: FC3

Ray,

Check the FAQ. There is an item about getting Axiom to compile 
under FC3.

\start
Date: Sun, 22 Jan 2006 18:00:54 -0800 (PST)
From: Cliff Yapp
To: list
Subject: Website and tarball issues

I'm trying to access the Axiom website on Sunday at 8pm, and I'm
getting the hanging issue again.

Also, even more frustrating is my inability to download the patch 47
tarball from http://savannah.nongnu.org/files/?group=axiom (assuming
it's up), which is ALSO hanging.  Grr.

Are there mirrors available somewhere of at least the latest tarball
file so that when this happens Axiom isn't totally knocked off the net
from a downloading perspective?  It would be nice if we could have five
or six mirrors set up, and a way to fall back on a static page pointing
to them in the event the wiki becomes unresponsive.  I'm trying to use
tla on Windows but that is a struggle, and even if by some miracle it
works it's not something the casual user will want to mess with.

Maybe we could ask a couple universities to provide "axiom mirrors?" 
Perhaps the IAMC guys would be interested - this is right up their
alley.

\start
Date: Sun, 22 Jan 2006 20:03:41 -0600
From: MathAction (unknown)
To: MathAction
Subject: [Axiom-developer] [FreeAldor] 

Opening the Aldor source codes would greatly benefit to both Axiom and Aldor community.

\start
Date: Sun, 22 Jan 2006 18:09:52 -0800 (PST)
From: Cliff Yapp
To: list
Subject: Re: Website and tarball issues

Grr.  tla ALMOST succeeded, but failed on patch4 with 

tar.real.exe:
axiom--main--1--patch4.patches/new-files-archive/{arch}/axiom/axiom--main/axiom--main--1/arch@axiom-developer.org--axiom/patch-log:
 Could not create directory: No such process

Is this just a Windows issue, or is there a problem with checking out a
fresh tree?

--- Cliff Yapp wrote:

> I'm trying to access the Axiom website on Sunday at 8pm, and I'm
> getting the hanging issue again.
> 
> Also, even more frustrating is my inability to download the patch 47
> tarball from http://savannah.nongnu.org/files/?group=axiom (assuming
> it's up), which is ALSO hanging.  Grr.
> 
> Are there mirrors available somewhere of at least the latest tarball
> file so that when this happens Axiom isn't totally knocked off the
> net
> from a downloading perspective?  It would be nice if we could have
> five
> or six mirrors set up, and a way to fall back on a static page
> pointing
> to them in the event the wiki becomes unresponsive.  I'm trying to
> use
> tla on Windows but that is a struggle, and even if by some miracle it
> works it's not something the casual user will want to mess with.
> 
> Maybe we could ask a couple universities to provide "axiom mirrors?" 
> Perhaps the IAMC guys would be interested - this is right up their
> alley.

\start
Date: Sun, 22 Jan 2006 20:17:09 -0600
From: MathAction (Gabriel Dos Reis)
To: MathAction
Subject: [FreeAldor] [FreeAldor]

MathAction (unknown) writes:

| Opening the Aldor source codes would greatly benefit to both Axiom
  and Aldor community.

well, that was me.  
However, I do not find it quite easy to sign up that petition.
It would be great if the web site could be made relatively easy to
find out which to button to press to have names + comments in there...
A petition with a handful of unknowns does not look right :-/

-- Gaby

\start
Date: Sun, 22 Jan 2006 21:17:37 -0500
From: Bill Page
To: Cliff Yapp
Subject: RE: Website and tarball issues

Cliff,

On January 22, 2006 9:01 PM you wrote:
> 
> I'm trying to access the Axiom website on Sunday at 8pm, and I'm
> getting the hanging issue again.

Ok. I just reset it. Please try again.

> 
> Also, even more frustrating is my inability to download the patch 47
> tarball from http://savannah.nongnu.org/files/?group=axiom (assuming
> it's up), which is ALSO hanging.  Grr.
> 

Sorry, I don't know what's upset at savannah.

> Are there mirrors available somewhere of at least the latest tarball
> file so that when this happens Axiom isn't totally knocked off the net
> from a downloading perspective?

Did you try sourceforge?

http://sourceforge.net/project/showfiles.php?group_id=48359

> ...

\start
Date: Sun, 22 Jan 2006 20:23:14 -0600
From: MathAction (billpage)
To: MathAction
Subject: [FreeAldor] 

(The undersigned are noted in comments below. Please click 'preferences'
to set your name and email address before leaving a comment.)

\start
Date: Sun, 22 Jan 2006 20:24:03 -0600
From: MathAction (billpage)
To: MathAction
Subject: [FreeAldor] 

> Opening the Aldor source codes would greatly benefit to both Axiom
  and Aldor community.

\start
Date: Sun, 22 Jan 2006 21:28:46 -0500
From: Bill Page
To: Cliff Yapp
Subject: RE: Website and tarball issues

On January 22, 2006 9:10 PM C Y wrote:
> 
> Grr.  tla ALMOST succeeded, but failed on patch4 with 
> 
> tar.real.exe:
> axiom--main--1--patch4.patches/new-files-archive/{arch}/axiom/
> axiom--main/axiom--main--1/arch@axiom-developer.org--axiom/patch-log:
>  Could not create directory: No such process
> 
> Is this just a Windows issue, or is there a problem with 
> checking out a fresh tree?
> 

What version of tla are you trying to use on Windows?

Previously I have successfully used tla from

http://download.sipsolutions.de/tla-setup.exe

inside MSYS as described here:

http://wiki.axiom-developer.org/BuildAxiom

\start
Date: Sun, 22 Jan 2006 21:50:32 -0500
From: Bill Page
To: Tim Daly
Subject: Re: findSpadfiles

Tim,

On January 22, 2006 6:34 PM you wrote:
>
> i know that noweb is unhappy with << that occurs in non-column 1
> locations because the original problem was due to the C 'shift'
> operator causing complaints about non-terminated chunk names.
> 

But your patch to noweb should avoid this, shouldn't it? It seems
to me that the patch would treat this case as an undefined chunk and
pass it right through. I am sure this is how it used to work since
when I wrote this awk thing last year I am positive that I did not
include an @ inside the egrep pattern.

> also, the code given by tla seems to compile fine here.
> perhaps you have a different notangle/noweave on your path?
> 

No. There is no 'notangle' in my path. The only version of noweb
on this system is the one in the Axiom source distribution. In any
case I think the Axiom makefiles always use a full path pointing
to the version of noweb in the .../mnt/linux/bin/lib.

I agree that it seems to build ok on other systems, for example
I have built axiom on the axiom-developer.org server even though
the @ now appears in the src/algebra/Makefile.pamphlet. It seems
to be stripped out as expected.

noweb internally depends heavily on awk. So far the only difference
that I see on my SuSe 9.1 system is that I have GNU awk 3.1.2 while
on axiom-developer.org we have GNU awk 3.1.1. I don't know if that
is significant.

\start
Date: Sun, 22 Jan 2006 20:58:50 -0600
From: MathAction (Gabriel Dos Reis)
To: MathAction
Subject: [FreeAldor] [FreeAldor]

MathAction (billpage) writes:

| ??changed:
| -(the undersigned noted in comments below)
| (The undersigned are noted in comments below. Please click 'preferences'
| to set your name and email address before leaving a comment.)

Thanks!

-- Gaby

\start
Date: Sun, 22 Jan 2006 23:03:58 -0500
From: Tim Daly
To: Cliff Yapp
Subject: Re: Website and tarball issues

cy,

sourceforge.net also has an up to date CVS tree.

\start
Date: Sun, 22 Jan 2006 22:43:50 -0500
From: Bill Page
To: Tim Daly, Cliff Yapp
Subject: RE: Website and tarball issues

On January 22, 2006 9:18 PM Bill Page wrote:
> On January 22, 2006 9:01 PM C Y wrote:
> > 
> > I'm trying to access the Axiom website on Sunday at 8pm, and I'm
> > getting the hanging issue again.
> 
> Ok. I just reset it. Please try again.
> ...

Just one hour later after being reset there was another apparently
related problem on the axiom-developer.org server where the Zope
process goes into a state that requires 99.9% of the processor time
and does very little work. As I discussed in a previous email, I
suspect that this is due to a bug in the way this version of Zope
interacts with zeo - the database file server. As a result I decided
to remove the zeo database server process and return to the original
configuration where Zope accesses the database file directly.

I have just restarted Zope in this configuration. This *might* have
some negative performance impact, on the other hand I hope that it
will cure the problem temporarily - at least until I get time to
complete the upgrade to Python 2.4 and a newer version of Zope
and zeo.

Please let me know ASAP if you see any more problems.

\start
Date: Sun, 22 Jan 2006 20:39:52 -0800 (PST)
From: Cliff Yapp
To: Bill Page
Subject: RE: Website and tarball issues

I'll give those a shot in a couple weeks.  I don't know which one I
installed (IIRC I found it on the arch wiki) and I was using it from
cygwin, so perhaps that didn't work so well.

If the sourceforge cvs is up to date with patch-47 though that's fine -
I didn't realize we were maintaining the cvs there as well (though I
should have.)

I would recommend though that we release a new tarball - IIRC the last
one was Sept. 2005?

Website is now working.  Thanks much!  It will be a couple weeks before
I can try to download patch47 again (need to use girlfriend's computer
as my work one won't let me and my home one is off the net :-(. 
However, I think I'll be able to keep busy until then ;-).

Cheers,
CY

--- Bill Page wrote:

> On January 22, 2006 9:10 PM C Y wrote:
> > 
> > Grr.  tla ALMOST succeeded, but failed on patch4 with 
> > 
> > tar.real.exe:
> > axiom--main--1--patch4.patches/new-files-archive/{arch}/axiom/
> >
> axiom--main/axiom--main--1/arch@axiom-developer.org--axiom/patch-log:
> >  Could not create directory: No such process
> > 
> > Is this just a Windows issue, or is there a problem with 
> > checking out a fresh tree?
> > 
> 
> What version of tla are you trying to use on Windows?
> 
> Previously I have successfully used tla from
> 
> http://download.sipsolutions.de/tla-setup.exe
> 
> inside MSYS as described here:
> 
> http://wiki.axiom-developer.org/BuildAxiom

\start
Date: Mon, 23 Jan 2006 00:00:19 -0500
From: Alfredo Portes
To: Tim Daly
Subject: Re: Documentation and HyperDoc Future

------=_Part_4414_1625790.1137992419518

Hi, with the help of Mr. Bill Page I have currently a version of the Doyen
CD with the LatexWiki/Axiom working. I do not know a good place to upload
the iso. I was thinking to uploaded to SourceForge, but using CVS could tak=
e
a while. the The iso is 561 MB in size right now. Please, let me know a goo=
d
place to put it.

I am currently having some issues with the pamphlet support in the Wiki, bu=
t
hopefully I will try to fix that in the next couple of days.

Regards,

Jose Alfredo Perez

On 1/22/06, Bill Page wrote:
>
>
> > > Fabio S. writes:
> > > > Anyway, I must say that I never liked the Hyperdoc (moreover,
> > > > it crashes quite often).
> > >
> > Bill Page wrote:
> > > Again, I agree. I also do not use Hyperdoc very much. My
> > > experience is also that it often crashes, although I am
> > > not yet able to document a specific sequence which causes
> > > a crash.
> >
>
> On January 22, 2006 11:51 AM Martin Rubey wrote:
> >
> > That's very strange. I use hyperdoc extensively (really), and
> > I did not see it crash *once* yet -- provided I did not press
> > the forbidden buttons like "dependents, "users", "uses" and
> > maybe a few others.
>
> Are you making a joke? What do you mean by "forbidden buttons"?
>
> >
> > > If we could report and reproduce such bugs, then it
> > > should not be difficult to correct the problems.
>
> Can you document some specific sequences that cause Hyperdoc to
> crash? If so, I think it would be very useful.
>
> > > But even then, I do not much care for the "look" of the
> > > user interface.
> >
> > Well, I don't *mind* the look of the user interface, but,
> > as you probably know by now, I've been shouting for a long
> > time: replace HyperDoc, AxiomUI, MathAction by a single
> > facility.
>
> Usually shouting is not very effective in open source
> projects. :)
>
> >
> > I must say that I find it a little sad that -- although the
> > above proposal is certainly doable within a few weeks, maybe
> > months time -- nobody has found time to help Ralf (whose
> > ALPROSE is certainly the way to go).
>
> Your point of view seems quite unreasonable to me. How much
> time have you devoted to this concept (not counting the
> shouting ;)? I also would like to see more people working on
> Axiom development but I think we have to lead by setting an
> example, not just by making suggestions. I personally doubt
> that it is "doable within a few weeks", but if you think so
> then perhaps you could help by creating a prototype to show
> how it might work.
>
> How can ALPROSE be used to do this? What about navigation?
> What about access to the Axiom database? What about conversion
> of the existing Hyperdoc material?
>
> >
> > > There have been much discussion and some programming work
> > > to replace Hyperdoc with a modern web browser interface,
> > > but so far we do not have a good replacement for Hyperdoc.
> >
> > > I can also add that with modern dvi viewers which allow
> > > searching, I prefer to look directly into book.dvi.
> >
> > But hyperdoc can do A LOT more than that. Did you ever press
> > the button "Domains"? Far from most of the domains are covered
> > in the Axiom Book!
> >
>
> Perhaps that is a criticism more appropriate to the Axiom
> Book, then to the choice of user interface?

\start
Date: Mon, 23 Jan 2006 02:37:31 -0500
From: Tim Daly
To: Alfredo Portes
Subject: Re: Documentation and HyperDoc Future

> 
> Hi, with the help of Mr. Bill Page I have currently a version of the Doyen
> CD with the LatexWiki/Axiom working. I do not know a good place to upload
> the iso. I was thinking to uploaded to SourceForge, but using CVS could tak=
> e
> a while. the The iso is 561 MB in size right now. Please, let me know a goo=
> d
> place to put it.
> 
> I am currently having some issues with the pamphlet support in the Wiki, bu=
> t
> hopefully I will try to fix that in the next couple of days.
> 
> Regards,
> 
> Jose Alfredo Perez

jose,

just upload it to both the doyencd site and your home directory on 
axiom-developer.org. put a link to each one on the doyen cd webpage
you're maintaining on the axiom wiki.

let me know when you have it available and i'll download and try it.

\start
Date: Mon, 23 Jan 2006 10:52:25 +0100
From: Ralf Hemmecke
To: Tim Daly
Subject: re: findSpadfiles

Hi,

On 01/22/2006 09:15 PM, root wrote:
> Bill,
> 
> I don't recall adding that character.

Shouldn't it become clear from the history who added the character and 
why he did this?

>> There seems to be a typo in src/algreba/Makefile.pamphlet
>> <<findSpadFiles>==
>> egrep '@<<(domain|package|category) .*>>=' ...

Anyway, the @ makes complete sense to me as an escape character.
Otherwise noweb would replace

   <<(domain|package|category) .*>>

by the corresponding (probably non-existing) chunk text.

Interestingly that place (src/algreba/Makefile.pamphlet) does not appear 
in the list of

http://lists.nongnu.org/archive/html/axiom-developer/2005-12/msg00262.html

so the @ must have been there before.

src/hyper/bitmaps.pamphlet: <<license>>
src/hyper/token.pamphlet: <<token.c>>
src/doc/axiom.sty.pamphlet: <<ref value>>}{<<page
number>>}{<<text>>}}{<<hyper category>>}{<<URL>>
src/doc/axiom.sty.pamphlet: <<ref value>>}{<<page number>>
src/doc/booklet.c.pamphlet: <<file:filename1>>@<<file:filename2>>
src/doc/booklet.c.pamphlet: <<http:web>>
src/doc/booklet.c.pamphlet: <<file:filename2>>
src/doc/booklet.c.pamphlet: << and >>
src/doc/booklet.c.pamphlet: <<file:filename>>
src/doc/booklet.c.pamphlet: <<file:PATH-AND-FILENAME>>
src/doc/Rosetta.pamphlet: <<x; y>>
src/interp/fnewmeta.lisp.pamphlet: <<' Name '>>
lsp/Makefile.pamphlet: <<gcl-2.6.5w.toploop.patch>>

The definition of a chunk like

<<blah>>=

has to be started at the first column.

\start
Date: Mon, 23 Jan 2006 11:11:06 +0100
From: Ralf Hemmecke
To: Bill Page
Subject: Re: Documentation and HyperDoc Future

>> I must say that I find it a little sad that -- although the 
>> above proposal is certainly doable within a few weeks, maybe
>> months time -- nobody has found time to help Ralf (whose
>> ALPROSE is certainly the way to go).
> 
> Your point of view seems quite unreasonable to me. How much
> time have you devoted to this concept (not counting the
> shouting ;)? I also would like to see more people working on
> Axiom development but I think we have to lead by setting an
> example, not just by making suggestions. I personally doubt
> that it is "doable within a few weeks", but if you think so
> then perhaps you could help by creating a prototype to show
> how it might work.
> 
> How can ALPROSE be used to do this? What about navigation?
> What about access to the Axiom database? What about conversion
> of the existing Hyperdoc material?

ALLPROSE has hyperlinks, but it is intended to be used for development, 
ie, for writing pamphlet files. It is not an API-browsing tool.

A tool like "AldorDoc" should do it:
That program would take a set of aldor-libraries (collection of .ao 
files) and extract the ++ comments from them in order to produce tex or 
html code from them). Unfortunately, AldorDoc is not yet written, but 
what I am suggesting with ALLPROSE is a convention of how to write ++ 
comments. I impose a bit of structure. If at least that convention could 
find its way into future Axiom code documentation that would be great.
Well, of course, there should first be some comments on this convention 
before I can add this code.
Anyway, ALLPROSE supports the literate programming style, so it is not 
enough to just document the API (as is usual with .pamphlet files).

\start
Date: 23 Jan 2006 15:59:33 +0100
From: Martin Rubey
To: Bill Page
Subject: Re: Documentation and HyperDoc Future

Bill Page writes:

> On January 22, 2006 11:51 AM Martin Rubey wrote:
> > 
> > provided I did not press the forbidden buttons like "dependents, "users",
> > "uses" and maybe a few others.
> 
> Are you making a joke? What do you mean by "forbidden buttons"?

The said buttons access functionality which is currently not working. Issue
#236.

> > I've been shouting for a long time: replace HyperDoc, AxiomUI, MathAction
> > by a single facility.
> 
> Usually shouting is not very effective in open source projects. :)

Very true. Still I think I should concentrate on the maths, while I can't
resist telling everybody how I'd like the IDE (integrated documentation
environment) to work.

> > I must say that I find it a little sad that -- although the above proposal
> > is certainly doable within a few weeks, maybe months time -- nobody has
> > found time to help Ralf (whose ALPROSE is certainly the way to go).
> 
> Your point of view seems quite unreasonable to me. 

Oh. :-(

> How much time have you devoted to this concept (not counting the shouting ;)?
> I also would like to see more people working on Axiom development but I think
> we have to lead by setting an example, not just by making suggestions. I
> personally doubt that it is "doable within a few weeks", but if you think so
> then perhaps you could help by creating a prototype to show how it might
> work.

> How can ALPROSE be used to do this? What about navigation?  What about access
> to the Axiom database? What about conversion of the existing Hyperdoc
> material?

I am not saying anything but that the *format* of the documentation should be
the format proposed by Ralf (albeit for a slightly different purpose).

I mentioned the design problem remaining already: Currently the databases
contain the documentation (extracted from the spad files at compile time) in
HyperDoc format. However, we need a way to have it ready in various different
formats. I guess that LaTeX -> HTML or MATHML or the like is too slow to be
convincing. Maybe for a prototype it would suffice. We would need 

* a script that converts something like the following 

\begin{+++}
  \begin{adusage}
    if \adthisname{} x then ...
  \end{adusage}
  \begin{adparameters}
    \adparameter{x: %} Element to be tested.
  \end{adparameters}
  \begin{addescription}{Tests whether its argument is \adname{0}.}
    The boolean value of \adcode$\adthisname{} x$ is identical to the
    test \adcode$x \adname[MyPrimitiveType]{=} \adname{0}$ in the type, but
    might be implemented more efficiently.
  \end{addescription}
  \begin{adremarks}
    Note that one would usually not use this function on floating
    point types. A zero test might fail because of small errors
    introduced during a computation.
  \end{adremarks}
  \begin{adseealso}
    \adname{0}
  \end{adseealso}
\end{+++}
%CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
<<exports: MyAdditiveType>>=
zero?: % -> Boolean;
@
%TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
%CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
<<defaults: MyAdditiveType>>=
zero?(x: %): Boolean == x = 0;
@
%TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

  into html/mathml/jsmath via tex4ht. 

* a javascript applet that allows querying the database, extracts snippets like
  the above, converts them with the said script into HTML, and displays it in a
  frame.

  
(In fact, I thought about this in public already once:
http://lists.gnu.org/archive/html/axiom-developer/2005-12/msg00123.html )

> > But hyperdoc can do A LOT more than that. Did you ever press the button
> > "Domains"? Far from most of the domains are covered in the Axiom Book!
> 
> Perhaps that is a criticism more appropriate to the Axiom Book, then to the
> choice of user interface?

Well, partly. The Axiom Book contains a carefully chosen subset of the domains
shipped with Axiom. I don't think that the printed documentation should strive
to contain everything, it would be too much. The online documentation should,
and it should be printable, but probably not be sold in a bookstore.

Still, how would you get the result from pressing "Domains" when viewing the
category "Field" in HyperDoc by a search in the dvi file? Searching for "Field"
will not suffice, I guess.

\start
Date: Mon, 23 Jan 2006 15:44:01 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [DoyenCD] 

This document shows the explicit steps necessary to create a Doyen
LiveCD from Red Hat's Fedora Core 3 distribution. The Doyen CD is a
scientific platform which can be distributed at various science
conferences. It enables scientific software to be distributed as
literate programs. The Doyen CD has a local wiki and a set of
scientific packages which can be scripted from the wiki pages. The
scientific packages can be tailor to the specific conference.

In the first screen, you will be presesented with some boot
options. Press Enter to continue.

In the language selection, select your prefered language and click next.

At this point depending if your system is not clean, an upgrade
examine window will appear. Please select {\em "Install Fedora Core"}.

\subsection{Disk Partioning Setup}

In the Disk Partioning Setup, select Manually partition with Disk Druid.

For our base distribution, only three partitions should be created. A
boot partition of 100 MB, a swap space generally the double of your
amount of RAM, and a root partition which size depends on the programs
to be installed in the system.

Preserve the default boot loader configuration.

Preserve the DHCP option for the eth0 by default. For the hostname,
select manually and in the text box type doyen.

Select enable firewall and select Remote Login (SSH) and Web
Server(HTTP, HTTPS). Also, select disable for SELinux.

Select the desire password for the root account. In Doyen Live CD the
default password is doyen@org.

\item httpd

rpm -ivh noweb-2.10a-4.i386.rpm

In this section, you will install and configure the ZWiki server. First,  download the Zope 2.8 rpm package from the rpmfind.net server and the zwiki package.

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/axiom-Doyen-Fedora3-bin.tgz

tar -xzf axiom-Doyen-Fedora3-bin.tgz -C /usr/local/

export AXIOM=/usr/local/axiom/mnt/linux

Install SWIG (www.swig.org).

<<step>>=

yum -y install swig

@

Install GCC compiler.

<<step>>=

yum -y install gcc

@

Upgrade Python interpreter

<<step>>=

yum -y upgrade python

@

Install Python development tools

<<step>>=

yum -y install python-devel

@

Run these commands from the texbreaker.mak file

<<step>>=

cd /usr/lib/zope/lib/python/Products/LatexWiki

swig -python texbreaker.i

gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3

ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so

@

<<edit>>=

vi /etc/X11/xorg.conf

@

For multiple video card support change the driver name for the video card indentifier. Set driver value to "vesa".

\subsubsection{Generic mouse configuration}

Place the moused script in the /etc/init.d directory


cd /tmp/pkgs/

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/moused

cp moused /etc/init.d/

chmod 755 /etc/init.d/moused

Add the script to the run levels 3, 4, and 5.

ln -s /etc/init.d/moused /etc/rc3.d/S01moused

ln -s /etc/init.d/moused /etc/rc4.d/S01moused

ln -s /etc/init.d/moused /etc/rc5.d/S01moused

\subsection{Shutdown Scripts}

mv /sbin/shutdown /sbin/sysshutdown

wget http:/alfredo.axiom-developer.org/redhatbuild/pkgs/shutdown

cp shutdown /sbin/

\subsubsection{Build Live CD scritps}

Download the scripts necessary to build the CD.

Edit the config file and make these changes: Change KERNEL name to
KERNEL="2.6.13.2". Save and close the config file.

Create module dependecies for newly installed kernel.

\subsubsection{Clean Up and ISO creation and burnning}

yum clean all

Run the runme.sh script, which will create the distribution iso. This
one will be located in the /tmp directory under the name of
livecd.iso.


\start
Date: Mon, 23 Jan 2006 16:55:13 -0500
From: Alfredo Portes
To: Tim Daly
Subject: Re: Documentation and HyperDoc Future

Hi Tim,

I uploaded the iso image for Doyen and included the a link in the Doyen
webpage in the  Axiom Wiki:

http://wiki.axiom-developer.org/DoyenCD

I would like to exhort anybody in the Axiom community that would like to tr=
y
it, to give feedback, especially regarding hardware support or any other
issue. Also any packages that could be included in the Live CD.

Regards,

Jose Alfredo Perez

\start
Date: Mon, 23 Jan 2006 17:58:22 -0500
From: Tim Daly
To: Alfredo Portes
Subject: Re: Documentation and HyperDoc Future

ok. i'm downloading it now... -t

\start
Date: Mon, 23 Jan 2006 17:15:33 -0500
From: Alfredo Portes
To: Bill Page
Subject: Doyen

------=_Part_10012_7484821.1138054533212

Hi Bill,

I have a concern regarding the instructions in
http://wiki.axiom-developer.org/InstallingMathAction on how to install
AxiomWiki.

The first thing is that if I follow the instructions, ZWiki does not appear
in Zope products (meaning, I cannot add the ZWiki pages).
However, if I change the steps to download ZWiki and latexwiki from your
repository at:  http://page.axiom-developer.org/repository/,
then it works fine (Axiom - Latex inline rendering works). However, the
problem with the pamphlet files is present.

To be more precise these are my steps in the Doyen CD:

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/LocalFS-1.3-andrea=
s.tar.gz

wget http://alfredo.axiom-developer.org/redhatbuild/pkgs/doyenLatexWiki.tar=
.gz

tar -xzf LocalFS-1.3-andreas.tar.gz -C /usr/lib/zope/lib/python/Products/

tar -xzf latexwiki.tar.gz -C /usr/lib/zope/lib/python/Products/

yum -y install swig

yum -y install gcc

yum -y upgrade python

yum -y install python-devel

cd /usr/lib/zope/lib/python/Products/LatexWiki

swig -python texbreaker.i

gcc -fpic -c texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3

ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so

/etc/init.d/zope start

Have in mind that the doyenLatexWiki.tar.gz is just a tar file containing
ZWiki and LatexWiki from the repository.

I do not know if somebody can confirm that the instructions are not working=
,
and if somebody tried them, can somebody
confirm that the support for pamphlet files works.

Regards,

Jose Alfredo Perez

\start
Date: Mon, 23 Jan 2006 19:53:32 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Doyen

Alfredo on Monday, January 23, 2006 5:16 PM you wrote:

> I have a concern regarding the instructions in
> http://wiki.axiom-developer.org/InstallingMathAction
> on how to install AxiomWiki.
>
> The first thing is that if I follow the instructions,
> ZWiki does not appear in Zope products (meaning, I cannot
> add the ZWiki pages).

What version of Zope and ZWiki are you using? The instructions
above assume 0.35 of both.

Bob McElrath's repository:

    darcs get http://bob.mcelrath.org/darcs/latexwiki

is no longer at version 0.35 and may not be compatible with more
recent versions of ZWiki. For the instructions to work I think
you would need to download these specific versions.

  http://zwiki.org/repos/ZWiki/releases/ZWiki-0.35.0.tgz

and

  http://mcelrath.org/LatexWiki-0.35.tar.gz

> However, if I change the steps to download ZWiki and latexwiki
> from your repository at:
>  http://page.axiom-developer.org/repository/,
> then it works fine (Axiom - Latex inline rendering works).

I think the repository is based on the compatible 0.35 versions
of ZWiki and LatexWiki together with the changes that I made for
MathAction, so your procedure is reasonable but you will not be
able to take advantage of improvements to ZWiki and LatexWiki
that were made in later versions by the developers of these
products. (At the moment, neither can MathAction :(

On the other hand, if you start with later compatible version
of both of these packages at least the LatexWiki functionality
should work, but merging in the changes for MathAction will
be more complicated then just overwriting the files specified
in the instructions. It would be better to diff the files and
make changes more carefully.

> However, the problem with the pamphlet files is present.

Could you describe the problem with pamphlet files?
=09
  To be more precise these are my steps in the Doyen CD:

  wget
http://alfredo.axiom-developer.org/redhatbuild/pkgs/LocalFS-1.3-andreas.
tar.gz

  wget
http://alfredo.axiom-developer.org/redhatbuild/pkgs/doyenLatexWiki.tar.g
z

  tar -xzf LocalFS-1.3-andreas.tar.gz -C
/usr/lib/zope/lib/python/Products/

  tar -xzf latexwiki.tar.gz -C /usr/lib/zope/lib/python/Products/

I think you meant: doyenLatexWiki.tar.gz above?

I don't like the location where you install these products.
Newer versions of Zope usually recommend that you install
products in the "instance" directory rather than the global
Products directory. The instance directory is created when
you run 'mkzopeinstance.py' as part of the Zope installation.
=09
  yum -y install swig

  yum -y install gcc

  yum -y upgrade python

  yum -y install python-devel

  cd /usr/lib/zope/lib/python/Products/LatexWiki

  swig -python texbreaker.i

  gcc -fpic -c \
    texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3

  ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so


  /etc/init.d/zope start
=09
> Have in mind that the doyenLatexWiki.tar.gz is just a tar
> file containing ZWiki and LatexWiki from the repository.
>

This should be ok.

> I do not know if somebody can confirm that the instructions
> are not working, and if somebody tried them, can somebody
> confirm that the support for pamphlet files works.

I will try it later when I get more time.

\start
Date: Mon, 23 Jan 2006 19:54:58 -0600
From: MathAction (billpage)
To: MathAction
Subject: [RealNumbers] Constructive Reals Calculator

http://www.hpl.hp.com/personal/Hans_Boehm/crcalc

Overview

  This is a calculator that operates on constructive real numbers.
Numbers are represented exactly internally to the calculator, and
then evaluated on demand to guarantee an error in the displayed
result that is strictly less than one in the least significant
displayed digit. It is possible to scroll the display to the right
to generate essentially arbitrary precision in the result.

\start
Date: Mon, 23 Jan 2006 22:12:01 -0500
From: Alfredo Portes
To: Bill Page
Subject: Re: Doyen


For the version of Zope I am using: zope-2.8.0-2.fc3.i386.rpm.

In my steps, I really never install ZWiki 0.35, I actually just
download ZWiki and LatexWiki from your repository. I guess
this is okay, because Latex and Axiom work fine for me.

Now the pamphlet problem, to be specific, let's say I make
a new page [Test] Pamphlet Test. When I go to the edit form
and put the pamphlet here, if I hit save or preview, I get this
error:

http://141.149.49.72:8080/Toolbox3/PamphletSandox

It seems like something in the scripts is pointhing to the
wrong location.

*You can see that Download:*
pdf<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.pdf>
dvi <http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.dvi>
ps<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.ps>
src <http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.pamphlet>
tex <http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.tex>
log<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.log>
all of them point to a location that was never created.

Regards,

Jose Alfredo Perez

On 1/23/06, Page, Bill Bill Page wrote:
>
> Alfredo on Monday, January 23, 2006 5:16 PM you wrote:
>
> > I have a concern regarding the instructions in
> > http://wiki.axiom-developer.org/InstallingMathAction
> > on how to install AxiomWiki.
> >
> > The first thing is that if I follow the instructions,
> > ZWiki does not appear in Zope products (meaning, I cannot
> > add the ZWiki pages).
>
> What version of Zope and ZWiki are you using? The instructions
> above assume 0.35 of both.
>
> Bob McElrath's repository:
>
>     darcs get http://bob.mcelrath.org/darcs/latexwiki
>
> is no longer at version 0.35 and may not be compatible with more
> recent versions of ZWiki. For the instructions to work I think
> you would need to download these specific versions.
>
>   http://zwiki.org/repos/ZWiki/releases/ZWiki-0.35.0.tgz
>
> and
>
>   http://mcelrath.org/LatexWiki-0.35.tar.gz
>
> > However, if I change the steps to download ZWiki and latexwiki
> > from your repository at:
> >  http://page.axiom-developer.org/repository/,
> > then it works fine (Axiom - Latex inline rendering works).
>
> I think the repository is based on the compatible 0.35 versions
> of ZWiki and LatexWiki together with the changes that I made for
> MathAction, so your procedure is reasonable but you will not be
> able to take advantage of improvements to ZWiki and LatexWiki
> that were made in later versions by the developers of these
> products. (At the moment, neither can MathAction :(
>
> On the other hand, if you start with later compatible version
> of both of these packages at least the LatexWiki functionality
> should work, but merging in the changes for MathAction will
> be more complicated then just overwriting the files specified
> in the instructions. It would be better to diff the files and
> make changes more carefully.
>
> > However, the problem with the pamphlet files is present.
>
> Could you describe the problem with pamphlet files?
>
>   To be more precise these are my steps in the Doyen CD:
>
>   wget
> http://alfredo.axiom-developer.org/redhatbuild/pkgs/LocalFS-1.3-andreas.
> tar.gz
>
>   wget
> http://alfredo.axiom-developer.org/redhatbuild/pkgs/doyenLatexWiki.tar.g
> z
>
>   tar -xzf LocalFS-1.3-andreas.tar.gz -C
> /usr/lib/zope/lib/python/Products/
>
>   tar -xzf latexwiki.tar.gz -C /usr/lib/zope/lib/python/Products/
>
> I think you meant: doyenLatexWiki.tar.gz above?
>
> I don't like the location where you install these products.
> Newer versions of Zope usually recommend that you install
> products in the "instance" directory rather than the global
> Products directory. The instance directory is created when
> you run 'mkzopeinstance.py' as part of the Zope installation.
>
>   yum -y install swig
>
>   yum -y install gcc
>
>   yum -y upgrade python
>
>   yum -y install python-devel
>
>   cd /usr/lib/zope/lib/python/Products/LatexWiki
>
>   swig -python texbreaker.i
>
>   gcc -fpic -c \
>     texbreaker.c texbreaker_wrap.c -I/usr/include/python2.3
>
>   ld -shared texbreaker.o texbreaker_wrap.o -o _texbreaker.so
>
>
>   /etc/init.d/zope start
>
> > Have in mind that the doyenLatexWiki.tar.gz is just a tar
> > file containing ZWiki and LatexWiki from the repository.
> >
>
> This should be ok.
>
> > I do not know if somebody can confirm that the instructions
> > are not working, and if somebody tried them, can somebody
> > confirm that the support for pamphlet files works.
>
> I will try it later when I get more time.
>
> Regards,
> Bill Page.
>

\start
Date: Mon, 23 Jan 2006 22:31:31 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Doyen

Alfredo,

On Monday, January 23, 2006 10:12 PM you wrote:

> For the version of Zope I am using: zope-2.8.0-2.fc3.i386.rpm.
>
> In my steps, I really never install ZWiki 0.35, I actually just
> download ZWiki and LatexWiki from your repository. I guess
> this is okay, because Latex and Axiom work fine for me.

Yes, it is ok. zope-2.8 is a recent version of zope. I am
glad that the older repository source still works. I think
if you try to use the newer version of Python 2.4 there will
be some minor problems.

> Now the pamphlet problem, to be specific, let's say I make
> a new page [Test] Pamphlet Test. When I go to the edit form
> and put the pamphlet here, if I hit save or preview, I get
> this error:
>
> http://141.149.49.72:8080/Toolbox3/PamphletSandox
>
> It seems like something in the scripts is pointhing to the
> wrong location.
>
> You can see that Download: pdf
<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.pdf>  dvi
<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.dvi>  ps
<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.ps>  src
<http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.pamphlet>
tex <http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.tex>
log <http://141.149.49.72:8080/images/Toolbox3/Pamphlet%20Sandox.log>
> all of them point to a location that was never created.

I cannot access http://141.149.49.72:8080/... because of local
firewall restrictions.

Could you please try your test without using a blank character
in the name. Eg. Do not use [Pamphlet Sandox] instead use
[PamphletSandox]. I recall a problem concering names with
spaces.

\start
Date: Tue, 24 Jan 2006 00:48:06 -0500
From: Bill Page
To: Alfredo Portes
Subject: RE: Documentation and HyperDoc Future

On Monday, January 23, 2006 4:55 PM Alfredo Portes wrote:

> I uploaded the iso image for Doyen and included the a
> link in the Doyen webpage in the  Axiom Wiki:

> http://wiki.axiom-developer.org/DoyenCD
>
> I would like to exhort anybody in the Axiom community that
> would like to try it, to give feedback, especially regarding
> hardware support or any other issue. Also any packages that
> could be included in the Live CD.

I downloaded the iso and burnt a CD. The CD boots into
Fedora Core but prompts for a user name and password. I
think it would be better if it did an auto-login. It is
awkward to remember:

Username: doyen
Password: doyen@org

Regards,
Bill Page.

\start
Date: Tue, 24 Jan 2006 00:59:08 -0500
From: Alfredo Portes
To: Bill Page
Subject: Re: Documentation and HyperDoc Future

You have a good point Bill. Wilken and I have been working on this to
have it auto-login just like Knoppix does. However, the auto-login in
our initial test was only working for the root account and not for the
doyen account. I will try to have it, for the next image.

By the way the root password is the same as for doyen.

Thank you for the feedback. You will see that after a couple of
minutes the CD feels like a normal workstation. I find the performance
better than the previous Knoppix build. Any other feedback,
improvement, hardware support issue, or application you would like to
see in it, are more than welcome.

Regards,

JAP

On 1/24/06, Page, Bill Bill Page wrote:
> On Monday, January 23, 2006 4:55 PM Alfredo Portes wrote:
>
> > I uploaded the iso image for Doyen and included the a
> > link in the Doyen webpage in the  Axiom Wiki:
>
> > http://wiki.axiom-developer.org/DoyenCD
> >
> > I would like to exhort anybody in the Axiom community that
> > would like to try it, to give feedback, especially regarding
> > hardware support or any other issue. Also any packages that
> > could be included in the Live CD.
>
> I downloaded the iso and burnt a CD. The CD boots into
> Fedora Core but prompts for a user name and password. I
> think it would be better if it did an auto-login. It is
> awkward to remember:
>
> Username: doyen
> Password: doyen@org
>
> Regards,
> Bill Page.


\start
Date: Tue, 24 Jan 2006 01:10:56 -0500
From: Alfredo Portes
To: list
Subject: Re: Documentation and HyperDoc Future

I would like also to add that I have seem other Distros based on
Fedora that do not have auto-login for regular users. I need to
research more into the subject but it seems like a protection maybe
from GDM.

The worst case scenario, maybe the user and password can be changed to
a more friendly and easy to remember: doyen, doyen respectively.

I need to research more into it. But hopefully I can get it to
auto-login to the doyen user.

Regards,

JAP

On 1/24/06, Alfredo Portes wrote:
> You have a good point Bill. Wilken and I have been working on this to
> have it auto-login just like Knoppix does. However, the auto-login in
> our initial test was only working for the root account and not for the
> doyen account. I will try to have it, for the next image.
>
> By the way the root password is the same as for doyen.
>
> Thank you for the feedback. You will see that after a couple of
> minutes the CD feels like a normal workstation. I find the performance
> better than the previous Knoppix build. Any other feedback,
> improvement, hardware support issue, or application you would like to
> see in it, are more than welcome.
>
> Regards,
>
> JAP
>
> On 1/24/06, Page, Bill Bill Page wrote:
> > On Monday, January 23, 2006 4:55 PM Alfredo Portes wrote:
> >
> > > I uploaded the iso image for Doyen and included the a
> > > link in the Doyen webpage in the  Axiom Wiki:
> >
> > > http://wiki.axiom-developer.org/DoyenCD
> > >
> > > I would like to exhort anybody in the Axiom community that
> > > would like to try it, to give feedback, especially regarding
> > > hardware support or any other issue. Also any packages that
> > > could be included in the Live CD.
> >
> > I downloaded the iso and burnt a CD. The CD boots into
> > Fedora Core but prompts for a user name and password. I
> > think it would be better if it did an auto-login. It is
> > awkward to remember:
> >
> > Username: doyen
> > Password: doyen@org
> >
> > Regards,
> > Bill Page.

\start
Date: Tue, 24 Jan 2006 00:34:36 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [DoyenCD] Why run both Apache and Zope?

I think it is not necessary to run two web servers. For
machines with limited memory, this might be an issue.

The pages that you are now serving with Apache could
be easily handled by Zope as DTML pages.

\start
Date: Tue, 24 Jan 2006 00:41:04 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [DoyenCD] Issue #153 missing libdb.text

This error occurs in the version of Axiom installed on
the Doyen CD.

\start
Date: Tue, 24 Jan 2006 01:44:49 -0500
From: Alfredo Portes
To: Bill Page
Subject: Re: [DoyenCD] Why run both Apache and Zope?

You are absolutely right. However, at the beginning of the project we
started with Apache / Perl CGI to test some scripts using programs
like Axiom, Octave, Yacas, Maxima.... I particularly felt more
comfortable with Apache and PHP, that is one of the reasons the
current drag and drop application is written using
Apache/PHP/JavaScript.

I am getting familiar with Zope and DTML pages and also with Python,
so we can have
everything running inside Zope/ZWiki. :-). Hopefully, we can do this
really soon. Wilken
already has modified the edit page in ZWiki where we plan to place the
drag and drop.

Regards,

JAP

On 1/24/06, Bill Page <MathAction> wrote:

> I think it is not necessary to run two web servers. For
> machines with limited memory, this might be an issue.
>
> The pages that you are now serving with Apache could
> be easily handled by Zope as DTML pages.

\start
Date: Tue, 24 Jan 2006 00:52:08 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [DoyenCD] GraphViz in not installed

If I click 'edit' on this page:

http://wiki.axiom-developer.org/book--main--1/Endpaper3

and copy-and-paste the contents to a page on the Doyen Wiki
I get the following error message::

  Some or all of this page may not have rendered properly,
  because of the following error:

  dot: cd '/var/lib/zope/var/LatexWiki/Doyen'; rm -f *.dot;
  PATH=/usr/local/teTeX/bin/i686-pc-linux-gnu:$PATH
  latex --interaction nonstopmode 'TestPam.tex'
  /bin/sh: dot: command not found

This is because GraphViz in not installed on the Doyen CD.

\start
Date: Tue, 24 Jan 2006 00:56:22 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [DoyenCD] Use of Apache or ZWiki

You are absolutely right. However, at the beginning of the project we started with Apache / Perl CGI to test some scripts using programs like Axiom, Octave, Yacas, Maxima.... I particularly felt more comfortable with Apache and PHP, that is one of the reasons the current drag and drop application is written using Apache/PHP/JavaScript.

I am getting familiar with Zope and DTML pages and also with Python, so we can have everything running inside Zope/ZWiki and have only one webserver. Hopefully, we can do this really soon. Wilken already has modified the edit page in ZWiki where we plan to place the drag and drop.

>>For machines with limited memory, this might be an issue.

This really has not been an issue. We have tried the CD in computers with limited resources like 500 Mhz and 256 MB in RAM, and it works really well. The factor of a fast CD-ROM seems to be more important than anything else.

\start
Date: Tue, 24 Jan 2006 01:03:04 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [DoyenCD] LatexWiki logo and other customizations

I think the Doyen Wiki on the Doyen CD should have it's own
logo, for example such as the logo on the Axiom Wiki site.

Also, there are a number of other customization on the Axiom
Wiki site such as the point-and-click menu, Preview for
comments (maybe preview is not so important for local usage),
TouchGraph navigator, and expandable +/- text.

These are all implemented as customizations of the wikipage.pt
and macro files which can be copied from Axiom Wiki - details
which have yet to be properly documented. :(

\start
Date: Tue, 24 Jan 2006 01:09:43 -0600
From: MathAction (billpage)
To: MathAction
Subject: [DoyenCD] formatting of Axiom output on Doyen Wiki

Axiom output is not formatted the same way as in the Axiom
Wiki because of Axiom-specific stylesheet customizations,
for example the background color is missing and the word
'axiom' appears off the right hand side of the window.

The relevant parts of stylesheet.css could be copied from
Axiom Wiki.

\start
Date: Tue, 24 Jan 2006 01:23:04 -0600
From: MathAction (billpage)
To: MathAction
Subject: [DoyenCD] DoyenCD and IssueTracker

I have added a new category to IssueTracker for the
"Doyen CD":IssueTracker?category:list=Doyen%20CD&sort_on=status_index

Perhaps this will be more convenient than using email and comments.

\start
Date: Tue, 24 Jan 2006 01:27:39 -0600
From: MathAction (billpage)
To: MathAction
Subject: [#249 user id: doyen hangs log-in] (new) 

After booting from the Doyen CD, logging in as::

  user id: doyen
  password: doyen@org

causes the log-in to hang with a "blue screen" and mobile cursor.
It is necessary to restart by power-down power-up.

Logging in as::

  user id: root
  password: doyen@org

works.

\start
Date: Tue, 24 Jan 2006 01:35:17 -0600
From: MathAction (billpage)
To: MathAction
Subject: [#250 no link on desktop to Doyen Home Page or	Wiki] (new) 

After booting from the Doyen CD there is no obvious link to
the Doyen "Home Page". It is necessary to start FireFox from
the Applications/Internet menu to see the Home Page. The link
to Doyen Wiki is found near the bottom of the page.

A "launcher" should be added to the Desktop to the Doyen Wiki
and the contents of the Home Page should become the FrontPage
of the Doyen Wiki.

Other appropriate Axiom-related content should be selectively
copied from the Axiom Wiki.

\start
Date: Tue, 24 Jan 2006 05:29:58 -0600
From: MathAction (anonymous)
To: MathAction
Subject: [#251 About %%] (new) 

I'm using Axiom 3.9 and when I execute inverseLaplace I got a result
in function of %%A0 but Axiom dosn't say what %%A0 is. In gmane.comp.mathematics.axiom.general tell me that it could be a bug
not reporting what the temporaru symbol %%A0 is. Example:

\begin{axiom}
F(s) == (s**2 - 9*s - 32)/(2*s**3 - 3*s + 4)
inverseLaplace(F(s),s,x)
\end{axiom}

Regards,
Daniel

\start
Date: Tue, 24 Jan 2006 12:52:13 -0500
From: Bill Page
To: list
Subject: FW: Local MathAction

Simon Michael is the developer of ZWiki on which LatexWiki
and MathAction (Axiom Wiki) are based.

-----Original Message-----
From: Simon Michael [mailto:Simon Michael]

Hi Bill,

I see that you and others are doing sterling work on Axiom using Zwiki.
I began and gave up several posts to the list due to not having enough
time and context to really help in that medium. If you run into anything

I can help with, don't hesitate to chat me (sm on #zwiki, simonmichael
on AIM etc.)

Best
-Simon

\start
Date: Tue, 24 Jan 2006 10:46:46 -0800 (PST)
From: Cliff Yapp
To: list
Subject: Got copy of new book!

Got my copy of the new tutorial - ordered it through barnes and noble
to use a gift certificate.

Immediate comments:

I like the binding - clean, simple and functional.  We'll see how the
paper quality holds up over time, but at least at the get-go it doesn't
look too bad.

I am somewhat dismayed by the print quality - I don't know if it was
the printer or the fonts, or perhaps they converted the pdf to a bitmap
before printing - but the text print quality is well short of what I
would have expected.  The edges of letters seem "ragged" or uneven,
which sort of gives the impression that you are looking at a
copy-machine copy and not the output from a digital printing with
awareness of fonts.  This could be a function of my copy being an early
print, or maybe the press was having a bad day, but if this is standard
quality lulu will need to upgrade their abilities some.

I was also surprised by the large margins on the outer side and the
bottom - didn't we format to use the full page?  Or, if that makes the
page count too short or if we wanted the smaller content-per-page
format for better reading couldn't we have gone with a smaller printing
size than 8.5x11?  Failing that, couldn't they have centered the
content instead of leaving the big margins?  Or is that a stylistic
decision?  I know it's a nitpick, and I don't mean to sound harsh -
just curious as to the reason for this particular decision.  It's not a
formatting style I've seen in any other printed book I can recall.

Haven't had a chance to read much of it yet (just got it at lunch) so I
can't review the content yet.  

Nitpicks aside, thanks Tim et. al. for making this possible!

\start
Date: Tue, 24 Jan 2006 16:22:31 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [DoyenCD] GraphViz

Bill,

I included the Grapviz Package in the Doyen CD. However, when I copy the content from the http://wiki.axiom-developer.org/book--main--1/Endpaper3 page I get these errors:

latex: cd '/var/lib/zope/var/LatexWiki/Doyen'; rm -f *.dot; PATH=/usr/local/teTeX/bin/i686-pc-linux-gnu:$PATH latex --interaction nonstopmode 'LatexWiki.tex'
! Package keyval Error: final undefined.

See the keyval package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.1744 \ProcessOptionsWithKV{Hyp}
                                 
Implicit mode ON; LaTeX internals redefined
(/usr/share/texmf/tex/latex/html/url.sty))
*hyperref using driver hdvips*
(/usr/share/texmf/tex/latex/hyperref/hdvips.def
(/usr/share/texmf/tex/latex/hyperref/pdfmark.def))
(/usr/share/texmf/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?

I assume that it is missing some package similar to axiom.sty.

\start
Date: Tue, 24 Jan 2006 12:12:59 -0800 (PST)
From: Cliff Yapp
To: list
Subject: Ability to guarantee a non-hanging Axiom?

Admittedly this is not a problem I have encountered yet, but there are
general problems with solving some types of problems where the user
doesn't know when the computer will not succeed in reasonable time, or
there are multiple methods available (some of which yield a quick
solution in special cases) and the user doesn't know which method to
apply.  Is there a way to have Axiom, in cases where a calculation goes
for n seconds without returing an answer Axiom pauses the calculation
and prompts the user if they want to continue, and if so for how long? 
I don't know if this would require some sort of lisp image level magic,
but I was thinking maybe a macro could wrap every function call with a
"check time" conditional.  Then when a new input was sent from the
user, a global "running time" variable could keep track of how long
since the input was provided.  The "check time" conditional could see
if the total time since input was too great, and if so rather than
proceeding it could offer the user a prompt asking if they wanted to
continue.  If yes with no input for new running time, just reset the
"running time" value to zero and proceed with the actual function call.
 If a new running time limit is provided, subsequent checks can be
against that limit.  If the answer is no, the calculation can be
abandoned, a return of "calculation aborted" returned, and a new input
prompt provided.

This only works if a long calculation is calling more than one lisp
function, but for at least a fair number of cases it would work.  I
don't know how to ensure a "lisp kernel level" checkpoint of the
calculation, but that would be the ideal.

For some things, like solve, it would also be nice to use this feature
to do a "quick check" of a wide variety of solution techniques.  Say
there are four methods of finding some number related to a matrix, and
some are better for sparse and some are better for dense matricies. 
The difference might be so great that the user will notice a difference
if one method is tried vs. another (e.g. milliseconds vs. seconds). 
Since it's impossible to know this in advance, one strategy is to do a
"quick check" - run each technique on the problem with a max allowable
time of a fraction of a second, then perhaps a second each, and then
either pick one technique and run with it or contine to bump the time
each individual routine gets to try it.  Checkpointing each routine
would be nice but is probably very difficult to implement.  But if the
timing mechanism were in place it would make this kind of thing much
easier to do.

Does anybody know anything about such techniques?  i saw it mentioned a
few times on the Maxima list and it made sense to me, but I don't know
what the low level problems would be like.

\start
Date: Tue, 24 Jan 2006 18:53:07 -0500
From: Tim Daly
To: Cliff Yapp
Subject: Re: Ability to guarantee a non-hanging Axiom?

Magnus (sourceforge.net/projects/magnus) uses such a technique (time slicing)
because there are no algorithms, just procedures which may never terminate,
so it time-slices solutions.

Axiom uses the type information to choose the most specific algorithm.
Types can and do override 'general purpose' algorithms when a specific
one is available.

Currently there are very few lisps that support threads although, as 
you're aware, the lisp gardeners are chatting about it.

\start
Date: Tue, 24 Jan 2006 18:17:32 -0600
From: MathAction (Page, Bill)
To: MathAction
Subject: [DoyenCD] [DoyenCD] GraphViz

Alfredo 

On Tuesday, January 24, 2006 5:23 PM you wrote:
> 
> I included the Grapviz Package in the Doyen CD. However,
> when I copy the content from the 
> http://wiki.axiom-developer.org/book--main--1/Endpaper3 page 
> I get these errors:
> 
> latex: cd '/var/lib/zope/var/LatexWiki/Doyen'; rm -f *.dot; 
> PATH=/usr/local/teTeX/bin/i686-pc-linux-gnu:$PATH latex 
> --interaction nonstopmode 'LatexWiki.tex'
> ! Package keyval Error: final undefined.
> 
> See the keyval package documentation for explanation.
> Type  H <return>  for immediate help.
>  ...                                              
>                                                   
> l.1744 \ProcessOptionsWithKV{Hyp}
>                                  
> Implicit mode ON; LaTeX internals redefined
> (/usr/share/texmf/tex/latex/html/url.sty))
> *hyperref using driver hdvips*
> (/usr/share/texmf/tex/latex/hyperref/hdvips.def
> (/usr/share/texmf/tex/latex/hyperref/pdfmark.def))
> (/usr/share/texmf/tex/latex/amsmath/amsmath.sty
> For additional information on amsmath, use the `?
> 
> I assume that it is missing some package similar to
> axiom.sty.

I don't think the error has anything directly to do with
GraphViz, but rather hyperref. Unfortunately I do not know
very much about hyperref. The error above does not seem
to me to be a simple matter of a missing package, but
perhaps some incompatible packages.

What version of latex are you using? How were the tex
packages installed? What version of hyperref is installed.
Here is a reference to the standard hyperref distribution.

http://www.tug.org/applications/hyperref

This means keyval and url as dependencies - but I think
these are pretty standard.

Unfortunately I forget exactly how and when the tex
packages where installed in axiom-developer.org but the
files for hyperref are dated Oct 2004. It is possible that
they were included in the distribution of pdfetex that
I installed around that time. I get:

[page@axiom-developer page]$ latex --version
pdfeTeX 3.141592-1.21a-2.2 (Web2C 7.5.4)
kpathsea version 3.5.4

The best I can suggest is that you try to re-install a
newer verson of latex with a large compatible set of
packages. The standard distributions for linux are here:

http://www.tug.org/tetex

I suggest to first try getting the Endpaper3.tex file
to compile successfully outside of Doyen Wiki.

\start
Date: Tue, 24 Jan 2006 22:13:35 -0600
From: MathAction (unknown)
To: MathAction
Subject: [Axiom ScreenCast] movies

Yeh, get demostudio. Ck out the screencasts on video.google Search screencast.

\start
Date: Wed, 25 Jan 2006 15:57:28 +1000
From: Mike Thomas
To: Camm Maguire
Subject: 2.7.0 GUI

Hi Camm.

With HEAD up again on Windows I've returned to the issue of the Tk
binding as the Axiom crew are waiting on a LISP GUI.

I decided that gcl-tk is too tricky in itself as the server relies on a
function not available in the Windows version of Tcl/Tk and I would
rather a system in which a standard download of Tcl/Tk is all that is
needed.

Following that decision I tried directly binding Tk into GCL with
limited success - the event loop seizes even in a separate thread.  I
expect that there is a thread issue in GBC or something similar which we
can return to if/when we give GCL threads.

So I borrowed some code from ECL (their EXT::RUN-PROGRAM, similar to our
SI::RUN-PROCESS and which runs programs via pipes) and got the stable
version of Peter Herth's well regarded Tk binding LTK up on my locally
modified copy of HEAD; sufficiently well to run his demo programs.

It's far from being as nice as a native GUI, but it's a start.

The Unix version of that ECL code needs only minor infrastructural
details seen to.  If I get a chance on a Linux machine I'll work on it.

The GCL HEAD compiler has some trouble with the latest beta release of
LTK (0.88pre2).  Packages also seem to be causing some trouble for the
compiler.

LTK does not compile on the stable branch of GCL.

\start
Date: 25 Jan 2006 10:04:45 +0100
From: Martin Rubey
To: Cliff Yapp
Subject: Re: Ability to guarantee a non-hanging Axiom?

Cliff Yapp writes:

> Is there a way to have Axiom, in cases where a calculation goes
> for n seconds without returing an answer Axiom pauses the calculation
> and prompts the user if they want to continue, and if so for how long? 

I don't see the advantage over Ctrl-C, i.e., simply interupting the
computation. 

I would rather suggest:

* a convention like MuPAD's userinfo variable, that makes Axiom spit out
  information (in mathematical terms) about what it's doing currently.

* for selected algorithms, where a bound on the running time is known, to spit
  out this time. However, care has to be taken: "sort" for example has a known
  upper bound on running time, interpolation also. But you wouldn't want Axiom
  to say "sorting 5 elements, which will take approximately 0.000001 seconds" a
  million times. I am also concerned about efficiency a little here -- even if
  we chose to program: don't say anything unless it takes longer than 10
  seconds, we would have the overhead of calculating the bound on the running
  time.

\start
Date: Wed, 25 Jan 2006 04:16:49 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#253 factor returns wrong result] (new) 

\begin{axiom}
s :=-x^3+1/6*(-2*sqrt(6)+2*sqrt(3)+3*sqrt(2))*x^2+1/6*((sqrt(3)+sqrt(2))*sqrt(6)-2*sqrt(2)*sqrt(3))*x-sqrt(2)*sqrt(3)*sqrt(6)/6
t:=6*t
factor s
factor t
factor(6*t)
\end{axiom}

\start
Date: Wed, 25 Jan 2006 04:23:54 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#253 factor returns wrong result] 

There are several things to notice, in fact:

- The factorisation is nonsense

- I think that AlgebraicNumber should be able to simplify $\sqrt{2}\sqrt{3}\sqrt{6}$ to $\sqrt{36}$

- shouldn't $sqrt{36}$ be simplified to $6$? Usually, 'sqrt' denotes the positive square root.

Martin

\start
Date: Wed, 25 Jan 2006 04:50:07 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#253 factor returns wrong result] 

In fact, the problem shows already with

\begin{axiom}
s :=x^2-sqrt(2)*sqrt(3)*sqrt(6)/6
\end{axiom}

and it seems to occur in  'InnerAlgFactor':
\begin{axiom}
)tr InnerAlgFactor  )ma
factor(s)
\end{axiom}

\start
Date: Wed, 25 Jan 2006 05:00:09 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#254 'factor$AN' doesn't factor $x^2-2$] (new) 

I think that this is also a bug:
\begin{axiom}
factor(x^2-2::POLY AN)
\end{axiom}

I'd expect $(x-\sqrt{2})(x+\sqrt{2})$.

\start
Date: Wed, 25 Jan 2006 04:55:08 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#253 factor returns wrong result] 

??changed:
-s :=x^2-sqrt(2)*sqrt(3)*sqrt(6)/6
s :=x^2-sqrt(2)*sqrt(3)*sqrt(6)

\start
Date: Wed, 25 Jan 2006 09:52:28 -0600
From: MathAction (billpage)
To: MathAction
Subject: [Axiom ScreenCast] volunteers to produce Axiom	screencast demos

Yes, demostudio looks pretty nice - probably easier than wink.

Now all we need is for some volunteers to produce some really
useful demos!

http://sourceforge.net/projects/demostudio
http://software.newsforge.com/article.pl?sid=05/09/08/177226&tid=131&tid=75
http://ic-server02.info-commons.uiowa.edu/blog/archives/demostudio-screen-capture-utility/

"Advanced CamStudio 3 Screen capture program for presentations and
software demonstrations like Camtasia. Screen Recorder saves video
as avi or swf flash movie. Auto Snapshot feature, Gallery Maker,
jpg to avi converter, full annotations, audio support." (Windows only)

\start
Date: Wed, 25 Jan 2006 14:03:09 -0600
From: MathAction (billpage)
To: MathAction
Subject: [TeXmacs] Axiom graphics in TeXmacs

From: Andrey

It is easy to modify tm_axiom.c to start axiom (with hypertex
and graphics)

Instead of starting AXIOMsys, it should start 'axiom -noclef'

Also, in void session(void), declare::

  int prompts=0;

and, a few lines later, replace the line::

  else if (code==PROMPT) break;

by the line::

  else if (code==PROMPT) { if ((++prompts)==2) break; }

However, it would be much better to fix this damn double-prompt
problem once and for all. Axiom *must not* write a prompt when
it is not prompting the user to input something.

\start
Date: Wed, 25 Jan 2006 16:40:40 -0600
From: MathAction (unknown)
To: MathAction
Subject: [FreeAldor] An integrated Axiom with a free Aldor would be great

Having Axiom packaged with aldor for various linux distributions would make it easy to install and use them. 
 -- B Thomas

\start
Date: Wed, 25 Jan 2006 20:29:11 -0600
From: MathAction (unknown)
To: MathAction
Subject: [FreeAldor] The aldor language source would be	very educational.

It would be very educational to discover what was changed from Spad to Aldor, and why that makes Aldor a better language... (assuming that it is).  The source to language implementations is very important to the future of the art and science of computer programming.  It would be very gracious of you to release it to everyone, as part of the Axiom system.

Karl Hegbloom

\start
Date: Thu, 26 Jan 2006 03:40:31 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] (new) 

Here are some related "wish list" items:

1 It should be possible to permanently safe the edits made
  in the Doyen Wiki on the DoyenCD. This would require that
  a copy of the Zope Data.fs file be saved and restored from
  some external writable media or local harddisk.

2 It should be possible to boot the DoyenCD and use it to
  install Linux and the rest of the contents of the CD to
  a virgin computer.

3 It should be possible to mount the Doyen CD on an existing
  Linux system and use it to install the Doyen Wiki and its
  default contents onto the local hard disk.

4 It should be possible to mount the Doyen CD on an existing
  Linux system and use it to install Axiom on the local hard
  disk.

These capabilities would make it possible for users to continue
to enjoy these programs after the intial fun of playing with
the CD wears off. :)

\start
Date: Thu, 26 Jan 2006 10:04:59 -0500
From: Bill Page
To: list
Subject: Aldor and open source
Cc: Stephen Watt

Dear Aldor Developers and Users;

As you know, Aldor was originally developed at IBM as the new
version of the Axiom library compiler. All of the original
IBM Axiom source code is now available as open source with the
sole exception of Aldor. For historical reasons, the licensing
of Aldor is different from Axiom. However in October 2005
Steven Watt told me, in response to my request for information
on the Aldor source license, that open source licensing of
Aldor was then being considered.

It is possible to use Aldor now in the open source version
of Axiom. Many Axiom developers are anxious to carry-out the
original plan of converting all of Axiom's library source code
to Aldor and to continue all new development for Axiom using
Aldor. However the current licensing conditions apparently
prevent the inclusion of the Aldor compiler source code in
the Axiom open source distribution. As a result much of the
energy to update Axiom's mathematical library has been
essentially stalled, awaiting a clarification of this issue.

Many of the Axiom developers and Axiom users have "signed"
an online petition to show there support and encourage the
compatible open source licensing of the Aldor compiler.
See:

http://wiki.axiom-developer.org/FreeAldor

Please consider adding your name to this petition.

For an advanced programming language like Aldor to live and
grow, it is essential that the user and developer communities
be as large as possible. Making the Aldor source available
under an open source license to the entire Axiom community
would greatly help both of these projects to thrive once
again.

I would like to offer to help with the process of making
Aldor open source. If any one has any suggestions about how
to do this, please let me know.

Sincerely,
Bill Page.

Cc. Steven Watt

\start
Date: Thu, 26 Jan 2006 09:15:02 -0600
From: MathAction (Stephen Watt)
To: MathAction
Subject: [FreeAldor] Freeing Aldor

Thank you to Bill Page for bringing this web site to my attention.

I am supportive of this movement, and have started discussions to move in this direction.

Stephen Watt

\start
Date: Thu, 26 Jan 2006 09:29:13 -0600
From: MathAction (unknown)
To: MathAction
Subject: [FreeAldor] Active Aldor community

Having Aldor being a vibrant language would be wonderful.  Right now,
I find myself in the position where I do my math hacking in Maple, but
my 'formal' mathematical programming in either MetaOCaml or Haskell,
because those languages are much more vibrant than Aldor (and they are
typed!).  If 'freeing' Aldor would allow it to thrive, then by all
means, free it!

Jacques Carette

\start
Date: Thu, 26 Jan 2006 12:11:45 -0600
From: MathAction (unknown)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] DoyenCD wish list

1. Is Zope Data.fs file the only required file?

2. This possibly can be done by creating a menu at boot time, giving the user the option to install to HD.

3. Will the user be required to have Zope/ZWiki/LatexWiki already installed?

4. When the CD is placed in a machine (Linux, Windows), it could be possible to find
   Axiom in a directory called tools. I guess Axiom installation instructions must be
   placed there too.

\start
Date: Thu, 26 Jan 2006 12:13:52 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] 

1 Is Zope Data.fs file the only required file?

2 This possibly can be done by creating a menu at boot time, giving
the user the option to install to HD.

3 Will the user be required to have Zope/ZWiki/LatexWiki already installed?

4 When the CD is placed in a machine (Linux, Windows), it could be
  possible to find Axiom in a directory called tools. I guess Axiom
  installation instructions must be placed there too.

\start
Date: Thu, 26 Jan 2006 21:29:53 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] saving edits

> 1 Is Zope Data.fs file the only required file?

Actually, no. It is also necessary to save .../var/LatexWiki
where the images and the local Axiom NRLIBS are stored.

You should **not** assume that the Zope/LatexWiki is installed.
It is possible that the only time the user will be running this
software is when they boot from the Doyen CD, but they might
still want to be able to carry-on editing the contents of the
Doyen Wiki the next time they boot it up.

\start
Date: Thu, 26 Jan 2006 22:17:33 -0600
From: MathAction (alfredo)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] Install Doyen Wiki in Local System

In regards to installing Doyen Wiki on a local system, how would this
happen? Create a script that install Zope/ZWiki/LatexWiki for the user
automatically. If so, would it matter that the users have different
distros? or should everything be compiled from source? The saving of
the Doyen Wiki for a future user session is clear, but I am not clear
about the procedure to install the Doyen Wiki locally.

Regards,

Jose Alfredo Perez 

\start
Date: Thu, 26 Jan 2006 22:59:37 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [DoyenCD] Doyen Lived - with Drag and Drop 

**Doyen-livecd Beta**

After a few days of tweaking the current Latexwiki, we are proud to
say that we have successfully built a Doyen-livecd with support for
pamphlet-wiki pages. In addition to the latter a new feature known as
the Doyen drag and drop box has been implemented, using DTML and
Python, and added to the Doyen-Wiki. The user is now able to drag
remote links of pamphlet files into the drag and drop box and use the
provided buttons to create a new local pamphlet-wiki page instantly.

The doyen development has uploaded the lastest doyen-livecd iso for
testing purposes. We are working on the latest documentation for this
project and would encourage all doyen testers to provide as much
feedback as possible. We at the Doyen labs are always open to comments
and new suggestions on how to enhance and improve the doyen
project. For more information on doyen and other doyen projects or if
you are interested in assisting with the development of doyen please
join our mailing-list doyencd-developer@lists.sourceforge.net

 At the moment I would like to give many thanks to Tim Daly, Bill Page
 and all that have worked with us in fixing the bugs in the past
 builds.

**Latest iso**

"http://alfredo.axiom-developer.org/redhatbuild/pkgs/doyenfc3.iso":http://alfredo.axiom-developer.org/redhatbuild/pkgs/doyenfc3.iso

\start
Date: Thu, 26 Jan 2006 23:03:59 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [DoyenCD] Doyen Lived with Drag and Drop

After a few days of tweaking the current Latexwiki, we are proud to
annouce that we have successfully built a Doyen-livecd with support
for pamphlet-wiki pages. In addition to the latter a new feature known
as the Doyen drag and drop box has been implemented, using DTML and
Python, and added to the Doyen-Wiki. The user is now able to drag
remote links of pamphlet files into the drag and drop box and use the
provided buttons to create a new local pamphlet-wiki page instantly.

The lastest doyen-livecd iso for testing purposes. We are working on
the latest documentation for this project and would encourage all
doyen testers to provide as much feedback as possible. We at the Doyen
labs are always open to comments and new suggestions on how to enhance
and improve the doyen project. For more information on doyen and other
doyen projects or if you are interested in assisting with the
development of doyen please join our mailing-list
doyencd-developer@lists.sourceforge.net

\start
Date: Thu, 26 Jan 2006 23:05:09 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [DoyenCD] Doyen Lived with Drag and Drop

The lastest doyen-livecd iso has been uploaded for testing
purposes. We are working on the latest documentation for this project
and would encourage all doyen testers to provide as much feedback as
possible. We at the Doyen labs are always open to comments and new
suggestions on how to enhance and improve the doyen project. For more
information on doyen and other doyen projects or if you are interested
in assisting with the development of doyen please join our
mailing-list

\start
Date: Thu, 26 Jan 2006 23:07:47 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [DoyenCD] Doyen Livecd with Drag and Drop

Subject: Doyen Livecd with Drag and Drop 

\start
Date: Fri, 27 Jan 2006 00:00:53 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [DoyenCD] 

The latest doyen-livecd iso has been uploaded for testing purposes. We are working on the latest documentation for this project and would encourage all doyen testers to provide as much feedback as possible. We at the Doyen labs are always open to comments and new suggestions on how to enhance and improve the doyen project. For more information on doyen and other doyen projects or if you are interested in assisting with the development of doyen please join our mailing-list 

\start
Date: Fri, 27 Jan 2006 00:22:26 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [#256 unable to restart from the cd] (new) 

Currently the when a user tries to restart the livecd using the logout menu the system hangs, causing the user to do a hard reboot

\start
Date: Fri, 27 Jan 2006 00:23:03 -0600
From: MathAction (wrivera)
To: MathAction
Subject: [#257 unable to restart from the cd] (new) 

Currently when a user tries to restart the livecd using the logout menu the system hangs causing the user to do a hard reboot.

\start
Date: Fri, 27 Jan 2006 10:04:22 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#255 install DoyenWiki from DoyenCD] Re: Install Doyen Wiki in Local System

I don't think you want to compile everything from source - that
would be too much. You have to make some assumptions. Already
with the Doyen CD you are assuming at least an x86 processor.
A simple script that would copy all the required binaries and
start the necessary processes might be ok in many cases. But be
careful not to overwrite any of the user's existing stuff without
warning! And also provide an un-install script.

Different Linux distributions and even different libraries in
different versions is likey to cause some problems. Perhaps this
can be minimized by using static linking as much as possible.
But in any case since the Doyen CD is based on Fedora, at least
it should be possible to configure things so installation is
possible on all Red Hat distros. There is a good chance this
might also work with recent versions of SuSE.

Maybe there should also be a Debian/Knoppix variant of the
DoyenCD?

Better would be to include the necessary yum/yast/apt ...
repositories on the CD and instructions on how to use the
native install for each distro. OK... this does sound like
a bit of extra work! :)

\start
Date: Fri, 27 Jan 2006 06:41:11 -0600
From: MathAction (kratt6)
To: MathAction
Subject: [#258 RectangularMatrixCategory should have Finite when this is the case] (nouveau) 

\begin{axiom}
SquareMatrix(2, PF 5) has Finite
\end{axiom}

It is straightforward to implement this, though. The appropriate category would be 'RectangularMatrixCategory' in 'matcat.spad.pamphlet'.

\start
Date: Sat, 28 Jan 2006 10:49:54 -0600
From: MathAction (unknown)
To: MathAction
Subject: [#127 Building axiom from source fails on my Fedora Core 3] FC3

Tried the echo 0>.....
It didn't help; perhaps I need to reboot?
The setarch ...-X make also failed. 
I can make a batch file that's to prove the above if needed, but it's the randomized sbrk still failed.

\start
Date: Fri, 27 Jan 2006 18:39:58 -0600
From: Gordon Novak
To: Camm Maguire
Subject: XGCL
Cc: Robert Boyer, David Kotz, Warren Hunt, Gordon Novak, Kay Nettle, Matt Kaufmann, Wilfred Legato

Camm,

I have updated the XGCL files.  You should take the files you have
in xgcl-2/ and then get all the files in ftp.cs.utexas.edu
/pub/novak/xgcl-4/ which will over-ride some files and add others.

I looked at the code that includes X10.h; ultimately it looks like
this was never used, so I deleted it.  This is done in new versions
of gcl_general.lsp and general-c.c .

I think you know a lot more than I do about the issues of how to
include XGCL within GCL and compile it.  The way it is done now was
set up by William Schelter.  Anything that is reasonable and works
is okay with me.

As for autoloading, you could use your judgment there.  I don't mind
explicitly loading something.  The XGCL code is not too big, so it
could just be included with GCL if you want.  The thing that is big
is the Xlib; if that is a shared library, it might not be much addition.
On my machine saved_gcl* is 8575667 and saved_xgcl* is 9925314 or +16%.
In the "good old days" 10MB was a lot, but now it is 1% of a PC.

I changed dwtrans.lsp to export symbols.  This should allow users to
just say (use-package 'xlib) and get the symbols that way.  Most of
the symbols are long hyphenated names that should not conflict with
any user symbols, the possible exceptions being MENU, WINDOW, and
STRINGIFY; only STRINGIFY is a function.

The remaining symbols in the file dwimportsb.lsp include some
symbols that might duplicate user symbols, but nobody should need to
load this file except for me when compiling dwindow.lsp .

I updated the documentation dwdoc.tex a bit, including some on the
color editor and Emacs-like editor.  I also put in pointers to my
web site for examples and for pages on how to use this interface
to have an interactive graphical interface to Lisp within a web page.
I converted the dwdoc.tex documentation into .dvi, .ps, .pdf, and .html
versions.

I was able to compile GCL and XGCL last week, but not this week; it
got the following error:
   /usr/lib/libbfd.a(cache.o): In function `bfd_open_file':
   ../../bfd/cache.c:440: undefined reference to `unlink_if_ordinary'
Kay said:
>Does your build really want the staticly linked library?  I would use 
>the shared library if possible.  
The build that did not work is /p/src/gcl-2.6.8pre/
The one that worked is /p/src/gcl-2.6.8prea/

I tested by running the /p/src/gcl-2.6.8prea/unixport/saved_xgcl
and loading my new dwtrans.lsp on top of it.  The file dwtestcases.lsp
has some test cases.

You might try including my /xgcl-4/ files in your build, and we can
see if it works okay.  I will repeat it here as soon as whatever the
compile problem is gets fixed.

This is a bit off the subject, but I wonder if it would be good to
make a WHILE macro part of GCL.  Allegro CL has WHILE (and gives an
error if you try to redefine it), making a bit of a compatibility
problem between GCL and ACL.  Here is the definition I use:
(defmacro while (test &rest forms) `(loop (unless ,test (return)) ,@forms) )

Many thanks for your help with XGCL.
Best regards, Gordon

\start
Date: Mon, 30 Jan 2006 15:03:08 -0500
From: Bill Page
To: Yigal Weinstein
Subject: special functions

Yigal,

On January 30, 2006 1:11 AM on you wrote:
> 
> I think the numerical function in SPAD for gamma(a,x) should
> have several parts.  One for x>a+1, and a few others.  Is
> this appropriate?
> 

Well, the best way to implement gamma is probably exactly
the way it is done in Recipes - by first implementing the
functions lngamma, P and Q. If you wanted to do that, I think
it would be ok. In general it would be good to be able to
use the algorithms more or less directly from Recipes since
these are so very well known and a lot of thought has gone
into their development.

But the version of gamma that I adapted for SPAD is probably
"good enough" in most cases. The only real issue is that it
does not converge are rapidly as the series approximation in
the case x<=a+1. But the test I did suggest that this is not
really a problem unless you are very worried about performance
and this is not an issue on most modern computers.

I do currently have a technical problem with the SPAD code for
the case of gamma(a,0) - see the web page.

http://wiki.axiom-developer.org/SandBoxGamma

It seems to be an issue with the SPAD compiler since I can
successfully compile the same code using the Aldor compiler.
Unfortunately Aldor is not yet easily available with the open
source version of Axiom.

A bigger issue seems to me to be the way Gamma(x) is currently
impletement in Axiom. I was a little horrified to see that it
is actually implemented in BOOT code. Horrified because while
BOOT is (nearly) as readable as SPAD, it is much closer to the
machine level and therefore correspondingly harder to debug.
In my opinion BOOT has it's place at the deeper levels of the
Axiom interpreter and the SPAD compiler itself, but I think this
is completely unnecessary when it comes to Algebra code.

http://wiki.axiom-developer.org/axiom--test--1/src/interp/SfsfunBoot

The second thing is that I do not like the way that the special
functions have been implemented as part of the DoubleFloat
domain. This is quite in contrast to the way that the trignometric
functions have been implemented. One consequence is that it is
hard to control when one wants to treat Gamma(x) symbolically
(as one might do in the case of symbolic integration etc.) and
when to treat it numerically.

For example:

(1) -> sin(1)

   (1)  sin(1)
                                  Type: Expression Integer
(2) -> sin(1)::Expression Float

   (2)  0.8414709848 0789650665
                                    Type: Expression Float
(3) -> Gamma(1)

   (3)  1.0
                                         Type: DoubleFloat
(4) -> Gamma(1,2)
         _
   (4)  | (1,2)
                                  Type: Expression Integer

-----------

I don't think there should be this difference in behaviour
between Gamma(x), Gamma(a,x) and sin(x). Fixing this will
likely require some deeper surgery in Axiom.

Comments from everyone would be most welcome.

See also: Related thread on axiom-math.

\start
Date: Mon, 30 Jan 2006 14:22:47 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [#259 redhat update deamon] (new) 

The update deamon should be disabled on the DoyenCD.
In my tests, after using the Doyen CD for a while, it
suddenly goes into overdrive accessing the disk and
using up all the resources on my small laptop.

One process in particular 'prelink' seems to be working
overtime. What is it's purpose? Is it part of the Red Hat
update stuff?

\start
Date: Mon, 30 Jan 2006 18:27:36 -0500
From: Bill Page
To: Yigal Weinstein
Subject: RE: special functions

Yigal,

I think it is best if we try to keep the discussion on the
email lists (either axiom-developer or axiom-math) so that
other people can contribute.

On January 30, 2006 3:57 PM you wrote:
> 
> 1.  Your code in the SandBox does not allow for gamma(0,x),
> i.e. where a=0 (the link for some reason is down right now
> so perhaps you have changed things a bit but this is from
> viewing it yesterday).

There is an intermitant problem with the server. It should be
working now. I think the case of a=0 is handled correctly.

> 
> 2.  To not use the symbolic capabilities of Axiom to 
> numerically compute Gamma seams quite a waste.

I am not quite sure what you mean by "use symbolic capabilities
to numerically compute"? This phrase does not seem to make sense
to me. Could you please explain?

> The continued fraction in equation 6.2.7 in NR is based upon
> 100s of years of work.  NR creates a good algorithm however my
> understanding is that a CAS can simply do more than a Fortran,
> or C numerical cranking code program.

No, I don't think so. Numerical evaluation is the same whether
it is done in Fortran or in SPAD. Actually the word "numerical"
is often miss-used. Really the distinction is between "exact"
and "approximate". Computer algebra systems (CAS) are designed
to be good at exact or symbolic computation but can usually also
do various kinds of approximate or numeric calculation. Fortran
is not so good at symbolic computation, but it is possible.

Perhaps to over state this issue a little: Really there is no
such thing as numeric computation (except perhaps for the
analog simulation engines which are very little used today).
All computation on a digital computer is symbolic by it's very
nature. What we call "numeric" is really just a very specialize
kind of symoblic calculation that is especially suited to
approximate calculations that take account of the technical
limitations of the hardware (memory and word size).

> This is why I spent time creating a c-fraction for this
> function.  So why recreate what has already been done.  

But the code from NR *does* use the continued fraction
method of evaluation the incomplete gamma function!

Axiom's ContinueFraction domain is something else. It's
purpose is to represent a continued fraction in it's full
*exact* infinite form. That's why it is specified in terms
of Streams (infinite lists). Of course this does not mean that
we need infinite memory. Instead what we have is an algorithm
that can produce as many aproximants as we desire and/or have
time and memory available. What you were writing is not a
numerical method, it is really a method for the *exact*
representation of the incomplete Gamma function.

You should read especially the section in the Axiom book
section 9.12 (page 498) about ContinuedFraction. It is important
to understand in what sense the continued fraction:

z := continuedFraction(3,repeating [1],repeating [3,6])

represents sqrt(11) *exactly*. In principle it is possible to
define exactly what one means by

  z*z = continuedFraction(11)

symbolically (exactly). Similarly you could take your
continuedFraction expression for gamma(a,x) and then

  z*gamma(1,2)

is an exact expression.

Then from such exact expressions one can extract the desired
approximant as needed.

All of this is only "in principle" however because Axiom's
ContinuedFraction domain has some serious limitations.

Also, there are some other methods besides continued fractions
that might be a better representation for exact reals.

> 
> 3.  That is can't Axiom feed gfortran (I am a linux user) etc.
> a code and it can do that dirty work- even using GMP to get
> arbitrary precision.

Axiom already uses GMP.

> Axiom should be able to do other tasks like first symbolically
> calculate a function use it in a symbolic calculation,
> convert the fraction to another one etc. and find the nth
> order convergent symbolically and then feed other programs
> the numerical work. This is my feeling.  

I agree with your feeling, but I am not entirely sure how to
put it into practice.

> 
> Fortran, C, etc. have had so many man hours spent trying to
> make them extremely good at computing that it seams only fair
> to use them and to work on tasks that they simply cannot perform -
> symbolic manipulations.    
> 

As I said above, I think that is not "exactly" true. :)

\start
Date: Mon, 30 Jan 2006 19:38:07 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [RealNumbers] Exact real computer arithmetic with continued fractions

http://www.inria.fr/rrrt/rr-0760.html

RR-0760 - Exact real computer arithmetic with continued fractions::

    Vuillemin, J.
    Rapport de recherche de l'INRIA - Rocquencourt
    49 pages - Novembre 1987 - Document en anglais
    Fichier PostScript / PostScript file (1821 Ko) Fichier PDF / PDF file (1761 Ko)

- ftp://ftp.inria.fr/INRIA/publication/publi-ps-gz/RR/RR-0760.ps.gz

- ftp://ftp.inria.fr/INRIA/publication/publi-pdf/RR/RR-0760.pdf

Note that Axiom already has a domain for ContinuedFractions:

http://wiki.axiom-developer.org/axiom--test--1/src/algebra/ContfracSpad

\start
Date: Mon, 30 Jan 2006 17:20:56 -0800
From: Yigal Weinstein
To: Bill Page
Subject: Re: special functions

------=_Part_11711_5587037.1138670456645

First and foremost it is important to realize there is a computational
history before Axiom.  What I think is important from this history is that
several programs have been developed to find approximate results also known
as non-exact or numerical results for problems.  I will call them
approximating programs as a set.  These include Fortran, C, etc..

Now for where I think I differ with you Bill.  Axiom is a CAS.  As such it
has built in capabilities and certain tools that are different than an
approximating programs.  It has the ability to help us solve a problem
exactly.  This makes Axiom as well as all other CAS's vastly different than
approximating programs.

Should Axiom be an all in one computer program for solving math problems?  I
believe this is asking too much for any program.  Should an NR program be
converted to SPAD? As such this is  in my opinion very low if non-existent
on the agenda for improving Axiom.

The one way gpl'd programs have an advantage on proprietary software is that
they can use existing gpl'd programs without worrying about licenses etc..
For instance consider all the work done in Fortran like quadpack etc..
Axiom if asked for a numerical result could if linking was considered could
use the existing libraries to compute practically any function.

In fact this is just the strategy used by the proprietary Axiom.  To link it
to NAG was what was done.  There are plenty of high quality libraries that
can be used for numerical approximations in Fortran that are gpl: lapack is
but one of them.

Is this better than Mathematica?  Well I guess the analogy may be something
like is it better to sleep with many partners than with just one.  By this I
mean, problems of using other programs to calculate numerical values may
include trusting the approximating program that you are using and the
library that it uses to find a numerical value.  That is if many sources are
used then we have to trust each one is not faulty.  Mathematica or Maple
probably rely on there own programs for approximate results.   However there
are trusted libraries to approximately solve math problems that are gpl'd
and that people are working right now on, like GSL.

If I am not seeing the full picture please enlighten me.  Otherwise I do not
understand why any approximation for a function need be incorporated into
SPAD.

Yigal


\start
Date: Mon, 30 Jan 2006 19:45:01 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [ContinuedFractions] (new) 

Description:

'ContinuedFraction' implements general continued fractions.
This version is not restricted to simple, finite fractions and
uses the 'Stream' as a representation.  The arithmetic functions
assume that the approximants alternate below/above the convergence
point. This is enforced by ensuring the partial numerators and
partial denominators are greater than 0 in the Euclidean domain
view of 'R' (i.e. 'sizeLess?(0, x)'). 

\begin{spad}
)abbrev domain CONTFRAC ContinuedFraction
++ Author: Stephen M. Watt
++ Date Created: January 1987
++ Change History:
++   11 April   1990
++    7 October 1991 -- SMW: Treat whole part specially.  Added comments.
++ Basic Operations:
++   (Field), (Algebra),
++   approximants, complete, continuedFraction, convergents, denominators,
++   extend, numerators, partialDenominators, partialNumerators,
++   partialQuotients, reducedContinuedFraction, reducedForm, wholePart
++ Related Constructors:
++ Also See: Fraction
++ AMS Classifications: 11A55 11J70 11K50 11Y65 30B70 40A15
++ Keywords: continued fraction, convergent
++ References:


ContinuedFraction(R): Exports == Implementation where
  R :     EuclideanDomain
  Q   ==> Fraction R
  MT  ==> MoebiusTransform Q
  OUT ==> OutputForm

  Exports ==> Join(Algebra R,Algebra Q,Field) with
    continuedFraction:        Q -> %
      ++ continuedFraction(r) converts the fraction \spadvar{r} with
      ++ components of type \spad{R} to a continued fraction over
      ++ \spad{R}.

    continuedFraction:        (R, Stream R, Stream R) -> %
      ++ continuedFraction(b0,a,b) constructs a continued fraction in
      ++ the following way:  if \spad{a = [a1,a2,...]} and \spad{b =
      ++ [b1,b2,...]} then the result is the continued fraction
      ++ \spad{b0 + a1/(b1 + a2/(b2 + ...))}.

    reducedContinuedFraction: (R, Stream R) -> %
      ++ reducedContinuedFraction(b0,b) constructs a continued
      ++ fraction in the following way:  if \spad{b = [b1,b2,...]}
      ++ then the result is the continued fraction \spad{b0 + 1/(b1 +
      ++ 1/(b2 + ...))}.  That is, the result is the same as
      ++ \spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.

    partialNumerators:   % -> Stream R
      ++ partialNumerators(x) extracts the numerators in \spadvar{x}.
      ++ That is, if \spad{x = continuedFraction(b0, [a1,a2,a3,...],
      ++ [b1,b2,b3,...])}, then \spad{partialNumerators(x) =
      ++ [a1,a2,a3,...]}.

    partialDenominators: % -> Stream R
      ++ partialDenominators(x) extracts the denominators in
      ++ \spadvar{x}.  That is, if \spad{x = continuedFraction(b0,
      ++ [a1,a2,a3,...], [b1,b2,b3,...])}, then
      ++ \spad{partialDenominators(x) = [b1,b2,b3,...]}.

    partialQuotients:    % -> Stream R
      ++ partialQuotients(x) extracts the partial quotients in
      ++ \spadvar{x}.  That is, if \spad{x = continuedFraction(b0,
      ++ [a1,a2,a3,...], [b1,b2,b3,...])}, then
      ++ \spad{partialQuotients(x) = [b0,b1,b2,b3,...]}.

    wholePart:           % -> R
      ++ wholePart(x) extracts the whole part of \spadvar{x}.  That
      ++ is, if \spad{x = continuedFraction(b0, [a1,a2,a3,...],
      ++ [b1,b2,b3,...])}, then \spad{wholePart(x) = b0}.

    reducedForm:         % -> %
      ++ reducedForm(x) puts the continued fraction \spadvar{x} in
      ++ reduced form, i.e.  the function returns an equivalent
      ++ continued fraction of the form
      ++ \spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.

    approximants:        % -> Stream Q
      ++ approximants(x) returns the stream of approximants of the
      ++ continued fraction \spadvar{x}. If the continued fraction is
      ++ finite, then the stream will be infinite and periodic with
      ++ period 1.

    convergents:         % -> Stream Q
      ++ convergents(x) returns the stream of the convergents of the
      ++ continued fraction \spadvar{x}. If the continued fraction is
      ++ finite, then the stream will be finite.

    numerators:          % -> Stream R
      ++ numerators(x) returns the stream of numerators of the
      ++ approximants of the continued fraction \spadvar{x}. If the
      ++ continued fraction is finite, then the stream will be finite.

    denominators:        % -> Stream R
      ++ denominators(x) returns the stream of denominators of the
      ++ approximants of the continued fraction \spadvar{x}. If the
      ++ continued fraction is finite, then the stream will be finite.

    extend:              (%,Integer) -> %
      ++ extend(x,n) causes the first \spadvar{n} entries in the
      ++ continued fraction \spadvar{x} to be computed.  Normally
      ++ entries are only computed as needed.

    complete:            % -> %
      ++ complete(x) causes all entries in \spadvar{x} to be computed.
      ++ Normally entries are only computed as needed.  If \spadvar{x}
      ++ is an infinite continued fraction, a user-initiated interrupt is
      ++ necessary to stop the computation.

  Implementation ==> add

 -- isOrdered  ==> R is Integer
    isOrdered  ==> R has OrderedRing and R has multiplicativeValuation
    canReduce? ==> isOrdered or R has additiveValuation

    Rec ==> Record(num: R, den: R)
    Str ==> Stream Rec
    Rep :=  Record(value: Record(whole: R, fract: Str), reduced?: Boolean)

    import Str

    genFromSequence:     Stream Q -> %
    genReducedForm:      (Q, Stream Q, MT)    -> Stream Rec
    genFractionA:        (Stream R,Stream R)  -> Stream Rec
    genFractionB:        (Stream R,Stream R)  -> Stream Rec
    genNumDen:           (R,R, Stream Rec)    -> Stream R

    genApproximants:     (R,R,R,R,Stream Rec) -> Stream Q
    genConvergents:      (R,R,R,R,Stream Rec) -> Stream Q
    iGenApproximants:    (R,R,R,R,Stream Rec) -> Stream Q
    iGenConvergents:     (R,R,R,R,Stream Rec) -> Stream Q

    reducedForm c == 
        c.reduced? => c
        explicitlyFinite? c.value.fract =>
                      continuedFraction last complete convergents c
        canReduce? => genFromSequence approximants c
        error "Reduced form not defined for this continued fraction."

    eucWhole(a: Q): R == numer a quo denom a

    eucWhole0(a: Q): R ==
        isOrdered =>
            n := numer a
            d := denom a
            q := n quo d
            r := n - q*d
            if r < 0 then q := q - 1
            q
        eucWhole a

    x = y ==
        x := reducedForm x
        y := reducedForm y

        x.value.whole ^= y.value.whole => false

        xl := x.value.fract; yl := y.value.fract

        while not empty? xl and not empty? yl repeat
            frst.xl.den ^= frst.yl.den => return false
            xl := rst xl; yl := rst yl
        empty? xl and empty? yl

    continuedFraction q == q :: %

    if isOrdered then
        continuedFraction(wh,nums,dens) == [[wh,genFractionA(nums,dens)],false]

        genFractionA(nums,dens) ==
            empty? nums or empty? dens => empty()
            n := frst nums
            d := frst dens
            n < 0 => error "Numerators must be greater than 0."
            d < 0 => error "Denominators must be greater than 0."
            concat([n,d]$Rec, delay genFractionA(rst nums,rst dens))
    else
        continuedFraction(wh,nums,dens) == [[wh,genFractionB(nums,dens)],false]

        genFractionB(nums,dens) ==
            empty? nums or empty? dens => empty()
            n := frst nums
            d := frst dens
            concat([n,d]$Rec, delay genFractionB(rst nums,rst dens))

    reducedContinuedFraction(wh,dens) ==
        continuedFraction(wh, repeating [1], dens)

    coerce(n:Integer):% == [[n::R,empty()], true]
    coerce(r:R):%       == [[r,   empty()], true]

    coerce(a: Q): % ==
      wh := eucWhole0 a
      fr := a - wh::Q
      zero? fr => [[wh, empty()], true]

      l : List Rec := empty()
      n := numer fr
      d := denom fr
      while not zero? d repeat
        qr := divide(n,d)
        l  := concat([1,qr.quotient],l)
        n  := d
        d  := qr.remainder
      [[wh, construct rest reverse_! l], true]

    characteristic() == characteristic()$Q


    genFromSequence apps ==
        lo := first apps; apps := rst apps
        hi := first apps; apps := rst apps
        while eucWhole0 lo ^= eucWhole0 hi repeat
            lo := first apps; apps := rst apps
            hi := first apps; apps := rst apps
        wh := eucWhole0 lo
        [[wh, genReducedForm(wh::Q, apps, moebius(1,0,0,1))], canReduce?]

    genReducedForm(wh0, apps, mt) ==
        lo: Q := first apps - wh0; apps := rst apps
        hi: Q := first apps - wh0; apps := rst apps
        lo = hi and zero? eval(mt, lo) => empty()
        mt  := recip mt
        wlo := eucWhole eval(mt, lo)
        whi := eucWhole eval(mt, hi)
        while wlo ^= whi repeat
            wlo := eucWhole eval(mt, first apps - wh0); apps := rst apps
            whi := eucWhole eval(mt, first apps - wh0); apps := rst apps
        concat([1,wlo], delay genReducedForm(wh0, apps, shift(mt, -wlo::Q)))

    wholePart c           == c.value.whole
    partialNumerators c   == map(#1.num, c.value.fract)$StreamFunctions2(Rec,R)
    partialDenominators c == map(#1.den, c.value.fract)$StreamFunctions2(Rec,R)
    partialQuotients c    == concat(c.value.whole, partialDenominators c)

    approximants c ==
      empty? c.value.fract => repeating [c.value.whole::Q]
      genApproximants(1,0,c.value.whole,1,c.value.fract)
    convergents c ==
      empty? c.value.fract => concat(c.value.whole::Q, empty())
      genConvergents (1,0,c.value.whole,1,c.value.fract)
    numerators c ==
      empty? c.value.fract => concat(c.value.whole, empty())
      genNumDen(1,c.value.whole,c.value.fract)
    denominators c ==
      genNumDen(0,1,c.value.fract)

    extend(x,n) == (extend(x.value.fract,n); x)
    complete(x) == (complete(x.value.fract); x)

    iGenApproximants(pm2,qm2,pm1,qm1,fr) == delay
      nd := frst fr
      pm := nd.num*pm2 + nd.den*pm1
      qm := nd.num*qm2 + nd.den*qm1
      genApproximants(pm1,qm1,pm,qm,rst fr)

    genApproximants(pm2,qm2,pm1,qm1,fr) ==
      empty? fr => repeating [pm1/qm1]
      concat(pm1/qm1,iGenApproximants(pm2,qm2,pm1,qm1,fr))

    iGenConvergents(pm2,qm2,pm1,qm1,fr) == delay
      nd := frst fr
      pm := nd.num*pm2 + nd.den*pm1
      qm := nd.num*qm2 + nd.den*qm1
      genConvergents(pm1,qm1,pm,qm,rst fr)

    genConvergents(pm2,qm2,pm1,qm1,fr) ==
      empty? fr => concat(pm1/qm1, empty())
      concat(pm1/qm1,iGenConvergents(pm2,qm2,pm1,qm1,fr))

    genNumDen(m2,m1,fr) ==
      empty? fr => concat(m1,empty())
      concat(m1,delay genNumDen(m1,m2*frst(fr).num + m1*frst(fr).den,rst fr))

    gen  ==> genFromSequence
    apx  ==> approximants

    c, d: %
    a: R
    q: Q
    n: Integer

    0 == (0$R) :: %
    1 == (1$R) :: %

    c + d   == genFromSequence map(#1 + #2, apx c, apx d)
    c - d   == genFromSequence map(#1 - #2, apx c, rest apx d)
    - c     == genFromSequence map(   - #1, rest apx c)
    c * d   == genFromSequence map(#1 * #2, apx c, apx d)
    a * d   == genFromSequence map( a * #1, apx d)
    q * d   == genFromSequence map( q * #1, apx d)
    n * d   == genFromSequence map( n * #1, apx d)
    c / d   == genFromSequence map(#1 / #2, apx c, rest apx d)
    recip c ==(c = 0 => "failed";
	       genFromSequence map( 1 / #1, rest apx c))

    showAll?: () -> Boolean
    showAll?() ==
      NULL(_$streamsShowAll$Lisp)$Lisp => false
      true

    zagRec(t:Rec):OUT == zag(t.num :: OUT,t.den :: OUT)

    coerce(c:%): OUT ==
      wh := c.value.whole
      fr := c.value.fract
      empty? fr => wh :: OUT
      count : NonNegativeInteger := _$streamCount$Lisp
      l : List OUT := empty()
      for n in 1..count while not empty? fr repeat
        l  := concat(zagRec frst fr,l)
        fr := rst fr
      if showAll?() then
        for n in (count + 1).. while explicitEntries? fr repeat
          l  := concat(zagRec frst fr,l)
          fr := rst fr
      if not explicitlyEmpty? fr then l := concat("..." :: OUT,l)
      l := reverse_! l
      e := reduce("+",l)
      zero? wh => e
      (wh :: OUT) + e
\end{spad}

\start
Date: Mon, 30 Jan 2006 19:44:55 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [ContinuedFractions] (new) 

Description:

'ContinuedFraction' implements general continued fractions.
This version is not restricted to simple, finite fractions and
uses the 'Stream' as a representation.  The arithmetic functions
assume that the approximants alternate below/above the convergence
point. This is enforced by ensuring the partial numerators and
partial denominators are greater than 0 in the Euclidean domain
view of 'R' (i.e. 'sizeLess?(0, x)'). 

\begin{spad}
)abbrev domain CONTFRAC ContinuedFraction
++ Author: Stephen M. Watt
++ Date Created: January 1987
++ Change History:
++   11 April   1990
++    7 October 1991 -- SMW: Treat whole part specially.  Added comments.
++ Basic Operations:
++   (Field), (Algebra),
++   approximants, complete, continuedFraction, convergents, denominators,
++   extend, numerators, partialDenominators, partialNumerators,
++   partialQuotients, reducedContinuedFraction, reducedForm, wholePart
++ Related Constructors:
++ Also See: Fraction
++ AMS Classifications: 11A55 11J70 11K50 11Y65 30B70 40A15
++ Keywords: continued fraction, convergent
++ References:


ContinuedFraction(R): Exports == Implementation where
  R :     EuclideanDomain
  Q   ==> Fraction R
  MT  ==> MoebiusTransform Q
  OUT ==> OutputForm

  Exports ==> Join(Algebra R,Algebra Q,Field) with
    continuedFraction:        Q -> %
      ++ continuedFraction(r) converts the fraction \spadvar{r} with
      ++ components of type \spad{R} to a continued fraction over
      ++ \spad{R}.

    continuedFraction:        (R, Stream R, Stream R) -> %
      ++ continuedFraction(b0,a,b) constructs a continued fraction in
      ++ the following way:  if \spad{a = [a1,a2,...]} and \spad{b =
      ++ [b1,b2,...]} then the result is the continued fraction
      ++ \spad{b0 + a1/(b1 + a2/(b2 + ...))}.

    reducedContinuedFraction: (R, Stream R) -> %
      ++ reducedContinuedFraction(b0,b) constructs a continued
      ++ fraction in the following way:  if \spad{b = [b1,b2,...]}
      ++ then the result is the continued fraction \spad{b0 + 1/(b1 +
      ++ 1/(b2 + ...))}.  That is, the result is the same as
      ++ \spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.

    partialNumerators:   % -> Stream R
      ++ partialNumerators(x) extracts the numerators in \spadvar{x}.
      ++ That is, if \spad{x = continuedFraction(b0, [a1,a2,a3,...],
      ++ [b1,b2,b3,...])}, then \spad{partialNumerators(x) =
      ++ [a1,a2,a3,...]}.

    partialDenominators: % -> Stream R
      ++ partialDenominators(x) extracts the denominators in
      ++ \spadvar{x}.  That is, if \spad{x = continuedFraction(b0,
      ++ [a1,a2,a3,...], [b1,b2,b3,...])}, then
      ++ \spad{partialDenominators(x) = [b1,b2,b3,...]}.

    partialQuotients:    % -> Stream R
      ++ partialQuotients(x) extracts the partial quotients in
      ++ \spadvar{x}.  That is, if \spad{x = continuedFraction(b0,
      ++ [a1,a2,a3,...], [b1,b2,b3,...])}, then
      ++ \spad{partialQuotients(x) = [b0,b1,b2,b3,...]}.

    wholePart:           % -> R
      ++ wholePart(x) extracts the whole part of \spadvar{x}.  That
      ++ is, if \spad{x = continuedFraction(b0, [a1,a2,a3,...],
      ++ [b1,b2,b3,...])}, then \spad{wholePart(x) = b0}.

    reducedForm:         % -> %
      ++ reducedForm(x) puts the continued fraction \spadvar{x} in
      ++ reduced form, i.e.  the function returns an equivalent
      ++ continued fraction of the form
      ++ \spad{continuedFraction(b0,[1,1,1,...],[b1,b2,b3,...])}.

    approximants:        % -> Stream Q
      ++ approximants(x) returns the stream of approximants of the
      ++ continued fraction \spadvar{x}. If the continued fraction is
      ++ finite, then the stream will be infinite and periodic with
      ++ period 1.

    convergents:         % -> Stream Q
      ++ convergents(x) returns the stream of the convergents of the
      ++ continued fraction \spadvar{x}. If the continued fraction is
      ++ finite, then the stream will be finite.

    numerators:          % -> Stream R
      ++ numerators(x) returns the stream of numerators of the
      ++ approximants of the continued fraction \spadvar{x}. If the
      ++ continued fraction is finite, then the stream will be finite.

    denominators:        % -> Stream R
      ++ denominators(x) returns the stream of denominators of the
      ++ approximants of the continued fraction \spadvar{x}. If the
      ++ continued fraction is finite, then the stream will be finite.

    extend:              (%,Integer) -> %
      ++ extend(x,n) causes the first \spadvar{n} entries in the
      ++ continued fraction \spadvar{x} to be computed.  Normally
      ++ entries are only computed as needed.

    complete:            % -> %
      ++ complete(x) causes all entries in \spadvar{x} to be computed.
      ++ Normally entries are only computed as needed.  If \spadvar{x}
      ++ is an infinite continued fraction, a user-initiated interrupt is
      ++ necessary to stop the computation.

  Implementation ==> add

 -- isOrdered  ==> R is Integer
    isOrdered  ==> R has OrderedRing and R has multiplicativeValuation
    canReduce? ==> isOrdered or R has additiveValuation

    Rec ==> Record(num: R, den: R)
    Str ==> Stream Rec
    Rep :=  Record(value: Record(whole: R, fract: Str), reduced?: Boolean)

    import Str

    genFromSequence:     Stream Q -> %
    genReducedForm:      (Q, Stream Q, MT)    -> Stream Rec
    genFractionA:        (Stream R,Stream R)  -> Stream Rec
    genFractionB:        (Stream R,Stream R)  -> Stream Rec
    genNumDen:           (R,R, Stream Rec)    -> Stream R

    genApproximants:     (R,R,R,R,Stream Rec) -> Stream Q
    genConvergents:      (R,R,R,R,Stream Rec) -> Stream Q
    iGenApproximants:    (R,R,R,R,Stream Rec) -> Stream Q
    iGenConvergents:     (R,R,R,R,Stream Rec) -> Stream Q

    reducedForm c == 
        c.reduced? => c
        explicitlyFinite? c.value.fract =>
                      continuedFraction last complete convergents c
        canReduce? => genFromSequence approximants c
        error "Reduced form not defined for this continued fraction."

    eucWhole(a: Q): R == numer a quo denom a

    eucWhole0(a: Q): R ==
        isOrdered =>
            n := numer a
            d := denom a
            q := n quo d
            r := n - q*d
            if r < 0 then q := q - 1
            q
        eucWhole a

    x = y ==
        x := reducedForm x
        y := reducedForm y

        x.value.whole ^= y.value.whole => false

        xl := x.value.fract; yl := y.value.fract

        while not empty? xl and not empty? yl repeat
            frst.xl.den ^= frst.yl.den => return false
            xl := rst xl; yl := rst yl
        empty? xl and empty? yl

    continuedFraction q == q :: %

    if isOrdered then
        continuedFraction(wh,nums,dens) == [[wh,genFractionA(nums,dens)],false]

        genFractionA(nums,dens) ==
            empty? nums or empty? dens => empty()
            n := frst nums
            d := frst dens
            n < 0 => error "Numerators must be greater than 0."
            d < 0 => error "Denominators must be greater than 0."
            concat([n,d]$Rec, delay genFractionA(rst nums,rst dens))
    else
        continuedFraction(wh,nums,dens) == [[wh,genFractionB(nums,dens)],false]

        genFractionB(nums,dens) ==
            empty? nums or empty? dens => empty()
            n := frst nums
            d := frst dens
            concat([n,d]$Rec, delay genFractionB(rst nums,rst dens))

    reducedContinuedFraction(wh,dens) ==
        continuedFraction(wh, repeating [1], dens)

    coerce(n:Integer):% == [[n::R,empty()], true]
    coerce(r:R):%       == [[r,   empty()], true]

    coerce(a: Q): % ==
      wh := eucWhole0 a
      fr := a - wh::Q
      zero? fr => [[wh, empty()], true]

      l : List Rec := empty()
      n := numer fr
      d := denom fr
      while not zero? d repeat
        qr := divide(n,d)
        l  := concat([1,qr.quotient],l)
        n  := d
        d  := qr.remainder
      [[wh, construct rest reverse_! l], true]

    characteristic() == characteristic()$Q


    genFromSequence apps ==
        lo := first apps; apps := rst apps
        hi := first apps; apps := rst apps
        while eucWhole0 lo ^= eucWhole0 hi repeat
            lo := first apps; apps := rst apps
            hi := first apps; apps := rst apps
        wh := eucWhole0 lo
        [[wh, genReducedForm(wh::Q, apps, moebius(1,0,0,1))], canReduce?]

    genReducedForm(wh0, apps, mt) ==
        lo: Q := first apps - wh0; apps := rst apps
        hi: Q := first apps - wh0; apps := rst apps
        lo = hi and zero? eval(mt, lo) => empty()
        mt  := recip mt
        wlo := eucWhole eval(mt, lo)
        whi := eucWhole eval(mt, hi)
        while wlo ^= whi repeat
            wlo := eucWhole eval(mt, first apps - wh0); apps := rst apps
            whi := eucWhole eval(mt, first apps - wh0); apps := rst apps
        concat([1,wlo], delay genReducedForm(wh0, apps, shift(mt, -wlo::Q)))

    wholePart c           == c.value.whole
    partialNumerators c   == map(#1.num, c.value.fract)$StreamFunctions2(Rec,R)
    partialDenominators c == map(#1.den, c.value.fract)$StreamFunctions2(Rec,R)
    partialQuotients c    == concat(c.value.whole, partialDenominators c)

    approximants c ==
      empty? c.value.fract => repeating [c.value.whole::Q]
      genApproximants(1,0,c.value.whole,1,c.value.fract)
    convergents c ==
      empty? c.value.fract => concat(c.value.whole::Q, empty())
      genConvergents (1,0,c.value.whole,1,c.value.fract)
    numerators c ==
      empty? c.value.fract => concat(c.value.whole, empty())
      genNumDen(1,c.value.whole,c.value.fract)
    denominators c ==
      genNumDen(0,1,c.value.fract)

    extend(x,n) == (extend(x.value.fract,n); x)
    complete(x) == (complete(x.value.fract); x)

    iGenApproximants(pm2,qm2,pm1,qm1,fr) == delay
      nd := frst fr
      pm := nd.num*pm2 + nd.den*pm1
      qm := nd.num*qm2 + nd.den*qm1
      genApproximants(pm1,qm1,pm,qm,rst fr)

    genApproximants(pm2,qm2,pm1,qm1,fr) ==
      empty? fr => repeating [pm1/qm1]
      concat(pm1/qm1,iGenApproximants(pm2,qm2,pm1,qm1,fr))

    iGenConvergents(pm2,qm2,pm1,qm1,fr) == delay
      nd := frst fr
      pm := nd.num*pm2 + nd.den*pm1
      qm := nd.num*qm2 + nd.den*qm1
      genConvergents(pm1,qm1,pm,qm,rst fr)

    genConvergents(pm2,qm2,pm1,qm1,fr) ==
      empty? fr => concat(pm1/qm1, empty())
      concat(pm1/qm1,iGenConvergents(pm2,qm2,pm1,qm1,fr))

    genNumDen(m2,m1,fr) ==
      empty? fr => concat(m1,empty())
      concat(m1,delay genNumDen(m1,m2*frst(fr).num + m1*frst(fr).den,rst fr))

    gen  ==> genFromSequence
    apx  ==> approximants

    c, d: %
    a: R
    q: Q
    n: Integer

    0 == (0$R) :: %
    1 == (1$R) :: %

    c + d   == genFromSequence map(#1 + #2, apx c, apx d)
    c - d   == genFromSequence map(#1 - #2, apx c, rest apx d)
    - c     == genFromSequence map(   - #1, rest apx c)
    c * d   == genFromSequence map(#1 * #2, apx c, apx d)
    a * d   == genFromSequence map( a * #1, apx d)
    q * d   == genFromSequence map( q * #1, apx d)
    n * d   == genFromSequence map( n * #1, apx d)
    c / d   == genFromSequence map(#1 / #2, apx c, rest apx d)
    recip c ==(c = 0 => "failed";
	       genFromSequence map( 1 / #1, rest apx c))

    showAll?: () -> Boolean
    showAll?() ==
      NULL(_$streamsShowAll$Lisp)$Lisp => false
      true

    zagRec(t:Rec):OUT == zag(t.num :: OUT,t.den :: OUT)

    coerce(c:%): OUT ==
      wh := c.value.whole
      fr := c.value.fract
      empty? fr => wh :: OUT
      count : NonNegativeInteger := _$streamCount$Lisp
      l : List OUT := empty()
      for n in 1..count while not empty? fr repeat
        l  := concat(zagRec frst fr,l)
        fr := rst fr
      if showAll?() then
        for n in (count + 1).. while explicitEntries? fr repeat
          l  := concat(zagRec frst fr,l)
          fr := rst fr
      if not explicitlyEmpty? fr then l := concat("..." :: OUT,l)
      l := reverse_! l
      e := reduce("+",l)
      zero? wh => e
      (wh :: OUT) + e
\end{spad}

\start
Date: 30 Jan 2006 21:07:24 -0500
From: Camm Maguire
To: Gordon Novak
Subject: Re: XGCL
Cc: Robert Boyer, David Kotz, Warren Hunt, Kay Nettle, Matt Kaufmann, Wilfred Legato

Greetings!  Alas, just a quick note here -- I'm away from work for
another two weeks on a writing project.  Would it be possible for me
to dig into this when I return?

\start
Date: Mon, 30 Jan 2006 20:59:39 -0500
From: Bill Page
To: Yigal Weinstein
Subject: RE: special functions

On January 30, 2006 8:21 PM Yigal Weinstein wrote:

> ...
> The one way gpl'd programs have an advantage on proprietary
> software is that they can use existing gpl'd programs without
> worrying about licenses etc..  For instance consider all the
> work done in Fortran like quadpack etc..  Axiom if asked for
> a numerical result could if linking was considered could use
> the existing libraries to compute practically any function.   
>
> In fact this is just the strategy used by the proprietary Axiom.
> To link it to NAG was what was done.  There are plenty of high
> quality libraries that can be used for numerical approximations
> in Fortran that are gpl: lapack is but one of them.

I agree completely that a replacement for the NAG interface is
urgently needed for the open source version of Axiom.

I would be very pleased to help anyone who is motivated to
develop an interface to a LGPL library that would provide some
of this lost functionality.

\start
Date: Mon, 30 Jan 2006 22:04:52 -0800
From: Yigal Weinstein
To: list
Subject: Linking Axiom to a scientific library - MPFR?

Has anyone considered linking some of Axiom's functions with MPFR?  If
not I think this library should be looked into.  It seams very small but
it is LGPL.

Yigal
  
On Mon, 2006-01-30 at 20:59 -0500, Bill Page wrote:
> On January 30, 2006 8:21 PM Yigal Weinstein wrote:
> 
> > ...
> > The one way gpl'd programs have an advantage on proprietary
> > software is that they can use existing gpl'd programs without
> > worrying about licenses etc..  For instance consider all the
> > work done in Fortran like quadpack etc..  Axiom if asked for
> > a numerical result could if linking was considered could use
> > the existing libraries to compute practically any function.   
> >
> > In fact this is just the strategy used by the proprietary Axiom.
> > To link it to NAG was what was done.  There are plenty of high
> > quality libraries that can be used for numerical approximations
> > in Fortran that are gpl: lapack is but one of them.
> 
> I agree completely that a replacement for the NAG interface is
> urgently needed for the open source version of Axiom.
> 
> I would be very pleased to help anyone who is motivated to
> develop an interface to a LGPL library that would provide some
> of this lost functionality.
> 
> Regards,
> Bill Page.
> 

\start
Date: Mon, 30 Jan 2006 22:34:02 -0800
From: Yigal Weinstein
To: list
Subject: Re: Linking Axiom to a scientific library - MPFR?

Yes, I see you have.  Sorry just read a thread made a year.
On Mon, 2006-01-30 at 22:05 -0800, yigal wrote:
> Has anyone considered linking some of Axiom's functions with MPFR?  If
> not I think this library should be looked into.  It seams very small but
> it is LGPL.
> 
> Yigal
>   
> On Mon, 2006-01-30 at 20:59 -0500, Bill Page wrote:
> > On January 30, 2006 8:21 PM Yigal Weinstein wrote:
> > 
> > > ...
> > > The one way gpl'd programs have an advantage on proprietary
> > > software is that they can use existing gpl'd programs without
> > > worrying about licenses etc..  For instance consider all the
> > > work done in Fortran like quadpack etc..  Axiom if asked for
> > > a numerical result could if linking was considered could use
> > > the existing libraries to compute practically any function.   
> > >
> > > In fact this is just the strategy used by the proprietary Axiom.
> > > To link it to NAG was what was done.  There are plenty of high
> > > quality libraries that can be used for numerical approximations
> > > in Fortran that are gpl: lapack is but one of them.
> > 
> > I agree completely that a replacement for the NAG interface is
> > urgently needed for the open source version of Axiom.
> > 
> > I would be very pleased to help anyone who is motivated to
> > develop an interface to a LGPL library that would provide some
> > of this lost functionality.

\start
Date: 31 Jan 2006 14:10:41 +0100
From: Francois Maltey
To: Bill Page, Yigal Weinstein, Francois Maltey
Subject: Re: special functions

Hello Bill, and others !

>
> Comments from everyone would be most welcome.
>
So I take some time to explain my point of view as a former mupad user.

You show 2 problems which causes axiom-source difficult to read :

// A //

> A bigger issue seems to me to be the way Gamma(x) is currently
> impletement in Axiom. I was a little horrified to see that it
> is actually implemented in BOOT code. Horrified because while
> BOOT is (nearly) as readable as SPAD, it is much closer to the
> machine level and therefore correspondingly harder to debug.
> In my opinion BOOT has it's place at the deeper levels of the
> Axiom interpreter and the SPAD compiler itself, but I think this
> is completely unnecessary when it comes to Algebra code.

When I want to understand a function I make a lot of grep on *.spad files
in order to find some interessing lines.
I really do this for the sin function.
I don't imagine that I must read the boot-loader for the gamma function.

The mupad file are in trees ; all files have the same structure.
I send the skeleton of the main igamma function in mupad lib.

There are sin.mu, gamma.mu, igamma.mu, Ei.mu files in the SPECFUNC director=
y.
There are also some igamma implentation in
STDLIB/DIFF/igamma.mu for differential computation
STDLIB/CONJ/igamma.mu for conjugate
SERIES/igamma.mu      for series
...

// B //

> The second thing is that I do not like the way that the special
> functions have been implemented as part of the DoubleFloat
> domain. This is quite in contrast to the way that the trignometric
> functions have been implemented. One consequence is that it is
> hard to control when one wants to treat Gamma(x) symbolically
> (as one might do in the case of symbolic integration etc.) and
> when to treat it numerically.

When I use axiom I ask (to me) the question :
<< how can I explain this idea (to my students) with very view words >>
And I see it's not so easy to do with Float, Expression Float, DoubleFloat :

> For example:
>
sin(1) :                   sin(1)             Type: Expression Integer
sin(1)::Expression Float                      Right
(sin 1)::Float                                Wrong, Why ?
(2/3)::Float
Gamma(1)                                      Type: DoubleFloat
                                              I prefer Integer
Gamma(1,2)                                    Expression Integer is right.

> I don't think there should be this difference in behaviour
> between Gamma(x), Gamma(a,x) and sin(x). Fixing this will
> likely require some deeper surgery in Axiom.

This is nasty.
Computer Algebra is so difficult
that elementary principes must be very sharp.
If-no debug becomes impossible as maple with structural type mistake as 0=
=0.0


// C // The skeleton of the igamma function :

igamma :=
proc(a, x)
  option noDebug;
  local fa, ceila, floora, fraca, t1, t2, am1, fx, k, absx, result;
  save DIGITS;
begin=

  if args(0) < 2 then error("2 arguments expected"); end_if;
  ....
  case type(x)                                 /* mupad does map */
    of DOM_SET do
    of "_union" do
      return(map(x, u-> igamma(a,u)))
  end_case;
  ....
  if testargs() then                        /* arithmetical type */
  ....
  if x = infinity then                             /* for limits */
  if x=0 then return(gamma(a)) end_if;        /* easy properties */
  if a=0 then return(Ei(x)) end_if;
  if a=1 then return(exp(-x)) end_if;
  if x=float(0) then return(gamma(float(a))) end_if; /* first float cases=
 */
  if a=float(0) then return(Ei(float(x))) end_if;
  if a=float(1) then return(exp(-float(x))) end_if;
  if a = float(1/2) or x = float (x) then /* numerical computation */
  ...
  if a = 1/2 then
    return(float(PI^(1/2))*erfc(float(x)^(1/2))) end_if;
  ....
  if domtype(x) = DOM_FLOAT and x >= 0 then   /* igamma numerical call =
*/
  if domtype(a) = DOM_FLOAT and a >= 0 then
  ....
  //-----------------------------------------------
  // normalization: use recursion formula to reduce
  // index a to strip 0<= a < 1. Do not do this for
  // complex a, because in this case float evaluation
  // is not possible, anyway.
  // Restrict this to |a| <= 500, because this
  // would be much too expensive for huge |a|

  if testtype(a, Type::Real) and specfunc::abs(a) <= 500 then
  ....
        // Warning: dangerous float evaluation via recursion!
        // This is likely to be subject to cancellation, so
        // we need to boost DIGITS !
        DIGITS := ....

  if 1 < a then // normalize a by shifting the first argument
                // to the region 0 < a < 1:
 // use recursion:
 //     igamma(a, x) = (a-1)*igamma(a-1, x) + x^(a-1)*exp(-x)
 //  =   (a-1)*(a-2)*..*(a-k)*igmma(a - k, x) + exp(-x)*(x^(a-1)
 //    + (a-1)*x^(a-2) + ..)
  ....
  if a < 0 then // normalize a by shifting the first argument
                   // to the region 0 < a < 1:
  ....
end_proc:

// some others functions as :

igamma:= slot(igamma, "info",
     "igamma -- the incomplete Gamma function [try ?igamma for details]"):
igamma:= slot(igamma, "conjugate",
    loadproc(slot(igamma,"conjugate"),pathname("STDLIB","CONJ"),"igamma")):
igamma:= slot(igamma, "diff",
    loadproc(slot(igamma,"diff"),pathname("STDLIB","DIFF"),"igamma")):
....
// end of file

I hope you understand the point of view of an axiom end-user.

\start
Date: Tue, 31 Jan 2006 11:19:39 -0600
From: MathAction (anonymous)
To: MathAction
Subject: [#260 unwanted glibc warning when closing a plot] (new) 

I run axiom -noht in a xterm,
and make a plot : draw (x^2, x=0..1)
then I close the plot window in X11 
and get the warning in the axiom xterm.
*** glibc detected *** free(): invalid pointer: 0x0805209c ***
(FMy)

\start
Date: Tue, 31 Jan 2006 13:04:15 -0500
From: Bill Page
To: list
Subject: special functions

-----Original Message-----

Gregory,

On January 31, 2006 6:15 AM you wrote:
>
> I have modified your spad code in SandBoxGamma.
> The problem come from the fact that 1 and 0 are functions.
> I don't really understand why but that's work now.

Thank you! Yes, I think you are right. In this case in SPAD
it appears necessary to distinguish between '1.0' and '1'. As
I understand it in the Axiom interpreter '1.0' is actually
translated as the function 'float(1,0,10)$Domain' and '0.0' as
'float(0,0,10)$Domain' while '1$Domain' is always defined as
the multiplicative identity and '0$Domain' is the additive
identity in any Domain (if it exists). It seems that the SPAD
compiler does not quite get this right without a little more
help.

You were very clever to realize this! :)

> I suggest to change EPS to 1e-15 since it's double and not
> float
>

Yes you are right. For the domain Float the EPS is adjustable so
we really should compute it, perhaps like this:

(1) -> EPS := (10.0^(-digits()$Float))$Float

   (1)  0.1 E -19
                                             Type: Float

That's the default value but the precision can be adjusted
for example:

(2) -> digits(400)$Float

   (2)  20
                                    Type: PositiveInteger

(3) -> EPS := (10.0^(-digits()$Float))$Float

   (3)  0.1 E -399
                                              Type: Float

But the precision of DoubleFloat is fixed by the machine
representation:

(4) -> digits()$DoubleFloat

   (4)  15
                                    Type: PositiveInteger

(5) -> (1.0+10.0^(-digits()$DoubleFloat)=1.0)$DoubleFloat

   (5)  false
                                              Type: Boolean

(6) -> (1.0+10.0^(-digits()$DoubleFloat-1)=1.0)$DoubleFloat

   (6)  true
                                              Type: Boolean

I have a little more trouble deciding on the value of FPMIN.
In principle in the Float domain there is no minimum floating
point value since the exponent is represented by an arbitrary
precision integer.

In the domain DoubleFloat is seems that FPMIN is approximately:

(7) -> (10.0^-323=0)$DoubleFloat

   (7)  false
                                             Type: Boolean

(8) -> (10.0^-324=0)$DoubleFloat

   (8)  true
                                             Type: Boolean

Is there any Axiom function like 'digits' that I could call to
determine this value?

Anyway, I modified the example at

  http://wiki.axiom-developer.org/SandBoxGamma

to test these values and they seem to work.

\start
Date: Tue, 31 Jan 2006 12:39:03 -0600
From: MathAction (root)
To: MathAction
Subject: [#260 unwanted glibc warning when closing a plot]

what operating system/version are you running? --tim

\start
Date: Tue, 31 Jan 2006 13:10:36 -0600
From: MathAction (Bill Page)
To: MathAction
Subject: [WesterProblemSet] should be ok now

I just had to click 'refresh' to update the files. The pamphlet
software had changed since the last time this pamphlet was saved.

\start
Date: Tue, 31 Jan 2006 14:32:28 -0500
From: Bill Page
To: Gregory Vanuxem
Subject: RE: special functions

Gr=E9gory,

On January 31, 2006 12:58 PM you wrote:
> ...
> Bill Page wrote:
> >
> > Is there any Axiom function like 'digits' that I could call to
> > determine this value?
>
> Try this:
>
> (4) -> LEAST_-POSITIVE_-LONG_-FLOAT$Lisp
>
>    (4)  4.9406564584124654E-324
>
> (6) -> LONG_-FLOAT_-EPSILON$Lisp
>
>    (6)  1.1102230246251568E-16
>
> (see CLM p.397)
>

Thanks. I think Axiom should expose functions like this in the
domains DoubleFloat and in Float. I remain a little confused about
how best to treat the LEAST_-POSITIVE_-LONG_-FLOAT in the case
of Axiom's Float domain.

>
> PS: mathaction is actually down
>
> > Anyway, I modified the example at
> >
> >   http://wiki.axiom-developer.org/SandBoxGamma
> >
> > to test these values and they seem to work.
> >

Yes, it was the same problem that we have been having lately
with the server when the Python/Zope process just sits and
wastes CPU without accomplishing anything.

It should be ok now.

I have just finished upgrading MathAction to use a newer version
of Zope and Python 2.4. I hope that helps. Please let me know
if you continue to have problems accessing the server.

\start
Date: Tue, 31 Jan 2006 13:51:58 -0600
From: MathAction (Francois Maltey)
To: MathAction
Subject: [#260 unwanted glibc warning when closing a plot]

Sorry, I forget :

> what operating system/version are you running? --tim

Linux version 2.6.12-1-386 (horms@tabatha.lab.ultramonkey.org) 
(gcc version 4.0.2 20050917 (prerelease) (Debian 4.0.1-8)) 
#1 Tue Sep 27 12:41:08 JST 2005

I compile my own axiom on a debian etch.

                        AXIOM Computer Algebra System
                       Version: Axiom (December 2005)
              Timestamp: Tuesday January 17, 2006 at 16:23:31


\end{verbatim}
\eject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
%\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
