\documentclass{article}
\usepackage{axiom}
\setlength{\textwidth}{400pt}
\begin{document}
\title{\$SPAD/src/input unittest1.input}
\author{Timothy Daly}
\maketitle
\begin{abstract}
Unit test the user level commands
\end{abstract}
\eject
\tableofcontents
\eject
\begin{chunk}{*}
)set break resume
)sys rm -f unittest1.output
)spool unittest1.output
)set mes auto off
)clear all

--S 1 of 97
--)with API
--E 1

--S 2 of 97 this command generates random output, ok
--)apropos matrix
--E 2

--S 3 of 97
)what categories set
--R 
--R------------------------------- Categories --------------------------------
--R
--RCategories with names matching patterns:
--R     set 
--R
--R ATPOSET  PartiallyOrderedSetAttribute CACHSET  CachableSet
--R FSAGG    FiniteSetAggregate           MSETAGG  MultisetAggregate
--R NTSCAT   NormalizedTriangularSetCategory
--R OMSAGG   OrderedMultisetAggregate     ORDSET   OrderedSet
--R PSETCAT  PolynomialSetCategory        RSETCAT  RegularTriangularSetCategory
--R SETAGG   SetAggregate                 SETCAT   SetCategory
--R SETCATD  SetCategoryWithDegree
--R SFRTCAT  SquareFreeRegularTriangularSetCategory
--R SNTSCAT  SquareFreeNormalizedTriangularSetCategory
--R TSETCAT  TriangularSetCategory
--E 3

--S 4 of 97
)what commands set
--R 
--R--------------- System Commands for User Level: development ---------------
--R
--RSystem commands at this level matching patterns:
--R    set
--R
--Rset    
--R 
--E 4

--S 5 of 97 this command generates random output ok
--)what domains set
--E 5

--S 6 of 97 this command generates random output ok
--)what operations set
--E 6

--S 7 of 97
)what packages set
--R 
--R-------------------------------- Packages ---------------------------------
--R
--RPackages with names matching patterns:
--R     set 
--R
--R AFALGGRO AffineAlgebraicSetComputeWithGroebnerBasis
--R AFALGRES AffineAlgebraicSetComputeWithResultant
--R FSAGG2   FiniteSetAggregateFunctions2 LAZM3PK  LazardSetSolvingPackage
--R PRJALGPK ProjectiveAlgebraicSetPackage
--R PSETPK   PolynomialSetUtilitiesPackage
--R QALGSET2 QuasiAlgebraicSet2
--R RSDCMPK  RegularSetDecompositionPackage
--R RSETGCD  RegularTriangularSetGcdPackage
--R SFRGCD   SquareFreeRegularTriangularSetGcdPackage
--R SRDCMPK  SquareFreeRegularSetDecompositionPackage
--E 7

--S 8 of 97
)what synonym set
--R 
--R------------------------- System Command Synonyms -------------------------
--R
--R   No user-defined synonyms satisfying patterns:
--R      set
--R
--E 8

--S 9 of 97 this command generates random output ok
--)what things set
--E 9

--S 10 of 97 this command generates random output ok
--)apropos set
--E 10

--S 11 of 97
)prompt
--R---------------------------- The prompt Option ----------------------------
--R
--R Description: set type of input prompt to display
--R
--R The prompt option may be followed by any one of the following:
--R
--R    none
--R    frame
--R    plain
--R -> step 
--R    verbose
--R
--R The current setting is indicated.
--R
--E 11

--S 12 of 97
)version
--R 
--IValue = "Saturday February 21, 2009 at 17:59:27 "
--E 12

--S 13 of 97 -- no longer supported
--)zsys )from )c
--E 13

--S 14 of 97 -- no longer supported
--)zsys )from )d
--E 14

--S 15 of 97 -- no longer supported
--)zsys )from )dt
--E 15

--S 16 of 97 -- no longer supported
--)zsys )from )ct
--E 16

--S 17 of 97 -- no longer supported
--)zsys )from )ctl
--E 17

--S 18 of 97 -- no longer supportee
--)zsys )from )ec
--E 18

--S 19 of 97 -- no longer supported
--)zsys )from )ect
--E 19

--S 20 of 97 -- no longer supported
--)zsys )from )e
--E 20

--S 21 of 97 -- no longer supported
--)zsys )from )version
--E 21

--S 22 of 97 -- no longer supported
--)zsys )from )update
--E 22

--S 23 of 97 -- no longer supported
--)zsys )from )patch
--E 23

--S 24 of 97 -- no longer supported
)zsys )from )there 1
--E 24

--S 25 of 97 -- no longer supported
--)zsys )from )compare
--E 25

--S 26 of 97 -- no longer supported
--)zsys )from )record
--E 26

--S 27 of 97
)summary
--R 
--E 27

--S 28 of 97
)credits
--R 
--RRoy Adler              Christian Aistleitner  Michael Albaugh
--RCyril Alberga          Jason Allen            Richard Anderson
--RGeorge Andrews         Jerry Archibald        S.J. Atkins
--RJeremy Avigad          Brent Baccala          Knut Bahr
--RHenry Baker            Martin Baker           Stephen Balzac
--RYurij Baransky         David R. Barton        Thomas Baruchel
--RGerald Baumgartner     Gilbert Baumslag       Michael Becker
--RNelson H. F. Beebe     Jay Belanger           Siddharth Bhat
--RDavid Bindel           Fred Blair             Vladimir Bondarenko
--REd Borasky             Mark Botch             Raoul Bourquin
--RAlexandre Bouyer       Karen Braman           Wolfgang Brehm
--RPeter A. Broadbery     Martin Brock           Manuel Bronstein
--RChristopher Brown      Stephen Buchwald       Florian Bundschuh
--RLuanne Burns           William Burge          Ralph Byers
--RQuentin Carpent        Jacques Carette        Pierre Casteran
--RRobert Cavines         Pablo Cayuela          Bruce Char
--ROndrej Certik          Tzu-Yi Chen            Bobby Cheng
--RCheekai Chin           David V. Chudnovsky    Gregory V. Chudnovsky
--RMark Clements          Roland Coeurjoly       Emil Cohen
--RHirsh Cohen            Josh Cohen             James Cloos
--RJia Zhao Cong          Christophe Conil       Don Coppersmith
--RGeorge Corliss         Robert Corless         Gary Cornell
--RFrank Costa            Meino Cramer           Karl Crary
--RJeremy Du Croz         David Cyganski         Nathaniel Daly
--RTimothy Daly Sr.       Timothy Daly Jr.       James H. Davenport
--RDavid Day              James Demmel           Didier Deshommes
--RMichael Dewar          Inderjit Dhillon       Jack Dongarra
--RJean Della Dora        Gabriel Dos Reis       Claire DiCrescendo
--RSam Dooley             Pierre Doucy           Nicolas James Doye
--RZlatko Drmac           Lionel Ducos           Iain Duff
--RLee Duhem              Martin Dunstan         Brian Dupee
--RDominique Duval        Robert Edwards         Hans-Dieter Ehrich
--RHeow Eide-Goodman      Alexandra Elbakyan     Carl Engelman
--RLars Erickson          Mark Fahey             William Farmer
--RRichard Fateman        Bertfried Fauser       Stuart Feldman
--RJohn Fletcher          Brian Ford             Albrecht Fortenbacher
--RGeorge Frances         Constantine Frangos    Timothy Freeman
--RKorrinn Fu             Marc Gaetano           Rudiger Gebauer
--RVan de Geijn           Kathy Gerber           Patricia Gianni
--REitan Gurari           Gustavo Goertkin       Samantha Goldrich
--RMax Goldstein          Holger Gollan          Teresa Gomez-Diaz
--RRalph Gomory           Laureano Gonzalez-Vega Stephen Gortler
--RJohannes Grabmeier     Matt Grayson           Martin Griss
--RAndrey G. Grozin       Klaus Ebbe Grue        James Griesmer
--RVladimir Grinberg      Oswald Gschnitzer      Ming Gu
--RFred Gustavson         Jocelyn Guidry         Gaetan Hache
--RSteve Hague            Satoshi Hamaguchi      Sven Hammarling
--RMike Hansen            Richard Hanson         Richard Harke
--RJoseph Harry           Bill Hart              Vilya Harvey
--RMartin Hassner         Arthur S. Hathaway     Dan Hatton
--RWaldek Hebisch         Karl Hegbloom          Ralf Hemmecke
--RTony Hearn             Henderson              Antoine Hersen
--RNicholas J. Higham     Lou Hodes              Alan Hoffman
--RHoon Hong              Roger House            Joris van der Hoeven
--RGernot Hueber          Pietro Iglio           Joan Jaffe
--RAlejandro Jakubi       Richard Jenks          Bo Kagstrom
--RWilliam Kahan          Kyriakos Kalorkoti     Kai Kaminski
--RMatt Kaufmann          Grant Keady            Tom Kelsey
--RWilfrid Kendall        Tony Kennedy           David Kincaid
--RKeshav Kini            Knut Korsvold          Ted Kosan
--RPaul Kosinski          Igor Kozachenko        Fred Krogh
--RKlaus Kusche           Bernhard Kutzler       Tim Lahey
--RLarry Lambe            Magnus Larsson         Kaj Laurson
--RCharles Lawson         George L. Legendre     Franz Lehner
--RFrederic Lehobey       Michel Levaud          Howard Levy
--RJ. Lewis               Ren-Cang Li            Xin Li
--RJohn Lipson            Rudiger Loos           Craig Lucas
--RMichael Lucks          Richard Luczak         Camm Maguire
--RDave Mainey            Francois Maltey        William Martin
--RUrsula Martin          Dan Martins            Osni Marques
--RAlasdair McAndrew      Bob McElrath           Michael McGettrick
--RRoland McGrath         Paul McJones           Bob McNeill
--REdi Meier              Ian Meikle             David Mentre
--RSimon Michael          Jonathan Millen        Victor S. Miller
--RGerard Milmeister      William Miranker       Mohammed Mobarak
--RH. Michael Moeller     Michael Monagan        Marc Moreno-Maza
--RScott Morrison         Joel Moses             Mark Murray
--RWilliam Naylor         Patrice Naudin         C. Andrew Neff
--RJohn Nelder            Godfrey Nolan          Arthur Norman
--RJinzhong Niu           Michael O'Connor       Summat Oemrawsingh
--RKostas Oikonomou       Humberto Ortiz-Zuazaga Julian A. Padget
--RBill Page              David Parnas           Igor Pashev
--RNorm Pass              Susan Pelzel           Michel Petitot
--RDidier Pinchon         Ayal Pinkus            Frederick H. Pitts
--RFrank Pfenning         Erik Poll              Jose Alfredo Portes
--RE. Quintana-Orti       Gregorio Quintana-Orti Beresford Parlett
--RA. Petitet             Andre Platzer          Peter Poromaas
--RGreg Puhak             Claude Quitte          Arthur C. Ralfs
--RNorman Ramsey          Anatoly Raportirenko   Guilherme Reis
--RHuan Ren               Albert D. Rich         Michael Richardson
--RJason Riedy            Renaud Rioboo          Robert Risch
--RWilken Rivera          Jean Rivlin            Nicolas Robidoux
--RSimon Robinson         Raymond Rogers         Michael Rothstein
--RMartin Rubey           Jeff Rutter            R.W Ryniker II
--RPhilip Santas          Grigory Sarnitskiy     David Saunders
--RAleksej Saushev        Alfred Scheerhorn      William Schelter
--RGerhard Schneider      Martin Schoenert       Marshall Schor
--RFrithjof Schulze       Fritz Schwartz         Jens Axel Segaard
--RSteven Segletes        Srinivasan Seshan      V. Sima
--RNick Simicich          Peter Simons           William Sit
--RElena Smirnova         Jacob Nyffeler Smith   Matthieu Sozeau
--RRichard Stallman       Ken Stanley            William Stein
--RJonathan Steinbach     Alexander Stepanov     Doug Stewart
--RFabio Stumbo           Christine Sundaresan   Ben Collins-Sussman
--RKlaus Sutner           Robert Sutor           Moss E. Sweedler
--REugene Surowitz        Yong Kiam Tan          Max Tegmark
--RT. Doug Telford        James Thatcher         Laurent Thery
--RBalbir Thomas          Mike Thomas            Carol Thompson
--RSimon Thompson         Dylan Thurston         Francoise Tisseur
--RSteve Toleque          Dick Toupin            Raymond Toy
--RBarry Trager           Hale Trotter           Themos T. Tsikas
--RGregory Vanuxem        Kresimir Veselic       Christof Voemel
--RE.G. Wagner            Bernhard Wall          Justin Walker
--RPaul Wang              Stephen Watt           Andreas Weber
--RJaap Weel              Al Weis                Juergen Weiss
--RM. Weller              Mark Wegman            James Wen
--RThorsten Werther       Michael Wester         R. Clint Whaley
--RJames T. Wheeler       John M. Wiley          Berhard Will
--RClifton J. Williamson  Stephen Wilson         Shmuel Winograd
--RRobert Wisbauer        Sandra Wityak          Waldemar Wiwianka
--RKnut Wolf              Hans Peter Wuermli     Yanyang Xiao
--RLiu Xiaojun            Clifford Yapp          David Yun
--RQian Yun               Vadim Zhytnikov        Paul Zimmermann
--RRichard Zippel         Wolfgang Zocher        Evelyn Zoernack
--RBruno Zuercher         Dan Zwillinger  
--R                                                                   Type: Void
--E 28

--S 29 of 97
)set expose
--R 
--R---------------------------- The expose Option ----------------------------
--R
--R Description: control interpreter constructor exposure
--R
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                there are no explicitly hidden constructors                
--R 
--E 29

--S 30 of 97
)set expose add
--R----------------------------- The add Option ------------------------------
--R   The following groups are explicitly exposed in the current frame 
--I      (called frame0 ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   When )set expose add is followed by no arguments, the information 
--R      you now see is displayed. The arguments group and constructor are
--R      used to specify exposure groups or an explicit constructor to be 
--R      added to the local frame exposure data. Issue
--R                            )set expose add group
--R      or
--R                         )set expose add constructor
--R      for more information.
--E 30

--S 31 of 97
)set expose drop
--R----------------------------- The drop Option -----------------------------
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                there are no explicitly hidden constructors                
--R 
--R   When )set expose drop is followed by no arguments, the information 
--R      you now see is displayed. The arguments group and constructor are
--R      used to specify exposure groups or an explicit constructor to be 
--R      dropped from the local frame exposure data. Issue
--R                           )set expose drop group
--R      or
--R                        )set expose drop constructor
--R      for more information.
--E 31

--S 32 of 97
)set expose add group
--R 
--R---------------------------- The group Option -----------------------------
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--R 
--Rbasic         naglink       anna          categories    Hidden        
--Rdefaults      
--E 32

--S 33 of 97
)set expose add constructor
--R------------------------- The constructor Option --------------------------
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--E 33

--S 34 of 97
)set expose drop group
--R---------------------------- The group Option -----------------------------
--R   When followed by one or more exposure group names, this option 
--R      allows you to remove those groups from the local frame exposure 
--R      data.
--R 
--R   The following groups are explicitly exposed in the current frame 
--I      (called frame0 ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--E 34

--S 35 of 97
)set expose drop constructor
--R------------------------- The constructor Option --------------------------
--R   When followed by one or more constructor names, this option allows 
--R      you to explicitly hide constructors in this frame.
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                there are no explicitly hidden constructors                
--E 35

--S 36 of 97
)show SQMATRIX
--R 
--R SquareMatrix(ndim: NonNegativeInteger,R: Ring) is a domain constructor
--R Abbreviation for SquareMatrix is SQMATRIX 
--R This constructor is not exposed in this frame.
--R Issue )edit bookvol10.3.pamphlet to see algebra source code for SQMATRIX 
--R
--R------------------------------- Operations --------------------------------
--R ?*? : (R,%) -> %                      ?*? : (%,R) -> %
--R ?*? : (%,%) -> %                      ?*? : (Integer,%) -> %
--R ?*? : (NonNegativeInteger,%) -> %     ?*? : (PositiveInteger,%) -> %
--R ?**? : (%,NonNegativeInteger) -> %    ?**? : (%,PositiveInteger) -> %
--R ?+? : (%,%) -> %                      ?-? : (%,%) -> %
--R -? : % -> %                           ?/? : (%,R) -> % if R has FIELD
--R ?=? : (%,%) -> Boolean                D : % -> % if R has DIFRING
--R D : (%,(R -> R)) -> %                 1 : () -> %
--R 0 : () -> %                           ?^? : (%,NonNegativeInteger) -> %
--R ?^? : (%,PositiveInteger) -> %        antisymmetric? : % -> Boolean
--R coerce : % -> Matrix(R)               coerce : R -> %
--R coerce : Integer -> %                 coerce : % -> OutputForm
--R copy : % -> %                         diagonal? : % -> Boolean
--R diagonalMatrix : List(R) -> %         diagonalProduct : % -> R
--R differentiate : (%,(R -> R)) -> %     elt : (%,Integer,Integer) -> R
--R elt : (%,Integer,Integer,R) -> R      empty : () -> %
--R empty? : % -> Boolean                 eq? : (%,%) -> Boolean
--R hash : % -> SingleInteger             latex : % -> String
--R listOfLists : % -> List(List(R))      map : ((R -> R),%) -> %
--R map : (((R,R) -> R),%,%) -> %         matrix : List(List(R)) -> %
--R maxColIndex : % -> Integer            maxRowIndex : % -> Integer
--R minColIndex : % -> Integer            minRowIndex : % -> Integer
--R ncols : % -> NonNegativeInteger       nrows : % -> NonNegativeInteger
--R one? : % -> Boolean                   qelt : (%,Integer,Integer) -> R
--R recip : % -> Union(%,"failed")        retract : % -> R
--R sample : () -> %                      scalarMatrix : R -> %
--R square? : % -> Boolean                squareMatrix : Matrix(R) -> %
--R symmetric? : % -> Boolean             trace : % -> R
--R transpose : % -> %                    zero? : % -> Boolean
--R ?~=? : (%,%) -> Boolean              
--R #? : % -> NonNegativeInteger if $ has finiteAggregate
--R ?*? : (DirectProduct(ndim,R),%) -> DirectProduct(ndim,R)
--R ?*? : (%,DirectProduct(ndim,R)) -> DirectProduct(ndim,R)
--R ?**? : (%,Integer) -> % if R has FIELD
--R D : (%,NonNegativeInteger) -> % if R has DIFRING
--R D : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R D : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R D : (%,(R -> R),NonNegativeInteger) -> %
--R any? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R characteristic : () -> NonNegativeInteger
--R coerce : Fraction(Integer) -> % if R has RETRACT(FRAC(INT))
--R column : (%,Integer) -> DirectProduct(ndim,R)
--R convert : % -> InputForm if R has KONVERT(INFORM)
--R count : (R,%) -> NonNegativeInteger if $ has finiteAggregate and R has SETCAT
--R count : ((R -> Boolean),%) -> NonNegativeInteger if $ has finiteAggregate
--R determinant : % -> R if R has commutative(*)
--R diagonal : % -> DirectProduct(ndim,R)
--R differentiate : % -> % if R has DIFRING
--R differentiate : (%,NonNegativeInteger) -> % if R has DIFRING
--R differentiate : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,(R -> R),NonNegativeInteger) -> %
--R eval : (%,List(R),List(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,R,R) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,Equation(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,List(Equation(R))) -> % if R has EVALAB(R) and R has SETCAT
--R every? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R exquo : (%,R) -> Union(%,"failed") if R has INTDOM
--R inverse : % -> Union(%,"failed") if R has FIELD
--R less? : (%,NonNegativeInteger) -> Boolean
--R map! : ((R -> R),%) -> % if $ has shallowlyMutable
--R member? : (R,%) -> Boolean if $ has finiteAggregate and R has SETCAT
--R members : % -> List(R) if $ has finiteAggregate
--R minordet : % -> R if R has commutative(*)
--R more? : (%,NonNegativeInteger) -> Boolean
--R nullSpace : % -> List(DirectProduct(ndim,R)) if R has INTDOM
--R nullity : % -> NonNegativeInteger if R has INTDOM
--R parts : % -> List(R) if $ has finiteAggregate
--R rank : % -> NonNegativeInteger if R has INTDOM
--R reducedSystem : Matrix(%) -> Matrix(R)
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(R),vec: Vector(R))
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(Integer),vec: Vector(Integer)) if R has LINEXP(INT)
--R reducedSystem : Matrix(%) -> Matrix(Integer) if R has LINEXP(INT)
--R retract : % -> Fraction(Integer) if R has RETRACT(FRAC(INT))
--R retract : % -> Integer if R has RETRACT(INT)
--R retractIfCan : % -> Union(R,"failed")
--R retractIfCan : % -> Union(Fraction(Integer),"failed") if R has RETRACT(FRAC(INT))
--R retractIfCan : % -> Union(Integer,"failed") if R has RETRACT(INT)
--R row : (%,Integer) -> DirectProduct(ndim,R)
--R rowEchelon : % -> % if R has EUCDOM
--R size? : (%,NonNegativeInteger) -> Boolean
--R subtractIfCan : (%,%) -> Union(%,"failed")
--R
--E 36

--S 37 of 97
)set expose add constructor SQMATRIX
--I   SquareMatrix is now explicitly exposed in frame frame0 
--E 37

--S 38 of 97
)show SQMATRIX
--R 
--R SquareMatrix(ndim: NonNegativeInteger,R: Ring) is a domain constructor
--R Abbreviation for SquareMatrix is SQMATRIX 
--R This constructor is exposed in this frame.
--R Issue )edit bookvol10.3.pamphlet to see algebra source code for SQMATRIX 
--R
--R------------------------------- Operations --------------------------------
--R ?*? : (R,%) -> %                      ?*? : (%,R) -> %
--R ?*? : (%,%) -> %                      ?*? : (Integer,%) -> %
--R ?*? : (NonNegativeInteger,%) -> %     ?*? : (PositiveInteger,%) -> %
--R ?**? : (%,NonNegativeInteger) -> %    ?**? : (%,PositiveInteger) -> %
--R ?+? : (%,%) -> %                      ?-? : (%,%) -> %
--R -? : % -> %                           ?/? : (%,R) -> % if R has FIELD
--R ?=? : (%,%) -> Boolean                D : % -> % if R has DIFRING
--R D : (%,(R -> R)) -> %                 1 : () -> %
--R 0 : () -> %                           ?^? : (%,NonNegativeInteger) -> %
--R ?^? : (%,PositiveInteger) -> %        antisymmetric? : % -> Boolean
--R coerce : % -> Matrix(R)               coerce : R -> %
--R coerce : Integer -> %                 coerce : % -> OutputForm
--R copy : % -> %                         diagonal? : % -> Boolean
--R diagonalMatrix : List(R) -> %         diagonalProduct : % -> R
--R differentiate : (%,(R -> R)) -> %     elt : (%,Integer,Integer) -> R
--R elt : (%,Integer,Integer,R) -> R      empty : () -> %
--R empty? : % -> Boolean                 eq? : (%,%) -> Boolean
--R hash : % -> SingleInteger             latex : % -> String
--R listOfLists : % -> List(List(R))      map : ((R -> R),%) -> %
--R map : (((R,R) -> R),%,%) -> %         matrix : List(List(R)) -> %
--R maxColIndex : % -> Integer            maxRowIndex : % -> Integer
--R minColIndex : % -> Integer            minRowIndex : % -> Integer
--R ncols : % -> NonNegativeInteger       nrows : % -> NonNegativeInteger
--R one? : % -> Boolean                   qelt : (%,Integer,Integer) -> R
--R recip : % -> Union(%,"failed")        retract : % -> R
--R sample : () -> %                      scalarMatrix : R -> %
--R square? : % -> Boolean                squareMatrix : Matrix(R) -> %
--R symmetric? : % -> Boolean             trace : % -> R
--R transpose : % -> %                    zero? : % -> Boolean
--R ?~=? : (%,%) -> Boolean              
--R #? : % -> NonNegativeInteger if $ has finiteAggregate
--R ?*? : (DirectProduct(ndim,R),%) -> DirectProduct(ndim,R)
--R ?*? : (%,DirectProduct(ndim,R)) -> DirectProduct(ndim,R)
--R ?**? : (%,Integer) -> % if R has FIELD
--R D : (%,NonNegativeInteger) -> % if R has DIFRING
--R D : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R D : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R D : (%,(R -> R),NonNegativeInteger) -> %
--R any? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R characteristic : () -> NonNegativeInteger
--R coerce : Fraction(Integer) -> % if R has RETRACT(FRAC(INT))
--R column : (%,Integer) -> DirectProduct(ndim,R)
--R convert : % -> InputForm if R has KONVERT(INFORM)
--R count : (R,%) -> NonNegativeInteger if $ has finiteAggregate and R has SETCAT
--R count : ((R -> Boolean),%) -> NonNegativeInteger if $ has finiteAggregate
--R determinant : % -> R if R has commutative(*)
--R diagonal : % -> DirectProduct(ndim,R)
--R differentiate : % -> % if R has DIFRING
--R differentiate : (%,NonNegativeInteger) -> % if R has DIFRING
--R differentiate : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,(R -> R),NonNegativeInteger) -> %
--R eval : (%,List(R),List(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,R,R) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,Equation(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,List(Equation(R))) -> % if R has EVALAB(R) and R has SETCAT
--R every? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R exquo : (%,R) -> Union(%,"failed") if R has INTDOM
--R inverse : % -> Union(%,"failed") if R has FIELD
--R less? : (%,NonNegativeInteger) -> Boolean
--R map! : ((R -> R),%) -> % if $ has shallowlyMutable
--R member? : (R,%) -> Boolean if $ has finiteAggregate and R has SETCAT
--R members : % -> List(R) if $ has finiteAggregate
--R minordet : % -> R if R has commutative(*)
--R more? : (%,NonNegativeInteger) -> Boolean
--R nullSpace : % -> List(DirectProduct(ndim,R)) if R has INTDOM
--R nullity : % -> NonNegativeInteger if R has INTDOM
--R parts : % -> List(R) if $ has finiteAggregate
--R rank : % -> NonNegativeInteger if R has INTDOM
--R reducedSystem : Matrix(%) -> Matrix(R)
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(R),vec: Vector(R))
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(Integer),vec: Vector(Integer)) if R has LINEXP(INT)
--R reducedSystem : Matrix(%) -> Matrix(Integer) if R has LINEXP(INT)
--R retract : % -> Fraction(Integer) if R has RETRACT(FRAC(INT))
--R retract : % -> Integer if R has RETRACT(INT)
--R retractIfCan : % -> Union(R,"failed")
--R retractIfCan : % -> Union(Fraction(Integer),"failed") if R has RETRACT(FRAC(INT))
--R retractIfCan : % -> Union(Integer,"failed") if R has RETRACT(INT)
--R row : (%,Integer) -> DirectProduct(ndim,R)
--R rowEchelon : % -> % if R has EUCDOM
--R size? : (%,NonNegativeInteger) -> Boolean
--R subtractIfCan : (%,%) -> Union(%,"failed")
--R
--E 38

--S 39 of 97
)set expose add
--R----------------------------- The add Option ------------------------------
--R   The following groups are explicitly exposed in the current frame 
--I      (called frame0 ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R                               SquareMatrix                                
--R 
--R   When )set expose add is followed by no arguments, the information 
--R      you now see is displayed. The arguments group and constructor are
--R      used to specify exposure groups or an explicit constructor to be 
--R      added to the local frame exposure data. Issue
--R                            )set expose add group
--R      or
--R                         )set expose add constructor
--R      for more information.
--E 39

--S 40 of 97
)set expose drop constructor SQMATRIX
--I   SquareMatrix is now explicitly hidden in frame frame0 
--E 40

--S 41 of 97
)show SQMATRIX
--R 
--R SquareMatrix(ndim: NonNegativeInteger,R: Ring) is a domain constructor
--R Abbreviation for SquareMatrix is SQMATRIX 
--R This constructor is not exposed in this frame.
--R Issue )edit bookvol10.3.pamphlet to see algebra source code for SQMATRIX 
--R
--R------------------------------- Operations --------------------------------
--R ?*? : (R,%) -> %                      ?*? : (%,R) -> %
--R ?*? : (%,%) -> %                      ?*? : (Integer,%) -> %
--R ?*? : (NonNegativeInteger,%) -> %     ?*? : (PositiveInteger,%) -> %
--R ?**? : (%,NonNegativeInteger) -> %    ?**? : (%,PositiveInteger) -> %
--R ?+? : (%,%) -> %                      ?-? : (%,%) -> %
--R -? : % -> %                           ?/? : (%,R) -> % if R has FIELD
--R ?=? : (%,%) -> Boolean                D : % -> % if R has DIFRING
--R D : (%,(R -> R)) -> %                 1 : () -> %
--R 0 : () -> %                           ?^? : (%,NonNegativeInteger) -> %
--R ?^? : (%,PositiveInteger) -> %        antisymmetric? : % -> Boolean
--R coerce : % -> Matrix(R)               coerce : R -> %
--R coerce : Integer -> %                 coerce : % -> OutputForm
--R copy : % -> %                         diagonal? : % -> Boolean
--R diagonalMatrix : List(R) -> %         diagonalProduct : % -> R
--R differentiate : (%,(R -> R)) -> %     elt : (%,Integer,Integer) -> R
--R elt : (%,Integer,Integer,R) -> R      empty : () -> %
--R empty? : % -> Boolean                 eq? : (%,%) -> Boolean
--R hash : % -> SingleInteger             latex : % -> String
--R listOfLists : % -> List(List(R))      map : ((R -> R),%) -> %
--R map : (((R,R) -> R),%,%) -> %         matrix : List(List(R)) -> %
--R maxColIndex : % -> Integer            maxRowIndex : % -> Integer
--R minColIndex : % -> Integer            minRowIndex : % -> Integer
--R ncols : % -> NonNegativeInteger       nrows : % -> NonNegativeInteger
--R one? : % -> Boolean                   qelt : (%,Integer,Integer) -> R
--R recip : % -> Union(%,"failed")        retract : % -> R
--R sample : () -> %                      scalarMatrix : R -> %
--R square? : % -> Boolean                squareMatrix : Matrix(R) -> %
--R symmetric? : % -> Boolean             trace : % -> R
--R transpose : % -> %                    zero? : % -> Boolean
--R ?~=? : (%,%) -> Boolean              
--R #? : % -> NonNegativeInteger if $ has finiteAggregate
--R ?*? : (DirectProduct(ndim,R),%) -> DirectProduct(ndim,R)
--R ?*? : (%,DirectProduct(ndim,R)) -> DirectProduct(ndim,R)
--R ?**? : (%,Integer) -> % if R has FIELD
--R D : (%,NonNegativeInteger) -> % if R has DIFRING
--R D : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R D : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R D : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R D : (%,(R -> R),NonNegativeInteger) -> %
--R any? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R characteristic : () -> NonNegativeInteger
--R coerce : Fraction(Integer) -> % if R has RETRACT(FRAC(INT))
--R column : (%,Integer) -> DirectProduct(ndim,R)
--R convert : % -> InputForm if R has KONVERT(INFORM)
--R count : (R,%) -> NonNegativeInteger if $ has finiteAggregate and R has SETCAT
--R count : ((R -> Boolean),%) -> NonNegativeInteger if $ has finiteAggregate
--R determinant : % -> R if R has commutative(*)
--R diagonal : % -> DirectProduct(ndim,R)
--R differentiate : % -> % if R has DIFRING
--R differentiate : (%,NonNegativeInteger) -> % if R has DIFRING
--R differentiate : (%,Symbol) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,Symbol,NonNegativeInteger) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,List(Symbol),List(NonNegativeInteger)) -> % if R has PDRING(SYMBOL)
--R differentiate : (%,(R -> R),NonNegativeInteger) -> %
--R eval : (%,List(R),List(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,R,R) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,Equation(R)) -> % if R has EVALAB(R) and R has SETCAT
--R eval : (%,List(Equation(R))) -> % if R has EVALAB(R) and R has SETCAT
--R every? : ((R -> Boolean),%) -> Boolean if $ has finiteAggregate
--R exquo : (%,R) -> Union(%,"failed") if R has INTDOM
--R inverse : % -> Union(%,"failed") if R has FIELD
--R less? : (%,NonNegativeInteger) -> Boolean
--R map! : ((R -> R),%) -> % if $ has shallowlyMutable
--R member? : (R,%) -> Boolean if $ has finiteAggregate and R has SETCAT
--R members : % -> List(R) if $ has finiteAggregate
--R minordet : % -> R if R has commutative(*)
--R more? : (%,NonNegativeInteger) -> Boolean
--R nullSpace : % -> List(DirectProduct(ndim,R)) if R has INTDOM
--R nullity : % -> NonNegativeInteger if R has INTDOM
--R parts : % -> List(R) if $ has finiteAggregate
--R rank : % -> NonNegativeInteger if R has INTDOM
--R reducedSystem : Matrix(%) -> Matrix(R)
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(R),vec: Vector(R))
--R reducedSystem : (Matrix(%),Vector(%)) -> Record(mat: Matrix(Integer),vec: Vector(Integer)) if R has LINEXP(INT)
--R reducedSystem : Matrix(%) -> Matrix(Integer) if R has LINEXP(INT)
--R retract : % -> Fraction(Integer) if R has RETRACT(FRAC(INT))
--R retract : % -> Integer if R has RETRACT(INT)
--R retractIfCan : % -> Union(R,"failed")
--R retractIfCan : % -> Union(Fraction(Integer),"failed") if R has RETRACT(FRAC(INT))
--R retractIfCan : % -> Union(Integer,"failed") if R has RETRACT(INT)
--R row : (%,Integer) -> DirectProduct(ndim,R)
--R rowEchelon : % -> % if R has EUCDOM
--R size? : (%,NonNegativeInteger) -> Boolean
--R subtractIfCan : (%,%) -> Union(%,"failed")
--R
--E 41

--S 42 of 97
)set expose
--R 
--R---------------------------- The expose Option ----------------------------
--R
--R Description: control interpreter constructor exposure
--R
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R                                   anna                                    
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                               SquareMatrix                                
--R 
--E 42

--S 43 of 97
)set expose drop group anna
--I   anna is no longer an exposure group for frame frame0 
--E 43

--S 44 of 97
)set expose
--R 
--R---------------------------- The expose Option ----------------------------
--R
--R Description: control interpreter constructor exposure
--R
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                               SquareMatrix                                
--R 
--E 44

--S 45 of 97
)set expose add group
--R 
--R---------------------------- The group Option -----------------------------
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R 
--Rbasic         naglink       anna          categories    Hidden        
--Rdefaults      
--E 45

--S 46 of 97
)set expose add group anna
--I   anna is now an exposure group for frame frame0 
--E 46

--S 47 of 97
)set expose
--R 
--R---------------------------- The expose Option ----------------------------
--R
--R Description: control interpreter constructor exposure
--R
--R   The following groups are explicitly exposed in the current frame 
--R      (called initial ):
--R                                   anna                                    
--R                                   basic                                   
--R                                categories                                 
--R                                  naglink                                  
--R 
--R   The following constructors are explicitly exposed in the current 
--R      frame:
--R               there are no explicitly exposed constructors                
--R 
--R   The following constructors are explicitly hidden in the current 
--R      frame:
--R                               SquareMatrix                                
--R 
--E 47

--S 48 of 97
)display
--R
--R  )display keyword arguments are
--R     abbreviations
--R     all
--R     macros
--R     modes
--R     names
--R     operations
--R     properties
--R     types
--R     values
--R  or abbreviations thereof
--R
--E 48

--S 49 of 97
)display abb
--R 
--R   You have requested that all abbreviations be displayed. As there are
--R      several hundred abbreviations, please confirm your request by 
--R      typing y or yes and then pressing Enter:
--R 
--R   >> System error:
--R   %.EOF is not of type SEQUENCE.
--R
--R   Continuing to read the file...
--R
--E 49

--S 50 of 97
)display all
--RProperties of %e :
--R   This is a system-defined macro.
--R   macro %e () == exp(1)
--RProperties of %i :
--R   This is a system-defined macro.
--R   macro %i () == complex(0,1)
--RProperties of %infinity :
--R   This is a system-defined macro.
--R   macro %infinity () == infinity()
--RProperties of %minusInfinity :
--R   This is a system-defined macro.
--R   macro %minusInfinity () == minusInfinity()
--RProperties of %pi :
--R   This is a system-defined macro.
--R   macro %pi () == pi()
--RProperties of %plusInfinity :
--R   This is a system-defined macro.
--R   macro %plusInfinity () == plusInfinity()
--RProperties of SF :
--R   This is a system-defined macro.
--R   macro SF () == DoubleFloat()
--E 50

--S 51 of 97
)display macros
--R
--RSystem-defined macros:
--R   macro %e () == exp(1)
--R   macro %i () == complex(0,1)
--R   macro %infinity () == infinity()
--R   macro %minusInfinity () == minusInfinity()
--R   macro %pi () == pi()
--R   macro %plusInfinity () == plusInfinity()
--R   macro SF () == DoubleFloat()
--E 51

--S 52 of 97
)display modes
--R   Type of value of %e:  (none)
--R   Type of value of %i:  (none)
--R   Type of value of %infinity:  (none)
--R   Type of value of %minusInfinity:  (none)
--R   Type of value of %pi:  (none)
--R   Type of value of %plusInfinity:  (none)
--R   Type of value of SF:  (none)
--E 52

--S 53 of 97
)display names
--R
--RNames of User-Defined Objects in the Workspace:
--R
--R   * None *
--R
--RNames of System-Defined Objects in the Workspace:
--R
--R%e                %i                %infinity         %minusInfinity    
--R%pi               %plusInfinity     SF                
--E 53

--S 54 of 97
)display operations
--R 
--R   You have requested that all information about all Axiom operations 
--R      (functions) be displayed. As there are several hundred 
--R      operations, please confirm your request by typing y or yes and 
--R      then pressing Enter:
--R 
--R   >> System error:
--R   %.EOF is not of type SEQUENCE.
--R
--R   Continuing to read the file...
--R
--E 54

--S 55 of 97
)display properties
--RProperties of %e :
--R   This is a system-defined macro.
--R   macro %e () == exp(1)
--RProperties of %i :
--R   This is a system-defined macro.
--R   macro %i () == complex(0,1)
--RProperties of %infinity :
--R   This is a system-defined macro.
--R   macro %infinity () == infinity()
--RProperties of %minusInfinity :
--R   This is a system-defined macro.
--R   macro %minusInfinity () == minusInfinity()
--RProperties of %pi :
--R   This is a system-defined macro.
--R   macro %pi () == pi()
--RProperties of %plusInfinity :
--R   This is a system-defined macro.
--R   macro %plusInfinity () == plusInfinity()
--RProperties of SF :
--R   This is a system-defined macro.
--R   macro SF () == DoubleFloat()
--E 55

--S 56 of 97
)display types
--R   Type of value of %e:  (none)
--R   Type of value of %i:  (none)
--R   Type of value of %infinity:  (none)
--R   Type of value of %minusInfinity:  (none)
--R   Type of value of %pi:  (none)
--R   Type of value of %plusInfinity:  (none)
--R   Type of value of SF:  (none)
--E 56

--S 57 of 97
)display values
--R   Value of %e:  (none)
--R   Value of %i:  (none)
--R   Value of %infinity:  (none)
--R   Value of %minusInfinity:  (none)
--R   Value of %pi:  (none)
--R   Value of %plusInfinity:  (none)
--R   Value of SF:  (none)
--E 57

--S 58 of 97
)display abb DHMATRIX
--R   DHMATRIX abbreviates domain DenavitHartenbergMatrix
--E 58

--S 59 of 97
)display abb DenavitHartenbergMatrix
--R   DHMATRIX abbreviates domain DenavitHartenbergMatrix
--E 59

--S 60 of 97
)display operations rotatex
--R 
--R
--RThere is one exposed function called rotatex :
--R   [1] D1 -> DenavitHartenbergMatrix(D1) from DenavitHartenbergMatrix(
--R            D1)
--R             if D1 has Join(Field,TranscendentalFunctionCategory)
--R
--RExamples of rotatex from DenavitHartenbergMatrix
--R
--Rrotatex(30)
--R
--E 60

--S 61 of 97
)set fortran calling
--R                   Current Values of  calling  Variables                   
--R
--RVariable     Description                                Current Value
--R-----------------------------------------------------------------------------
--Rtempfile     set location of temporary data files      /tmp/
--Rdirectory    set location of generated FORTRAN files   ./
--Rlinker       linker arguments (e.g. libraries to search) -lxlf
--R
--E 61

--S 62 of 97
)set fortran calling tempfile
--R--------------------------- The tempfile Option ---------------------------
--R
--R Description: set location of temporary data files 
--R
--R )set fortran calling tempfile is used to tell AXIOM where
--R to place intermediate FORTRAN data files . This must be the 
--R name of a valid existing directory to which you have permission 
--R to write (including the final slash).
--R
--R Syntax:
--R   )set fortran calling tempfile DIRECTORYNAME
--R
--R The current setting is /tmp/
--E 62

--S 63 of 97
)set fortran calling tempfile /home/daly
--E 63

--S 64 of 97
)set fortran calling tempfile
--R--------------------------- The tempfile Option ---------------------------
--R
--R Description: set location of temporary data files 
--R
--R )set fortran calling tempfile is used to tell AXIOM where
--R to place intermediate FORTRAN data files . This must be the 
--R name of a valid existing directory to which you have permission 
--R to write (including the final slash).
--R
--R Syntax:
--R   )set fortran calling tempfile DIRECTORYNAME
--R
--R The current setting is /home/daly
--E 64

--S 65 of 97
)set fortran calling directory
--R-------------------------- The directory Option ---------------------------
--R
--R Description: set location of generated FORTRAN files 
--R
--R )set fortran calling directory is used to tell AXIOM where
--R to place generated FORTRAN files. This must be the name 
--R of a valid existing directory to which you have permission 
--R to write (including the final slash).
--R
--R Syntax:
--R   )set fortran calling directory DIRECTORYNAME
--R
--R The current setting is ./
--E 65

--S 66 of 97
)set fortran calling directory /home/daly/
--E 66

--S 67 of 97
)set fortran calling directory
--R-------------------------- The directory Option ---------------------------
--R
--R Description: set location of generated FORTRAN files 
--R
--R )set fortran calling directory is used to tell AXIOM where
--R to place generated FORTRAN files. This must be the name 
--R of a valid existing directory to which you have permission 
--R to write (including the final slash).
--R
--R Syntax:
--R   )set fortran calling directory DIRECTORYNAME
--R
--R The current setting is /home/daly/
--E 67

--S 68 of 97
)set fortran calling linker
--R---------------------------- The linker Option ----------------------------
--R
--R Description: linker arguments (e.g. libraries to search) 
--R
--R )set fortran calling linkerargs is used to pass arguments to the linker
--R when using mkFort to create functions which call Fortran code.
--R For example, it might give a list of libraries to be searched,
--R and their locations.
--R The string is passed verbatim, so must be the correct syntax for
--R the particular linker being used.
--R
--R Example: )set fortran calling linker "-lxlf"
--R
--R The current setting is -lxlf
--E 68

--S 69 of 97
)set fortran calling linker "-TPD"
--E 69

--S 70 of 97
)set fortran calling linker
--R---------------------------- The linker Option ----------------------------
--R
--R Description: linker arguments (e.g. libraries to search) 
--R
--R )set fortran calling linkerargs is used to pass arguments to the linker
--R when using mkFort to create functions which call Fortran code.
--R For example, it might give a list of libraries to be searched,
--R and their locations.
--R The string is passed verbatim, so must be the correct syntax for
--R the particular linker being used.
--R
--R Example: )set fortran calling linker "-lxlf"
--R
--R The current setting is -TPD
--E 70

\end{chunk}
The kernel protect option has been disabled and will shortly be
removed altogether. It was created because the CCL implementation
hard coded some internal functions so they could not be changed.
\begin{chunk}{*}

--S 71 of 97 no longer supported
--)set kernel
--E 71

--S 72 of 97 no longer supported
--)set kernel warn
--E 72

--S 73 of 97 no longer supported
--)set kernel warn on
--E 73

--S 74 of 97 no longer supported
--)set kernel

--S 75 of 97 no longer supported
--)set kernel protect
--E 75

--S 76 of 97 no longer supported
--)set kernel protect on
--E 76

--S 77 of 97 no longer supported
--)set kernel
--E 77

--S 78 of 97
)set mes auto
--R 
--R--------------------------- The autoload Option ---------------------------
--R
--R Description: print file auto-load messages
--R
--R The autoload option may be followed by any one of the following:
--R
--R    on
--R -> off 
--R
--R The current setting is indicated.
--R
--E 78

--S 79 of 97
)set mes auto off
--E 79

--S 80 of 97
)set mes auto
--R 
--R--------------------------- The autoload Option ---------------------------
--R
--R Description: print file auto-load messages
--R
--R The autoload option may be followed by any one of the following:
--R
--R    on
--R -> off 
--R
--R The current setting is indicated.
--R
--E 80

--S 81 of 97
)set mes auto on
--E 81

--S 82 of 97
)set mes auto
--R 
--R--------------------------- The autoload Option ---------------------------
--R
--R Description: print file auto-load messages
--R
--R The autoload option may be followed by any one of the following:
--R
--R -> on 
--R    off
--R
--R The current setting is indicated.
--R
--E 82

--S 83 of 97
)lisp |$printLoadMsgs|
--R 
--RValue = T
--E 83

--S 84 of 97
)set naglink
--R                   Current Values of  naglink  Variables                   
--R
--RVariable     Description                                Current Value
--R-----------------------------------------------------------------------------
--Rhost         internet address of host for NAGLink      localhost
--Rpersistence  number of (fortran) functions to remember 1
--Rmessages     show NAGLink messages                      on 
--Rdouble       enforce DOUBLE PRECISION ASPs              on 
--R
--E 84

--S 85 of 97
)set naglink host
--R----------------------------- The host Option -----------------------------
--R
--R Description: internet address of host for NAGLink 
--R
--R )set naglink host is used to tell  AXIOM which  host to contact for
--R a NAGLink request. An Internet address should be supplied. The host
--R specified must be running the NAGLink daemon.
--R
--R The current setting is localhost
--E 85

--S 86 of 97
)set naglink persistence
--R------------------------- The persistence Option --------------------------
--R
--R Description: number of (fortran) functions to remember 
--R
--R )set naglink persistence is used to tell the nagd daemon how  many ASP
--R source and object files to keep around in case you reuse them. This helps
--R to avoid needless recompilations. The number specified should be a 
--R non-negative integer.
--R
--R The current setting is 1
--E 86

--S 87 of 97
)set naglink messages
--R--------------------------- The messages Option ---------------------------
--R
--R Description: show NAGLink messages
--R
--R The messages option may be followed by any one of the following:
--R
--R -> on 
--R    off
--R
--R The current setting is indicated.
--R
--E 87

--S 88 of 97
)set naglink double
--R---------------------------- The double Option ----------------------------
--R
--R Description: enforce DOUBLE PRECISION ASPs
--R
--R The double option may be followed by any one of the following:
--R
--R -> on 
--R    off
--R
--R The current setting is indicated.
--R
--E 88

--S 89 of 97
)set naglink host axiom-developer.org
--E 89

--S 90 of 97
)set naglink host
--R----------------------------- The host Option -----------------------------
--R
--R Description: internet address of host for NAGLink 
--R
--R )set naglink host is used to tell  AXIOM which  host to contact for
--R a NAGLink request. An Internet address should be supplied. The host
--R specified must be running the NAGLink daemon.
--R
--R The current setting is axiom-developer.org
--E 90

--S 91 of 97
)set naglink persistence 10
--E 91

--S 92 of 97
)set naglink persistence
--R------------------------- The persistence Option --------------------------
--R
--R Description: number of (fortran) functions to remember 
--R
--R )set naglink persistence is used to tell the nagd daemon how  many ASP
--R source and object files to keep around in case you reuse them. This helps
--R to avoid needless recompilations. The number specified should be a 
--R non-negative integer.
--R
--R The current setting is 10
--E 92

--S 93 of 97
)set naglink messages off
--E 93

--S 94 of 97
)set naglink messages
--R--------------------------- The messages Option ---------------------------
--R
--R Description: show NAGLink messages
--R
--R The messages option may be followed by any one of the following:
--R
--R    on
--R -> off 
--R
--R The current setting is indicated.
--R
--E 94

--S 95 of 97
)set naglink double off
--E 95

--S 96 of 97
)set naglink double
--R---------------------------- The double Option ----------------------------
--R
--R Description: enforce DOUBLE PRECISION ASPs
--R
--R The double option may be followed by any one of the following:
--R
--R    on
--R -> off 
--R
--R The current setting is indicated.
--R
--E 96

--S 97 of 97
)set naglink
--R                   Current Values of  naglink  Variables                   
--R
--RVariable     Description                                Current Value
--R-----------------------------------------------------------------------------
--Rhost         internet address of host for NAGLink      axiom-developer.org
--Rpersistence  number of (fortran) functions to remember 10
--Rmessages     show NAGLink messages                      off 
--Rdouble       enforce DOUBLE PRECISION ASPs              off 
--R
--E 97

)spool
)lisp (bye)
 
\end{chunk}
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
